
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004dc0  08004dc0  00005dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e74  08004e74  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e74  08004e74  00005e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e7c  08004e7c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e7c  08004e7c  00005e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e80  08004e80  00005e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004e84  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08004ee0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004ee0  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129ff  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002834  00000000  00000000  00018a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  0001b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c5b  00000000  00000000  0001c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dfcf  00000000  00000000  0001cf13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013282  00000000  00000000  0003aee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be92f  00000000  00000000  0004e164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ca93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004748  00000000  00000000  0010cad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00111220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004da8 	.word	0x08004da8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004da8 	.word	0x08004da8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <lcd_send_cmd>:
#include "i2c-lcd.h"
#include "main.h"

extern I2C_HandleTypeDef hi2c2;

void lcd_send_cmd(char cmd) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f023 030f 	bic.w	r3, r3, #15
 80005c0:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	011b      	lsls	r3, r3, #4
 80005c6:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C; // En=1, Rs=0
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	f043 030c 	orr.w	r3, r3, #12
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08; // En=0, Rs=0
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	f043 0308 	orr.w	r3, r3, #8
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C; // En=1, Rs=0
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	f043 030c 	orr.w	r3, r3, #12
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08; // En=0, Rs=0
 80005e6:	7bbb      	ldrb	r3, [r7, #14]
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, (uint8_t *)data_t, 4, 100);
 80005f0:	f107 0208 	add.w	r2, r7, #8
 80005f4:	2364      	movs	r3, #100	@ 0x64
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2304      	movs	r3, #4
 80005fa:	214e      	movs	r1, #78	@ 0x4e
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <lcd_send_cmd+0x5c>)
 80005fe:	f001 f8cb 	bl	8001798 <HAL_I2C_Master_Transmit>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000078 	.word	0x20000078

08000610 <lcd_send_data>:

void lcd_send_data(char data) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af02      	add	r7, sp, #8
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D; // En=1, Rs=1
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	f043 030d 	orr.w	r3, r3, #13
 800062e:	b2db      	uxtb	r3, r3
 8000630:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09; // En=0, Rs=1
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	f043 0309 	orr.w	r3, r3, #9
 8000638:	b2db      	uxtb	r3, r3
 800063a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D; // En=1, Rs=1
 800063c:	7bbb      	ldrb	r3, [r7, #14]
 800063e:	f043 030d 	orr.w	r3, r3, #13
 8000642:	b2db      	uxtb	r3, r3
 8000644:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09; // En=0, Rs=1
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	f043 0309 	orr.w	r3, r3, #9
 800064c:	b2db      	uxtb	r3, r3
 800064e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, (uint8_t *)data_t, 4, 100);
 8000650:	f107 0208 	add.w	r2, r7, #8
 8000654:	2364      	movs	r3, #100	@ 0x64
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2304      	movs	r3, #4
 800065a:	214e      	movs	r1, #78	@ 0x4e
 800065c:	4803      	ldr	r0, [pc, #12]	@ (800066c <lcd_send_data+0x5c>)
 800065e:	f001 f89b 	bl	8001798 <HAL_I2C_Master_Transmit>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000078 	.word	0x20000078

08000670 <lcd_send_string>:
void lcd_put_cursor(int row, int col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    lcd_send_cmd(pos);
}

void lcd_send_string(char *str) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 8000678:	e006      	b.n	8000688 <lcd_send_string+0x18>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ffc4 	bl	8000610 <lcd_send_data>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f4      	bne.n	800067a <lcd_send_string+0xa>
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <lcd_init>:

void lcd_init(void) {
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 800069e:	2032      	movs	r0, #50	@ 0x32
 80006a0:	f000 fd3e 	bl	8001120 <HAL_Delay>
    lcd_send_cmd(0x30);
 80006a4:	2030      	movs	r0, #48	@ 0x30
 80006a6:	f7ff ff83 	bl	80005b0 <lcd_send_cmd>
    HAL_Delay(5);
 80006aa:	2005      	movs	r0, #5
 80006ac:	f000 fd38 	bl	8001120 <HAL_Delay>
    lcd_send_cmd(0x30);
 80006b0:	2030      	movs	r0, #48	@ 0x30
 80006b2:	f7ff ff7d 	bl	80005b0 <lcd_send_cmd>
    HAL_Delay(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 fd32 	bl	8001120 <HAL_Delay>
    lcd_send_cmd(0x30);
 80006bc:	2030      	movs	r0, #48	@ 0x30
 80006be:	f7ff ff77 	bl	80005b0 <lcd_send_cmd>
    HAL_Delay(10);
 80006c2:	200a      	movs	r0, #10
 80006c4:	f000 fd2c 	bl	8001120 <HAL_Delay>
    lcd_send_cmd(0x20);
 80006c8:	2020      	movs	r0, #32
 80006ca:	f7ff ff71 	bl	80005b0 <lcd_send_cmd>
    HAL_Delay(10);
 80006ce:	200a      	movs	r0, #10
 80006d0:	f000 fd26 	bl	8001120 <HAL_Delay>

    lcd_send_cmd(0x28);
 80006d4:	2028      	movs	r0, #40	@ 0x28
 80006d6:	f7ff ff6b 	bl	80005b0 <lcd_send_cmd>
    HAL_Delay(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 fd20 	bl	8001120 <HAL_Delay>
    lcd_send_cmd(0x08);
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ff65 	bl	80005b0 <lcd_send_cmd>
    HAL_Delay(1);
 80006e6:	2001      	movs	r0, #1
 80006e8:	f000 fd1a 	bl	8001120 <HAL_Delay>
    lcd_send_cmd(0x01);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff ff5f 	bl	80005b0 <lcd_send_cmd>
    HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 fd14 	bl	8001120 <HAL_Delay>
    HAL_Delay(1);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 fd11 	bl	8001120 <HAL_Delay>
    lcd_send_cmd(0x06);
 80006fe:	2006      	movs	r0, #6
 8000700:	f7ff ff56 	bl	80005b0 <lcd_send_cmd>
    HAL_Delay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fd0b 	bl	8001120 <HAL_Delay>
    lcd_send_cmd(0x0C);
 800070a:	200c      	movs	r0, #12
 800070c:	f7ff ff50 	bl	80005b0 <lcd_send_cmd>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <set_time>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_time (void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime;
	  RTC_DateTypeDef sDate;
    /**Initialize RTC and set the Time and Date
    */
  sTime.Hours = 0x10;
 800071a:	2310      	movs	r3, #16
 800071c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 800071e:	2320      	movs	r3, #32
 8000720:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8000722:	2330      	movs	r3, #48	@ 0x30
 8000724:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2201      	movs	r2, #1
 8000732:	4619      	mov	r1, r3
 8000734:	4812      	ldr	r0, [pc, #72]	@ (8000780 <set_time+0x6c>)
 8000736:	f002 fc5a 	bl	8002fee <HAL_RTC_SetTime>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <set_time+0x30>
  {
    Error_Handler();
 8000740:	f000 faa8 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 3 */

  /* USER CODE END RTC_Init 3 */

  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000744:	2302      	movs	r3, #2
 8000746:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000748:	2308      	movs	r3, #8
 800074a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 800074c:	2312      	movs	r3, #18
 800074e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x7E8;
 8000750:	23e8      	movs	r3, #232	@ 0xe8
 8000752:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000754:	463b      	mov	r3, r7
 8000756:	2201      	movs	r2, #1
 8000758:	4619      	mov	r1, r3
 800075a:	4809      	ldr	r0, [pc, #36]	@ (8000780 <set_time+0x6c>)
 800075c:	f002 fd40 	bl	80031e0 <HAL_RTC_SetDate>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <set_time+0x56>
  {
    Error_Handler();
 8000766:	f000 fa95 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 4 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 800076a:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 800076e:	2101      	movs	r1, #1
 8000770:	4803      	ldr	r0, [pc, #12]	@ (8000780 <set_time+0x6c>)
 8000772:	f003 f80d 	bl	8003790 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000160 	.word	0x20000160

08000784 <set_alarm>:

void set_alarm (void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
	  RTC_AlarmTypeDef sAlarm;

    /**Enable the Alarm A
    */
  sAlarm.AlarmTime.Hours = 0x10;
 800078a:	2310      	movs	r3, #16
 800078c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x21;
 800078e:	2321      	movs	r3, #33	@ 0x21
 8000790:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000792:	2300      	movs	r3, #0
 8000794:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x12;
 80007ae:	2312      	movs	r3, #18
 80007b0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80007b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2201      	movs	r2, #1
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <set_alarm+0x54>)
 80007c2:	f002 fde1 	bl	8003388 <HAL_RTC_SetAlarm_IT>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <set_alarm+0x4c>
  {
    Error_Handler();
 80007cc:	f000 fa62 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 5 */

  /* USER CODE END RTC_Init 5 */
}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	@ 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000160 	.word	0x20000160

080007dc <get_time>:

void get_time(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	4619      	mov	r1, r3
 80007e8:	4812      	ldr	r0, [pc, #72]	@ (8000834 <get_time+0x58>)
 80007ea:	f002 fc9d 	bl	8003128 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	480f      	ldr	r0, [pc, #60]	@ (8000834 <get_time+0x58>)
 80007f8:	f002 fd79 	bl	80032ee <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80007fc:	783b      	ldrb	r3, [r7, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	787b      	ldrb	r3, [r7, #1]
 8000802:	4619      	mov	r1, r3
 8000804:	78bb      	ldrb	r3, [r7, #2]
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	460b      	mov	r3, r1
 800080a:	490b      	ldr	r1, [pc, #44]	@ (8000838 <get_time+0x5c>)
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <get_time+0x60>)
 800080e:	f003 fe2b 	bl	8004468 <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2024 + gDate.Year);  // I like the date first
 8000812:	7dbb      	ldrb	r3, [r7, #22]
 8000814:	461a      	mov	r2, r3
 8000816:	7d7b      	ldrb	r3, [r7, #21]
 8000818:	4619      	mov	r1, r3
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	f503 63fd 	add.w	r3, r3, #2024	@ 0x7e8
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	460b      	mov	r3, r1
 8000824:	4906      	ldr	r1, [pc, #24]	@ (8000840 <get_time+0x64>)
 8000826:	4807      	ldr	r0, [pc, #28]	@ (8000844 <get_time+0x68>)
 8000828:	f003 fe1e 	bl	8004468 <siprintf>
  }
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000160 	.word	0x20000160
 8000838:	08004dc0 	.word	0x08004dc0
 800083c:	20000188 	.word	0x20000188
 8000840:	08004dd0 	.word	0x08004dd0
 8000844:	20000194 	.word	0x20000194

08000848 <display_time>:

//Let's display the time and date on lcd

void display_time (void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800084c:	2080      	movs	r0, #128	@ 0x80
 800084e:	f7ff feaf 	bl	80005b0 <lcd_send_cmd>
	lcd_send_string (time);
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <display_time+0x20>)
 8000854:	f7ff ff0c 	bl	8000670 <lcd_send_string>
	lcd_send_cmd (0xc0);
 8000858:	20c0      	movs	r0, #192	@ 0xc0
 800085a:	f7ff fea9 	bl	80005b0 <lcd_send_cmd>
	lcd_send_string (date);
 800085e:	4803      	ldr	r0, [pc, #12]	@ (800086c <display_time+0x24>)
 8000860:	f7ff ff06 	bl	8000670 <lcd_send_string>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000188 	.word	0x20000188
 800086c:	20000194 	.word	0x20000194

08000870 <to_do_on_alarm>:
{
	alarm = 1;
}

void to_do_on_alarm (void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin (GPIOA, GPIO_PIN_5, 1);  // set led ON
 8000876:	2201      	movs	r2, #1
 8000878:	2120      	movs	r1, #32
 800087a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087e:	f000 fed7 	bl	8001630 <HAL_GPIO_WritePin>
	lcd_send_cmd (0x80);
 8000882:	2080      	movs	r0, #128	@ 0x80
 8000884:	f7ff fe94 	bl	80005b0 <lcd_send_cmd>
	lcd_send_string ("SUBSCRIBE TO");
 8000888:	4810      	ldr	r0, [pc, #64]	@ (80008cc <to_do_on_alarm+0x5c>)
 800088a:	f7ff fef1 	bl	8000670 <lcd_send_string>
	lcd_send_cmd (0xc0);
 800088e:	20c0      	movs	r0, #192	@ 0xc0
 8000890:	f7ff fe8e 	bl	80005b0 <lcd_send_cmd>
	lcd_send_string ("this CHANNEL");
 8000894:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <to_do_on_alarm+0x60>)
 8000896:	f7ff feeb 	bl	8000670 <lcd_send_string>
	HAL_Delay (3000);
 800089a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800089e:	f000 fc3f 	bl	8001120 <HAL_Delay>
	lcd_send_cmd (0x80);
 80008a2:	2080      	movs	r0, #128	@ 0x80
 80008a4:	f7ff fe84 	bl	80005b0 <lcd_send_cmd>
	for (int i=0;i<60;i++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	e005      	b.n	80008ba <to_do_on_alarm+0x4a>
	{
		lcd_send_data (' ');  // clear lcd
 80008ae:	2020      	movs	r0, #32
 80008b0:	f7ff feae 	bl	8000610 <lcd_send_data>
	for (int i=0;i<60;i++)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80008be:	ddf6      	ble.n	80008ae <to_do_on_alarm+0x3e>
	}
}
 80008c0:	bf00      	nop
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	08004de0 	.word	0x08004de0
 80008d0:	08004df0 	.word	0x08004df0

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 fbb1 	bl	800103e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f82e 	bl	800093c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f000 f972 	bl	8000bc8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80008e4:	f000 f8c4 	bl	8000a70 <MX_LPUART1_UART_Init>
  MX_I2C2_Init();
 80008e8:	f000 f882 	bl	80009f0 <MX_I2C2_Init>
  MX_RTC_Init();
 80008ec:	f000 f90a 	bl	8000b04 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 80008f0:	f7ff fed3 	bl	800069a <lcd_init>

    if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2)
 80008f4:	2101      	movs	r1, #1
 80008f6:	480f      	ldr	r0, [pc, #60]	@ (8000934 <main+0x60>)
 80008f8:	f002 ff62 	bl	80037c0 <HAL_RTCEx_BKUPRead>
 80008fc:	4603      	mov	r3, r0
 80008fe:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8000902:	4293      	cmp	r3, r2
 8000904:	d001      	beq.n	800090a <main+0x36>
        {
        //   Set the time
          set_time();
 8000906:	f7ff ff05 	bl	8000714 <set_time>
        }

    set_alarm ();
 800090a:	f7ff ff3b 	bl	8000784 <set_alarm>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    	  get_time();
 800090e:	f7ff ff65 	bl	80007dc <get_time>
    	  display_time();
 8000912:	f7ff ff99 	bl	8000848 <display_time>
    	  HAL_Delay(500);
 8000916:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800091a:	f000 fc01 	bl	8001120 <HAL_Delay>

    	  if (alarm)
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <main+0x64>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0f3      	beq.n	800090e <main+0x3a>
    	  {
    		  to_do_on_alarm();
 8000926:	f7ff ffa3 	bl	8000870 <to_do_on_alarm>
    		  alarm =0;
 800092a:	4b03      	ldr	r3, [pc, #12]	@ (8000938 <main+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
    	  get_time();
 8000930:	e7ed      	b.n	800090e <main+0x3a>
 8000932:	bf00      	nop
 8000934:	20000160 	.word	0x20000160
 8000938:	2000019e 	.word	0x2000019e

0800093c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	@ 0x50
 8000940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000942:	f107 0318 	add.w	r3, r7, #24
 8000946:	2238      	movs	r2, #56	@ 0x38
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fdac 	bl	80044a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800095e:	2000      	movs	r0, #0
 8000960:	f001 faf4 	bl	8001f4c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000964:	f001 fae2 	bl	8001f2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000968:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <SystemClock_Config+0xb0>)
 800096a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800096e:	4a1f      	ldr	r2, [pc, #124]	@ (80009ec <SystemClock_Config+0xb0>)
 8000970:	f023 0318 	bic.w	r3, r3, #24
 8000974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000978:	2306      	movs	r3, #6
 800097a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000986:	2340      	movs	r3, #64	@ 0x40
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098a:	2302      	movs	r3, #2
 800098c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098e:	2302      	movs	r3, #2
 8000990:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000992:	2304      	movs	r3, #4
 8000994:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000996:	2355      	movs	r3, #85	@ 0x55
 8000998:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099a:	2302      	movs	r3, #2
 800099c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800099e:	2302      	movs	r3, #2
 80009a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 0318 	add.w	r3, r7, #24
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 fb82 	bl	80020b4 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009b6:	f000 f96d 	bl	8000c94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	230f      	movs	r3, #15
 80009bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2303      	movs	r3, #3
 80009c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2104      	movs	r1, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 fe80 	bl	80026d8 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009de:	f000 f959 	bl	8000c94 <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3750      	adds	r7, #80	@ 0x50
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <MX_I2C2_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <MX_I2C2_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <MX_I2C2_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <MX_I2C2_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	@ (8000a64 <MX_I2C2_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <MX_I2C2_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_I2C2_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_I2C2_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <MX_I2C2_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_I2C2_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <MX_I2C2_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	@ (8000a64 <MX_I2C2_Init+0x74>)
 8000a2c:	f000 fe18 	bl	8001660 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 f92d 	bl	8000c94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <MX_I2C2_Init+0x74>)
 8000a3e:	f001 f9dd 	bl	8001dfc <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 f924 	bl	8000c94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_I2C2_Init+0x74>)
 8000a50:	f001 fa1f 	bl	8001e92 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 f91b 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000078 	.word	0x20000078
 8000a68:	40005800 	.word	0x40005800
 8000a6c:	30a0a7fb 	.word	0x30a0a7fb

08000a70 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000a76:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <MX_LPUART1_UART_Init+0x90>)
 8000a78:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000a7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a80:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ab2:	4812      	ldr	r0, [pc, #72]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000ab4:	f002 fe9a 	bl	80037ec <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000abe:	f000 f8e9 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000ac6:	f003 fc05 	bl	80042d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000ad0:	f000 f8e0 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4809      	ldr	r0, [pc, #36]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000ad8:	f003 fc3a 	bl	8004350 <HAL_UARTEx_SetRxFifoThreshold>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000ae2:	f000 f8d7 	bl	8000c94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_LPUART1_UART_Init+0x8c>)
 8000ae8:	f003 fbbb 	bl	8004262 <HAL_UARTEx_DisableFifoMode>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000af2:	f000 f8cf 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000cc 	.word	0x200000cc
 8000b00:	40008000 	.word	0x40008000

08000b04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b1c:	4b28      	ldr	r3, [pc, #160]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b1e:	4a29      	ldr	r2, [pc, #164]	@ (8000bc4 <MX_RTC_Init+0xc0>)
 8000b20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b22:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b28:	4b25      	ldr	r3, [pc, #148]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b2a:	227f      	movs	r2, #127	@ 0x7f
 8000b2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b2e:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b30:	22ff      	movs	r2, #255	@ 0xff
 8000b32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b34:	4b22      	ldr	r3, [pc, #136]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b40:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b46:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b4c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b54:	481a      	ldr	r0, [pc, #104]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b56:	f002 f9cb 	bl	8002ef0 <HAL_RTC_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000b60:	f000 f898 	bl	8000c94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8000b64:	2311      	movs	r3, #17
 8000b66:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x53;
 8000b68:	2353      	movs	r3, #83	@ 0x53
 8000b6a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8000b6c:	2330      	movs	r3, #48	@ 0x30
 8000b6e:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4619      	mov	r1, r3
 8000b82:	480f      	ldr	r0, [pc, #60]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000b84:	f002 fa33 	bl	8002fee <HAL_RTC_SetTime>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8000b8e:	f000 f881 	bl	8000c94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000b92:	2301      	movs	r3, #1
 8000b94:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8000b96:	2307      	movs	r3, #7
 8000b98:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_RTC_Init+0xbc>)
 8000baa:	f002 fb19 	bl	80031e0 <HAL_RTC_SetDate>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000bb4:	f000 f86e 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000160 	.word	0x20000160
 8000bc4:	40002800 	.word	0x40002800

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bde:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	4a2a      	ldr	r2, [pc, #168]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bea:	4b28      	ldr	r3, [pc, #160]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf6:	4b25      	ldr	r3, [pc, #148]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	4a24      	ldr	r2, [pc, #144]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000bfc:	f043 0320 	orr.w	r3, r3, #32
 8000c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c02:	4b22      	ldr	r3, [pc, #136]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4a1e      	ldr	r2, [pc, #120]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2a:	4a18      	ldr	r2, [pc, #96]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <MX_GPIO_Init+0xc4>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2120      	movs	r1, #32
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c46:	f000 fcf3 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <MX_GPIO_Init+0xc8>)
 8000c62:	f000 fb63 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c66:	2320      	movs	r3, #32
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f000 fb54 	bl	800132c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	@ 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	48000800 	.word	0x48000800

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <Error_Handler+0x8>

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000caa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_MspInit+0x44>)
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cd6:	f001 f9dd 	bl	8002094 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b09c      	sub	sp, #112	@ 0x70
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d00:	f107 0318 	add.w	r3, r7, #24
 8000d04:	2244      	movs	r2, #68	@ 0x44
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f003 fbcd 	bl	80044a8 <memset>
  if(hi2c->Instance==I2C2)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a2d      	ldr	r2, [pc, #180]	@ (8000dc8 <HAL_I2C_MspInit+0xe0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d153      	bne.n	8000dc0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 fef3 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d30:	f7ff ffb0 	bl	8000c94 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	4b25      	ldr	r3, [pc, #148]	@ (8000dcc <HAL_I2C_MspInit+0xe4>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d38:	4a24      	ldr	r2, [pc, #144]	@ (8000dcc <HAL_I2C_MspInit+0xe4>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d40:	4b22      	ldr	r3, [pc, #136]	@ (8000dcc <HAL_I2C_MspInit+0xe4>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <HAL_I2C_MspInit+0xe4>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d50:	4a1e      	ldr	r2, [pc, #120]	@ (8000dcc <HAL_I2C_MspInit+0xe4>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <HAL_I2C_MspInit+0xe4>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d64:	2310      	movs	r3, #16
 8000d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d68:	2312      	movs	r3, #18
 8000d6a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d74:	2304      	movs	r3, #4
 8000d76:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4814      	ldr	r0, [pc, #80]	@ (8000dd0 <HAL_I2C_MspInit+0xe8>)
 8000d80:	f000 fad4 	bl	800132c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8a:	2312      	movs	r3, #18
 8000d8c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d96:	2304      	movs	r3, #4
 8000d98:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da4:	f000 fac2 	bl	800132c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_I2C_MspInit+0xe4>)
 8000daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_I2C_MspInit+0xe4>)
 8000dae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <HAL_I2C_MspInit+0xe4>)
 8000db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3770      	adds	r7, #112	@ 0x70
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40005800 	.word	0x40005800
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000800 	.word	0x48000800

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b09a      	sub	sp, #104	@ 0x68
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2244      	movs	r2, #68	@ 0x44
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 fb57 	bl	80044a8 <memset>
  if(huart->Instance==LPUART1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8000e7c <HAL_UART_MspInit+0xa8>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d136      	bne.n	8000e72 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e04:	2320      	movs	r3, #32
 8000e06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fe7d 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e1c:	f7ff ff3a 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <HAL_UART_MspInit+0xac>)
 8000e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e24:	4a16      	ldr	r2, [pc, #88]	@ (8000e80 <HAL_UART_MspInit+0xac>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <HAL_UART_MspInit+0xac>)
 8000e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <HAL_UART_MspInit+0xac>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3c:	4a10      	ldr	r2, [pc, #64]	@ (8000e80 <HAL_UART_MspInit+0xac>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <HAL_UART_MspInit+0xac>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000e50:	230c      	movs	r3, #12
 8000e52:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e60:	230c      	movs	r3, #12
 8000e62:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6e:	f000 fa5d 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3768      	adds	r7, #104	@ 0x68
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40008000 	.word	0x40008000
 8000e80:	40021000 	.word	0x40021000

08000e84 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	@ 0x50
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2244      	movs	r2, #68	@ 0x44
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f003 fb07 	bl	80044a8 <memset>
  if(hrtc->Instance==RTC)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ef4 <HAL_RTC_MspInit+0x70>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d123      	bne.n	8000eec <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ea4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000ea8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000eaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eae:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fe2b 	bl	8002b10 <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000ec0:	f7ff fee8 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_RTC_MspInit+0x74>)
 8000ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000eca:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef8 <HAL_RTC_MspInit+0x74>)
 8000ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <HAL_RTC_MspInit+0x74>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed8:	4a07      	ldr	r2, [pc, #28]	@ (8000ef8 <HAL_RTC_MspInit+0x74>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <HAL_RTC_MspInit+0x74>)
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000eec:	bf00      	nop
 8000eee:	3750      	adds	r7, #80	@ 0x50
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40002800 	.word	0x40002800
 8000ef8:	40021000 	.word	0x40021000

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f52:	f000 f8c7 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f003 fa94 	bl	80044b8 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20008000 	.word	0x20008000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	200001a0 	.word	0x200001a0
 8000fc4:	200002f0 	.word	0x200002f0

08000fc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fec:	480d      	ldr	r0, [pc, #52]	@ (8001024 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff0:	f7ff ffea 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <LoopForever+0xe>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	@ (8001038 <LoopForever+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800101a:	f003 fa53 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800101e:	f7ff fc59 	bl	80008d4 <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   r0, =_estack
 8001024:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001030:	08004e84 	.word	0x08004e84
  ldr r2, =_sbss
 8001034:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001038:	200002f0 	.word	0x200002f0

0800103c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_2_IRQHandler>

0800103e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 f93d 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f80e 	bl	8001070 <HAL_InitTick>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d002      	beq.n	8001060 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	71fb      	strb	r3, [r7, #7]
 800105e:	e001      	b.n	8001064 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001060:	f7ff fe1e 	bl	8000ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001064:	79fb      	ldrb	r3, [r7, #7]

}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_InitTick+0x68>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d022      	beq.n	80010ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_InitTick+0x6c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <HAL_InitTick+0x68>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001090:	fbb1 f3f3 	udiv	r3, r1, r3
 8001094:	fbb2 f3f3 	udiv	r3, r2, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f000 f93a 	bl	8001312 <HAL_SYSTICK_Config>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10f      	bne.n	80010c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	d809      	bhi.n	80010be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010aa:	2200      	movs	r2, #0
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b2:	f000 f914 	bl	80012de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b6:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <HAL_InitTick+0x70>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	e007      	b.n	80010ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	73fb      	strb	r3, [r7, #15]
 80010c2:	e004      	b.n	80010ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e001      	b.n	80010ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_IncTick+0x1c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <HAL_IncTick+0x20>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a03      	ldr	r2, [pc, #12]	@ (8001100 <HAL_IncTick+0x1c>)
 80010f4:	6013      	str	r3, [r2, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	200001a4 	.word	0x200001a4
 8001104:	20000008 	.word	0x20000008

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200001a4 	.word	0x200001a4

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001138:	d004      	beq.n	8001144 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b09      	ldr	r3, [pc, #36]	@ (8001160 <HAL_Delay+0x40>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001144:	bf00      	nop
 8001146:	f7ff ffdf 	bl	8001108 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	429a      	cmp	r2, r3
 8001154:	d8f7      	bhi.n	8001146 <HAL_Delay+0x26>
  {
  }
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	@ (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	@ (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	@ 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff47 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff5e 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff90 	bl	800121c <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5f 	bl	80011c8 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffb2 	bl	8001284 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800133a:	e15a      	b.n	80015f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 814c 	beq.w	80015ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d005      	beq.n	800136c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001368:	2b02      	cmp	r3, #2
 800136a:	d130      	bne.n	80013ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a2:	2201      	movs	r2, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	f003 0201 	and.w	r2, r3, #1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d017      	beq.n	800140a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d123      	bne.n	800145e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43db      	mvns	r3, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	691a      	ldr	r2, [r3, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	08da      	lsrs	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3208      	adds	r2, #8
 8001458:	6939      	ldr	r1, [r7, #16]
 800145a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0203 	and.w	r2, r3, #3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80a6 	beq.w	80015ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001610 <HAL_GPIO_Init+0x2e4>)
 80014a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a4:	4a5a      	ldr	r2, [pc, #360]	@ (8001610 <HAL_GPIO_Init+0x2e4>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ac:	4b58      	ldr	r3, [pc, #352]	@ (8001610 <HAL_GPIO_Init+0x2e4>)
 80014ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b8:	4a56      	ldr	r2, [pc, #344]	@ (8001614 <HAL_GPIO_Init+0x2e8>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014e2:	d01f      	beq.n	8001524 <HAL_GPIO_Init+0x1f8>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a4c      	ldr	r2, [pc, #304]	@ (8001618 <HAL_GPIO_Init+0x2ec>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d019      	beq.n	8001520 <HAL_GPIO_Init+0x1f4>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a4b      	ldr	r2, [pc, #300]	@ (800161c <HAL_GPIO_Init+0x2f0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d013      	beq.n	800151c <HAL_GPIO_Init+0x1f0>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001620 <HAL_GPIO_Init+0x2f4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00d      	beq.n	8001518 <HAL_GPIO_Init+0x1ec>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a49      	ldr	r2, [pc, #292]	@ (8001624 <HAL_GPIO_Init+0x2f8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d007      	beq.n	8001514 <HAL_GPIO_Init+0x1e8>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a48      	ldr	r2, [pc, #288]	@ (8001628 <HAL_GPIO_Init+0x2fc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d101      	bne.n	8001510 <HAL_GPIO_Init+0x1e4>
 800150c:	2305      	movs	r3, #5
 800150e:	e00a      	b.n	8001526 <HAL_GPIO_Init+0x1fa>
 8001510:	2306      	movs	r3, #6
 8001512:	e008      	b.n	8001526 <HAL_GPIO_Init+0x1fa>
 8001514:	2304      	movs	r3, #4
 8001516:	e006      	b.n	8001526 <HAL_GPIO_Init+0x1fa>
 8001518:	2303      	movs	r3, #3
 800151a:	e004      	b.n	8001526 <HAL_GPIO_Init+0x1fa>
 800151c:	2302      	movs	r3, #2
 800151e:	e002      	b.n	8001526 <HAL_GPIO_Init+0x1fa>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_GPIO_Init+0x1fa>
 8001524:	2300      	movs	r3, #0
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	f002 0203 	and.w	r2, r2, #3
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	4093      	lsls	r3, r2
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001536:	4937      	ldr	r1, [pc, #220]	@ (8001614 <HAL_GPIO_Init+0x2e8>)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	3302      	adds	r3, #2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001544:	4b39      	ldr	r3, [pc, #228]	@ (800162c <HAL_GPIO_Init+0x300>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001568:	4a30      	ldr	r2, [pc, #192]	@ (800162c <HAL_GPIO_Init+0x300>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800156e:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <HAL_GPIO_Init+0x300>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001592:	4a26      	ldr	r2, [pc, #152]	@ (800162c <HAL_GPIO_Init+0x300>)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001598:	4b24      	ldr	r3, [pc, #144]	@ (800162c <HAL_GPIO_Init+0x300>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015bc:	4a1b      	ldr	r2, [pc, #108]	@ (800162c <HAL_GPIO_Init+0x300>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <HAL_GPIO_Init+0x300>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015e6:	4a11      	ldr	r2, [pc, #68]	@ (800162c <HAL_GPIO_Init+0x300>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	fa22 f303 	lsr.w	r3, r2, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f47f ae9d 	bne.w	800133c <HAL_GPIO_Init+0x10>
  }
}
 8001602:	bf00      	nop
 8001604:	bf00      	nop
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000
 8001614:	40010000 	.word	0x40010000
 8001618:	48000400 	.word	0x48000400
 800161c:	48000800 	.word	0x48000800
 8001620:	48000c00 	.word	0x48000c00
 8001624:	48001000 	.word	0x48001000
 8001628:	48001400 	.word	0x48001400
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800164c:	e002      	b.n	8001654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e08d      	b.n	800178e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fb2e 	bl	8000ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2224      	movs	r2, #36	@ 0x24
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0201 	bic.w	r2, r2, #1
 80016a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d107      	bne.n	80016da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	e006      	b.n	80016e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80016e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d108      	bne.n	8001702 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	e007      	b.n	8001712 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001710:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001724:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69d9      	ldr	r1, [r3, #28]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1a      	ldr	r2, [r3, #32]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2220      	movs	r2, #32
 800177a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	461a      	mov	r2, r3
 80017a4:	460b      	mov	r3, r1
 80017a6:	817b      	strh	r3, [r7, #10]
 80017a8:	4613      	mov	r3, r2
 80017aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	f040 80fd 	bne.w	80019b4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_I2C_Master_Transmit+0x30>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e0f6      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017d0:	f7ff fc9a 	bl	8001108 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2319      	movs	r3, #25
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f914 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0e1      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2221      	movs	r2, #33	@ 0x21
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2210      	movs	r2, #16
 80017fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	893a      	ldrh	r2, [r7, #8]
 8001812:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	2bff      	cmp	r3, #255	@ 0xff
 8001822:	d906      	bls.n	8001832 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	22ff      	movs	r2, #255	@ 0xff
 8001828:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800182a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e007      	b.n	8001842 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001836:	b29a      	uxth	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800183c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001840:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001846:	2b00      	cmp	r3, #0
 8001848:	d024      	beq.n	8001894 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001864:	b29b      	uxth	r3, r3
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800187e:	b2db      	uxtb	r3, r3
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	8979      	ldrh	r1, [r7, #10]
 8001886:	4b4e      	ldr	r3, [pc, #312]	@ (80019c0 <HAL_I2C_Master_Transmit+0x228>)
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 fa83 	bl	8001d98 <I2C_TransferConfig>
 8001892:	e066      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001898:	b2da      	uxtb	r2, r3
 800189a:	8979      	ldrh	r1, [r7, #10]
 800189c:	4b48      	ldr	r3, [pc, #288]	@ (80019c0 <HAL_I2C_Master_Transmit+0x228>)
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fa78 	bl	8001d98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80018a8:	e05b      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	6a39      	ldr	r1, [r7, #32]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f907 	bl	8001ac2 <I2C_WaitOnTXISFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e07b      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d034      	beq.n	8001962 <HAL_I2C_Master_Transmit+0x1ca>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d130      	bne.n	8001962 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	2200      	movs	r2, #0
 8001908:	2180      	movs	r1, #128	@ 0x80
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f880 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e04d      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191e:	b29b      	uxth	r3, r3
 8001920:	2bff      	cmp	r3, #255	@ 0xff
 8001922:	d90e      	bls.n	8001942 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	22ff      	movs	r2, #255	@ 0xff
 8001928:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800192e:	b2da      	uxtb	r2, r3
 8001930:	8979      	ldrh	r1, [r7, #10]
 8001932:	2300      	movs	r3, #0
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 fa2c 	bl	8001d98 <I2C_TransferConfig>
 8001940:	e00f      	b.n	8001962 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001946:	b29a      	uxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001950:	b2da      	uxtb	r2, r3
 8001952:	8979      	ldrh	r1, [r7, #10]
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 fa1b 	bl	8001d98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d19e      	bne.n	80018aa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	6a39      	ldr	r1, [r7, #32]
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f8ed 	bl	8001b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e01a      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2220      	movs	r2, #32
 8001986:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <HAL_I2C_Master_Transmit+0x22c>)
 8001994:	400b      	ands	r3, r1
 8001996:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
  }
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	80002000 	.word	0x80002000
 80019c4:	fe00e800 	.word	0xfe00e800

080019c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d103      	bne.n	80019e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d007      	beq.n	8001a04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	619a      	str	r2, [r3, #24]
  }
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a20:	e03b      	b.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	6839      	ldr	r1, [r7, #0]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f8d6 	bl	8001bd8 <I2C_IsErrorOccurred>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e041      	b.n	8001aba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a3c:	d02d      	beq.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3e:	f7ff fb63 	bl	8001108 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d302      	bcc.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d122      	bne.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d113      	bne.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f043 0220 	orr.w	r2, r3, #32
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	bf0c      	ite	eq
 8001aaa:	2301      	moveq	r3, #1
 8001aac:	2300      	movne	r3, #0
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d0b4      	beq.n	8001a22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	60f8      	str	r0, [r7, #12]
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ace:	e033      	b.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	68b9      	ldr	r1, [r7, #8]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f87f 	bl	8001bd8 <I2C_IsErrorOccurred>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e031      	b.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001aea:	d025      	beq.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aec:	f7ff fb0c 	bl	8001108 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d302      	bcc.n	8001b02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d11a      	bne.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d013      	beq.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b14:	f043 0220 	orr.w	r2, r3, #32
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e007      	b.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d1c4      	bne.n	8001ad0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b5c:	e02f      	b.n	8001bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f838 	bl	8001bd8 <I2C_IsErrorOccurred>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e02d      	b.n	8001bce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b72:	f7ff fac9 	bl	8001108 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d302      	bcc.n	8001b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d11a      	bne.n	8001bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d013      	beq.n	8001bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f043 0220 	orr.w	r2, r3, #32
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e007      	b.n	8001bce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d1c8      	bne.n	8001b5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	@ 0x28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d068      	beq.n	8001cd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2210      	movs	r2, #16
 8001c0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c0c:	e049      	b.n	8001ca2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c14:	d045      	beq.n	8001ca2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c16:	f7ff fa77 	bl	8001108 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d302      	bcc.n	8001c2c <I2C_IsErrorOccurred+0x54>
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d13a      	bne.n	8001ca2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c4e:	d121      	bne.n	8001c94 <I2C_IsErrorOccurred+0xbc>
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c56:	d01d      	beq.n	8001c94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001c58:	7cfb      	ldrb	r3, [r7, #19]
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d01a      	beq.n	8001c94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c6e:	f7ff fa4b 	bl	8001108 <HAL_GetTick>
 8001c72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c74:	e00e      	b.n	8001c94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c76:	f7ff fa47 	bl	8001108 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b19      	cmp	r3, #25
 8001c82:	d907      	bls.n	8001c94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001c92:	e006      	b.n	8001ca2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d1e9      	bne.n	8001c76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d003      	beq.n	8001cb8 <I2C_IsErrorOccurred+0xe0>
 8001cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0aa      	beq.n	8001c0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d103      	bne.n	8001cc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00b      	beq.n	8001d00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00b      	beq.n	8001d22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00b      	beq.n	8001d44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f043 0302 	orr.w	r3, r3, #2
 8001d32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7ff fe3b 	bl	80019c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <I2C_IsErrorOccurred+0x1bc>)
 8001d5e:	400b      	ands	r3, r1
 8001d60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2220      	movs	r2, #32
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3728      	adds	r7, #40	@ 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	fe00e800 	.word	0xfe00e800

08001d98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	817b      	strh	r3, [r7, #10]
 8001da6:	4613      	mov	r3, r2
 8001da8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001daa:	897b      	ldrh	r3, [r7, #10]
 8001dac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001db0:	7a7b      	ldrb	r3, [r7, #9]
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001db8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	0d5b      	lsrs	r3, r3, #21
 8001dd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <I2C_TransferConfig+0x60>)
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	ea02 0103 	and.w	r1, r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001dea:	bf00      	nop
 8001dec:	371c      	adds	r7, #28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	03ff63ff 	.word	0x03ff63ff

08001dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b20      	cmp	r3, #32
 8001e10:	d138      	bne.n	8001e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e032      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2224      	movs	r2, #36	@ 0x24
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b20      	cmp	r3, #32
 8001ea6:	d139      	bne.n	8001f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e033      	b.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2224      	movs	r2, #36	@ 0x24
 8001ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e000      	b.n	8001f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40007000 	.word	0x40007000

08001f4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d141      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f66:	d131      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f68:	4b47      	ldr	r3, [pc, #284]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f6e:	4a46      	ldr	r2, [pc, #280]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f78:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f80:	4a41      	ldr	r2, [pc, #260]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f88:	4b40      	ldr	r3, [pc, #256]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2232      	movs	r2, #50	@ 0x32
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4a3f      	ldr	r2, [pc, #252]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9e:	e002      	b.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa6:	4b38      	ldr	r3, [pc, #224]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb2:	d102      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f2      	bne.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fba:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc6:	d158      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e057      	b.n	800207c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fdc:	e04d      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fe4:	d141      	bne.n	800206a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe6:	4b28      	ldr	r3, [pc, #160]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff2:	d131      	bne.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ffa:	4a23      	ldr	r2, [pc, #140]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002004:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800200c:	4a1e      	ldr	r2, [pc, #120]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002012:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002014:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2232      	movs	r2, #50	@ 0x32
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4a1c      	ldr	r2, [pc, #112]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	3301      	adds	r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202a:	e002      	b.n	8002032 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3b01      	subs	r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203e:	d102      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f2      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002052:	d112      	bne.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e011      	b.n	800207c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002068:	e007      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002072:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002078:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40007000 	.word	0x40007000
 800208c:	20000000 	.word	0x20000000
 8002090:	431bde83 	.word	0x431bde83

08002094 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800209e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a2:	6093      	str	r3, [r2, #8]
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40007000 	.word	0x40007000

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e2fe      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d075      	beq.n	80021be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d2:	4b97      	ldr	r3, [pc, #604]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020dc:	4b94      	ldr	r3, [pc, #592]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d102      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3e>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_OscConfig+0x44>
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d10b      	bne.n	8002110 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d05b      	beq.n	80021bc <HAL_RCC_OscConfig+0x108>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d157      	bne.n	80021bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e2d9      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002118:	d106      	bne.n	8002128 <HAL_RCC_OscConfig+0x74>
 800211a:	4b85      	ldr	r3, [pc, #532]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a84      	ldr	r2, [pc, #528]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e01d      	b.n	8002164 <HAL_RCC_OscConfig+0xb0>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x98>
 8002132:	4b7f      	ldr	r3, [pc, #508]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7e      	ldr	r2, [pc, #504]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b7c      	ldr	r3, [pc, #496]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7b      	ldr	r2, [pc, #492]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e00b      	b.n	8002164 <HAL_RCC_OscConfig+0xb0>
 800214c:	4b78      	ldr	r3, [pc, #480]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a77      	ldr	r2, [pc, #476]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b75      	ldr	r3, [pc, #468]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a74      	ldr	r2, [pc, #464]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800215e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d013      	beq.n	8002194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe ffcc 	bl	8001108 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7fe ffc8 	bl	8001108 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	@ 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e29e      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002186:	4b6a      	ldr	r3, [pc, #424]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0xc0>
 8002192:	e014      	b.n	80021be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe ffb8 	bl	8001108 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7fe ffb4 	bl	8001108 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	@ 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e28a      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ae:	4b60      	ldr	r3, [pc, #384]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0xe8>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d075      	beq.n	80022b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ca:	4b59      	ldr	r3, [pc, #356]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d4:	4b56      	ldr	r3, [pc, #344]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	d102      	bne.n	80021ea <HAL_RCC_OscConfig+0x136>
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_OscConfig+0x13c>
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d11f      	bne.n	8002230 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_OscConfig+0x154>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e25d      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b49      	ldr	r3, [pc, #292]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	4946      	ldr	r1, [pc, #280]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800221c:	4b45      	ldr	r3, [pc, #276]	@ (8002334 <HAL_RCC_OscConfig+0x280>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe ff25 	bl	8001070 <HAL_InitTick>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d043      	beq.n	80022b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e249      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d023      	beq.n	8002280 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4b3d      	ldr	r3, [pc, #244]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3c      	ldr	r2, [pc, #240]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe ff60 	bl	8001108 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe ff5c 	bl	8001108 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e232      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225e:	4b34      	ldr	r3, [pc, #208]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b31      	ldr	r3, [pc, #196]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	061b      	lsls	r3, r3, #24
 8002278:	492d      	ldr	r1, [pc, #180]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
 800227e:	e01a      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002280:	4b2b      	ldr	r3, [pc, #172]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2a      	ldr	r2, [pc, #168]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002286:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe ff3c 	bl	8001108 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7fe ff38 	bl	8001108 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e20e      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a6:	4b22      	ldr	r3, [pc, #136]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1e0>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d041      	beq.n	8002346 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01c      	beq.n	8002304 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ca:	4b19      	ldr	r3, [pc, #100]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d0:	4a17      	ldr	r2, [pc, #92]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7fe ff15 	bl	8001108 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e2:	f7fe ff11 	bl	8001108 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e1e7      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ef      	beq.n	80022e2 <HAL_RCC_OscConfig+0x22e>
 8002302:	e020      	b.n	8002346 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 8002306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800230a:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <HAL_RCC_OscConfig+0x27c>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe fef8 	bl	8001108 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800231a:	e00d      	b.n	8002338 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7fe fef4 	bl	8001108 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d906      	bls.n	8002338 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1ca      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002338:	4b8c      	ldr	r3, [pc, #560]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800233a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1ea      	bne.n	800231c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80a6 	beq.w	80024a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002358:	4b84      	ldr	r3, [pc, #528]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x2b4>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x2b6>
 8002368:	2300      	movs	r3, #0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00d      	beq.n	800238a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b7f      	ldr	r3, [pc, #508]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002372:	4a7e      	ldr	r2, [pc, #504]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002378:	6593      	str	r3, [r2, #88]	@ 0x58
 800237a:	4b7c      	ldr	r3, [pc, #496]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	4b79      	ldr	r3, [pc, #484]	@ (8002570 <HAL_RCC_OscConfig+0x4bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d118      	bne.n	80023c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002396:	4b76      	ldr	r3, [pc, #472]	@ (8002570 <HAL_RCC_OscConfig+0x4bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a75      	ldr	r2, [pc, #468]	@ (8002570 <HAL_RCC_OscConfig+0x4bc>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7fe feb1 	bl	8001108 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023aa:	f7fe fead 	bl	8001108 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e183      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	4b6c      	ldr	r3, [pc, #432]	@ (8002570 <HAL_RCC_OscConfig+0x4bc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <HAL_RCC_OscConfig+0x32e>
 80023d0:	4b66      	ldr	r3, [pc, #408]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d6:	4a65      	ldr	r2, [pc, #404]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023e0:	e024      	b.n	800242c <HAL_RCC_OscConfig+0x378>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b05      	cmp	r3, #5
 80023e8:	d110      	bne.n	800240c <HAL_RCC_OscConfig+0x358>
 80023ea:	4b60      	ldr	r3, [pc, #384]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80023ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f0:	4a5e      	ldr	r2, [pc, #376]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023fa:	4b5c      	ldr	r3, [pc, #368]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002400:	4a5a      	ldr	r2, [pc, #360]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800240a:	e00f      	b.n	800242c <HAL_RCC_OscConfig+0x378>
 800240c:	4b57      	ldr	r3, [pc, #348]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002412:	4a56      	ldr	r2, [pc, #344]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800241c:	4b53      	ldr	r3, [pc, #332]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002422:	4a52      	ldr	r2, [pc, #328]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d016      	beq.n	8002462 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe fe68 	bl	8001108 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fe64 	bl	8001108 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e138      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002452:	4b46      	ldr	r3, [pc, #280]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ed      	beq.n	800243c <HAL_RCC_OscConfig+0x388>
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7fe fe51 	bl	8001108 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fe4d 	bl	8001108 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e121      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002480:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1ed      	bne.n	800246a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800248e:	7ffb      	ldrb	r3, [r7, #31]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002494:	4b35      	ldr	r3, [pc, #212]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002498:	4a34      	ldr	r2, [pc, #208]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800249a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800249e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d03c      	beq.n	8002526 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01c      	beq.n	80024ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b4:	4b2d      	ldr	r3, [pc, #180]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80024b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024ba:	4a2c      	ldr	r2, [pc, #176]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7fe fe20 	bl	8001108 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024cc:	f7fe fe1c 	bl	8001108 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0f2      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024de:	4b23      	ldr	r3, [pc, #140]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80024e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ef      	beq.n	80024cc <HAL_RCC_OscConfig+0x418>
 80024ec:	e01b      	b.n	8002526 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ee:	4b1f      	ldr	r3, [pc, #124]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80024f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024f4:	4a1d      	ldr	r2, [pc, #116]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fe03 	bl	8001108 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002506:	f7fe fdff 	bl	8001108 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0d5      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002518:	4b14      	ldr	r3, [pc, #80]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800251a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1ef      	bne.n	8002506 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80c9 	beq.w	80026c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002530:	4b0e      	ldr	r3, [pc, #56]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b0c      	cmp	r3, #12
 800253a:	f000 8083 	beq.w	8002644 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d15e      	bne.n	8002604 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a08      	ldr	r2, [pc, #32]	@ (800256c <HAL_RCC_OscConfig+0x4b8>)
 800254c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002552:	f7fe fdd9 	bl	8001108 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002558:	e00c      	b.n	8002574 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe fdd5 	bl	8001108 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d905      	bls.n	8002574 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0ab      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
 800256c:	40021000 	.word	0x40021000
 8002570:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002574:	4b55      	ldr	r3, [pc, #340]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ec      	bne.n	800255a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002580:	4b52      	ldr	r3, [pc, #328]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	4b52      	ldr	r3, [pc, #328]	@ (80026d0 <HAL_RCC_OscConfig+0x61c>)
 8002586:	4013      	ands	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6a11      	ldr	r1, [r2, #32]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002590:	3a01      	subs	r2, #1
 8002592:	0112      	lsls	r2, r2, #4
 8002594:	4311      	orrs	r1, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800259a:	0212      	lsls	r2, r2, #8
 800259c:	4311      	orrs	r1, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025a2:	0852      	lsrs	r2, r2, #1
 80025a4:	3a01      	subs	r2, #1
 80025a6:	0552      	lsls	r2, r2, #21
 80025a8:	4311      	orrs	r1, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025ae:	0852      	lsrs	r2, r2, #1
 80025b0:	3a01      	subs	r2, #1
 80025b2:	0652      	lsls	r2, r2, #25
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025ba:	06d2      	lsls	r2, r2, #27
 80025bc:	430a      	orrs	r2, r1
 80025be:	4943      	ldr	r1, [pc, #268]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c4:	4b41      	ldr	r3, [pc, #260]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a40      	ldr	r2, [pc, #256]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d0:	4b3e      	ldr	r3, [pc, #248]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a3d      	ldr	r2, [pc, #244]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025dc:	f7fe fd94 	bl	8001108 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fd90 	bl	8001108 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e066      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f6:	4b35      	ldr	r3, [pc, #212]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x530>
 8002602:	e05e      	b.n	80026c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002604:	4b31      	ldr	r3, [pc, #196]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a30      	ldr	r2, [pc, #192]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 800260a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800260e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fd7a 	bl	8001108 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe fd76 	bl	8001108 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e04c      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262a:	4b28      	ldr	r3, [pc, #160]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002636:	4b25      	ldr	r3, [pc, #148]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	4924      	ldr	r1, [pc, #144]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 800263c:	4b25      	ldr	r3, [pc, #148]	@ (80026d4 <HAL_RCC_OscConfig+0x620>)
 800263e:	4013      	ands	r3, r2
 8002640:	60cb      	str	r3, [r1, #12]
 8002642:	e03e      	b.n	80026c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e039      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002650:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <HAL_RCC_OscConfig+0x618>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 0203 	and.w	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	429a      	cmp	r2, r3
 8002662:	d12c      	bne.n	80026be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	3b01      	subs	r3, #1
 8002670:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d123      	bne.n	80026be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002680:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d11b      	bne.n	80026be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002690:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d113      	bne.n	80026be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	3b01      	subs	r3, #1
 80026a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d109      	bne.n	80026be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	3b01      	subs	r3, #1
 80026b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3720      	adds	r7, #32
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	019f800c 	.word	0x019f800c
 80026d4:	feeefffc 	.word	0xfeeefffc

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e11e      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b91      	ldr	r3, [pc, #580]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b8e      	ldr	r3, [pc, #568]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 020f 	bic.w	r2, r3, #15
 8002706:	498c      	ldr	r1, [pc, #560]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b8a      	ldr	r3, [pc, #552]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e106      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d073      	beq.n	8002814 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d129      	bne.n	8002788 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002734:	4b81      	ldr	r3, [pc, #516]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0f4      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002744:	f000 f99e 	bl	8002a84 <RCC_GetSysClockFreqFromPLLSource>
 8002748:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4a7c      	ldr	r2, [pc, #496]	@ (8002940 <HAL_RCC_ClockConfig+0x268>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d93f      	bls.n	80027d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002752:	4b7a      	ldr	r3, [pc, #488]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002766:	2b00      	cmp	r3, #0
 8002768:	d033      	beq.n	80027d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	d12f      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002772:	4b72      	ldr	r3, [pc, #456]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800277a:	4a70      	ldr	r2, [pc, #448]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 800277c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002780:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e024      	b.n	80027d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002790:	4b6a      	ldr	r3, [pc, #424]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0c6      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a0:	4b66      	ldr	r3, [pc, #408]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0be      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027b0:	f000 f8ce 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4a61      	ldr	r2, [pc, #388]	@ (8002940 <HAL_RCC_ClockConfig+0x268>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d909      	bls.n	80027d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027be:	4b5f      	ldr	r3, [pc, #380]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027c6:	4a5d      	ldr	r2, [pc, #372]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80027c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027ce:	2380      	movs	r3, #128	@ 0x80
 80027d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d2:	4b5a      	ldr	r3, [pc, #360]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f023 0203 	bic.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4957      	ldr	r1, [pc, #348]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e4:	f7fe fc90 	bl	8001108 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7fe fc8c 	bl	8001108 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e095      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	4b4e      	ldr	r3, [pc, #312]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 020c 	and.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d1eb      	bne.n	80027ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d023      	beq.n	8002868 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800282c:	4b43      	ldr	r3, [pc, #268]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a42      	ldr	r2, [pc, #264]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002836:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002844:	4b3d      	ldr	r3, [pc, #244]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800284c:	4a3b      	ldr	r2, [pc, #236]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 800284e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002852:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b39      	ldr	r3, [pc, #228]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4936      	ldr	r1, [pc, #216]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
 8002866:	e008      	b.n	800287a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b80      	cmp	r3, #128	@ 0x80
 800286c:	d105      	bne.n	800287a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800286e:	4b33      	ldr	r3, [pc, #204]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4a32      	ldr	r2, [pc, #200]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 8002874:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002878:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800287a:	4b2f      	ldr	r3, [pc, #188]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d21d      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002888:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 020f 	bic.w	r2, r3, #15
 8002890:	4929      	ldr	r1, [pc, #164]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002898:	f7fe fc36 	bl	8001108 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800289e:	e00a      	b.n	80028b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f7fe fc32 	bl	8001108 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e03b      	b.n	800292e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b20      	ldr	r3, [pc, #128]	@ (8002938 <HAL_RCC_ClockConfig+0x260>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d1ed      	bne.n	80028a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4917      	ldr	r1, [pc, #92]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ee:	4b13      	ldr	r3, [pc, #76]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	490f      	ldr	r1, [pc, #60]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002902:	f000 f825 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 8002906:	4602      	mov	r2, r0
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <HAL_RCC_ClockConfig+0x264>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	490c      	ldr	r1, [pc, #48]	@ (8002944 <HAL_RCC_ClockConfig+0x26c>)
 8002914:	5ccb      	ldrb	r3, [r1, r3]
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	fa22 f303 	lsr.w	r3, r2, r3
 800291e:	4a0a      	ldr	r2, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x270>)
 8002920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <HAL_RCC_ClockConfig+0x274>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fba2 	bl	8001070 <HAL_InitTick>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
 8002940:	04c4b400 	.word	0x04c4b400
 8002944:	08004e00 	.word	0x08004e00
 8002948:	20000000 	.word	0x20000000
 800294c:	20000004 	.word	0x20000004

08002950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002956:	4b2c      	ldr	r3, [pc, #176]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b04      	cmp	r3, #4
 8002960:	d102      	bne.n	8002968 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002962:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	e047      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002968:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	d102      	bne.n	800297a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002974:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	e03e      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800297a:	4b23      	ldr	r3, [pc, #140]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 030c 	and.w	r3, r3, #12
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d136      	bne.n	80029f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002986:	4b20      	ldr	r3, [pc, #128]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002990:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3301      	adds	r3, #1
 800299c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d10c      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	4a16      	ldr	r2, [pc, #88]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ae:	68d2      	ldr	r2, [r2, #12]
 80029b0:	0a12      	lsrs	r2, r2, #8
 80029b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029b6:	fb02 f303 	mul.w	r3, r2, r3
 80029ba:	617b      	str	r3, [r7, #20]
      break;
 80029bc:	e00c      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029be:	4a13      	ldr	r2, [pc, #76]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4a10      	ldr	r2, [pc, #64]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	0a12      	lsrs	r2, r2, #8
 80029cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029d0:	fb02 f303 	mul.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
      break;
 80029d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0e5b      	lsrs	r3, r3, #25
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	3301      	adds	r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	e001      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029f8:	693b      	ldr	r3, [r7, #16]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	00f42400 	.word	0x00f42400
 8002a10:	016e3600 	.word	0x016e3600

08002a14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a18:	4b03      	ldr	r3, [pc, #12]	@ (8002a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000000 	.word	0x20000000

08002a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a30:	f7ff fff0 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4904      	ldr	r1, [pc, #16]	@ (8002a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	08004e10 	.word	0x08004e10

08002a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a5c:	f7ff ffda 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0adb      	lsrs	r3, r3, #11
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4904      	ldr	r1, [pc, #16]	@ (8002a80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	f003 031f 	and.w	r3, r3, #31
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08004e10 	.word	0x08004e10

08002a84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d10c      	bne.n	8002ac2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aa8:	4a17      	ldr	r2, [pc, #92]	@ (8002b08 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	4a14      	ldr	r2, [pc, #80]	@ (8002b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ab2:	68d2      	ldr	r2, [r2, #12]
 8002ab4:	0a12      	lsrs	r2, r2, #8
 8002ab6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	617b      	str	r3, [r7, #20]
    break;
 8002ac0:	e00c      	b.n	8002adc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac2:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	4a0e      	ldr	r2, [pc, #56]	@ (8002b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002acc:	68d2      	ldr	r2, [r2, #12]
 8002ace:	0a12      	lsrs	r2, r2, #8
 8002ad0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	617b      	str	r3, [r7, #20]
    break;
 8002ada:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002adc:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0e5b      	lsrs	r3, r3, #25
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002af6:	687b      	ldr	r3, [r7, #4]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40021000 	.word	0x40021000
 8002b08:	016e3600 	.word	0x016e3600
 8002b0c:	00f42400 	.word	0x00f42400

08002b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b18:	2300      	movs	r3, #0
 8002b1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8098 	beq.w	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b43      	ldr	r3, [pc, #268]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	4b40      	ldr	r3, [pc, #256]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	4a3f      	ldr	r2, [pc, #252]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b56:	2301      	movs	r3, #1
 8002b58:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a39      	ldr	r2, [pc, #228]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b66:	f7fe facf 	bl	8001108 <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b6c:	e009      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7fe facb 	bl	8001108 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d902      	bls.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	74fb      	strb	r3, [r7, #19]
        break;
 8002b80:	e005      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b82:	4b30      	ldr	r3, [pc, #192]	@ (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ef      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d159      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b94:	4b2a      	ldr	r3, [pc, #168]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b9e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01e      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d019      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bb0:	4b23      	ldr	r3, [pc, #140]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bbc:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bdc:	4a18      	ldr	r2, [pc, #96]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d016      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe fa8b 	bl	8001108 <HAL_GetTick>
 8002bf2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf4:	e00b      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf6:	f7fe fa87 	bl	8001108 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d902      	bls.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c0c:	e006      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ec      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10b      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c22:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c30:	4903      	ldr	r1, [pc, #12]	@ (8002c40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c38:	e008      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c3a:	7cfb      	ldrb	r3, [r7, #19]
 8002c3c:	74bb      	strb	r3, [r7, #18]
 8002c3e:	e005      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c48:	7cfb      	ldrb	r3, [r7, #19]
 8002c4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4c:	7c7b      	ldrb	r3, [r7, #17]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4ba6      	ldr	r3, [pc, #664]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	4aa5      	ldr	r2, [pc, #660]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c6a:	4ba0      	ldr	r3, [pc, #640]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c70:	f023 0203 	bic.w	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	499c      	ldr	r1, [pc, #624]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c8c:	4b97      	ldr	r3, [pc, #604]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c92:	f023 020c 	bic.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4994      	ldr	r1, [pc, #592]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cae:	4b8f      	ldr	r3, [pc, #572]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	498b      	ldr	r1, [pc, #556]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cd0:	4b86      	ldr	r3, [pc, #536]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	4983      	ldr	r1, [pc, #524]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cf2:	4b7e      	ldr	r3, [pc, #504]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	497a      	ldr	r1, [pc, #488]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d14:	4b75      	ldr	r3, [pc, #468]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	4972      	ldr	r1, [pc, #456]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d36:	4b6d      	ldr	r3, [pc, #436]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	4969      	ldr	r1, [pc, #420]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d58:	4b64      	ldr	r3, [pc, #400]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	4961      	ldr	r1, [pc, #388]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	4958      	ldr	r1, [pc, #352]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d015      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d9c:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	4950      	ldr	r1, [pc, #320]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dd4:	4b45      	ldr	r3, [pc, #276]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de2:	4942      	ldr	r1, [pc, #264]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002df2:	d105      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df4:	4b3d      	ldr	r3, [pc, #244]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a3c      	ldr	r2, [pc, #240]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dfe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d015      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e0c:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	4934      	ldr	r1, [pc, #208]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a2e      	ldr	r2, [pc, #184]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e44:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e52:	4926      	ldr	r1, [pc, #152]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e62:	d105      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e64:	4b21      	ldr	r3, [pc, #132]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a20      	ldr	r2, [pc, #128]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	4918      	ldr	r1, [pc, #96]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a12      	ldr	r2, [pc, #72]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ea6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec2:	490a      	ldr	r1, [pc, #40]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a04      	ldr	r2, [pc, #16]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ede:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ee0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000

08002ef0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d070      	beq.n	8002fe4 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fd ffb4 	bl	8000e84 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d04f      	beq.n	8002fd2 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	22ca      	movs	r2, #202	@ 0xca
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2253      	movs	r2, #83	@ 0x53
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fb6e 	bl	8003624 <RTC_EnterInitMode>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d126      	bne.n	8002fa0 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8002f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f64:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6999      	ldr	r1, [r3, #24]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68d9      	ldr	r1, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	041a      	lsls	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fb7a 	bl	8003690 <RTC_ExitInitMode>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d110      	bne.n	8002fc8 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1a      	ldr	r2, [r3, #32]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	22ff      	movs	r2, #255	@ 0xff
 8002fce:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fd0:	e001      	b.n	8002fd6 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fee:	b590      	push	{r4, r7, lr}
 8002ff0:	b087      	sub	sp, #28
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_RTC_SetTime+0x1a>
 8003004:	2302      	movs	r3, #2
 8003006:	e08b      	b.n	8003120 <HAL_RTC_SetTime+0x132>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	22ca      	movs	r2, #202	@ 0xca
 800301e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2253      	movs	r2, #83	@ 0x53
 8003026:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fafb 	bl	8003624 <RTC_EnterInitMode>
 800302e:	4603      	mov	r3, r0
 8003030:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003032:	7cfb      	ldrb	r3, [r7, #19]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d163      	bne.n	8003100 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d126      	bne.n	800308c <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fb5d 	bl	8003716 <RTC_ByteToBcd2>
 800305c:	4603      	mov	r3, r0
 800305e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	785b      	ldrb	r3, [r3, #1]
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fb56 	bl	8003716 <RTC_ByteToBcd2>
 800306a:	4603      	mov	r3, r0
 800306c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800306e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	789b      	ldrb	r3, [r3, #2]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fb4e 	bl	8003716 <RTC_ByteToBcd2>
 800307a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800307c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	78db      	ldrb	r3, [r3, #3]
 8003084:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e018      	b.n	80030be <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2200      	movs	r2, #0
 800309e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	785b      	ldrb	r3, [r3, #1]
 80030aa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030ac:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030b2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	78db      	ldrb	r3, [r3, #3]
 80030b8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80030c8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80030cc:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699a      	ldr	r2, [r3, #24]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030dc:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6999      	ldr	r1, [r3, #24]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 faca 	bl	8003690 <RTC_ExitInitMode>
 80030fc:	4603      	mov	r3, r0
 80030fe:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	22ff      	movs	r2, #255	@ 0xff
 8003106:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }
    __HAL_UNLOCK(hrtc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800311e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003120:	4618      	mov	r0, r3
 8003122:	371c      	adds	r7, #28
 8003124:	46bd      	mov	sp, r7
 8003126:	bd90      	pop	{r4, r7, pc}

08003128 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(hrtc->Instance->SSR);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(hrtc->Instance->PRER) & RTC_PRER_PREDIV_S);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(hrtc->Instance->TR) & RTC_TR_RESERVED_MASK);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003156:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800315a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	0c1b      	lsrs	r3, r3, #16
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	0a1b      	lsrs	r3, r3, #8
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003176:	b2da      	uxtb	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003184:	b2da      	uxtb	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	0d9b      	lsrs	r3, r3, #22
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d11a      	bne.n	80031d6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fad6 	bl	8003756 <RTC_Bcd2ToByte>
 80031aa:	4603      	mov	r3, r0
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	785b      	ldrb	r3, [r3, #1]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 facd 	bl	8003756 <RTC_Bcd2ToByte>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	789b      	ldrb	r3, [r3, #2]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 fac4 	bl	8003756 <RTC_Bcd2ToByte>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_RTC_SetDate+0x1a>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e075      	b.n	80032e6 <HAL_RTC_SetDate+0x106>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10e      	bne.n	800322e <HAL_RTC_SetDate+0x4e>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	f023 0310 	bic.w	r3, r3, #16
 8003224:	b2db      	uxtb	r3, r3
 8003226:	330a      	adds	r3, #10
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d11c      	bne.n	800326e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	78db      	ldrb	r3, [r3, #3]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fa6c 	bl	8003716 <RTC_ByteToBcd2>
 800323e:	4603      	mov	r3, r0
 8003240:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	785b      	ldrb	r3, [r3, #1]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fa65 	bl	8003716 <RTC_ByteToBcd2>
 800324c:	4603      	mov	r3, r0
 800324e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003250:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	789b      	ldrb	r3, [r3, #2]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fa5d 	bl	8003716 <RTC_ByteToBcd2>
 800325c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800325e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	e00e      	b.n	800328c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	78db      	ldrb	r3, [r3, #3]
 8003272:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800327a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003280:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	22ca      	movs	r2, #202	@ 0xca
 8003292:	625a      	str	r2, [r3, #36]	@ 0x24
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2253      	movs	r2, #83	@ 0x53
 800329a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f9c1 	bl	8003624 <RTC_EnterInitMode>
 80032a2:	4603      	mov	r3, r0
 80032a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80032a6:	7cfb      	ldrb	r3, [r7, #19]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10c      	bne.n	80032c6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80032b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80032ba:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f9e7 	bl	8003690 <RTC_ExitInitMode>
 80032c2:	4603      	mov	r3, r0
 80032c4:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	22ff      	movs	r2, #255	@ 0xff
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24
 
  if (status == HAL_OK)
 80032ce:	7cfb      	ldrb	r3, [r7, #19]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d103      	bne.n	80032dc <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}

080032ee <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(hrtc->Instance->DR) & RTC_DR_RESERVED_MASK);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003304:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003308:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	b2da      	uxtb	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	0b5b      	lsrs	r3, r3, #13
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d11a      	bne.n	800337e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	78db      	ldrb	r3, [r3, #3]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fa02 	bl	8003756 <RTC_Bcd2ToByte>
 8003352:	4603      	mov	r3, r0
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	785b      	ldrb	r3, [r3, #1]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 f9f9 	bl	8003756 <RTC_Bcd2ToByte>
 8003364:	4603      	mov	r3, r0
 8003366:	461a      	mov	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	789b      	ldrb	r3, [r3, #2]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f9f0 	bl	8003756 <RTC_Bcd2ToByte>
 8003376:	4603      	mov	r3, r0
 8003378:	461a      	mov	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b089      	sub	sp, #36	@ 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_RTC_SetAlarm_IT+0x1a>
 800339e:	2302      	movs	r3, #2
 80033a0:	e115      	b.n	80035ce <HAL_RTC_SetAlarm_IT+0x246>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  if (Format == RTC_FORMAT_BIN)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d137      	bne.n	8003428 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d102      	bne.n	80033cc <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2200      	movs	r2, #0
 80033ca:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 f9a0 	bl	8003716 <RTC_ByteToBcd2>
 80033d6:	4603      	mov	r3, r0
 80033d8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f999 	bl	8003716 <RTC_ByteToBcd2>
 80033e4:	4603      	mov	r3, r0
 80033e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80033e8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	789b      	ldrb	r3, [r3, #2]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 f991 	bl	8003716 <RTC_ByteToBcd2>
 80033f4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80033f6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	78db      	ldrb	r3, [r3, #3]
 80033fe:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003400:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f983 	bl	8003716 <RTC_ByteToBcd2>
 8003410:	4603      	mov	r3, r0
 8003412:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003414:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800341c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003422:	4313      	orrs	r3, r2
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	e023      	b.n	8003470 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else /* Format BCD */
  {
    if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2200      	movs	r2, #0
 800343a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003448:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800344e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	78db      	ldrb	r3, [r3, #3]
 8003454:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003456:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800345e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003460:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003466:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800346c:	4313      	orrs	r3, r2
 800346e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	22ca      	movs	r2, #202	@ 0xca
 8003482:	625a      	str	r2, [r3, #36]	@ 0x24
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2253      	movs	r2, #83	@ 0x53
 800348a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003494:	d141      	bne.n	800351a <HAL_RTC_SetAlarm_IT+0x192>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80034a4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRAF);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2201      	movs	r2, #1
 80034ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RTC_ALARM_EXTI_CLEAR_IT();
 80034ae:	4b4a      	ldr	r3, [pc, #296]	@ (80035d8 <HAL_RTC_SetAlarm_IT+0x250>)
 80034b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80034b4:	615a      	str	r2, [r3, #20]

    tickstart = HAL_GetTick();
 80034b6:	f7fd fe27 	bl	8001108 <HAL_GetTick>
 80034ba:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRAWF) == 0U)
 80034bc:	e015      	b.n	80034ea <HAL_RTC_SetAlarm_IT+0x162>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034be:	f7fd fe23 	bl	8001108 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034cc:	d90d      	bls.n	80034ea <HAL_RTC_SetAlarm_IT+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	22ff      	movs	r2, #255	@ 0xff
 80034d4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2203      	movs	r2, #3
 80034da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e071      	b.n	80035ce <HAL_RTC_SetAlarm_IT+0x246>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRAWF) == 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0e2      	beq.n	80034be <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    WRITE_REG(hrtc->Instance->ALRMAR, tmpreg);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    WRITE_REG(hrtc->Instance->ALRMASSR, subsecondtmpreg);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm interrupt : Enable Alarm */
    SET_BIT(hrtc->Instance->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8003516:	619a      	str	r2, [r3, #24]
 8003518:	e040      	b.n	800359c <HAL_RTC_SetAlarm_IT+0x214>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8003528:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRBF);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2202      	movs	r2, #2
 8003530:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RTC_ALARM_EXTI_CLEAR_IT();
 8003532:	4b29      	ldr	r3, [pc, #164]	@ (80035d8 <HAL_RTC_SetAlarm_IT+0x250>)
 8003534:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003538:	615a      	str	r2, [r3, #20]

    tickstart = HAL_GetTick();
 800353a:	f7fd fde5 	bl	8001108 <HAL_GetTick>
 800353e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRBWF) == 0U)
 8003540:	e015      	b.n	800356e <HAL_RTC_SetAlarm_IT+0x1e6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003542:	f7fd fde1 	bl	8001108 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003550:	d90d      	bls.n	800356e <HAL_RTC_SetAlarm_IT+0x1e6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	22ff      	movs	r2, #255	@ 0xff
 8003558:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2203      	movs	r2, #3
 800355e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e02f      	b.n	80035ce <HAL_RTC_SetAlarm_IT+0x246>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRBWF) == 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0e2      	beq.n	8003542 <HAL_RTC_SetAlarm_IT+0x1ba>
      }
    }

    WRITE_REG(hrtc->Instance->ALRMBR, tmpreg);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    WRITE_REG(hrtc->Instance->ALRMBSSR, subsecondtmpreg);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm B interrupt : Enable Alarm */
    SET_BIT(hrtc->Instance->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 800359a:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800359c:	4b0e      	ldr	r3, [pc, #56]	@ (80035d8 <HAL_RTC_SetAlarm_IT+0x250>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0d      	ldr	r2, [pc, #52]	@ (80035d8 <HAL_RTC_SetAlarm_IT+0x250>)
 80035a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_RISING_IT();
 80035a8:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <HAL_RTC_SetAlarm_IT+0x250>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	@ (80035d8 <HAL_RTC_SetAlarm_IT+0x250>)
 80035ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	22ff      	movs	r2, #255	@ 0xff
 80035ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3724      	adds	r7, #36	@ 0x24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd90      	pop	{r4, r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003620 <HAL_RTC_WaitForSynchro+0x44>)
 80035ea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80035ec:	f7fd fd8c 	bl	8001108 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80035f2:	e009      	b.n	8003608 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035f4:	f7fd fd88 	bl	8001108 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003602:	d901      	bls.n	8003608 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e007      	b.n	8003618 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ee      	beq.n	80035f4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	0001005f 	.word	0x0001005f

08003624 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d123      	bne.n	8003686 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800364c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800364e:	f7fd fd5b 	bl	8001108 <HAL_GetTick>
 8003652:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003654:	e00d      	b.n	8003672 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003656:	f7fd fd57 	bl	8001108 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003664:	d905      	bls.n	8003672 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2203      	movs	r2, #3
 800366e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <RTC_EnterInitMode+0x62>
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d1e7      	bne.n	8003656 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036aa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ff8e 	bl	80035dc <HAL_RTC_WaitForSynchro>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d022      	beq.n	800370c <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2203      	movs	r2, #3
 80036ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	e01b      	b.n	800370c <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0220 	bic.w	r2, r2, #32
 80036e2:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff79 	bl	80035dc <HAL_RTC_WaitForSynchro>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2203      	movs	r2, #3
 80036f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0220 	orr.w	r2, r2, #32
 800370a:	619a      	str	r2, [r3, #24]
  }

  return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003728:	e005      	b.n	8003736 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003730:	7afb      	ldrb	r3, [r7, #11]
 8003732:	3b0a      	subs	r3, #10
 8003734:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003736:	7afb      	ldrb	r3, [r7, #11]
 8003738:	2b09      	cmp	r3, #9
 800373a:	d8f6      	bhi.n	800372a <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	b2da      	uxtb	r2, r3
 8003744:	7afb      	ldrb	r3, [r7, #11]
 8003746:	4313      	orrs	r3, r2
 8003748:	b2db      	uxtb	r3, r3
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	4603      	mov	r3, r0
 800375e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	b2db      	uxtb	r3, r3
 800377e:	4413      	add	r3, r2
 8003780:	b2db      	uxtb	r3, r3
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800379c:	4b07      	ldr	r3, [pc, #28]	@ (80037bc <HAL_RTCEx_BKUPWrite+0x2c>)
 800379e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4413      	add	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40002500 	.word	0x40002500

080037c0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 80037ca:	4b07      	ldr	r3, [pc, #28]	@ (80037e8 <HAL_RTCEx_BKUPRead+0x28>)
 80037cc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4413      	add	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40002500 	.word	0x40002500

080037ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e042      	b.n	8003884 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003804:	2b00      	cmp	r3, #0
 8003806:	d106      	bne.n	8003816 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7fd fadf 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2224      	movs	r2, #36	@ 0x24
 800381a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0201 	bic.w	r2, r2, #1
 800382c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 faf4 	bl	8003e24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f825 	bl	800388c <UART_SetConfig>
 8003842:	4603      	mov	r3, r0
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e01b      	b.n	8003884 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800385a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800386a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fb73 	bl	8003f68 <UART_CheckIdleState>
 8003882:	4603      	mov	r3, r0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800388c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003890:	b08c      	sub	sp, #48	@ 0x30
 8003892:	af00      	add	r7, sp, #0
 8003894:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4bab      	ldr	r3, [pc, #684]	@ (8003b68 <UART_SetConfig+0x2dc>)
 80038bc:	4013      	ands	r3, r2
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4aa0      	ldr	r2, [pc, #640]	@ (8003b6c <UART_SetConfig+0x2e0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d004      	beq.n	80038f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f4:	4313      	orrs	r3, r2
 80038f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003902:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800390c:	430b      	orrs	r3, r1
 800390e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003916:	f023 010f 	bic.w	r1, r3, #15
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a91      	ldr	r2, [pc, #580]	@ (8003b70 <UART_SetConfig+0x2e4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d125      	bne.n	800397c <UART_SetConfig+0xf0>
 8003930:	4b90      	ldr	r3, [pc, #576]	@ (8003b74 <UART_SetConfig+0x2e8>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b03      	cmp	r3, #3
 800393c:	d81a      	bhi.n	8003974 <UART_SetConfig+0xe8>
 800393e:	a201      	add	r2, pc, #4	@ (adr r2, 8003944 <UART_SetConfig+0xb8>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003955 	.word	0x08003955
 8003948:	08003965 	.word	0x08003965
 800394c:	0800395d 	.word	0x0800395d
 8003950:	0800396d 	.word	0x0800396d
 8003954:	2301      	movs	r3, #1
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800395a:	e0d6      	b.n	8003b0a <UART_SetConfig+0x27e>
 800395c:	2302      	movs	r3, #2
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003962:	e0d2      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003964:	2304      	movs	r3, #4
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800396a:	e0ce      	b.n	8003b0a <UART_SetConfig+0x27e>
 800396c:	2308      	movs	r3, #8
 800396e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003972:	e0ca      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003974:	2310      	movs	r3, #16
 8003976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800397a:	e0c6      	b.n	8003b0a <UART_SetConfig+0x27e>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a7d      	ldr	r2, [pc, #500]	@ (8003b78 <UART_SetConfig+0x2ec>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d138      	bne.n	80039f8 <UART_SetConfig+0x16c>
 8003986:	4b7b      	ldr	r3, [pc, #492]	@ (8003b74 <UART_SetConfig+0x2e8>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398c:	f003 030c 	and.w	r3, r3, #12
 8003990:	2b0c      	cmp	r3, #12
 8003992:	d82d      	bhi.n	80039f0 <UART_SetConfig+0x164>
 8003994:	a201      	add	r2, pc, #4	@ (adr r2, 800399c <UART_SetConfig+0x110>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	080039f1 	.word	0x080039f1
 80039a4:	080039f1 	.word	0x080039f1
 80039a8:	080039f1 	.word	0x080039f1
 80039ac:	080039e1 	.word	0x080039e1
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039f1 	.word	0x080039f1
 80039b8:	080039f1 	.word	0x080039f1
 80039bc:	080039d9 	.word	0x080039d9
 80039c0:	080039f1 	.word	0x080039f1
 80039c4:	080039f1 	.word	0x080039f1
 80039c8:	080039f1 	.word	0x080039f1
 80039cc:	080039e9 	.word	0x080039e9
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039d6:	e098      	b.n	8003b0a <UART_SetConfig+0x27e>
 80039d8:	2302      	movs	r3, #2
 80039da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039de:	e094      	b.n	8003b0a <UART_SetConfig+0x27e>
 80039e0:	2304      	movs	r3, #4
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039e6:	e090      	b.n	8003b0a <UART_SetConfig+0x27e>
 80039e8:	2308      	movs	r3, #8
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ee:	e08c      	b.n	8003b0a <UART_SetConfig+0x27e>
 80039f0:	2310      	movs	r3, #16
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f6:	e088      	b.n	8003b0a <UART_SetConfig+0x27e>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a5f      	ldr	r2, [pc, #380]	@ (8003b7c <UART_SetConfig+0x2f0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d125      	bne.n	8003a4e <UART_SetConfig+0x1c2>
 8003a02:	4b5c      	ldr	r3, [pc, #368]	@ (8003b74 <UART_SetConfig+0x2e8>)
 8003a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003a0c:	2b30      	cmp	r3, #48	@ 0x30
 8003a0e:	d016      	beq.n	8003a3e <UART_SetConfig+0x1b2>
 8003a10:	2b30      	cmp	r3, #48	@ 0x30
 8003a12:	d818      	bhi.n	8003a46 <UART_SetConfig+0x1ba>
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d00a      	beq.n	8003a2e <UART_SetConfig+0x1a2>
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d814      	bhi.n	8003a46 <UART_SetConfig+0x1ba>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <UART_SetConfig+0x19a>
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d008      	beq.n	8003a36 <UART_SetConfig+0x1aa>
 8003a24:	e00f      	b.n	8003a46 <UART_SetConfig+0x1ba>
 8003a26:	2300      	movs	r3, #0
 8003a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a2c:	e06d      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a34:	e069      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003a36:	2304      	movs	r3, #4
 8003a38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a3c:	e065      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003a3e:	2308      	movs	r3, #8
 8003a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a44:	e061      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003a46:	2310      	movs	r3, #16
 8003a48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a4c:	e05d      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a4b      	ldr	r2, [pc, #300]	@ (8003b80 <UART_SetConfig+0x2f4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d125      	bne.n	8003aa4 <UART_SetConfig+0x218>
 8003a58:	4b46      	ldr	r3, [pc, #280]	@ (8003b74 <UART_SetConfig+0x2e8>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a62:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a64:	d016      	beq.n	8003a94 <UART_SetConfig+0x208>
 8003a66:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a68:	d818      	bhi.n	8003a9c <UART_SetConfig+0x210>
 8003a6a:	2b80      	cmp	r3, #128	@ 0x80
 8003a6c:	d00a      	beq.n	8003a84 <UART_SetConfig+0x1f8>
 8003a6e:	2b80      	cmp	r3, #128	@ 0x80
 8003a70:	d814      	bhi.n	8003a9c <UART_SetConfig+0x210>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <UART_SetConfig+0x1f0>
 8003a76:	2b40      	cmp	r3, #64	@ 0x40
 8003a78:	d008      	beq.n	8003a8c <UART_SetConfig+0x200>
 8003a7a:	e00f      	b.n	8003a9c <UART_SetConfig+0x210>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a82:	e042      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003a84:	2302      	movs	r3, #2
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a8a:	e03e      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a92:	e03a      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003a94:	2308      	movs	r3, #8
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a9a:	e036      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aa2:	e032      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a30      	ldr	r2, [pc, #192]	@ (8003b6c <UART_SetConfig+0x2e0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d12a      	bne.n	8003b04 <UART_SetConfig+0x278>
 8003aae:	4b31      	ldr	r3, [pc, #196]	@ (8003b74 <UART_SetConfig+0x2e8>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ab8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003abc:	d01a      	beq.n	8003af4 <UART_SetConfig+0x268>
 8003abe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ac2:	d81b      	bhi.n	8003afc <UART_SetConfig+0x270>
 8003ac4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ac8:	d00c      	beq.n	8003ae4 <UART_SetConfig+0x258>
 8003aca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ace:	d815      	bhi.n	8003afc <UART_SetConfig+0x270>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <UART_SetConfig+0x250>
 8003ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad8:	d008      	beq.n	8003aec <UART_SetConfig+0x260>
 8003ada:	e00f      	b.n	8003afc <UART_SetConfig+0x270>
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae2:	e012      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aea:	e00e      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003aec:	2304      	movs	r3, #4
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003af2:	e00a      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003af4:	2308      	movs	r3, #8
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003afa:	e006      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003afc:	2310      	movs	r3, #16
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b02:	e002      	b.n	8003b0a <UART_SetConfig+0x27e>
 8003b04:	2310      	movs	r3, #16
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a17      	ldr	r2, [pc, #92]	@ (8003b6c <UART_SetConfig+0x2e0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	f040 80a8 	bne.w	8003c66 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d834      	bhi.n	8003b88 <UART_SetConfig+0x2fc>
 8003b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b24 <UART_SetConfig+0x298>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b49 	.word	0x08003b49
 8003b28:	08003b89 	.word	0x08003b89
 8003b2c:	08003b51 	.word	0x08003b51
 8003b30:	08003b89 	.word	0x08003b89
 8003b34:	08003b57 	.word	0x08003b57
 8003b38:	08003b89 	.word	0x08003b89
 8003b3c:	08003b89 	.word	0x08003b89
 8003b40:	08003b89 	.word	0x08003b89
 8003b44:	08003b5f 	.word	0x08003b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b48:	f7fe ff70 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b4e:	e021      	b.n	8003b94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b50:	4b0c      	ldr	r3, [pc, #48]	@ (8003b84 <UART_SetConfig+0x2f8>)
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b54:	e01e      	b.n	8003b94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b56:	f7fe fefb 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 8003b5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b5c:	e01a      	b.n	8003b94 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b64:	e016      	b.n	8003b94 <UART_SetConfig+0x308>
 8003b66:	bf00      	nop
 8003b68:	cfff69f3 	.word	0xcfff69f3
 8003b6c:	40008000 	.word	0x40008000
 8003b70:	40013800 	.word	0x40013800
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40004400 	.word	0x40004400
 8003b7c:	40004800 	.word	0x40004800
 8003b80:	40004c00 	.word	0x40004c00
 8003b84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 812a 	beq.w	8003df0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	4a9e      	ldr	r2, [pc, #632]	@ (8003e1c <UART_SetConfig+0x590>)
 8003ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4413      	add	r3, r2
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d305      	bcc.n	8003bcc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d903      	bls.n	8003bd4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003bd2:	e10d      	b.n	8003df0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	60fa      	str	r2, [r7, #12]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	4a8e      	ldr	r2, [pc, #568]	@ (8003e1c <UART_SetConfig+0x590>)
 8003be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2200      	movs	r2, #0
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bf6:	f7fc fb63 	bl	80002c0 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4610      	mov	r0, r2
 8003c00:	4619      	mov	r1, r3
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	020b      	lsls	r3, r1, #8
 8003c0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c10:	0202      	lsls	r2, r0, #8
 8003c12:	6979      	ldr	r1, [r7, #20]
 8003c14:	6849      	ldr	r1, [r1, #4]
 8003c16:	0849      	lsrs	r1, r1, #1
 8003c18:	2000      	movs	r0, #0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	4605      	mov	r5, r0
 8003c1e:	eb12 0804 	adds.w	r8, r2, r4
 8003c22:	eb43 0905 	adc.w	r9, r3, r5
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	469a      	mov	sl, r3
 8003c2e:	4693      	mov	fp, r2
 8003c30:	4652      	mov	r2, sl
 8003c32:	465b      	mov	r3, fp
 8003c34:	4640      	mov	r0, r8
 8003c36:	4649      	mov	r1, r9
 8003c38:	f7fc fb42 	bl	80002c0 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c4a:	d308      	bcc.n	8003c5e <UART_SetConfig+0x3d2>
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c52:	d204      	bcs.n	8003c5e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	e0c8      	b.n	8003df0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c64:	e0c4      	b.n	8003df0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c6e:	d167      	bne.n	8003d40 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003c70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d828      	bhi.n	8003cca <UART_SetConfig+0x43e>
 8003c78:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <UART_SetConfig+0x3f4>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003cb5 	.word	0x08003cb5
 8003c8c:	08003ccb 	.word	0x08003ccb
 8003c90:	08003cbb 	.word	0x08003cbb
 8003c94:	08003ccb 	.word	0x08003ccb
 8003c98:	08003ccb 	.word	0x08003ccb
 8003c9c:	08003ccb 	.word	0x08003ccb
 8003ca0:	08003cc3 	.word	0x08003cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7fe fec2 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003ca8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003caa:	e014      	b.n	8003cd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cac:	f7fe fed4 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8003cb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cb2:	e010      	b.n	8003cd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8003e20 <UART_SetConfig+0x594>)
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cb8:	e00d      	b.n	8003cd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cba:	f7fe fe49 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 8003cbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cc0:	e009      	b.n	8003cd6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cc8:	e005      	b.n	8003cd6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003cd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8089 	beq.w	8003df0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	4a4e      	ldr	r2, [pc, #312]	@ (8003e1c <UART_SetConfig+0x590>)
 8003ce4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cf0:	005a      	lsls	r2, r3, #1
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	441a      	add	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	d916      	bls.n	8003d38 <UART_SetConfig+0x4ac>
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d10:	d212      	bcs.n	8003d38 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f023 030f 	bic.w	r3, r3, #15
 8003d1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	8bfb      	ldrh	r3, [r7, #30]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	8bfa      	ldrh	r2, [r7, #30]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	e05b      	b.n	8003df0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d3e:	e057      	b.n	8003df0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d828      	bhi.n	8003d9a <UART_SetConfig+0x50e>
 8003d48:	a201      	add	r2, pc, #4	@ (adr r2, 8003d50 <UART_SetConfig+0x4c4>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d75 	.word	0x08003d75
 8003d54:	08003d7d 	.word	0x08003d7d
 8003d58:	08003d85 	.word	0x08003d85
 8003d5c:	08003d9b 	.word	0x08003d9b
 8003d60:	08003d8b 	.word	0x08003d8b
 8003d64:	08003d9b 	.word	0x08003d9b
 8003d68:	08003d9b 	.word	0x08003d9b
 8003d6c:	08003d9b 	.word	0x08003d9b
 8003d70:	08003d93 	.word	0x08003d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d74:	f7fe fe5a 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003d78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d7a:	e014      	b.n	8003da6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d7c:	f7fe fe6c 	bl	8002a58 <HAL_RCC_GetPCLK2Freq>
 8003d80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d82:	e010      	b.n	8003da6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d84:	4b26      	ldr	r3, [pc, #152]	@ (8003e20 <UART_SetConfig+0x594>)
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d88:	e00d      	b.n	8003da6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8a:	f7fe fde1 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 8003d8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d90:	e009      	b.n	8003da6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d98:	e005      	b.n	8003da6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003da4:	bf00      	nop
    }

    if (pclk != 0U)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d021      	beq.n	8003df0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e1c <UART_SetConfig+0x590>)
 8003db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003db6:	461a      	mov	r2, r3
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	441a      	add	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	d909      	bls.n	8003dea <UART_SetConfig+0x55e>
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ddc:	d205      	bcs.n	8003dea <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	e002      	b.n	8003df0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2200      	movs	r2, #0
 8003e04:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3730      	adds	r7, #48	@ 0x30
 8003e14:	46bd      	mov	sp, r7
 8003e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1a:	bf00      	nop
 8003e1c:	08004e18 	.word	0x08004e18
 8003e20:	00f42400 	.word	0x00f42400

08003e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01a      	beq.n	8003f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f22:	d10a      	bne.n	8003f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b098      	sub	sp, #96	@ 0x60
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f78:	f7fd f8c6 	bl	8001108 <HAL_GetTick>
 8003f7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d12f      	bne.n	8003fec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f94:	2200      	movs	r2, #0
 8003f96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f88e 	bl	80040bc <UART_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d022      	beq.n	8003fec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e063      	b.n	80040b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d149      	bne.n	800408e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ffa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004002:	2200      	movs	r2, #0
 8004004:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f857 	bl	80040bc <UART_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d03c      	beq.n	800408e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	623b      	str	r3, [r7, #32]
   return(result);
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004028:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004032:	633b      	str	r3, [r7, #48]	@ 0x30
 8004034:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e6      	bne.n	8004014 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	60fb      	str	r3, [r7, #12]
   return(result);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004066:	61fa      	str	r2, [r7, #28]
 8004068:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	69b9      	ldr	r1, [r7, #24]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	617b      	str	r3, [r7, #20]
   return(result);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2220      	movs	r2, #32
 800407e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e012      	b.n	80040b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3758      	adds	r7, #88	@ 0x58
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	603b      	str	r3, [r7, #0]
 80040c8:	4613      	mov	r3, r2
 80040ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040cc:	e04f      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040d4:	d04b      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d6:	f7fd f817 	bl	8001108 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d302      	bcc.n	80040ec <UART_WaitOnFlagUntilTimeout+0x30>
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e04e      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d037      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b80      	cmp	r3, #128	@ 0x80
 8004102:	d034      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b40      	cmp	r3, #64	@ 0x40
 8004108:	d031      	beq.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b08      	cmp	r3, #8
 8004116:	d110      	bne.n	800413a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2208      	movs	r2, #8
 800411e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f838 	bl	8004196 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2208      	movs	r2, #8
 800412a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e029      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004148:	d111      	bne.n	800416e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004152:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f81e 	bl	8004196 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e00f      	b.n	800418e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4013      	ands	r3, r2
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	429a      	cmp	r2, r3
 800417c:	bf0c      	ite	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	2300      	movne	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	461a      	mov	r2, r3
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	429a      	cmp	r2, r3
 800418a:	d0a0      	beq.n	80040ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004196:	b480      	push	{r7}
 8004198:	b095      	sub	sp, #84	@ 0x54
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80041be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e6      	bne.n	800419e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3308      	adds	r3, #8
 80041d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	61fb      	str	r3, [r7, #28]
   return(result);
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e6:	f023 0301 	bic.w	r3, r3, #1
 80041ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3308      	adds	r3, #8
 80041f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e3      	bne.n	80041d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d118      	bne.n	8004242 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	e853 3f00 	ldrex	r3, [r3]
 800421c:	60bb      	str	r3, [r7, #8]
   return(result);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f023 0310 	bic.w	r3, r3, #16
 8004224:	647b      	str	r3, [r7, #68]	@ 0x44
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	6979      	ldr	r1, [r7, #20]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	613b      	str	r3, [r7, #16]
   return(result);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1e6      	bne.n	8004210 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004256:	bf00      	nop
 8004258:	3754      	adds	r7, #84	@ 0x54
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004262:	b480      	push	{r7}
 8004264:	b085      	sub	sp, #20
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_UARTEx_DisableFifoMode+0x16>
 8004274:	2302      	movs	r3, #2
 8004276:	e027      	b.n	80042c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	@ 0x24
 8004284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80042a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e02d      	b.n	8004348 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2224      	movs	r2, #36	@ 0x24
 80042f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0201 	bic.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f84f 	bl	80043cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004364:	2302      	movs	r3, #2
 8004366:	e02d      	b.n	80043c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	@ 0x24
 8004374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f811 	bl	80043cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d108      	bne.n	80043ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043ec:	e031      	b.n	8004452 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043ee:	2308      	movs	r3, #8
 80043f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043f2:	2308      	movs	r3, #8
 80043f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	0e5b      	lsrs	r3, r3, #25
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	0f5b      	lsrs	r3, r3, #29
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004416:	7bbb      	ldrb	r3, [r7, #14]
 8004418:	7b3a      	ldrb	r2, [r7, #12]
 800441a:	4911      	ldr	r1, [pc, #68]	@ (8004460 <UARTEx_SetNbDataToProcess+0x94>)
 800441c:	5c8a      	ldrb	r2, [r1, r2]
 800441e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004422:	7b3a      	ldrb	r2, [r7, #12]
 8004424:	490f      	ldr	r1, [pc, #60]	@ (8004464 <UARTEx_SetNbDataToProcess+0x98>)
 8004426:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004428:	fb93 f3f2 	sdiv	r3, r3, r2
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	7b7a      	ldrb	r2, [r7, #13]
 8004438:	4909      	ldr	r1, [pc, #36]	@ (8004460 <UARTEx_SetNbDataToProcess+0x94>)
 800443a:	5c8a      	ldrb	r2, [r1, r2]
 800443c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004440:	7b7a      	ldrb	r2, [r7, #13]
 8004442:	4908      	ldr	r1, [pc, #32]	@ (8004464 <UARTEx_SetNbDataToProcess+0x98>)
 8004444:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004446:	fb93 f3f2 	sdiv	r3, r3, r2
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	08004e30 	.word	0x08004e30
 8004464:	08004e38 	.word	0x08004e38

08004468 <siprintf>:
 8004468:	b40e      	push	{r1, r2, r3}
 800446a:	b500      	push	{lr}
 800446c:	b09c      	sub	sp, #112	@ 0x70
 800446e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004470:	9002      	str	r0, [sp, #8]
 8004472:	9006      	str	r0, [sp, #24]
 8004474:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004478:	4809      	ldr	r0, [pc, #36]	@ (80044a0 <siprintf+0x38>)
 800447a:	9107      	str	r1, [sp, #28]
 800447c:	9104      	str	r1, [sp, #16]
 800447e:	4909      	ldr	r1, [pc, #36]	@ (80044a4 <siprintf+0x3c>)
 8004480:	f853 2b04 	ldr.w	r2, [r3], #4
 8004484:	9105      	str	r1, [sp, #20]
 8004486:	6800      	ldr	r0, [r0, #0]
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	a902      	add	r1, sp, #8
 800448c:	f000 f994 	bl	80047b8 <_svfiprintf_r>
 8004490:	9b02      	ldr	r3, [sp, #8]
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	b01c      	add	sp, #112	@ 0x70
 8004498:	f85d eb04 	ldr.w	lr, [sp], #4
 800449c:	b003      	add	sp, #12
 800449e:	4770      	bx	lr
 80044a0:	2000000c 	.word	0x2000000c
 80044a4:	ffff0208 	.word	0xffff0208

080044a8 <memset>:
 80044a8:	4402      	add	r2, r0
 80044aa:	4603      	mov	r3, r0
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d100      	bne.n	80044b2 <memset+0xa>
 80044b0:	4770      	bx	lr
 80044b2:	f803 1b01 	strb.w	r1, [r3], #1
 80044b6:	e7f9      	b.n	80044ac <memset+0x4>

080044b8 <__errno>:
 80044b8:	4b01      	ldr	r3, [pc, #4]	@ (80044c0 <__errno+0x8>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	2000000c 	.word	0x2000000c

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4d0d      	ldr	r5, [pc, #52]	@ (80044fc <__libc_init_array+0x38>)
 80044c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004500 <__libc_init_array+0x3c>)
 80044ca:	1b64      	subs	r4, r4, r5
 80044cc:	10a4      	asrs	r4, r4, #2
 80044ce:	2600      	movs	r6, #0
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004504 <__libc_init_array+0x40>)
 80044d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004508 <__libc_init_array+0x44>)
 80044d8:	f000 fc66 	bl	8004da8 <_init>
 80044dc:	1b64      	subs	r4, r4, r5
 80044de:	10a4      	asrs	r4, r4, #2
 80044e0:	2600      	movs	r6, #0
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	08004e7c 	.word	0x08004e7c
 8004500:	08004e7c 	.word	0x08004e7c
 8004504:	08004e7c 	.word	0x08004e7c
 8004508:	08004e80 	.word	0x08004e80

0800450c <__retarget_lock_acquire_recursive>:
 800450c:	4770      	bx	lr

0800450e <__retarget_lock_release_recursive>:
 800450e:	4770      	bx	lr

08004510 <_free_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4605      	mov	r5, r0
 8004514:	2900      	cmp	r1, #0
 8004516:	d041      	beq.n	800459c <_free_r+0x8c>
 8004518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800451c:	1f0c      	subs	r4, r1, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	bfb8      	it	lt
 8004522:	18e4      	addlt	r4, r4, r3
 8004524:	f000 f8e0 	bl	80046e8 <__malloc_lock>
 8004528:	4a1d      	ldr	r2, [pc, #116]	@ (80045a0 <_free_r+0x90>)
 800452a:	6813      	ldr	r3, [r2, #0]
 800452c:	b933      	cbnz	r3, 800453c <_free_r+0x2c>
 800452e:	6063      	str	r3, [r4, #4]
 8004530:	6014      	str	r4, [r2, #0]
 8004532:	4628      	mov	r0, r5
 8004534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004538:	f000 b8dc 	b.w	80046f4 <__malloc_unlock>
 800453c:	42a3      	cmp	r3, r4
 800453e:	d908      	bls.n	8004552 <_free_r+0x42>
 8004540:	6820      	ldr	r0, [r4, #0]
 8004542:	1821      	adds	r1, r4, r0
 8004544:	428b      	cmp	r3, r1
 8004546:	bf01      	itttt	eq
 8004548:	6819      	ldreq	r1, [r3, #0]
 800454a:	685b      	ldreq	r3, [r3, #4]
 800454c:	1809      	addeq	r1, r1, r0
 800454e:	6021      	streq	r1, [r4, #0]
 8004550:	e7ed      	b.n	800452e <_free_r+0x1e>
 8004552:	461a      	mov	r2, r3
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b10b      	cbz	r3, 800455c <_free_r+0x4c>
 8004558:	42a3      	cmp	r3, r4
 800455a:	d9fa      	bls.n	8004552 <_free_r+0x42>
 800455c:	6811      	ldr	r1, [r2, #0]
 800455e:	1850      	adds	r0, r2, r1
 8004560:	42a0      	cmp	r0, r4
 8004562:	d10b      	bne.n	800457c <_free_r+0x6c>
 8004564:	6820      	ldr	r0, [r4, #0]
 8004566:	4401      	add	r1, r0
 8004568:	1850      	adds	r0, r2, r1
 800456a:	4283      	cmp	r3, r0
 800456c:	6011      	str	r1, [r2, #0]
 800456e:	d1e0      	bne.n	8004532 <_free_r+0x22>
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	6053      	str	r3, [r2, #4]
 8004576:	4408      	add	r0, r1
 8004578:	6010      	str	r0, [r2, #0]
 800457a:	e7da      	b.n	8004532 <_free_r+0x22>
 800457c:	d902      	bls.n	8004584 <_free_r+0x74>
 800457e:	230c      	movs	r3, #12
 8004580:	602b      	str	r3, [r5, #0]
 8004582:	e7d6      	b.n	8004532 <_free_r+0x22>
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	1821      	adds	r1, r4, r0
 8004588:	428b      	cmp	r3, r1
 800458a:	bf04      	itt	eq
 800458c:	6819      	ldreq	r1, [r3, #0]
 800458e:	685b      	ldreq	r3, [r3, #4]
 8004590:	6063      	str	r3, [r4, #4]
 8004592:	bf04      	itt	eq
 8004594:	1809      	addeq	r1, r1, r0
 8004596:	6021      	streq	r1, [r4, #0]
 8004598:	6054      	str	r4, [r2, #4]
 800459a:	e7ca      	b.n	8004532 <_free_r+0x22>
 800459c:	bd38      	pop	{r3, r4, r5, pc}
 800459e:	bf00      	nop
 80045a0:	200002ec 	.word	0x200002ec

080045a4 <sbrk_aligned>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	4e0f      	ldr	r6, [pc, #60]	@ (80045e4 <sbrk_aligned+0x40>)
 80045a8:	460c      	mov	r4, r1
 80045aa:	6831      	ldr	r1, [r6, #0]
 80045ac:	4605      	mov	r5, r0
 80045ae:	b911      	cbnz	r1, 80045b6 <sbrk_aligned+0x12>
 80045b0:	f000 fba6 	bl	8004d00 <_sbrk_r>
 80045b4:	6030      	str	r0, [r6, #0]
 80045b6:	4621      	mov	r1, r4
 80045b8:	4628      	mov	r0, r5
 80045ba:	f000 fba1 	bl	8004d00 <_sbrk_r>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	d103      	bne.n	80045ca <sbrk_aligned+0x26>
 80045c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80045c6:	4620      	mov	r0, r4
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
 80045ca:	1cc4      	adds	r4, r0, #3
 80045cc:	f024 0403 	bic.w	r4, r4, #3
 80045d0:	42a0      	cmp	r0, r4
 80045d2:	d0f8      	beq.n	80045c6 <sbrk_aligned+0x22>
 80045d4:	1a21      	subs	r1, r4, r0
 80045d6:	4628      	mov	r0, r5
 80045d8:	f000 fb92 	bl	8004d00 <_sbrk_r>
 80045dc:	3001      	adds	r0, #1
 80045de:	d1f2      	bne.n	80045c6 <sbrk_aligned+0x22>
 80045e0:	e7ef      	b.n	80045c2 <sbrk_aligned+0x1e>
 80045e2:	bf00      	nop
 80045e4:	200002e8 	.word	0x200002e8

080045e8 <_malloc_r>:
 80045e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ec:	1ccd      	adds	r5, r1, #3
 80045ee:	f025 0503 	bic.w	r5, r5, #3
 80045f2:	3508      	adds	r5, #8
 80045f4:	2d0c      	cmp	r5, #12
 80045f6:	bf38      	it	cc
 80045f8:	250c      	movcc	r5, #12
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	4606      	mov	r6, r0
 80045fe:	db01      	blt.n	8004604 <_malloc_r+0x1c>
 8004600:	42a9      	cmp	r1, r5
 8004602:	d904      	bls.n	800460e <_malloc_r+0x26>
 8004604:	230c      	movs	r3, #12
 8004606:	6033      	str	r3, [r6, #0]
 8004608:	2000      	movs	r0, #0
 800460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800460e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046e4 <_malloc_r+0xfc>
 8004612:	f000 f869 	bl	80046e8 <__malloc_lock>
 8004616:	f8d8 3000 	ldr.w	r3, [r8]
 800461a:	461c      	mov	r4, r3
 800461c:	bb44      	cbnz	r4, 8004670 <_malloc_r+0x88>
 800461e:	4629      	mov	r1, r5
 8004620:	4630      	mov	r0, r6
 8004622:	f7ff ffbf 	bl	80045a4 <sbrk_aligned>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	4604      	mov	r4, r0
 800462a:	d158      	bne.n	80046de <_malloc_r+0xf6>
 800462c:	f8d8 4000 	ldr.w	r4, [r8]
 8004630:	4627      	mov	r7, r4
 8004632:	2f00      	cmp	r7, #0
 8004634:	d143      	bne.n	80046be <_malloc_r+0xd6>
 8004636:	2c00      	cmp	r4, #0
 8004638:	d04b      	beq.n	80046d2 <_malloc_r+0xea>
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	4639      	mov	r1, r7
 800463e:	4630      	mov	r0, r6
 8004640:	eb04 0903 	add.w	r9, r4, r3
 8004644:	f000 fb5c 	bl	8004d00 <_sbrk_r>
 8004648:	4581      	cmp	r9, r0
 800464a:	d142      	bne.n	80046d2 <_malloc_r+0xea>
 800464c:	6821      	ldr	r1, [r4, #0]
 800464e:	1a6d      	subs	r5, r5, r1
 8004650:	4629      	mov	r1, r5
 8004652:	4630      	mov	r0, r6
 8004654:	f7ff ffa6 	bl	80045a4 <sbrk_aligned>
 8004658:	3001      	adds	r0, #1
 800465a:	d03a      	beq.n	80046d2 <_malloc_r+0xea>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	442b      	add	r3, r5
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	f8d8 3000 	ldr.w	r3, [r8]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	bb62      	cbnz	r2, 80046c4 <_malloc_r+0xdc>
 800466a:	f8c8 7000 	str.w	r7, [r8]
 800466e:	e00f      	b.n	8004690 <_malloc_r+0xa8>
 8004670:	6822      	ldr	r2, [r4, #0]
 8004672:	1b52      	subs	r2, r2, r5
 8004674:	d420      	bmi.n	80046b8 <_malloc_r+0xd0>
 8004676:	2a0b      	cmp	r2, #11
 8004678:	d917      	bls.n	80046aa <_malloc_r+0xc2>
 800467a:	1961      	adds	r1, r4, r5
 800467c:	42a3      	cmp	r3, r4
 800467e:	6025      	str	r5, [r4, #0]
 8004680:	bf18      	it	ne
 8004682:	6059      	strne	r1, [r3, #4]
 8004684:	6863      	ldr	r3, [r4, #4]
 8004686:	bf08      	it	eq
 8004688:	f8c8 1000 	streq.w	r1, [r8]
 800468c:	5162      	str	r2, [r4, r5]
 800468e:	604b      	str	r3, [r1, #4]
 8004690:	4630      	mov	r0, r6
 8004692:	f000 f82f 	bl	80046f4 <__malloc_unlock>
 8004696:	f104 000b 	add.w	r0, r4, #11
 800469a:	1d23      	adds	r3, r4, #4
 800469c:	f020 0007 	bic.w	r0, r0, #7
 80046a0:	1ac2      	subs	r2, r0, r3
 80046a2:	bf1c      	itt	ne
 80046a4:	1a1b      	subne	r3, r3, r0
 80046a6:	50a3      	strne	r3, [r4, r2]
 80046a8:	e7af      	b.n	800460a <_malloc_r+0x22>
 80046aa:	6862      	ldr	r2, [r4, #4]
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	bf0c      	ite	eq
 80046b0:	f8c8 2000 	streq.w	r2, [r8]
 80046b4:	605a      	strne	r2, [r3, #4]
 80046b6:	e7eb      	b.n	8004690 <_malloc_r+0xa8>
 80046b8:	4623      	mov	r3, r4
 80046ba:	6864      	ldr	r4, [r4, #4]
 80046bc:	e7ae      	b.n	800461c <_malloc_r+0x34>
 80046be:	463c      	mov	r4, r7
 80046c0:	687f      	ldr	r7, [r7, #4]
 80046c2:	e7b6      	b.n	8004632 <_malloc_r+0x4a>
 80046c4:	461a      	mov	r2, r3
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	42a3      	cmp	r3, r4
 80046ca:	d1fb      	bne.n	80046c4 <_malloc_r+0xdc>
 80046cc:	2300      	movs	r3, #0
 80046ce:	6053      	str	r3, [r2, #4]
 80046d0:	e7de      	b.n	8004690 <_malloc_r+0xa8>
 80046d2:	230c      	movs	r3, #12
 80046d4:	6033      	str	r3, [r6, #0]
 80046d6:	4630      	mov	r0, r6
 80046d8:	f000 f80c 	bl	80046f4 <__malloc_unlock>
 80046dc:	e794      	b.n	8004608 <_malloc_r+0x20>
 80046de:	6005      	str	r5, [r0, #0]
 80046e0:	e7d6      	b.n	8004690 <_malloc_r+0xa8>
 80046e2:	bf00      	nop
 80046e4:	200002ec 	.word	0x200002ec

080046e8 <__malloc_lock>:
 80046e8:	4801      	ldr	r0, [pc, #4]	@ (80046f0 <__malloc_lock+0x8>)
 80046ea:	f7ff bf0f 	b.w	800450c <__retarget_lock_acquire_recursive>
 80046ee:	bf00      	nop
 80046f0:	200002e4 	.word	0x200002e4

080046f4 <__malloc_unlock>:
 80046f4:	4801      	ldr	r0, [pc, #4]	@ (80046fc <__malloc_unlock+0x8>)
 80046f6:	f7ff bf0a 	b.w	800450e <__retarget_lock_release_recursive>
 80046fa:	bf00      	nop
 80046fc:	200002e4 	.word	0x200002e4

08004700 <__ssputs_r>:
 8004700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004704:	688e      	ldr	r6, [r1, #8]
 8004706:	461f      	mov	r7, r3
 8004708:	42be      	cmp	r6, r7
 800470a:	680b      	ldr	r3, [r1, #0]
 800470c:	4682      	mov	sl, r0
 800470e:	460c      	mov	r4, r1
 8004710:	4690      	mov	r8, r2
 8004712:	d82d      	bhi.n	8004770 <__ssputs_r+0x70>
 8004714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004718:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800471c:	d026      	beq.n	800476c <__ssputs_r+0x6c>
 800471e:	6965      	ldr	r5, [r4, #20]
 8004720:	6909      	ldr	r1, [r1, #16]
 8004722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004726:	eba3 0901 	sub.w	r9, r3, r1
 800472a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800472e:	1c7b      	adds	r3, r7, #1
 8004730:	444b      	add	r3, r9
 8004732:	106d      	asrs	r5, r5, #1
 8004734:	429d      	cmp	r5, r3
 8004736:	bf38      	it	cc
 8004738:	461d      	movcc	r5, r3
 800473a:	0553      	lsls	r3, r2, #21
 800473c:	d527      	bpl.n	800478e <__ssputs_r+0x8e>
 800473e:	4629      	mov	r1, r5
 8004740:	f7ff ff52 	bl	80045e8 <_malloc_r>
 8004744:	4606      	mov	r6, r0
 8004746:	b360      	cbz	r0, 80047a2 <__ssputs_r+0xa2>
 8004748:	6921      	ldr	r1, [r4, #16]
 800474a:	464a      	mov	r2, r9
 800474c:	f000 fae8 	bl	8004d20 <memcpy>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800475a:	81a3      	strh	r3, [r4, #12]
 800475c:	6126      	str	r6, [r4, #16]
 800475e:	6165      	str	r5, [r4, #20]
 8004760:	444e      	add	r6, r9
 8004762:	eba5 0509 	sub.w	r5, r5, r9
 8004766:	6026      	str	r6, [r4, #0]
 8004768:	60a5      	str	r5, [r4, #8]
 800476a:	463e      	mov	r6, r7
 800476c:	42be      	cmp	r6, r7
 800476e:	d900      	bls.n	8004772 <__ssputs_r+0x72>
 8004770:	463e      	mov	r6, r7
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	4632      	mov	r2, r6
 8004776:	4641      	mov	r1, r8
 8004778:	f000 faa8 	bl	8004ccc <memmove>
 800477c:	68a3      	ldr	r3, [r4, #8]
 800477e:	1b9b      	subs	r3, r3, r6
 8004780:	60a3      	str	r3, [r4, #8]
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	4433      	add	r3, r6
 8004786:	6023      	str	r3, [r4, #0]
 8004788:	2000      	movs	r0, #0
 800478a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478e:	462a      	mov	r2, r5
 8004790:	f000 fad4 	bl	8004d3c <_realloc_r>
 8004794:	4606      	mov	r6, r0
 8004796:	2800      	cmp	r0, #0
 8004798:	d1e0      	bne.n	800475c <__ssputs_r+0x5c>
 800479a:	6921      	ldr	r1, [r4, #16]
 800479c:	4650      	mov	r0, sl
 800479e:	f7ff feb7 	bl	8004510 <_free_r>
 80047a2:	230c      	movs	r3, #12
 80047a4:	f8ca 3000 	str.w	r3, [sl]
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047b4:	e7e9      	b.n	800478a <__ssputs_r+0x8a>
	...

080047b8 <_svfiprintf_r>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	4698      	mov	r8, r3
 80047be:	898b      	ldrh	r3, [r1, #12]
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	b09d      	sub	sp, #116	@ 0x74
 80047c4:	4607      	mov	r7, r0
 80047c6:	460d      	mov	r5, r1
 80047c8:	4614      	mov	r4, r2
 80047ca:	d510      	bpl.n	80047ee <_svfiprintf_r+0x36>
 80047cc:	690b      	ldr	r3, [r1, #16]
 80047ce:	b973      	cbnz	r3, 80047ee <_svfiprintf_r+0x36>
 80047d0:	2140      	movs	r1, #64	@ 0x40
 80047d2:	f7ff ff09 	bl	80045e8 <_malloc_r>
 80047d6:	6028      	str	r0, [r5, #0]
 80047d8:	6128      	str	r0, [r5, #16]
 80047da:	b930      	cbnz	r0, 80047ea <_svfiprintf_r+0x32>
 80047dc:	230c      	movs	r3, #12
 80047de:	603b      	str	r3, [r7, #0]
 80047e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047e4:	b01d      	add	sp, #116	@ 0x74
 80047e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ea:	2340      	movs	r3, #64	@ 0x40
 80047ec:	616b      	str	r3, [r5, #20]
 80047ee:	2300      	movs	r3, #0
 80047f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80047f2:	2320      	movs	r3, #32
 80047f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80047fc:	2330      	movs	r3, #48	@ 0x30
 80047fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800499c <_svfiprintf_r+0x1e4>
 8004802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004806:	f04f 0901 	mov.w	r9, #1
 800480a:	4623      	mov	r3, r4
 800480c:	469a      	mov	sl, r3
 800480e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004812:	b10a      	cbz	r2, 8004818 <_svfiprintf_r+0x60>
 8004814:	2a25      	cmp	r2, #37	@ 0x25
 8004816:	d1f9      	bne.n	800480c <_svfiprintf_r+0x54>
 8004818:	ebba 0b04 	subs.w	fp, sl, r4
 800481c:	d00b      	beq.n	8004836 <_svfiprintf_r+0x7e>
 800481e:	465b      	mov	r3, fp
 8004820:	4622      	mov	r2, r4
 8004822:	4629      	mov	r1, r5
 8004824:	4638      	mov	r0, r7
 8004826:	f7ff ff6b 	bl	8004700 <__ssputs_r>
 800482a:	3001      	adds	r0, #1
 800482c:	f000 80a7 	beq.w	800497e <_svfiprintf_r+0x1c6>
 8004830:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004832:	445a      	add	r2, fp
 8004834:	9209      	str	r2, [sp, #36]	@ 0x24
 8004836:	f89a 3000 	ldrb.w	r3, [sl]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 809f 	beq.w	800497e <_svfiprintf_r+0x1c6>
 8004840:	2300      	movs	r3, #0
 8004842:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800484a:	f10a 0a01 	add.w	sl, sl, #1
 800484e:	9304      	str	r3, [sp, #16]
 8004850:	9307      	str	r3, [sp, #28]
 8004852:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004856:	931a      	str	r3, [sp, #104]	@ 0x68
 8004858:	4654      	mov	r4, sl
 800485a:	2205      	movs	r2, #5
 800485c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004860:	484e      	ldr	r0, [pc, #312]	@ (800499c <_svfiprintf_r+0x1e4>)
 8004862:	f7fb fcdd 	bl	8000220 <memchr>
 8004866:	9a04      	ldr	r2, [sp, #16]
 8004868:	b9d8      	cbnz	r0, 80048a2 <_svfiprintf_r+0xea>
 800486a:	06d0      	lsls	r0, r2, #27
 800486c:	bf44      	itt	mi
 800486e:	2320      	movmi	r3, #32
 8004870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004874:	0711      	lsls	r1, r2, #28
 8004876:	bf44      	itt	mi
 8004878:	232b      	movmi	r3, #43	@ 0x2b
 800487a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800487e:	f89a 3000 	ldrb.w	r3, [sl]
 8004882:	2b2a      	cmp	r3, #42	@ 0x2a
 8004884:	d015      	beq.n	80048b2 <_svfiprintf_r+0xfa>
 8004886:	9a07      	ldr	r2, [sp, #28]
 8004888:	4654      	mov	r4, sl
 800488a:	2000      	movs	r0, #0
 800488c:	f04f 0c0a 	mov.w	ip, #10
 8004890:	4621      	mov	r1, r4
 8004892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004896:	3b30      	subs	r3, #48	@ 0x30
 8004898:	2b09      	cmp	r3, #9
 800489a:	d94b      	bls.n	8004934 <_svfiprintf_r+0x17c>
 800489c:	b1b0      	cbz	r0, 80048cc <_svfiprintf_r+0x114>
 800489e:	9207      	str	r2, [sp, #28]
 80048a0:	e014      	b.n	80048cc <_svfiprintf_r+0x114>
 80048a2:	eba0 0308 	sub.w	r3, r0, r8
 80048a6:	fa09 f303 	lsl.w	r3, r9, r3
 80048aa:	4313      	orrs	r3, r2
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	46a2      	mov	sl, r4
 80048b0:	e7d2      	b.n	8004858 <_svfiprintf_r+0xa0>
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	1d19      	adds	r1, r3, #4
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	9103      	str	r1, [sp, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	bfbb      	ittet	lt
 80048be:	425b      	neglt	r3, r3
 80048c0:	f042 0202 	orrlt.w	r2, r2, #2
 80048c4:	9307      	strge	r3, [sp, #28]
 80048c6:	9307      	strlt	r3, [sp, #28]
 80048c8:	bfb8      	it	lt
 80048ca:	9204      	strlt	r2, [sp, #16]
 80048cc:	7823      	ldrb	r3, [r4, #0]
 80048ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80048d0:	d10a      	bne.n	80048e8 <_svfiprintf_r+0x130>
 80048d2:	7863      	ldrb	r3, [r4, #1]
 80048d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80048d6:	d132      	bne.n	800493e <_svfiprintf_r+0x186>
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	1d1a      	adds	r2, r3, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	9203      	str	r2, [sp, #12]
 80048e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048e4:	3402      	adds	r4, #2
 80048e6:	9305      	str	r3, [sp, #20]
 80048e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80049ac <_svfiprintf_r+0x1f4>
 80048ec:	7821      	ldrb	r1, [r4, #0]
 80048ee:	2203      	movs	r2, #3
 80048f0:	4650      	mov	r0, sl
 80048f2:	f7fb fc95 	bl	8000220 <memchr>
 80048f6:	b138      	cbz	r0, 8004908 <_svfiprintf_r+0x150>
 80048f8:	9b04      	ldr	r3, [sp, #16]
 80048fa:	eba0 000a 	sub.w	r0, r0, sl
 80048fe:	2240      	movs	r2, #64	@ 0x40
 8004900:	4082      	lsls	r2, r0
 8004902:	4313      	orrs	r3, r2
 8004904:	3401      	adds	r4, #1
 8004906:	9304      	str	r3, [sp, #16]
 8004908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800490c:	4824      	ldr	r0, [pc, #144]	@ (80049a0 <_svfiprintf_r+0x1e8>)
 800490e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004912:	2206      	movs	r2, #6
 8004914:	f7fb fc84 	bl	8000220 <memchr>
 8004918:	2800      	cmp	r0, #0
 800491a:	d036      	beq.n	800498a <_svfiprintf_r+0x1d2>
 800491c:	4b21      	ldr	r3, [pc, #132]	@ (80049a4 <_svfiprintf_r+0x1ec>)
 800491e:	bb1b      	cbnz	r3, 8004968 <_svfiprintf_r+0x1b0>
 8004920:	9b03      	ldr	r3, [sp, #12]
 8004922:	3307      	adds	r3, #7
 8004924:	f023 0307 	bic.w	r3, r3, #7
 8004928:	3308      	adds	r3, #8
 800492a:	9303      	str	r3, [sp, #12]
 800492c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800492e:	4433      	add	r3, r6
 8004930:	9309      	str	r3, [sp, #36]	@ 0x24
 8004932:	e76a      	b.n	800480a <_svfiprintf_r+0x52>
 8004934:	fb0c 3202 	mla	r2, ip, r2, r3
 8004938:	460c      	mov	r4, r1
 800493a:	2001      	movs	r0, #1
 800493c:	e7a8      	b.n	8004890 <_svfiprintf_r+0xd8>
 800493e:	2300      	movs	r3, #0
 8004940:	3401      	adds	r4, #1
 8004942:	9305      	str	r3, [sp, #20]
 8004944:	4619      	mov	r1, r3
 8004946:	f04f 0c0a 	mov.w	ip, #10
 800494a:	4620      	mov	r0, r4
 800494c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004950:	3a30      	subs	r2, #48	@ 0x30
 8004952:	2a09      	cmp	r2, #9
 8004954:	d903      	bls.n	800495e <_svfiprintf_r+0x1a6>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0c6      	beq.n	80048e8 <_svfiprintf_r+0x130>
 800495a:	9105      	str	r1, [sp, #20]
 800495c:	e7c4      	b.n	80048e8 <_svfiprintf_r+0x130>
 800495e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004962:	4604      	mov	r4, r0
 8004964:	2301      	movs	r3, #1
 8004966:	e7f0      	b.n	800494a <_svfiprintf_r+0x192>
 8004968:	ab03      	add	r3, sp, #12
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	462a      	mov	r2, r5
 800496e:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <_svfiprintf_r+0x1f0>)
 8004970:	a904      	add	r1, sp, #16
 8004972:	4638      	mov	r0, r7
 8004974:	f3af 8000 	nop.w
 8004978:	1c42      	adds	r2, r0, #1
 800497a:	4606      	mov	r6, r0
 800497c:	d1d6      	bne.n	800492c <_svfiprintf_r+0x174>
 800497e:	89ab      	ldrh	r3, [r5, #12]
 8004980:	065b      	lsls	r3, r3, #25
 8004982:	f53f af2d 	bmi.w	80047e0 <_svfiprintf_r+0x28>
 8004986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004988:	e72c      	b.n	80047e4 <_svfiprintf_r+0x2c>
 800498a:	ab03      	add	r3, sp, #12
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	462a      	mov	r2, r5
 8004990:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <_svfiprintf_r+0x1f0>)
 8004992:	a904      	add	r1, sp, #16
 8004994:	4638      	mov	r0, r7
 8004996:	f000 f879 	bl	8004a8c <_printf_i>
 800499a:	e7ed      	b.n	8004978 <_svfiprintf_r+0x1c0>
 800499c:	08004e40 	.word	0x08004e40
 80049a0:	08004e4a 	.word	0x08004e4a
 80049a4:	00000000 	.word	0x00000000
 80049a8:	08004701 	.word	0x08004701
 80049ac:	08004e46 	.word	0x08004e46

080049b0 <_printf_common>:
 80049b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049b4:	4616      	mov	r6, r2
 80049b6:	4698      	mov	r8, r3
 80049b8:	688a      	ldr	r2, [r1, #8]
 80049ba:	690b      	ldr	r3, [r1, #16]
 80049bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049c0:	4293      	cmp	r3, r2
 80049c2:	bfb8      	it	lt
 80049c4:	4613      	movlt	r3, r2
 80049c6:	6033      	str	r3, [r6, #0]
 80049c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049cc:	4607      	mov	r7, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	b10a      	cbz	r2, 80049d6 <_printf_common+0x26>
 80049d2:	3301      	adds	r3, #1
 80049d4:	6033      	str	r3, [r6, #0]
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	0699      	lsls	r1, r3, #26
 80049da:	bf42      	ittt	mi
 80049dc:	6833      	ldrmi	r3, [r6, #0]
 80049de:	3302      	addmi	r3, #2
 80049e0:	6033      	strmi	r3, [r6, #0]
 80049e2:	6825      	ldr	r5, [r4, #0]
 80049e4:	f015 0506 	ands.w	r5, r5, #6
 80049e8:	d106      	bne.n	80049f8 <_printf_common+0x48>
 80049ea:	f104 0a19 	add.w	sl, r4, #25
 80049ee:	68e3      	ldr	r3, [r4, #12]
 80049f0:	6832      	ldr	r2, [r6, #0]
 80049f2:	1a9b      	subs	r3, r3, r2
 80049f4:	42ab      	cmp	r3, r5
 80049f6:	dc26      	bgt.n	8004a46 <_printf_common+0x96>
 80049f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049fc:	6822      	ldr	r2, [r4, #0]
 80049fe:	3b00      	subs	r3, #0
 8004a00:	bf18      	it	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	0692      	lsls	r2, r2, #26
 8004a06:	d42b      	bmi.n	8004a60 <_printf_common+0xb0>
 8004a08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	4638      	mov	r0, r7
 8004a10:	47c8      	blx	r9
 8004a12:	3001      	adds	r0, #1
 8004a14:	d01e      	beq.n	8004a54 <_printf_common+0xa4>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	6922      	ldr	r2, [r4, #16]
 8004a1a:	f003 0306 	and.w	r3, r3, #6
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	bf02      	ittt	eq
 8004a22:	68e5      	ldreq	r5, [r4, #12]
 8004a24:	6833      	ldreq	r3, [r6, #0]
 8004a26:	1aed      	subeq	r5, r5, r3
 8004a28:	68a3      	ldr	r3, [r4, #8]
 8004a2a:	bf0c      	ite	eq
 8004a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a30:	2500      	movne	r5, #0
 8004a32:	4293      	cmp	r3, r2
 8004a34:	bfc4      	itt	gt
 8004a36:	1a9b      	subgt	r3, r3, r2
 8004a38:	18ed      	addgt	r5, r5, r3
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	341a      	adds	r4, #26
 8004a3e:	42b5      	cmp	r5, r6
 8004a40:	d11a      	bne.n	8004a78 <_printf_common+0xc8>
 8004a42:	2000      	movs	r0, #0
 8004a44:	e008      	b.n	8004a58 <_printf_common+0xa8>
 8004a46:	2301      	movs	r3, #1
 8004a48:	4652      	mov	r2, sl
 8004a4a:	4641      	mov	r1, r8
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	47c8      	blx	r9
 8004a50:	3001      	adds	r0, #1
 8004a52:	d103      	bne.n	8004a5c <_printf_common+0xac>
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5c:	3501      	adds	r5, #1
 8004a5e:	e7c6      	b.n	80049ee <_printf_common+0x3e>
 8004a60:	18e1      	adds	r1, r4, r3
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	2030      	movs	r0, #48	@ 0x30
 8004a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a6a:	4422      	add	r2, r4
 8004a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a74:	3302      	adds	r3, #2
 8004a76:	e7c7      	b.n	8004a08 <_printf_common+0x58>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	4638      	mov	r0, r7
 8004a80:	47c8      	blx	r9
 8004a82:	3001      	adds	r0, #1
 8004a84:	d0e6      	beq.n	8004a54 <_printf_common+0xa4>
 8004a86:	3601      	adds	r6, #1
 8004a88:	e7d9      	b.n	8004a3e <_printf_common+0x8e>
	...

08004a8c <_printf_i>:
 8004a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	7e0f      	ldrb	r7, [r1, #24]
 8004a92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a94:	2f78      	cmp	r7, #120	@ 0x78
 8004a96:	4691      	mov	r9, r2
 8004a98:	4680      	mov	r8, r0
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	469a      	mov	sl, r3
 8004a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004aa2:	d807      	bhi.n	8004ab4 <_printf_i+0x28>
 8004aa4:	2f62      	cmp	r7, #98	@ 0x62
 8004aa6:	d80a      	bhi.n	8004abe <_printf_i+0x32>
 8004aa8:	2f00      	cmp	r7, #0
 8004aaa:	f000 80d2 	beq.w	8004c52 <_printf_i+0x1c6>
 8004aae:	2f58      	cmp	r7, #88	@ 0x58
 8004ab0:	f000 80b9 	beq.w	8004c26 <_printf_i+0x19a>
 8004ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004abc:	e03a      	b.n	8004b34 <_printf_i+0xa8>
 8004abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ac2:	2b15      	cmp	r3, #21
 8004ac4:	d8f6      	bhi.n	8004ab4 <_printf_i+0x28>
 8004ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8004acc <_printf_i+0x40>)
 8004ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	08004b39 	.word	0x08004b39
 8004ad4:	08004ab5 	.word	0x08004ab5
 8004ad8:	08004ab5 	.word	0x08004ab5
 8004adc:	08004ab5 	.word	0x08004ab5
 8004ae0:	08004ab5 	.word	0x08004ab5
 8004ae4:	08004b39 	.word	0x08004b39
 8004ae8:	08004ab5 	.word	0x08004ab5
 8004aec:	08004ab5 	.word	0x08004ab5
 8004af0:	08004ab5 	.word	0x08004ab5
 8004af4:	08004ab5 	.word	0x08004ab5
 8004af8:	08004c39 	.word	0x08004c39
 8004afc:	08004b63 	.word	0x08004b63
 8004b00:	08004bf3 	.word	0x08004bf3
 8004b04:	08004ab5 	.word	0x08004ab5
 8004b08:	08004ab5 	.word	0x08004ab5
 8004b0c:	08004c5b 	.word	0x08004c5b
 8004b10:	08004ab5 	.word	0x08004ab5
 8004b14:	08004b63 	.word	0x08004b63
 8004b18:	08004ab5 	.word	0x08004ab5
 8004b1c:	08004ab5 	.word	0x08004ab5
 8004b20:	08004bfb 	.word	0x08004bfb
 8004b24:	6833      	ldr	r3, [r6, #0]
 8004b26:	1d1a      	adds	r2, r3, #4
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6032      	str	r2, [r6, #0]
 8004b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b34:	2301      	movs	r3, #1
 8004b36:	e09d      	b.n	8004c74 <_printf_i+0x1e8>
 8004b38:	6833      	ldr	r3, [r6, #0]
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	1d19      	adds	r1, r3, #4
 8004b3e:	6031      	str	r1, [r6, #0]
 8004b40:	0606      	lsls	r6, r0, #24
 8004b42:	d501      	bpl.n	8004b48 <_printf_i+0xbc>
 8004b44:	681d      	ldr	r5, [r3, #0]
 8004b46:	e003      	b.n	8004b50 <_printf_i+0xc4>
 8004b48:	0645      	lsls	r5, r0, #25
 8004b4a:	d5fb      	bpl.n	8004b44 <_printf_i+0xb8>
 8004b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b50:	2d00      	cmp	r5, #0
 8004b52:	da03      	bge.n	8004b5c <_printf_i+0xd0>
 8004b54:	232d      	movs	r3, #45	@ 0x2d
 8004b56:	426d      	negs	r5, r5
 8004b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b5c:	4859      	ldr	r0, [pc, #356]	@ (8004cc4 <_printf_i+0x238>)
 8004b5e:	230a      	movs	r3, #10
 8004b60:	e011      	b.n	8004b86 <_printf_i+0xfa>
 8004b62:	6821      	ldr	r1, [r4, #0]
 8004b64:	6833      	ldr	r3, [r6, #0]
 8004b66:	0608      	lsls	r0, r1, #24
 8004b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b6c:	d402      	bmi.n	8004b74 <_printf_i+0xe8>
 8004b6e:	0649      	lsls	r1, r1, #25
 8004b70:	bf48      	it	mi
 8004b72:	b2ad      	uxthmi	r5, r5
 8004b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b76:	4853      	ldr	r0, [pc, #332]	@ (8004cc4 <_printf_i+0x238>)
 8004b78:	6033      	str	r3, [r6, #0]
 8004b7a:	bf14      	ite	ne
 8004b7c:	230a      	movne	r3, #10
 8004b7e:	2308      	moveq	r3, #8
 8004b80:	2100      	movs	r1, #0
 8004b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b86:	6866      	ldr	r6, [r4, #4]
 8004b88:	60a6      	str	r6, [r4, #8]
 8004b8a:	2e00      	cmp	r6, #0
 8004b8c:	bfa2      	ittt	ge
 8004b8e:	6821      	ldrge	r1, [r4, #0]
 8004b90:	f021 0104 	bicge.w	r1, r1, #4
 8004b94:	6021      	strge	r1, [r4, #0]
 8004b96:	b90d      	cbnz	r5, 8004b9c <_printf_i+0x110>
 8004b98:	2e00      	cmp	r6, #0
 8004b9a:	d04b      	beq.n	8004c34 <_printf_i+0x1a8>
 8004b9c:	4616      	mov	r6, r2
 8004b9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ba2:	fb03 5711 	mls	r7, r3, r1, r5
 8004ba6:	5dc7      	ldrb	r7, [r0, r7]
 8004ba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bac:	462f      	mov	r7, r5
 8004bae:	42bb      	cmp	r3, r7
 8004bb0:	460d      	mov	r5, r1
 8004bb2:	d9f4      	bls.n	8004b9e <_printf_i+0x112>
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d10b      	bne.n	8004bd0 <_printf_i+0x144>
 8004bb8:	6823      	ldr	r3, [r4, #0]
 8004bba:	07df      	lsls	r7, r3, #31
 8004bbc:	d508      	bpl.n	8004bd0 <_printf_i+0x144>
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	6861      	ldr	r1, [r4, #4]
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	bfde      	ittt	le
 8004bc6:	2330      	movle	r3, #48	@ 0x30
 8004bc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bcc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004bd0:	1b92      	subs	r2, r2, r6
 8004bd2:	6122      	str	r2, [r4, #16]
 8004bd4:	f8cd a000 	str.w	sl, [sp]
 8004bd8:	464b      	mov	r3, r9
 8004bda:	aa03      	add	r2, sp, #12
 8004bdc:	4621      	mov	r1, r4
 8004bde:	4640      	mov	r0, r8
 8004be0:	f7ff fee6 	bl	80049b0 <_printf_common>
 8004be4:	3001      	adds	r0, #1
 8004be6:	d14a      	bne.n	8004c7e <_printf_i+0x1f2>
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bec:	b004      	add	sp, #16
 8004bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	f043 0320 	orr.w	r3, r3, #32
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	4833      	ldr	r0, [pc, #204]	@ (8004cc8 <_printf_i+0x23c>)
 8004bfc:	2778      	movs	r7, #120	@ 0x78
 8004bfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	6831      	ldr	r1, [r6, #0]
 8004c06:	061f      	lsls	r7, r3, #24
 8004c08:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c0c:	d402      	bmi.n	8004c14 <_printf_i+0x188>
 8004c0e:	065f      	lsls	r7, r3, #25
 8004c10:	bf48      	it	mi
 8004c12:	b2ad      	uxthmi	r5, r5
 8004c14:	6031      	str	r1, [r6, #0]
 8004c16:	07d9      	lsls	r1, r3, #31
 8004c18:	bf44      	itt	mi
 8004c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8004c1e:	6023      	strmi	r3, [r4, #0]
 8004c20:	b11d      	cbz	r5, 8004c2a <_printf_i+0x19e>
 8004c22:	2310      	movs	r3, #16
 8004c24:	e7ac      	b.n	8004b80 <_printf_i+0xf4>
 8004c26:	4827      	ldr	r0, [pc, #156]	@ (8004cc4 <_printf_i+0x238>)
 8004c28:	e7e9      	b.n	8004bfe <_printf_i+0x172>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	f023 0320 	bic.w	r3, r3, #32
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	e7f6      	b.n	8004c22 <_printf_i+0x196>
 8004c34:	4616      	mov	r6, r2
 8004c36:	e7bd      	b.n	8004bb4 <_printf_i+0x128>
 8004c38:	6833      	ldr	r3, [r6, #0]
 8004c3a:	6825      	ldr	r5, [r4, #0]
 8004c3c:	6961      	ldr	r1, [r4, #20]
 8004c3e:	1d18      	adds	r0, r3, #4
 8004c40:	6030      	str	r0, [r6, #0]
 8004c42:	062e      	lsls	r6, r5, #24
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	d501      	bpl.n	8004c4c <_printf_i+0x1c0>
 8004c48:	6019      	str	r1, [r3, #0]
 8004c4a:	e002      	b.n	8004c52 <_printf_i+0x1c6>
 8004c4c:	0668      	lsls	r0, r5, #25
 8004c4e:	d5fb      	bpl.n	8004c48 <_printf_i+0x1bc>
 8004c50:	8019      	strh	r1, [r3, #0]
 8004c52:	2300      	movs	r3, #0
 8004c54:	6123      	str	r3, [r4, #16]
 8004c56:	4616      	mov	r6, r2
 8004c58:	e7bc      	b.n	8004bd4 <_printf_i+0x148>
 8004c5a:	6833      	ldr	r3, [r6, #0]
 8004c5c:	1d1a      	adds	r2, r3, #4
 8004c5e:	6032      	str	r2, [r6, #0]
 8004c60:	681e      	ldr	r6, [r3, #0]
 8004c62:	6862      	ldr	r2, [r4, #4]
 8004c64:	2100      	movs	r1, #0
 8004c66:	4630      	mov	r0, r6
 8004c68:	f7fb fada 	bl	8000220 <memchr>
 8004c6c:	b108      	cbz	r0, 8004c72 <_printf_i+0x1e6>
 8004c6e:	1b80      	subs	r0, r0, r6
 8004c70:	6060      	str	r0, [r4, #4]
 8004c72:	6863      	ldr	r3, [r4, #4]
 8004c74:	6123      	str	r3, [r4, #16]
 8004c76:	2300      	movs	r3, #0
 8004c78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c7c:	e7aa      	b.n	8004bd4 <_printf_i+0x148>
 8004c7e:	6923      	ldr	r3, [r4, #16]
 8004c80:	4632      	mov	r2, r6
 8004c82:	4649      	mov	r1, r9
 8004c84:	4640      	mov	r0, r8
 8004c86:	47d0      	blx	sl
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d0ad      	beq.n	8004be8 <_printf_i+0x15c>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	079b      	lsls	r3, r3, #30
 8004c90:	d413      	bmi.n	8004cba <_printf_i+0x22e>
 8004c92:	68e0      	ldr	r0, [r4, #12]
 8004c94:	9b03      	ldr	r3, [sp, #12]
 8004c96:	4298      	cmp	r0, r3
 8004c98:	bfb8      	it	lt
 8004c9a:	4618      	movlt	r0, r3
 8004c9c:	e7a6      	b.n	8004bec <_printf_i+0x160>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	47d0      	blx	sl
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d09d      	beq.n	8004be8 <_printf_i+0x15c>
 8004cac:	3501      	adds	r5, #1
 8004cae:	68e3      	ldr	r3, [r4, #12]
 8004cb0:	9903      	ldr	r1, [sp, #12]
 8004cb2:	1a5b      	subs	r3, r3, r1
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	dcf2      	bgt.n	8004c9e <_printf_i+0x212>
 8004cb8:	e7eb      	b.n	8004c92 <_printf_i+0x206>
 8004cba:	2500      	movs	r5, #0
 8004cbc:	f104 0619 	add.w	r6, r4, #25
 8004cc0:	e7f5      	b.n	8004cae <_printf_i+0x222>
 8004cc2:	bf00      	nop
 8004cc4:	08004e51 	.word	0x08004e51
 8004cc8:	08004e62 	.word	0x08004e62

08004ccc <memmove>:
 8004ccc:	4288      	cmp	r0, r1
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	eb01 0402 	add.w	r4, r1, r2
 8004cd4:	d902      	bls.n	8004cdc <memmove+0x10>
 8004cd6:	4284      	cmp	r4, r0
 8004cd8:	4623      	mov	r3, r4
 8004cda:	d807      	bhi.n	8004cec <memmove+0x20>
 8004cdc:	1e43      	subs	r3, r0, #1
 8004cde:	42a1      	cmp	r1, r4
 8004ce0:	d008      	beq.n	8004cf4 <memmove+0x28>
 8004ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cea:	e7f8      	b.n	8004cde <memmove+0x12>
 8004cec:	4402      	add	r2, r0
 8004cee:	4601      	mov	r1, r0
 8004cf0:	428a      	cmp	r2, r1
 8004cf2:	d100      	bne.n	8004cf6 <memmove+0x2a>
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cfe:	e7f7      	b.n	8004cf0 <memmove+0x24>

08004d00 <_sbrk_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4d06      	ldr	r5, [pc, #24]	@ (8004d1c <_sbrk_r+0x1c>)
 8004d04:	2300      	movs	r3, #0
 8004d06:	4604      	mov	r4, r0
 8004d08:	4608      	mov	r0, r1
 8004d0a:	602b      	str	r3, [r5, #0]
 8004d0c:	f7fc f926 	bl	8000f5c <_sbrk>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_sbrk_r+0x1a>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_sbrk_r+0x1a>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	200002e0 	.word	0x200002e0

08004d20 <memcpy>:
 8004d20:	440a      	add	r2, r1
 8004d22:	4291      	cmp	r1, r2
 8004d24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d28:	d100      	bne.n	8004d2c <memcpy+0xc>
 8004d2a:	4770      	bx	lr
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d36:	4291      	cmp	r1, r2
 8004d38:	d1f9      	bne.n	8004d2e <memcpy+0xe>
 8004d3a:	bd10      	pop	{r4, pc}

08004d3c <_realloc_r>:
 8004d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d40:	4680      	mov	r8, r0
 8004d42:	4615      	mov	r5, r2
 8004d44:	460c      	mov	r4, r1
 8004d46:	b921      	cbnz	r1, 8004d52 <_realloc_r+0x16>
 8004d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	f7ff bc4b 	b.w	80045e8 <_malloc_r>
 8004d52:	b92a      	cbnz	r2, 8004d60 <_realloc_r+0x24>
 8004d54:	f7ff fbdc 	bl	8004510 <_free_r>
 8004d58:	2400      	movs	r4, #0
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d60:	f000 f81a 	bl	8004d98 <_malloc_usable_size_r>
 8004d64:	4285      	cmp	r5, r0
 8004d66:	4606      	mov	r6, r0
 8004d68:	d802      	bhi.n	8004d70 <_realloc_r+0x34>
 8004d6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004d6e:	d8f4      	bhi.n	8004d5a <_realloc_r+0x1e>
 8004d70:	4629      	mov	r1, r5
 8004d72:	4640      	mov	r0, r8
 8004d74:	f7ff fc38 	bl	80045e8 <_malloc_r>
 8004d78:	4607      	mov	r7, r0
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d0ec      	beq.n	8004d58 <_realloc_r+0x1c>
 8004d7e:	42b5      	cmp	r5, r6
 8004d80:	462a      	mov	r2, r5
 8004d82:	4621      	mov	r1, r4
 8004d84:	bf28      	it	cs
 8004d86:	4632      	movcs	r2, r6
 8004d88:	f7ff ffca 	bl	8004d20 <memcpy>
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4640      	mov	r0, r8
 8004d90:	f7ff fbbe 	bl	8004510 <_free_r>
 8004d94:	463c      	mov	r4, r7
 8004d96:	e7e0      	b.n	8004d5a <_realloc_r+0x1e>

08004d98 <_malloc_usable_size_r>:
 8004d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d9c:	1f18      	subs	r0, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bfbc      	itt	lt
 8004da2:	580b      	ldrlt	r3, [r1, r0]
 8004da4:	18c0      	addlt	r0, r0, r3
 8004da6:	4770      	bx	lr

08004da8 <_init>:
 8004da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004daa:	bf00      	nop
 8004dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dae:	bc08      	pop	{r3}
 8004db0:	469e      	mov	lr, r3
 8004db2:	4770      	bx	lr

08004db4 <_fini>:
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	bf00      	nop
 8004db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dba:	bc08      	pop	{r3}
 8004dbc:	469e      	mov	lr, r3
 8004dbe:	4770      	bx	lr

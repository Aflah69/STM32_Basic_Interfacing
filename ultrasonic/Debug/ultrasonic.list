
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dbc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08009fa0  08009fa0  0000afa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a418  0800a418  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a418  0800a418  0000b418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a420  0800a420  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a420  0800a420  0000b420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a424  0800a424  0000b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a428  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001d4  0800a5fc  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800a5fc  0000c488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015da4  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b10  00000000  00000000  00021fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00024ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f77  00000000  00000000  00025e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f9c9  00000000  00000000  00026de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e11  00000000  00000000  000467b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca8d9  00000000  00000000  0005d5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127e9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006944  00000000  00000000  00127ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012e824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009f84 	.word	0x08009f84

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08009f84 	.word	0x08009f84

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <lcd_send_cmd>:
#include "i2c-lcd.h"
#include "main.h"

extern I2C_HandleTypeDef hi2c2;

void lcd_send_cmd(char cmd) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af02      	add	r7, sp, #8
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f023 030f 	bic.w	r3, r3, #15
 8001044:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C; // En=1, Rs=0
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f043 030c 	orr.w	r3, r3, #12
 8001052:	b2db      	uxtb	r3, r3
 8001054:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08; // En=0, Rs=0
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	b2db      	uxtb	r3, r3
 800105e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C; // En=1, Rs=0
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	f043 030c 	orr.w	r3, r3, #12
 8001066:	b2db      	uxtb	r3, r3
 8001068:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08; // En=0, Rs=0
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	f043 0308 	orr.w	r3, r3, #8
 8001070:	b2db      	uxtb	r3, r3
 8001072:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, (uint8_t *)data_t, 4, 100);
 8001074:	f107 0208 	add.w	r2, r7, #8
 8001078:	2364      	movs	r3, #100	@ 0x64
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2304      	movs	r3, #4
 800107e:	214e      	movs	r1, #78	@ 0x4e
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <lcd_send_cmd+0x5c>)
 8001082:	f001 f9ad 	bl	80023e0 <HAL_I2C_Master_Transmit>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200001f0 	.word	0x200001f0

08001094 <lcd_send_data>:

void lcd_send_data(char data) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af02      	add	r7, sp, #8
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f023 030f 	bic.w	r3, r3, #15
 80010a4:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D; // En=1, Rs=1
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	f043 030d 	orr.w	r3, r3, #13
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09; // En=0, Rs=1
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	f043 0309 	orr.w	r3, r3, #9
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D; // En=1, Rs=1
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	f043 030d 	orr.w	r3, r3, #13
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09; // En=0, Rs=1
 80010ca:	7bbb      	ldrb	r3, [r7, #14]
 80010cc:	f043 0309 	orr.w	r3, r3, #9
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit(&hi2c2, LCD_ADDR, (uint8_t *)data_t, 4, 100);
 80010d4:	f107 0208 	add.w	r2, r7, #8
 80010d8:	2364      	movs	r3, #100	@ 0x64
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2304      	movs	r3, #4
 80010de:	214e      	movs	r1, #78	@ 0x4e
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <lcd_send_data+0x5c>)
 80010e2:	f001 f97d 	bl	80023e0 <HAL_I2C_Master_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001f0 	.word	0x200001f0

080010f4 <lcd_send_string>:
void lcd_put_cursor(int row, int col) {
    uint8_t pos = (row == 0) ? (0x80 + col) : (0xC0 + col);
    lcd_send_cmd(pos);
}

void lcd_send_string(char *str) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 80010fc:	e006      	b.n	800110c <lcd_send_string+0x18>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffc4 	bl	8001094 <lcd_send_data>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f4      	bne.n	80010fe <lcd_send_string+0xa>
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <lcd_init>:

void lcd_init(void) {
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8001122:	2032      	movs	r0, #50	@ 0x32
 8001124:	f000 fdf4 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001128:	2030      	movs	r0, #48	@ 0x30
 800112a:	f7ff ff83 	bl	8001034 <lcd_send_cmd>
    HAL_Delay(5);
 800112e:	2005      	movs	r0, #5
 8001130:	f000 fdee 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001134:	2030      	movs	r0, #48	@ 0x30
 8001136:	f7ff ff7d 	bl	8001034 <lcd_send_cmd>
    HAL_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fde8 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001140:	2030      	movs	r0, #48	@ 0x30
 8001142:	f7ff ff77 	bl	8001034 <lcd_send_cmd>
    HAL_Delay(10);
 8001146:	200a      	movs	r0, #10
 8001148:	f000 fde2 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x20);
 800114c:	2020      	movs	r0, #32
 800114e:	f7ff ff71 	bl	8001034 <lcd_send_cmd>
    HAL_Delay(10);
 8001152:	200a      	movs	r0, #10
 8001154:	f000 fddc 	bl	8001d10 <HAL_Delay>

    lcd_send_cmd(0x28);
 8001158:	2028      	movs	r0, #40	@ 0x28
 800115a:	f7ff ff6b 	bl	8001034 <lcd_send_cmd>
    HAL_Delay(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f000 fdd6 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x08);
 8001164:	2008      	movs	r0, #8
 8001166:	f7ff ff65 	bl	8001034 <lcd_send_cmd>
    HAL_Delay(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f000 fdd0 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x01);
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff ff5f 	bl	8001034 <lcd_send_cmd>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f000 fdca 	bl	8001d10 <HAL_Delay>
    HAL_Delay(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f000 fdc7 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x06);
 8001182:	2006      	movs	r0, #6
 8001184:	f7ff ff56 	bl	8001034 <lcd_send_cmd>
    HAL_Delay(1);
 8001188:	2001      	movs	r0, #1
 800118a:	f000 fdc1 	bl	8001d10 <HAL_Delay>
    lcd_send_cmd(0x0C);
 800118e:	200c      	movs	r0, #12
 8001190:	f7ff ff50 	bl	8001034 <lcd_send_cmd>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <delay>:
static void MX_LPUART1_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <delay+0x30>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 80011aa:	bf00      	nop
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <delay+0x30>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d3f9      	bcc.n	80011ac <delay+0x14>
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200002d8 	.word	0x200002d8
 80011cc:	00000000 	.word	0x00000000

080011d0 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PORT GPIOA

// Let's write the callback function

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7f1b      	ldrb	r3, [r3, #28]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	f040 8083 	bne.w	80012e8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80011e2:	4b45      	ldr	r3, [pc, #276]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d11a      	bne.n	8001220 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80011ea:	2100      	movs	r1, #0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f003 f973 	bl	80044d8 <HAL_TIM_ReadCapturedValue>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a41      	ldr	r2, [pc, #260]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80011f6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80011f8:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6a1a      	ldr	r2, [r3, #32]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 020a 	bic.w	r2, r2, #10
 800120c:	621a      	str	r2, [r3, #32]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 0202 	orr.w	r2, r2, #2
 800121c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 800121e:	e063      	b.n	80012e8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001220:	4b35      	ldr	r3, [pc, #212]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d15f      	bne.n	80012e8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001228:	2100      	movs	r1, #0
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f003 f954 	bl	80044d8 <HAL_TIM_ReadCapturedValue>
 8001230:	4603      	mov	r3, r0
 8001232:	4a33      	ldr	r2, [pc, #204]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001234:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 800123e:	4b30      	ldr	r3, [pc, #192]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4b2e      	ldr	r3, [pc, #184]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	429a      	cmp	r2, r3
 8001248:	d907      	bls.n	800125a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800124a:	4b2d      	ldr	r3, [pc, #180]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0x130>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	4a2b      	ldr	r2, [pc, #172]	@ (8001304 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e00f      	b.n	800127a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 800125a:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d909      	bls.n	800127a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001266:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001274:	33ff      	adds	r3, #255	@ 0xff
 8001276:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001278:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800127a:	4b22      	ldr	r3, [pc, #136]	@ (8001304 <HAL_TIM_IC_CaptureCallback+0x134>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f968 	bl	8000554 <__aeabi_ui2d>
 8001284:	a31a      	add	r3, pc, #104	@ (adr r3, 80012f0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800129e:	f7ff fafd 	bl	800089c <__aeabi_ddiv>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fca5 	bl	8000bf8 <__aeabi_d2uiz>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <HAL_TIM_IC_CaptureCallback+0x138>)
 80012b4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6a1a      	ldr	r2, [r3, #32]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 020a 	bic.w	r2, r2, #10
 80012ca:	621a      	str	r2, [r3, #32]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6a12      	ldr	r2, [r2, #32]
 80012d6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0202 	bic.w	r2, r2, #2
 80012e6:	60da      	str	r2, [r3, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	b020c49c 	.word	0xb020c49c
 80012f4:	3fa16872 	.word	0x3fa16872
 80012f8:	20000330 	.word	0x20000330
 80012fc:	20000324 	.word	0x20000324
 8001300:	20000328 	.word	0x20000328
 8001304:	2000032c 	.word	0x2000032c
 8001308:	20000331 	.word	0x20000331
 800130c:	200002d8 	.word	0x200002d8

08001310 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001314:	2201      	movs	r2, #1
 8001316:	2110      	movs	r1, #16
 8001318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800131c:	f000 ffac 	bl	8002278 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8001320:	200a      	movs	r0, #10
 8001322:	f7ff ff39 	bl	8001198 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001326:	2200      	movs	r2, #0
 8001328:	2110      	movs	r1, #16
 800132a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132e:	f000 ffa3 	bl	8002278 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001332:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <HCSR04_Read+0x38>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <HCSR04_Read+0x38>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0202 	orr.w	r2, r2, #2
 8001340:	60da      	str	r2, [r3, #12]
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200002d8 	.word	0x200002d8

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001350:	f000 fc6d 	bl	8001c2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001354:	f000 f858 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001358:	f000 f9a0 	bl	800169c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800135c:	f000 f8de 	bl	800151c <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001360:	f000 f926 	bl	80015b0 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001364:	f000 f89a 	bl	800149c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001368:	f7ff fed9 	bl	800111e <lcd_init>
   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800136c:	2100      	movs	r1, #0
 800136e:	4820      	ldr	r0, [pc, #128]	@ (80013f0 <main+0xa4>)
 8001370:	f002 fc8a 	bl	8003c88 <HAL_TIM_IC_Start_IT>

   lcd_send_string ("Dist= ");
 8001374:	481f      	ldr	r0, [pc, #124]	@ (80013f4 <main+0xa8>)
 8001376:	f7ff febd 	bl	80010f4 <lcd_send_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
     {
    	 HCSR04_Read();
 800137a:	f7ff ffc9 	bl	8001310 <HCSR04_Read>

    		  lcd_send_data((Distance/100) + 48);   // 100th pos
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <main+0xac>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <main+0xb0>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	095b      	lsrs	r3, r3, #5
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3330      	adds	r3, #48	@ 0x30
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe80 	bl	8001094 <lcd_send_data>
    		lcd_send_data(((Distance/10)%10) +48);  // 10th pos
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <main+0xac>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4a19      	ldr	r2, [pc, #100]	@ (8001400 <main+0xb4>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	08db      	lsrs	r3, r3, #3
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <main+0xb4>)
 80013a4:	fba3 1302 	umull	r1, r3, r3, r2
 80013a8:	08d9      	lsrs	r1, r3, #3
 80013aa:	460b      	mov	r3, r1
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	3330      	adds	r3, #48	@ 0x30
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fe6b 	bl	8001094 <lcd_send_data>
    		  lcd_send_data((Distance%10)+48);  // 1st pos
 80013be:	4b0e      	ldr	r3, [pc, #56]	@ (80013f8 <main+0xac>)
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <main+0xb4>)
 80013c4:	fba3 1302 	umull	r1, r3, r3, r2
 80013c8:	08d9      	lsrs	r1, r3, #3
 80013ca:	460b      	mov	r3, r1
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	3330      	adds	r3, #48	@ 0x30
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fe5b 	bl	8001094 <lcd_send_data>
    		  lcd_send_string(" cm");
 80013de:	4809      	ldr	r0, [pc, #36]	@ (8001404 <main+0xb8>)
 80013e0:	f7ff fe88 	bl	80010f4 <lcd_send_string>
    		  HAL_Delay(2000);
 80013e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013e8:	f000 fc92 	bl	8001d10 <HAL_Delay>
     {
 80013ec:	bf00      	nop
 80013ee:	e7c4      	b.n	800137a <main+0x2e>
 80013f0:	200002d8 	.word	0x200002d8
 80013f4:	08009fa0 	.word	0x08009fa0
 80013f8:	20000331 	.word	0x20000331
 80013fc:	51eb851f 	.word	0x51eb851f
 8001400:	cccccccd 	.word	0xcccccccd
 8001404:	08009fa8 	.word	0x08009fa8

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b094      	sub	sp, #80	@ 0x50
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0318 	add.w	r3, r7, #24
 8001412:	2238      	movs	r2, #56	@ 0x38
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f005 f9dd 	bl	80067d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800142e:	f001 fba1 	bl	8002b74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001432:	2301      	movs	r3, #1
 8001434:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001436:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800143a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143c:	2302      	movs	r3, #2
 800143e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001440:	2303      	movs	r3, #3
 8001442:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001448:	230c      	movs	r3, #12
 800144a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001450:	2302      	movs	r3, #2
 8001452:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001454:	2302      	movs	r3, #2
 8001456:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fc3d 	bl	8002cdc <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001468:	f000 f97e 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2303      	movs	r3, #3
 8001472:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2102      	movs	r1, #2
 8001484:	4618      	mov	r0, r3
 8001486:	f001 ff3b 	bl	8003300 <HAL_RCC_ClockConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001490:	f000 f96a 	bl	8001768 <Error_Handler>
  }
}
 8001494:	bf00      	nop
 8001496:	3750      	adds	r7, #80	@ 0x50
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001514 <MX_I2C2_Init+0x78>)
 80014a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10808DD3;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001518 <MX_I2C2_Init+0x7c>)
 80014aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014ac:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d6:	480e      	ldr	r0, [pc, #56]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014d8:	f000 fee6 	bl	80022a8 <HAL_I2C_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014e2:	f000 f941 	bl	8001768 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4809      	ldr	r0, [pc, #36]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014ea:	f001 faab 	bl	8002a44 <HAL_I2CEx_ConfigAnalogFilter>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014f4:	f000 f938 	bl	8001768 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014f8:	2100      	movs	r1, #0
 80014fa:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_I2C2_Init+0x74>)
 80014fc:	f001 faed 	bl	8002ada <HAL_I2CEx_ConfigDigitalFilter>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001506:	f000 f92f 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200001f0 	.word	0x200001f0
 8001514:	40005800 	.word	0x40005800
 8001518:	10808dd3 	.word	0x10808dd3

0800151c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001520:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001522:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <MX_LPUART1_UART_Init+0x90>)
 8001524:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001526:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001554:	2200      	movs	r2, #0
 8001556:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 800155a:	2200      	movs	r2, #0
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800155e:	4812      	ldr	r0, [pc, #72]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001560:	f003 fb6a 	bl	8004c38 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800156a:	f000 f8fd 	bl	8001768 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156e:	2100      	movs	r1, #0
 8001570:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001572:	f004 f8d5 	bl	8005720 <HAL_UARTEx_SetTxFifoThreshold>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800157c:	f000 f8f4 	bl	8001768 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001580:	2100      	movs	r1, #0
 8001582:	4809      	ldr	r0, [pc, #36]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001584:	f004 f90a 	bl	800579c <HAL_UARTEx_SetRxFifoThreshold>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800158e:	f000 f8eb 	bl	8001768 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_LPUART1_UART_Init+0x8c>)
 8001594:	f004 f88b 	bl	80056ae <HAL_UARTEx_DisableFifoMode>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800159e:	f000 f8e3 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000244 	.word	0x20000244
 80015ac:	40008000 	.word	0x40008000

080015b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	@ 0x30
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <MX_TIM1_Init+0xe4>)
 80015de:	4a2e      	ldr	r2, [pc, #184]	@ (8001698 <MX_TIM1_Init+0xe8>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80015e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001694 <MX_TIM1_Init+0xe4>)
 80015e4:	2247      	movs	r2, #71	@ 0x47
 80015e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <MX_TIM1_Init+0xe4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80015ee:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <MX_TIM1_Init+0xe4>)
 80015f0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80015f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f6:	4b27      	ldr	r3, [pc, #156]	@ (8001694 <MX_TIM1_Init+0xe4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015fc:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <MX_TIM1_Init+0xe4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <MX_TIM1_Init+0xe4>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001608:	4822      	ldr	r0, [pc, #136]	@ (8001694 <MX_TIM1_Init+0xe4>)
 800160a:	f002 fa85 	bl	8003b18 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001614:	f000 f8a8 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	4619      	mov	r1, r3
 8001624:	481b      	ldr	r0, [pc, #108]	@ (8001694 <MX_TIM1_Init+0xe4>)
 8001626:	f002 fe5d 	bl	80042e4 <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001630:	f000 f89a 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001634:	4817      	ldr	r0, [pc, #92]	@ (8001694 <MX_TIM1_Init+0xe4>)
 8001636:	f002 fac6 	bl	8003bc6 <HAL_TIM_IC_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001640:	f000 f892 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	480f      	ldr	r0, [pc, #60]	@ (8001694 <MX_TIM1_Init+0xe4>)
 8001658:	f003 fa26 	bl	8004aa8 <HAL_TIMEx_MasterConfigSynchronization>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001662:	f000 f881 	bl	8001768 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800166a:	2301      	movs	r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_TIM1_Init+0xe4>)
 800167e:	f002 fd94 	bl	80041aa <HAL_TIM_IC_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001688:	f000 f86e 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	3730      	adds	r7, #48	@ 0x30
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002d8 	.word	0x200002d8
 8001698:	40012c00 	.word	0x40012c00

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	@ 0x28
 80016a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <MX_GPIO_Init+0xc4>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001760 <MX_GPIO_Init+0xc4>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016be:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <MX_GPIO_Init+0xc4>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ca:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <MX_GPIO_Init+0xc4>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	4a24      	ldr	r2, [pc, #144]	@ (8001760 <MX_GPIO_Init+0xc4>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d6:	4b22      	ldr	r3, [pc, #136]	@ (8001760 <MX_GPIO_Init+0xc4>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <MX_GPIO_Init+0xc4>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001760 <MX_GPIO_Init+0xc4>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_GPIO_Init+0xc4>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_GPIO_Init+0xc4>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a18      	ldr	r2, [pc, #96]	@ (8001760 <MX_GPIO_Init+0xc4>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001706:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_GPIO_Init+0xc4>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	2130      	movs	r1, #48	@ 0x30
 8001716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171a:	f000 fdad 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001724:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	480b      	ldr	r0, [pc, #44]	@ (8001764 <MX_GPIO_Init+0xc8>)
 8001736:	f000 fc1d 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 800173a:	2330      	movs	r3, #48	@ 0x30
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001754:	f000 fc0e 	bl	8001f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	48000800 	.word	0x48000800

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <HAL_MspInit+0x44>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001782:	4a0e      	ldr	r2, [pc, #56]	@ (80017bc <HAL_MspInit+0x44>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6613      	str	r3, [r2, #96]	@ 0x60
 800178a:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <HAL_MspInit+0x44>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_MspInit+0x44>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <HAL_MspInit+0x44>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_MspInit+0x44>)
 80017a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017ae:	f001 fa85 	bl	8002cbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b09a      	sub	sp, #104	@ 0x68
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	2244      	movs	r2, #68	@ 0x44
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 fff8 	bl	80067d6 <memset>
  if(hi2c->Instance==I2C2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001868 <HAL_I2C_MspInit+0xa8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d137      	bne.n	8001860 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017f0:	2380      	movs	r3, #128	@ 0x80
 80017f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 ff9b 	bl	8003738 <HAL_RCCEx_PeriphCLKConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001808:	f7ff ffae 	bl	8001768 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180c:	4b17      	ldr	r3, [pc, #92]	@ (800186c <HAL_I2C_MspInit+0xac>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001810:	4a16      	ldr	r2, [pc, #88]	@ (800186c <HAL_I2C_MspInit+0xac>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001818:	4b14      	ldr	r3, [pc, #80]	@ (800186c <HAL_I2C_MspInit+0xac>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001824:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001828:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800182a:	2312      	movs	r3, #18
 800182c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001836:	2304      	movs	r3, #4
 8001838:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001844:	f000 fb96 	bl	8001f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_I2C_MspInit+0xac>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	4a07      	ldr	r2, [pc, #28]	@ (800186c <HAL_I2C_MspInit+0xac>)
 800184e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001852:	6593      	str	r3, [r2, #88]	@ 0x58
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_I2C_MspInit+0xac>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3768      	adds	r7, #104	@ 0x68
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40005800 	.word	0x40005800
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b09a      	sub	sp, #104	@ 0x68
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	2244      	movs	r2, #68	@ 0x44
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f004 ffa0 	bl	80067d6 <memset>
  if(huart->Instance==LPUART1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1f      	ldr	r2, [pc, #124]	@ (8001918 <HAL_UART_MspInit+0xa8>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d136      	bne.n	800190e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018a0:	2320      	movs	r3, #32
 80018a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	4618      	mov	r0, r3
 80018ae:	f001 ff43 	bl	8003738 <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018b8:	f7ff ff56 	bl	8001768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018bc:	4b17      	ldr	r3, [pc, #92]	@ (800191c <HAL_UART_MspInit+0xac>)
 80018be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018c0:	4a16      	ldr	r2, [pc, #88]	@ (800191c <HAL_UART_MspInit+0xac>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <HAL_UART_MspInit+0xac>)
 80018ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_UART_MspInit+0xac>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d8:	4a10      	ldr	r2, [pc, #64]	@ (800191c <HAL_UART_MspInit+0xac>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e0:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <HAL_UART_MspInit+0xac>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80018ec:	230c      	movs	r3, #12
 80018ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80018fc:	230c      	movs	r3, #12
 80018fe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001904:	4619      	mov	r1, r3
 8001906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800190a:	f000 fb33 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3768      	adds	r7, #104	@ 0x68
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40008000 	.word	0x40008000
 800191c:	40021000 	.word	0x40021000

08001920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	@ 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1b      	ldr	r2, [pc, #108]	@ (80019ac <HAL_TIM_Base_MspInit+0x8c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12f      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001942:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_TIM_Base_MspInit+0x90>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001946:	4a1a      	ldr	r2, [pc, #104]	@ (80019b0 <HAL_TIM_Base_MspInit+0x90>)
 8001948:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800194c:	6613      	str	r3, [r2, #96]	@ 0x60
 800194e:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <HAL_TIM_Base_MspInit+0x90>)
 8001950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001952:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_TIM_Base_MspInit+0x90>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <HAL_TIM_Base_MspInit+0x90>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001966:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_TIM_Base_MspInit+0x90>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001972:	2301      	movs	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001982:	2302      	movs	r3, #2
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	4809      	ldr	r0, [pc, #36]	@ (80019b4 <HAL_TIM_Base_MspInit+0x94>)
 800198e:	f000 faf1 	bl	8001f74 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	201b      	movs	r0, #27
 8001998:	f000 fab7 	bl	8001f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800199c:	201b      	movs	r0, #27
 800199e:	f000 face 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	@ 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40012c00 	.word	0x40012c00
 80019b0:	40021000 	.word	0x40021000
 80019b4:	48000800 	.word	0x48000800

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <NMI_Handler+0x4>

080019c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <UsageFault_Handler+0x4>

080019e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0e:	f000 f961 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <TIM1_CC_IRQHandler+0x10>)
 8001a1e:	f002 fa75 	bl	8003f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200002d8 	.word	0x200002d8

08001a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return 1;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_kill>:

int _kill(int pid, int sig)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a46:	f004 ff19 	bl	800687c <__errno>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2216      	movs	r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_exit>:

void _exit (int status)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ffe7 	bl	8001a3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a6e:	bf00      	nop
 8001a70:	e7fd      	b.n	8001a6e <_exit+0x12>

08001a72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e00a      	b.n	8001a9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a84:	f3af 8000 	nop.w
 8001a88:	4601      	mov	r1, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	60ba      	str	r2, [r7, #8]
 8001a90:	b2ca      	uxtb	r2, r1
 8001a92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3301      	adds	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbf0      	blt.n	8001a84 <_read+0x12>
  }

  return len;
 8001aa2:	687b      	ldr	r3, [r7, #4]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	e009      	b.n	8001ad2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60ba      	str	r2, [r7, #8]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dbf1      	blt.n	8001abe <_write+0x12>
  }
  return len;
 8001ada:	687b      	ldr	r3, [r7, #4]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_close>:

int _close(int file)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_isatty>:

int _isatty(int file)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	@ (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d207      	bcs.n	8001b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b7c:	f004 fe7e 	bl	800687c <__errno>
 8001b80:	4603      	mov	r3, r0
 8001b82:	220c      	movs	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	@ (8001bb0 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20008000 	.word	0x20008000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	20000334 	.word	0x20000334
 8001bb4:	20000488 	.word	0x20000488

08001bb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <SystemInit+0x20>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bc2:	4a05      	ldr	r2, [pc, #20]	@ (8001bd8 <SystemInit+0x20>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bdc:	480d      	ldr	r0, [pc, #52]	@ (8001c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bde:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001be0:	f7ff ffea 	bl	8001bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	@ (8001c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <LoopForever+0xe>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c28 <LoopForever+0x16>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f004 fe3d 	bl	8006888 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c0e:	f7ff fb9d 	bl	800134c <main>

08001c12 <LoopForever>:

LoopForever:
    b LoopForever
 8001c12:	e7fe      	b.n	8001c12 <LoopForever>
  ldr   r0, =_estack
 8001c14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c20:	0800a428 	.word	0x0800a428
  ldr r2, =_sbss
 8001c24:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c28:	20000488 	.word	0x20000488

08001c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC1_2_IRQHandler>

08001c2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f95b 	bl	8001ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 f80e 	bl	8001c60 <HAL_InitTick>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	71fb      	strb	r3, [r7, #7]
 8001c4e:	e001      	b.n	8001c54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c50:	f7ff fd92 	bl	8001778 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c54:	79fb      	ldrb	r3, [r7, #7]

}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c6c:	4b16      	ldr	r3, [pc, #88]	@ (8001cc8 <HAL_InitTick+0x68>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d022      	beq.n	8001cba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <HAL_InitTick+0x6c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <HAL_InitTick+0x68>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f966 	bl	8001f5a <HAL_SYSTICK_Config>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10f      	bne.n	8001cb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	d809      	bhi.n	8001cae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ca2:	f000 f932 	bl	8001f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <HAL_InitTick+0x70>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e007      	b.n	8001cbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	73fb      	strb	r3, [r7, #15]
 8001cb2:	e004      	b.n	8001cbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	e001      	b.n	8001cbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_IncTick+0x1c>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a03      	ldr	r2, [pc, #12]	@ (8001cf0 <HAL_IncTick+0x1c>)
 8001ce4:	6013      	str	r3, [r2, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	20000338 	.word	0x20000338
 8001cf4:	20000008 	.word	0x20000008

08001cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <HAL_GetTick+0x14>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000338 	.word	0x20000338

08001d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff ffee 	bl	8001cf8 <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d28:	d004      	beq.n	8001d34 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_Delay+0x40>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4413      	add	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d34:	bf00      	nop
 8001d36:	f7ff ffdf 	bl	8001cf8 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d8f7      	bhi.n	8001d36 <HAL_Delay+0x26>
  {
  }
}
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000008 	.word	0x20000008

08001d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d70:	4013      	ands	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d86:	4a04      	ldr	r2, [pc, #16]	@ (8001d98 <__NVIC_SetPriorityGrouping+0x44>)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	60d3      	str	r3, [r2, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <__NVIC_GetPriorityGrouping+0x18>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	f003 0307 	and.w	r3, r3, #7
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	db0b      	blt.n	8001de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	f003 021f 	and.w	r2, r3, #31
 8001dd0:	4907      	ldr	r1, [pc, #28]	@ (8001df0 <__NVIC_EnableIRQ+0x38>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	2001      	movs	r0, #1
 8001dda:	fa00 f202 	lsl.w	r2, r0, r2
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000e100 	.word	0xe000e100

08001df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	@ (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	@ (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	@ 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f1c3 0307 	rsb	r3, r3, #7
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	bf28      	it	cs
 8001e66:	2304      	movcs	r3, #4
 8001e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d902      	bls.n	8001e78 <NVIC_EncodePriority+0x30>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3b03      	subs	r3, #3
 8001e76:	e000      	b.n	8001e7a <NVIC_EncodePriority+0x32>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	4313      	orrs	r3, r2
         );
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	@ 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec0:	d301      	bcc.n	8001ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00f      	b.n	8001ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <SysTick_Config+0x40>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ece:	210f      	movs	r1, #15
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ed4:	f7ff ff8e 	bl	8001df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <SysTick_Config+0x40>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ede:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <SysTick_Config+0x40>)
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	e000e010 	.word	0xe000e010

08001ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff29 	bl	8001d54 <__NVIC_SetPriorityGrouping>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff40 	bl	8001d9c <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff90 	bl	8001e48 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5f 	bl	8001df4 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff33 	bl	8001db8 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa4 	bl	8001eb0 <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f82:	e15a      	b.n	800223a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	4013      	ands	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 814c 	beq.w	8002234 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d005      	beq.n	8001fb4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d130      	bne.n	8002016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fea:	2201      	movs	r2, #1
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 0201 	and.w	r2, r3, #1
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b03      	cmp	r3, #3
 8002020:	d017      	beq.n	8002052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d123      	bne.n	80020a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	6939      	ldr	r1, [r7, #16]
 80020a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0203 	and.w	r2, r3, #3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80a6 	beq.w	8002234 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002258 <HAL_GPIO_Init+0x2e4>)
 80020ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ec:	4a5a      	ldr	r2, [pc, #360]	@ (8002258 <HAL_GPIO_Init+0x2e4>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f4:	4b58      	ldr	r3, [pc, #352]	@ (8002258 <HAL_GPIO_Init+0x2e4>)
 80020f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002100:	4a56      	ldr	r2, [pc, #344]	@ (800225c <HAL_GPIO_Init+0x2e8>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	3302      	adds	r3, #2
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	220f      	movs	r2, #15
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800212a:	d01f      	beq.n	800216c <HAL_GPIO_Init+0x1f8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a4c      	ldr	r2, [pc, #304]	@ (8002260 <HAL_GPIO_Init+0x2ec>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d019      	beq.n	8002168 <HAL_GPIO_Init+0x1f4>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a4b      	ldr	r2, [pc, #300]	@ (8002264 <HAL_GPIO_Init+0x2f0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_GPIO_Init+0x1f0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a4a      	ldr	r2, [pc, #296]	@ (8002268 <HAL_GPIO_Init+0x2f4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00d      	beq.n	8002160 <HAL_GPIO_Init+0x1ec>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a49      	ldr	r2, [pc, #292]	@ (800226c <HAL_GPIO_Init+0x2f8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d007      	beq.n	800215c <HAL_GPIO_Init+0x1e8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a48      	ldr	r2, [pc, #288]	@ (8002270 <HAL_GPIO_Init+0x2fc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d101      	bne.n	8002158 <HAL_GPIO_Init+0x1e4>
 8002154:	2305      	movs	r3, #5
 8002156:	e00a      	b.n	800216e <HAL_GPIO_Init+0x1fa>
 8002158:	2306      	movs	r3, #6
 800215a:	e008      	b.n	800216e <HAL_GPIO_Init+0x1fa>
 800215c:	2304      	movs	r3, #4
 800215e:	e006      	b.n	800216e <HAL_GPIO_Init+0x1fa>
 8002160:	2303      	movs	r3, #3
 8002162:	e004      	b.n	800216e <HAL_GPIO_Init+0x1fa>
 8002164:	2302      	movs	r3, #2
 8002166:	e002      	b.n	800216e <HAL_GPIO_Init+0x1fa>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_GPIO_Init+0x1fa>
 800216c:	2300      	movs	r3, #0
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	f002 0203 	and.w	r2, r2, #3
 8002174:	0092      	lsls	r2, r2, #2
 8002176:	4093      	lsls	r3, r2
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217e:	4937      	ldr	r1, [pc, #220]	@ (800225c <HAL_GPIO_Init+0x2e8>)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3302      	adds	r3, #2
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800218c:	4b39      	ldr	r3, [pc, #228]	@ (8002274 <HAL_GPIO_Init+0x300>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021b0:	4a30      	ldr	r2, [pc, #192]	@ (8002274 <HAL_GPIO_Init+0x300>)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <HAL_GPIO_Init+0x300>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021da:	4a26      	ldr	r2, [pc, #152]	@ (8002274 <HAL_GPIO_Init+0x300>)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021e0:	4b24      	ldr	r3, [pc, #144]	@ (8002274 <HAL_GPIO_Init+0x300>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002204:	4a1b      	ldr	r2, [pc, #108]	@ (8002274 <HAL_GPIO_Init+0x300>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800220a:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <HAL_GPIO_Init+0x300>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800222e:	4a11      	ldr	r2, [pc, #68]	@ (8002274 <HAL_GPIO_Init+0x300>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3301      	adds	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	f47f ae9d 	bne.w	8001f84 <HAL_GPIO_Init+0x10>
  }
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40021000 	.word	0x40021000
 800225c:	40010000 	.word	0x40010000
 8002260:	48000400 	.word	0x48000400
 8002264:	48000800 	.word	0x48000800
 8002268:	48000c00 	.word	0x48000c00
 800226c:	48001000 	.word	0x48001000
 8002270:	48001400 	.word	0x48001400
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002294:	e002      	b.n	800229c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e08d      	b.n	80023d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fa76 	bl	80017c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	@ 0x24
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0201 	bic.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002308:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	e006      	b.n	8002330 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800232e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d108      	bne.n	800234a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	e007      	b.n	800235a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002358:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800236c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800237c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69d9      	ldr	r1, [r3, #28]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	461a      	mov	r2, r3
 80023ec:	460b      	mov	r3, r1
 80023ee:	817b      	strh	r3, [r7, #10]
 80023f0:	4613      	mov	r3, r2
 80023f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	f040 80fd 	bne.w	80025fc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_I2C_Master_Transmit+0x30>
 800240c:	2302      	movs	r3, #2
 800240e:	e0f6      	b.n	80025fe <HAL_I2C_Master_Transmit+0x21e>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002418:	f7ff fc6e 	bl	8001cf8 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2319      	movs	r3, #25
 8002424:	2201      	movs	r2, #1
 8002426:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f914 	bl	8002658 <I2C_WaitOnFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0e1      	b.n	80025fe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2221      	movs	r2, #33	@ 0x21
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2210      	movs	r2, #16
 8002446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	893a      	ldrh	r2, [r7, #8]
 800245a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	2bff      	cmp	r3, #255	@ 0xff
 800246a:	d906      	bls.n	800247a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	22ff      	movs	r2, #255	@ 0xff
 8002470:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002472:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e007      	b.n	800248a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002484:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002488:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248e:	2b00      	cmp	r3, #0
 8002490:	d024      	beq.n	80024dc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	781a      	ldrb	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	3301      	adds	r3, #1
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	8979      	ldrh	r1, [r7, #10]
 80024ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002608 <HAL_I2C_Master_Transmit+0x228>)
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fa83 	bl	80029e0 <I2C_TransferConfig>
 80024da:	e066      	b.n	80025aa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	8979      	ldrh	r1, [r7, #10]
 80024e4:	4b48      	ldr	r3, [pc, #288]	@ (8002608 <HAL_I2C_Master_Transmit+0x228>)
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fa78 	bl	80029e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024f0:	e05b      	b.n	80025aa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	6a39      	ldr	r1, [r7, #32]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f907 	bl	800270a <I2C_WaitOnTXISFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07b      	b.n	80025fe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d034      	beq.n	80025aa <HAL_I2C_Master_Transmit+0x1ca>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d130      	bne.n	80025aa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2200      	movs	r2, #0
 8002550:	2180      	movs	r1, #128	@ 0x80
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f880 	bl	8002658 <I2C_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e04d      	b.n	80025fe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	2bff      	cmp	r3, #255	@ 0xff
 800256a:	d90e      	bls.n	800258a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	22ff      	movs	r2, #255	@ 0xff
 8002570:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002576:	b2da      	uxtb	r2, r3
 8002578:	8979      	ldrh	r1, [r7, #10]
 800257a:	2300      	movs	r3, #0
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fa2c 	bl	80029e0 <I2C_TransferConfig>
 8002588:	e00f      	b.n	80025aa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002598:	b2da      	uxtb	r2, r3
 800259a:	8979      	ldrh	r1, [r7, #10]
 800259c:	2300      	movs	r3, #0
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fa1b 	bl	80029e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d19e      	bne.n	80024f2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	6a39      	ldr	r1, [r7, #32]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f8ed 	bl	8002798 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e01a      	b.n	80025fe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2220      	movs	r2, #32
 80025ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6859      	ldr	r1, [r3, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <HAL_I2C_Master_Transmit+0x22c>)
 80025dc:	400b      	ands	r3, r1
 80025de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	80002000 	.word	0x80002000
 800260c:	fe00e800 	.word	0xfe00e800

08002610 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d103      	bne.n	800262e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2200      	movs	r2, #0
 800262c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d007      	beq.n	800264c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	619a      	str	r2, [r3, #24]
  }
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002668:	e03b      	b.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	6839      	ldr	r1, [r7, #0]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f8d6 	bl	8002820 <I2C_IsErrorOccurred>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e041      	b.n	8002702 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002684:	d02d      	beq.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002686:	f7ff fb37 	bl	8001cf8 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d122      	bne.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d113      	bne.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	f043 0220 	orr.w	r2, r3, #32
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e00f      	b.n	8002702 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4013      	ands	r3, r2
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	bf0c      	ite	eq
 80026f2:	2301      	moveq	r3, #1
 80026f4:	2300      	movne	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d0b4      	beq.n	800266a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002716:	e033      	b.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 f87f 	bl	8002820 <I2C_IsErrorOccurred>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e031      	b.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002732:	d025      	beq.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	f7ff fae0 	bl	8001cf8 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	429a      	cmp	r2, r3
 8002742:	d302      	bcc.n	800274a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11a      	bne.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b02      	cmp	r3, #2
 8002756:	d013      	beq.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e007      	b.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d1c4      	bne.n	8002718 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027a4:	e02f      	b.n	8002806 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f838 	bl	8002820 <I2C_IsErrorOccurred>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e02d      	b.n	8002816 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ba:	f7ff fa9d 	bl	8001cf8 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d302      	bcc.n	80027d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d11a      	bne.n	8002806 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d013      	beq.n	8002806 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f043 0220 	orr.w	r2, r3, #32
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2220      	movs	r2, #32
 80027ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e007      	b.n	8002816 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d1c8      	bne.n	80027a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d068      	beq.n	800291e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2210      	movs	r2, #16
 8002852:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002854:	e049      	b.n	80028ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800285c:	d045      	beq.n	80028ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7ff fa4b 	bl	8001cf8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <I2C_IsErrorOccurred+0x54>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d13a      	bne.n	80028ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002886:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002896:	d121      	bne.n	80028dc <I2C_IsErrorOccurred+0xbc>
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800289e:	d01d      	beq.n	80028dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d01a      	beq.n	80028dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028b6:	f7ff fa1f 	bl	8001cf8 <HAL_GetTick>
 80028ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028bc:	e00e      	b.n	80028dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028be:	f7ff fa1b 	bl	8001cf8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b19      	cmp	r3, #25
 80028ca:	d907      	bls.n	80028dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	f043 0320 	orr.w	r3, r3, #32
 80028d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80028da:	e006      	b.n	80028ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d1e9      	bne.n	80028be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d003      	beq.n	8002900 <I2C_IsErrorOccurred+0xe0>
 80028f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0aa      	beq.n	8002856 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2220      	movs	r2, #32
 800290e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00b      	beq.n	8002948 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002940:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f043 0308 	orr.w	r3, r3, #8
 8002958:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002962:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002984:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800298c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01c      	beq.n	80029ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff fe3b 	bl	8002610 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <I2C_IsErrorOccurred+0x1bc>)
 80029a6:	400b      	ands	r3, r1
 80029a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80029ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3728      	adds	r7, #40	@ 0x28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	fe00e800 	.word	0xfe00e800

080029e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	817b      	strh	r3, [r7, #10]
 80029ee:	4613      	mov	r3, r2
 80029f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029f8:	7a7b      	ldrb	r3, [r7, #9]
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	0d5b      	lsrs	r3, r3, #21
 8002a1a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <I2C_TransferConfig+0x60>)
 8002a20:	430b      	orrs	r3, r1
 8002a22:	43db      	mvns	r3, r3
 8002a24:	ea02 0103 	and.w	r1, r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	03ff63ff 	.word	0x03ff63ff

08002a44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d138      	bne.n	8002acc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e032      	b.n	8002ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	@ 0x24
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d139      	bne.n	8002b64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e033      	b.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2224      	movs	r2, #36	@ 0x24
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d141      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b82:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8e:	d131      	bne.n	8002bf4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b90:	4b47      	ldr	r3, [pc, #284]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b96:	4a46      	ldr	r2, [pc, #280]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba0:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ba8:	4a41      	ldr	r2, [pc, #260]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bb0:	4b40      	ldr	r3, [pc, #256]	@ (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2232      	movs	r2, #50	@ 0x32
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	4a3f      	ldr	r2, [pc, #252]	@ (8002cb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	0c9b      	lsrs	r3, r3, #18
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc6:	e002      	b.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bce:	4b38      	ldr	r3, [pc, #224]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bda:	d102      	bne.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f2      	bne.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002be2:	4b33      	ldr	r3, [pc, #204]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bee:	d158      	bne.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e057      	b.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c04:	e04d      	b.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c0c:	d141      	bne.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c0e:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c1a:	d131      	bne.n	8002c80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c1c:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c22:	4a23      	ldr	r2, [pc, #140]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c2c:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c34:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2232      	movs	r2, #50	@ 0x32
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	0c9b      	lsrs	r3, r3, #18
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c52:	e002      	b.n	8002c5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c5a:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c66:	d102      	bne.n	8002c6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f2      	bne.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7a:	d112      	bne.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e011      	b.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c86:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c90:	e007      	b.n	8002ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c9a:	4a05      	ldr	r2, [pc, #20]	@ (8002cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ca0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	431bde83 	.word	0x431bde83

08002cbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a04      	ldr	r2, [pc, #16]	@ (8002cd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cca:	6093      	str	r3, [r2, #8]
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40007000 	.word	0x40007000

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e2fe      	b.n	80032ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d075      	beq.n	8002de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cfa:	4b97      	ldr	r3, [pc, #604]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d04:	4b94      	ldr	r3, [pc, #592]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d102      	bne.n	8002d1a <HAL_RCC_OscConfig+0x3e>
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d002      	beq.n	8002d20 <HAL_RCC_OscConfig+0x44>
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d10b      	bne.n	8002d38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d20:	4b8d      	ldr	r3, [pc, #564]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d05b      	beq.n	8002de4 <HAL_RCC_OscConfig+0x108>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d157      	bne.n	8002de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e2d9      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d40:	d106      	bne.n	8002d50 <HAL_RCC_OscConfig+0x74>
 8002d42:	4b85      	ldr	r3, [pc, #532]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a84      	ldr	r2, [pc, #528]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e01d      	b.n	8002d8c <HAL_RCC_OscConfig+0xb0>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x98>
 8002d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	4b7c      	ldr	r3, [pc, #496]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7b      	ldr	r2, [pc, #492]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e00b      	b.n	8002d8c <HAL_RCC_OscConfig+0xb0>
 8002d74:	4b78      	ldr	r3, [pc, #480]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a77      	ldr	r2, [pc, #476]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	4b75      	ldr	r3, [pc, #468]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a74      	ldr	r2, [pc, #464]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d013      	beq.n	8002dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fe ffb0 	bl	8001cf8 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d9c:	f7fe ffac 	bl	8001cf8 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b64      	cmp	r3, #100	@ 0x64
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e29e      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dae:	4b6a      	ldr	r3, [pc, #424]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0xc0>
 8002dba:	e014      	b.n	8002de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe ff9c 	bl	8001cf8 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe ff98 	bl	8001cf8 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	@ 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e28a      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dd6:	4b60      	ldr	r3, [pc, #384]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0xe8>
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d075      	beq.n	8002ede <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df2:	4b59      	ldr	r3, [pc, #356]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dfc:	4b56      	ldr	r3, [pc, #344]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_OscConfig+0x136>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_OscConfig+0x13c>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d11f      	bne.n	8002e58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e18:	4b4f      	ldr	r3, [pc, #316]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_OscConfig+0x154>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e25d      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e30:	4b49      	ldr	r3, [pc, #292]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	061b      	lsls	r3, r3, #24
 8002e3e:	4946      	ldr	r1, [pc, #280]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e44:	4b45      	ldr	r3, [pc, #276]	@ (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe ff09 	bl	8001c60 <HAL_InitTick>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d043      	beq.n	8002edc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e249      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d023      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b3d      	ldr	r3, [pc, #244]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a3c      	ldr	r2, [pc, #240]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe ff44 	bl	8001cf8 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e74:	f7fe ff40 	bl	8001cf8 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e232      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e86:	4b34      	ldr	r3, [pc, #208]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	4b31      	ldr	r3, [pc, #196]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	492d      	ldr	r1, [pc, #180]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
 8002ea6:	e01a      	b.n	8002ede <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2a      	ldr	r2, [pc, #168]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002eae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe ff20 	bl	8001cf8 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7fe ff1c 	bl	8001cf8 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e20e      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ece:	4b22      	ldr	r3, [pc, #136]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1e0>
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002edc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d041      	beq.n	8002f6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01c      	beq.n	8002f2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef2:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ef8:	4a17      	ldr	r2, [pc, #92]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fe fef9 	bl	8001cf8 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fef5 	bl	8001cf8 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e1e7      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ef      	beq.n	8002f0a <HAL_RCC_OscConfig+0x22e>
 8002f2a:	e020      	b.n	8002f6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f32:	4a09      	ldr	r2, [pc, #36]	@ (8002f58 <HAL_RCC_OscConfig+0x27c>)
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fedc 	bl	8001cf8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f42:	e00d      	b.n	8002f60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fe fed8 	bl	8001cf8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d906      	bls.n	8002f60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e1ca      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f60:	4b8c      	ldr	r3, [pc, #560]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ea      	bne.n	8002f44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 80a6 	beq.w	80030c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f80:	4b84      	ldr	r3, [pc, #528]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_OscConfig+0x2b4>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x2b6>
 8002f90:	2300      	movs	r3, #0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00d      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	4b7f      	ldr	r3, [pc, #508]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb2:	4b79      	ldr	r3, [pc, #484]	@ (8003198 <HAL_RCC_OscConfig+0x4bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d118      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fbe:	4b76      	ldr	r3, [pc, #472]	@ (8003198 <HAL_RCC_OscConfig+0x4bc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a75      	ldr	r2, [pc, #468]	@ (8003198 <HAL_RCC_OscConfig+0x4bc>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fe95 	bl	8001cf8 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd2:	f7fe fe91 	bl	8001cf8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e183      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe4:	4b6c      	ldr	r3, [pc, #432]	@ (8003198 <HAL_RCC_OscConfig+0x4bc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d108      	bne.n	800300a <HAL_RCC_OscConfig+0x32e>
 8002ff8:	4b66      	ldr	r3, [pc, #408]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffe:	4a65      	ldr	r2, [pc, #404]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003008:	e024      	b.n	8003054 <HAL_RCC_OscConfig+0x378>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b05      	cmp	r3, #5
 8003010:	d110      	bne.n	8003034 <HAL_RCC_OscConfig+0x358>
 8003012:	4b60      	ldr	r3, [pc, #384]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003018:	4a5e      	ldr	r2, [pc, #376]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800301a:	f043 0304 	orr.w	r3, r3, #4
 800301e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003022:	4b5c      	ldr	r3, [pc, #368]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003028:	4a5a      	ldr	r2, [pc, #360]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003032:	e00f      	b.n	8003054 <HAL_RCC_OscConfig+0x378>
 8003034:	4b57      	ldr	r3, [pc, #348]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303a:	4a56      	ldr	r2, [pc, #344]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003044:	4b53      	ldr	r3, [pc, #332]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304a:	4a52      	ldr	r2, [pc, #328]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d016      	beq.n	800308a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fe fe4c 	bl	8001cf8 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fe fe48 	bl	8001cf8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e138      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800307a:	4b46      	ldr	r3, [pc, #280]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ed      	beq.n	8003064 <HAL_RCC_OscConfig+0x388>
 8003088:	e015      	b.n	80030b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7fe fe35 	bl	8001cf8 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe fe31 	bl	8001cf8 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e121      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ed      	bne.n	8003092 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b6:	7ffb      	ldrb	r3, [r7, #31]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b35      	ldr	r3, [pc, #212]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c0:	4a34      	ldr	r2, [pc, #208]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 80030c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d03c      	beq.n	800314e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01c      	beq.n	8003116 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 80030de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030e2:	4a2c      	ldr	r2, [pc, #176]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ec:	f7fe fe04 	bl	8001cf8 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f4:	f7fe fe00 	bl	8001cf8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0f2      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003106:	4b23      	ldr	r3, [pc, #140]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003108:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ef      	beq.n	80030f4 <HAL_RCC_OscConfig+0x418>
 8003114:	e01b      	b.n	800314e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003116:	4b1f      	ldr	r3, [pc, #124]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003118:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800311c:	4a1d      	ldr	r2, [pc, #116]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003126:	f7fe fde7 	bl	8001cf8 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800312e:	f7fe fde3 	bl	8001cf8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0d5      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003140:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003142:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1ef      	bne.n	800312e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80c9 	beq.w	80032ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003158:	4b0e      	ldr	r3, [pc, #56]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 030c 	and.w	r3, r3, #12
 8003160:	2b0c      	cmp	r3, #12
 8003162:	f000 8083 	beq.w	800326c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d15e      	bne.n	800322c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a08      	ldr	r2, [pc, #32]	@ (8003194 <HAL_RCC_OscConfig+0x4b8>)
 8003174:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe fdbd 	bl	8001cf8 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003180:	e00c      	b.n	800319c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe fdb9 	bl	8001cf8 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d905      	bls.n	800319c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0ab      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
 8003194:	40021000 	.word	0x40021000
 8003198:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319c:	4b55      	ldr	r3, [pc, #340]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ec      	bne.n	8003182 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a8:	4b52      	ldr	r3, [pc, #328]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	4b52      	ldr	r3, [pc, #328]	@ (80032f8 <HAL_RCC_OscConfig+0x61c>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6a11      	ldr	r1, [r2, #32]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031b8:	3a01      	subs	r2, #1
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	4311      	orrs	r1, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80031c2:	0212      	lsls	r2, r2, #8
 80031c4:	4311      	orrs	r1, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031ca:	0852      	lsrs	r2, r2, #1
 80031cc:	3a01      	subs	r2, #1
 80031ce:	0552      	lsls	r2, r2, #21
 80031d0:	4311      	orrs	r1, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031d6:	0852      	lsrs	r2, r2, #1
 80031d8:	3a01      	subs	r2, #1
 80031da:	0652      	lsls	r2, r2, #25
 80031dc:	4311      	orrs	r1, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80031e2:	06d2      	lsls	r2, r2, #27
 80031e4:	430a      	orrs	r2, r1
 80031e6:	4943      	ldr	r1, [pc, #268]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ec:	4b41      	ldr	r3, [pc, #260]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a40      	ldr	r2, [pc, #256]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031f8:	4b3e      	ldr	r3, [pc, #248]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a3d      	ldr	r2, [pc, #244]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 80031fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003202:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fd78 	bl	8001cf8 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fd74 	bl	8001cf8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e066      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321e:	4b35      	ldr	r3, [pc, #212]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x530>
 800322a:	e05e      	b.n	80032ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322c:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a30      	ldr	r2, [pc, #192]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 8003232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fd5e 	bl	8001cf8 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe fd5a 	bl	8001cf8 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e04c      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003252:	4b28      	ldr	r3, [pc, #160]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800325e:	4b25      	ldr	r3, [pc, #148]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	4924      	ldr	r1, [pc, #144]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 8003264:	4b25      	ldr	r3, [pc, #148]	@ (80032fc <HAL_RCC_OscConfig+0x620>)
 8003266:	4013      	ands	r3, r2
 8003268:	60cb      	str	r3, [r1, #12]
 800326a:	e03e      	b.n	80032ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e039      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003278:	4b1e      	ldr	r3, [pc, #120]	@ (80032f4 <HAL_RCC_OscConfig+0x618>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f003 0203 	and.w	r2, r3, #3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	429a      	cmp	r2, r3
 800328a:	d12c      	bne.n	80032e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	3b01      	subs	r3, #1
 8003298:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d123      	bne.n	80032e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d11b      	bne.n	80032e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d113      	bne.n	80032e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	085b      	lsrs	r3, r3, #1
 80032ca:	3b01      	subs	r3, #1
 80032cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d109      	bne.n	80032e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032dc:	085b      	lsrs	r3, r3, #1
 80032de:	3b01      	subs	r3, #1
 80032e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d001      	beq.n	80032ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	019f800c 	.word	0x019f800c
 80032fc:	feeefffc 	.word	0xfeeefffc

08003300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e11e      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b91      	ldr	r3, [pc, #580]	@ (8003560 <HAL_RCC_ClockConfig+0x260>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d910      	bls.n	8003348 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b8e      	ldr	r3, [pc, #568]	@ (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 020f 	bic.w	r2, r3, #15
 800332e:	498c      	ldr	r1, [pc, #560]	@ (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b8a      	ldr	r3, [pc, #552]	@ (8003560 <HAL_RCC_ClockConfig+0x260>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e106      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d073      	beq.n	800343c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d129      	bne.n	80033b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335c:	4b81      	ldr	r3, [pc, #516]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0f4      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800336c:	f000 f99e 	bl	80036ac <RCC_GetSysClockFreqFromPLLSource>
 8003370:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4a7c      	ldr	r2, [pc, #496]	@ (8003568 <HAL_RCC_ClockConfig+0x268>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d93f      	bls.n	80033fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800337a:	4b7a      	ldr	r3, [pc, #488]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800338e:	2b00      	cmp	r3, #0
 8003390:	d033      	beq.n	80033fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003396:	2b00      	cmp	r3, #0
 8003398:	d12f      	bne.n	80033fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800339a:	4b72      	ldr	r3, [pc, #456]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033a2:	4a70      	ldr	r2, [pc, #448]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033aa:	2380      	movs	r3, #128	@ 0x80
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e024      	b.n	80033fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0c6      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c8:	4b66      	ldr	r3, [pc, #408]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0be      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033d8:	f000 f8ce 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4a61      	ldr	r2, [pc, #388]	@ (8003568 <HAL_RCC_ClockConfig+0x268>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d909      	bls.n	80033fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ee:	4a5d      	ldr	r2, [pc, #372]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033fa:	4b5a      	ldr	r3, [pc, #360]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f023 0203 	bic.w	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4957      	ldr	r1, [pc, #348]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800340c:	f7fe fc74 	bl	8001cf8 <HAL_GetTick>
 8003410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	e00a      	b.n	800342a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003414:	f7fe fc70 	bl	8001cf8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e095      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342a:	4b4e      	ldr	r3, [pc, #312]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 020c 	and.w	r2, r3, #12
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	429a      	cmp	r2, r3
 800343a:	d1eb      	bne.n	8003414 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d023      	beq.n	8003490 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003454:	4b43      	ldr	r3, [pc, #268]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a42      	ldr	r2, [pc, #264]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 800345a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800345e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800346c:	4b3d      	ldr	r3, [pc, #244]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003474:	4a3b      	ldr	r2, [pc, #236]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003476:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800347a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800347c:	4b39      	ldr	r3, [pc, #228]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4936      	ldr	r1, [pc, #216]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 800348a:	4313      	orrs	r3, r2
 800348c:	608b      	str	r3, [r1, #8]
 800348e:	e008      	b.n	80034a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b80      	cmp	r3, #128	@ 0x80
 8003494:	d105      	bne.n	80034a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003496:	4b33      	ldr	r3, [pc, #204]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	4a32      	ldr	r2, [pc, #200]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 800349c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d21d      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 020f 	bic.w	r2, r3, #15
 80034b8:	4929      	ldr	r1, [pc, #164]	@ (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034c0:	f7fe fc1a 	bl	8001cf8 <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fe fc16 	bl	8001cf8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e03b      	b.n	8003556 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <HAL_RCC_ClockConfig+0x260>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1ed      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4917      	ldr	r1, [pc, #92]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003516:	4b13      	ldr	r3, [pc, #76]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490f      	ldr	r1, [pc, #60]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800352a:	f000 f825 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 800352e:	4602      	mov	r2, r0
 8003530:	4b0c      	ldr	r3, [pc, #48]	@ (8003564 <HAL_RCC_ClockConfig+0x264>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	490c      	ldr	r1, [pc, #48]	@ (800356c <HAL_RCC_ClockConfig+0x26c>)
 800353c:	5ccb      	ldrb	r3, [r1, r3]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	4a0a      	ldr	r2, [pc, #40]	@ (8003570 <HAL_RCC_ClockConfig+0x270>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800354a:	4b0a      	ldr	r3, [pc, #40]	@ (8003574 <HAL_RCC_ClockConfig+0x274>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe fb86 	bl	8001c60 <HAL_InitTick>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40022000 	.word	0x40022000
 8003564:	40021000 	.word	0x40021000
 8003568:	04c4b400 	.word	0x04c4b400
 800356c:	08009fac 	.word	0x08009fac
 8003570:	20000000 	.word	0x20000000
 8003574:	20000004 	.word	0x20000004

08003578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800357e:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d102      	bne.n	8003590 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800358a:	4b2a      	ldr	r3, [pc, #168]	@ (8003634 <HAL_RCC_GetSysClockFreq+0xbc>)
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e047      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003590:	4b27      	ldr	r3, [pc, #156]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b08      	cmp	r3, #8
 800359a:	d102      	bne.n	80035a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800359c:	4b26      	ldr	r3, [pc, #152]	@ (8003638 <HAL_RCC_GetSysClockFreq+0xc0>)
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	e03e      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035a2:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d136      	bne.n	800361c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035ae:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	3301      	adds	r3, #1
 80035c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d10c      	bne.n	80035e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003638 <HAL_RCC_GetSysClockFreq+0xc0>)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	4a16      	ldr	r2, [pc, #88]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d6:	68d2      	ldr	r2, [r2, #12]
 80035d8:	0a12      	lsrs	r2, r2, #8
 80035da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	617b      	str	r3, [r7, #20]
      break;
 80035e4:	e00c      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035e6:	4a13      	ldr	r2, [pc, #76]	@ (8003634 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	4a10      	ldr	r2, [pc, #64]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f0:	68d2      	ldr	r2, [r2, #12]
 80035f2:	0a12      	lsrs	r2, r2, #8
 80035f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035f8:	fb02 f303 	mul.w	r3, r2, r3
 80035fc:	617b      	str	r3, [r7, #20]
      break;
 80035fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	0e5b      	lsrs	r3, r3, #25
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	3301      	adds	r3, #1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	fbb2 f3f3 	udiv	r3, r2, r3
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	e001      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003620:	693b      	ldr	r3, [r7, #16]
}
 8003622:	4618      	mov	r0, r3
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	00f42400 	.word	0x00f42400
 8003638:	016e3600 	.word	0x016e3600

0800363c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003640:	4b03      	ldr	r3, [pc, #12]	@ (8003650 <HAL_RCC_GetHCLKFreq+0x14>)
 8003642:	681b      	ldr	r3, [r3, #0]
}
 8003644:	4618      	mov	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000000 	.word	0x20000000

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003658:	f7ff fff0 	bl	800363c <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4904      	ldr	r1, [pc, #16]	@ (800367c <HAL_RCC_GetPCLK1Freq+0x28>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000
 800367c:	08009fbc 	.word	0x08009fbc

08003680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003684:	f7ff ffda 	bl	800363c <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b06      	ldr	r3, [pc, #24]	@ (80036a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0adb      	lsrs	r3, r3, #11
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4904      	ldr	r1, [pc, #16]	@ (80036a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000
 80036a8:	08009fbc 	.word	0x08009fbc

080036ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036b2:	4b1e      	ldr	r3, [pc, #120]	@ (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3301      	adds	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d10c      	bne.n	80036ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d0:	4a17      	ldr	r2, [pc, #92]	@ (8003730 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	4a14      	ldr	r2, [pc, #80]	@ (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036da:	68d2      	ldr	r2, [r2, #12]
 80036dc:	0a12      	lsrs	r2, r2, #8
 80036de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	617b      	str	r3, [r7, #20]
    break;
 80036e8:	e00c      	b.n	8003704 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036ea:	4a12      	ldr	r2, [pc, #72]	@ (8003734 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	4a0e      	ldr	r2, [pc, #56]	@ (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036f4:	68d2      	ldr	r2, [r2, #12]
 80036f6:	0a12      	lsrs	r2, r2, #8
 80036f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    break;
 8003702:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003704:	4b09      	ldr	r3, [pc, #36]	@ (800372c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	0e5b      	lsrs	r3, r3, #25
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	3301      	adds	r3, #1
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800371e:	687b      	ldr	r3, [r7, #4]
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40021000 	.word	0x40021000
 8003730:	016e3600 	.word	0x016e3600
 8003734:	00f42400 	.word	0x00f42400

08003738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003740:	2300      	movs	r3, #0
 8003742:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003744:	2300      	movs	r3, #0
 8003746:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8098 	beq.w	8003886 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b43      	ldr	r3, [pc, #268]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b40      	ldr	r3, [pc, #256]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376a:	4a3f      	ldr	r2, [pc, #252]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6593      	str	r3, [r2, #88]	@ 0x58
 8003772:	4b3d      	ldr	r3, [pc, #244]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003782:	4b3a      	ldr	r3, [pc, #232]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a39      	ldr	r2, [pc, #228]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800378c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800378e:	f7fe fab3 	bl	8001cf8 <HAL_GetTick>
 8003792:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003794:	e009      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fe faaf 	bl	8001cf8 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d902      	bls.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	74fb      	strb	r3, [r7, #19]
        break;
 80037a8:	e005      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037aa:	4b30      	ldr	r3, [pc, #192]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0ef      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d159      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01e      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d019      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037d8:	4b23      	ldr	r3, [pc, #140]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037e4:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003804:	4a18      	ldr	r2, [pc, #96]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003816:	f7fe fa6f 	bl	8001cf8 <HAL_GetTick>
 800381a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800381c:	e00b      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe fa6b 	bl	8001cf8 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d902      	bls.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	74fb      	strb	r3, [r7, #19]
            break;
 8003834:	e006      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003836:	4b0c      	ldr	r3, [pc, #48]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ec      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10b      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	4903      	ldr	r1, [pc, #12]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003860:	e008      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	74bb      	strb	r3, [r7, #18]
 8003866:	e005      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003868:	40021000 	.word	0x40021000
 800386c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003874:	7c7b      	ldrb	r3, [r7, #17]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4ba6      	ldr	r3, [pc, #664]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387e:	4aa5      	ldr	r2, [pc, #660]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003884:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003892:	4ba0      	ldr	r3, [pc, #640]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003898:	f023 0203 	bic.w	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	499c      	ldr	r1, [pc, #624]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038b4:	4b97      	ldr	r3, [pc, #604]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ba:	f023 020c 	bic.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	4994      	ldr	r1, [pc, #592]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	498b      	ldr	r1, [pc, #556]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038f8:	4b86      	ldr	r3, [pc, #536]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	4983      	ldr	r1, [pc, #524]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800391a:	4b7e      	ldr	r3, [pc, #504]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003920:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	497a      	ldr	r1, [pc, #488]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800393c:	4b75      	ldr	r3, [pc, #468]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003942:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	4972      	ldr	r1, [pc, #456]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800394c:	4313      	orrs	r3, r2
 800394e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800395e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003964:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	4969      	ldr	r1, [pc, #420]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003980:	4b64      	ldr	r3, [pc, #400]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	4961      	ldr	r1, [pc, #388]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	4958      	ldr	r1, [pc, #352]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d015      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039c4:	4b53      	ldr	r3, [pc, #332]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	4950      	ldr	r1, [pc, #320]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039e2:	d105      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039fc:	4b45      	ldr	r3, [pc, #276]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0a:	4942      	ldr	r1, [pc, #264]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a3c      	ldr	r2, [pc, #240]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a26:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d015      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a34:	4b37      	ldr	r3, [pc, #220]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	4934      	ldr	r1, [pc, #208]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a52:	d105      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a54:	4b2f      	ldr	r3, [pc, #188]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4a2e      	ldr	r2, [pc, #184]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a5e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a6c:	4b29      	ldr	r3, [pc, #164]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7a:	4926      	ldr	r1, [pc, #152]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a8c:	4b21      	ldr	r3, [pc, #132]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a20      	ldr	r2, [pc, #128]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a96:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d015      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aaa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab2:	4918      	ldr	r1, [pc, #96]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac4:	4b13      	ldr	r3, [pc, #76]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a12      	ldr	r2, [pc, #72]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ace:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003adc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aea:	490a      	ldr	r1, [pc, #40]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003afa:	d105      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4a04      	ldr	r2, [pc, #16]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b08:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000

08003b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e049      	b.n	8003bbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd feee 	bl	8001920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4619      	mov	r1, r3
 8003b56:	4610      	mov	r0, r2
 8003b58:	f000 fd2a 	bl	80045b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e049      	b.n	8003c6c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d106      	bne.n	8003bf2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f841 	bl	8003c74 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4619      	mov	r1, r3
 8003c04:	4610      	mov	r0, r2
 8003c06:	f000 fcd3 	bl	80045b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIM_IC_Start_IT+0x1e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e023      	b.n	8003cee <HAL_TIM_IC_Start_IT+0x66>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d104      	bne.n	8003cb6 <HAL_TIM_IC_Start_IT+0x2e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	e01b      	b.n	8003cee <HAL_TIM_IC_Start_IT+0x66>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d104      	bne.n	8003cc6 <HAL_TIM_IC_Start_IT+0x3e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e013      	b.n	8003cee <HAL_TIM_IC_Start_IT+0x66>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIM_IC_Start_IT+0x4e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	e00b      	b.n	8003cee <HAL_TIM_IC_Start_IT+0x66>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_IC_Start_IT+0x5e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e003      	b.n	8003cee <HAL_TIM_IC_Start_IT+0x66>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <HAL_TIM_IC_Start_IT+0x78>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e013      	b.n	8003d28 <HAL_TIM_IC_Start_IT+0xa0>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d104      	bne.n	8003d10 <HAL_TIM_IC_Start_IT+0x88>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e00b      	b.n	8003d28 <HAL_TIM_IC_Start_IT+0xa0>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d104      	bne.n	8003d20 <HAL_TIM_IC_Start_IT+0x98>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e003      	b.n	8003d28 <HAL_TIM_IC_Start_IT+0xa0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d2a:	7bbb      	ldrb	r3, [r7, #14]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d102      	bne.n	8003d36 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d30:	7b7b      	ldrb	r3, [r7, #13]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d001      	beq.n	8003d3a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0d8      	b.n	8003eec <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d104      	bne.n	8003d4a <HAL_TIM_IC_Start_IT+0xc2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d48:	e023      	b.n	8003d92 <HAL_TIM_IC_Start_IT+0x10a>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d104      	bne.n	8003d5a <HAL_TIM_IC_Start_IT+0xd2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d58:	e01b      	b.n	8003d92 <HAL_TIM_IC_Start_IT+0x10a>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d104      	bne.n	8003d6a <HAL_TIM_IC_Start_IT+0xe2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d68:	e013      	b.n	8003d92 <HAL_TIM_IC_Start_IT+0x10a>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d104      	bne.n	8003d7a <HAL_TIM_IC_Start_IT+0xf2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d78:	e00b      	b.n	8003d92 <HAL_TIM_IC_Start_IT+0x10a>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d104      	bne.n	8003d8a <HAL_TIM_IC_Start_IT+0x102>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d88:	e003      	b.n	8003d92 <HAL_TIM_IC_Start_IT+0x10a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <HAL_TIM_IC_Start_IT+0x11a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da0:	e013      	b.n	8003dca <HAL_TIM_IC_Start_IT+0x142>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_IC_Start_IT+0x12a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003db0:	e00b      	b.n	8003dca <HAL_TIM_IC_Start_IT+0x142>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_IC_Start_IT+0x13a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dc0:	e003      	b.n	8003dca <HAL_TIM_IC_Start_IT+0x142>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b0c      	cmp	r3, #12
 8003dce:	d841      	bhi.n	8003e54 <HAL_TIM_IC_Start_IT+0x1cc>
 8003dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <HAL_TIM_IC_Start_IT+0x150>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003e0d 	.word	0x08003e0d
 8003ddc:	08003e55 	.word	0x08003e55
 8003de0:	08003e55 	.word	0x08003e55
 8003de4:	08003e55 	.word	0x08003e55
 8003de8:	08003e1f 	.word	0x08003e1f
 8003dec:	08003e55 	.word	0x08003e55
 8003df0:	08003e55 	.word	0x08003e55
 8003df4:	08003e55 	.word	0x08003e55
 8003df8:	08003e31 	.word	0x08003e31
 8003dfc:	08003e55 	.word	0x08003e55
 8003e00:	08003e55 	.word	0x08003e55
 8003e04:	08003e55 	.word	0x08003e55
 8003e08:	08003e43 	.word	0x08003e43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0202 	orr.w	r2, r2, #2
 8003e1a:	60da      	str	r2, [r3, #12]
      break;
 8003e1c:	e01d      	b.n	8003e5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0204 	orr.w	r2, r2, #4
 8003e2c:	60da      	str	r2, [r3, #12]
      break;
 8003e2e:	e014      	b.n	8003e5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0208 	orr.w	r2, r2, #8
 8003e3e:	60da      	str	r2, [r3, #12]
      break;
 8003e40:	e00b      	b.n	8003e5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0210 	orr.w	r2, r2, #16
 8003e50:	60da      	str	r2, [r3, #12]
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d144      	bne.n	8003eea <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fdf7 	bl	8004a5c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a20      	ldr	r2, [pc, #128]	@ (8003ef4 <HAL_TIM_IC_Start_IT+0x26c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d018      	beq.n	8003eaa <HAL_TIM_IC_Start_IT+0x222>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e80:	d013      	beq.n	8003eaa <HAL_TIM_IC_Start_IT+0x222>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef8 <HAL_TIM_IC_Start_IT+0x270>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00e      	beq.n	8003eaa <HAL_TIM_IC_Start_IT+0x222>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1a      	ldr	r2, [pc, #104]	@ (8003efc <HAL_TIM_IC_Start_IT+0x274>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_TIM_IC_Start_IT+0x222>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a19      	ldr	r2, [pc, #100]	@ (8003f00 <HAL_TIM_IC_Start_IT+0x278>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_TIM_IC_Start_IT+0x222>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a17      	ldr	r2, [pc, #92]	@ (8003f04 <HAL_TIM_IC_Start_IT+0x27c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d115      	bne.n	8003ed6 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	4b15      	ldr	r3, [pc, #84]	@ (8003f08 <HAL_TIM_IC_Start_IT+0x280>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d015      	beq.n	8003ee8 <HAL_TIM_IC_Start_IT+0x260>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec2:	d011      	beq.n	8003ee8 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed4:	e008      	b.n	8003ee8 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e000      	b.n	8003eea <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40013400 	.word	0x40013400
 8003f04:	40014000 	.word	0x40014000
 8003f08:	00010007 	.word	0x00010007

08003f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d020      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01b      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0202 	mvn.w	r2, #2
 8003f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd f93a 	bl	80011d0 <HAL_TIM_IC_CaptureCallback>
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fb08 	bl	8004574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fb0f 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d020      	beq.n	8003fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01b      	beq.n	8003fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0204 	mvn.w	r2, #4
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd f914 	bl	80011d0 <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fae2 	bl	8004574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fae9 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d020      	beq.n	8004008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01b      	beq.n	8004008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0208 	mvn.w	r2, #8
 8003fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd f8ee 	bl	80011d0 <HAL_TIM_IC_CaptureCallback>
 8003ff4:	e005      	b.n	8004002 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fabc 	bl	8004574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fac3 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d020      	beq.n	8004054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01b      	beq.n	8004054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0210 	mvn.w	r2, #16
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2208      	movs	r2, #8
 800402a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd f8c8 	bl	80011d0 <HAL_TIM_IC_CaptureCallback>
 8004040:	e005      	b.n	800404e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa96 	bl	8004574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fa9d 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00c      	beq.n	8004078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0201 	mvn.w	r2, #1
 8004070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa74 	bl	8004560 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d104      	bne.n	800408c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00c      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800409e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fd8d 	bl	8004bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00c      	beq.n	80040ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fd85 	bl	8004bd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00c      	beq.n	80040ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d007      	beq.n	80040ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fa57 	bl	800459c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00c      	beq.n	8004112 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0220 	mvn.w	r2, #32
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fd4d 	bl	8004bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00c      	beq.n	8004136 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d007      	beq.n	8004136 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800412e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fd59 	bl	8004be8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00c      	beq.n	800415a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fd51 	bl	8004bfc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00c      	beq.n	800417e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fd49 	bl	8004c10 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00c      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d007      	beq.n	80041a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fd41 	bl	8004c24 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e088      	b.n	80042da <HAL_TIM_IC_ConfigChannel+0x130>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11b      	bne.n	800420e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80041e6:	f000 fa7f 	bl	80046e8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 020c 	bic.w	r2, r2, #12
 80041f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6999      	ldr	r1, [r3, #24]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	619a      	str	r2, [r3, #24]
 800420c:	e060      	b.n	80042d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b04      	cmp	r3, #4
 8004212:	d11c      	bne.n	800424e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004224:	f000 faf7 	bl	8004816 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004236:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6999      	ldr	r1, [r3, #24]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	021a      	lsls	r2, r3, #8
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	619a      	str	r2, [r3, #24]
 800424c:	e040      	b.n	80042d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b08      	cmp	r3, #8
 8004252:	d11b      	bne.n	800428c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004264:	f000 fb44 	bl	80048f0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 020c 	bic.w	r2, r2, #12
 8004276:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69d9      	ldr	r1, [r3, #28]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	61da      	str	r2, [r3, #28]
 800428a:	e021      	b.n	80042d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d11c      	bne.n	80042cc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80042a2:	f000 fb61 	bl	8004968 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69d9      	ldr	r1, [r3, #28]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	021a      	lsls	r2, r3, #8
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	61da      	str	r2, [r3, #28]
 80042ca:	e001      	b.n	80042d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_TIM_ConfigClockSource+0x1c>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e0de      	b.n	80044be <HAL_TIM_ConfigClockSource+0x1da>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800431e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800432a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a63      	ldr	r2, [pc, #396]	@ (80044c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	f000 80a9 	beq.w	8004492 <HAL_TIM_ConfigClockSource+0x1ae>
 8004340:	4a61      	ldr	r2, [pc, #388]	@ (80044c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	f200 80ae 	bhi.w	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004348:	4a60      	ldr	r2, [pc, #384]	@ (80044cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	f000 80a1 	beq.w	8004492 <HAL_TIM_ConfigClockSource+0x1ae>
 8004350:	4a5e      	ldr	r2, [pc, #376]	@ (80044cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	f200 80a6 	bhi.w	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004358:	4a5d      	ldr	r2, [pc, #372]	@ (80044d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800435a:	4293      	cmp	r3, r2
 800435c:	f000 8099 	beq.w	8004492 <HAL_TIM_ConfigClockSource+0x1ae>
 8004360:	4a5b      	ldr	r2, [pc, #364]	@ (80044d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004362:	4293      	cmp	r3, r2
 8004364:	f200 809e 	bhi.w	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004368:	4a5a      	ldr	r2, [pc, #360]	@ (80044d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	f000 8091 	beq.w	8004492 <HAL_TIM_ConfigClockSource+0x1ae>
 8004370:	4a58      	ldr	r2, [pc, #352]	@ (80044d4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	f200 8096 	bhi.w	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004378:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800437c:	f000 8089 	beq.w	8004492 <HAL_TIM_ConfigClockSource+0x1ae>
 8004380:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004384:	f200 808e 	bhi.w	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438c:	d03e      	beq.n	800440c <HAL_TIM_ConfigClockSource+0x128>
 800438e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004392:	f200 8087 	bhi.w	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800439a:	f000 8086 	beq.w	80044aa <HAL_TIM_ConfigClockSource+0x1c6>
 800439e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a2:	d87f      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80043a4:	2b70      	cmp	r3, #112	@ 0x70
 80043a6:	d01a      	beq.n	80043de <HAL_TIM_ConfigClockSource+0xfa>
 80043a8:	2b70      	cmp	r3, #112	@ 0x70
 80043aa:	d87b      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80043ac:	2b60      	cmp	r3, #96	@ 0x60
 80043ae:	d050      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x16e>
 80043b0:	2b60      	cmp	r3, #96	@ 0x60
 80043b2:	d877      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80043b4:	2b50      	cmp	r3, #80	@ 0x50
 80043b6:	d03c      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x14e>
 80043b8:	2b50      	cmp	r3, #80	@ 0x50
 80043ba:	d873      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80043bc:	2b40      	cmp	r3, #64	@ 0x40
 80043be:	d058      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x18e>
 80043c0:	2b40      	cmp	r3, #64	@ 0x40
 80043c2:	d86f      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80043c4:	2b30      	cmp	r3, #48	@ 0x30
 80043c6:	d064      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x1ae>
 80043c8:	2b30      	cmp	r3, #48	@ 0x30
 80043ca:	d86b      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d060      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x1ae>
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d867      	bhi.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d05c      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x1ae>
 80043d8:	2b10      	cmp	r3, #16
 80043da:	d05a      	beq.n	8004492 <HAL_TIM_ConfigClockSource+0x1ae>
 80043dc:	e062      	b.n	80044a4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ee:	f000 fb15 	bl	8004a1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004400:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	609a      	str	r2, [r3, #8]
      break;
 800440a:	e04f      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800441c:	f000 fafe 	bl	8004a1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800442e:	609a      	str	r2, [r3, #8]
      break;
 8004430:	e03c      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	461a      	mov	r2, r3
 8004440:	f000 f9ba 	bl	80047b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2150      	movs	r1, #80	@ 0x50
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fac9 	bl	80049e2 <TIM_ITRx_SetConfig>
      break;
 8004450:	e02c      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800445e:	461a      	mov	r2, r3
 8004460:	f000 fa16 	bl	8004890 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2160      	movs	r1, #96	@ 0x60
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fab9 	bl	80049e2 <TIM_ITRx_SetConfig>
      break;
 8004470:	e01c      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	461a      	mov	r2, r3
 8004480:	f000 f99a 	bl	80047b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2140      	movs	r1, #64	@ 0x40
 800448a:	4618      	mov	r0, r3
 800448c:	f000 faa9 	bl	80049e2 <TIM_ITRx_SetConfig>
      break;
 8004490:	e00c      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4619      	mov	r1, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f000 faa0 	bl	80049e2 <TIM_ITRx_SetConfig>
      break;
 80044a2:	e003      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
      break;
 80044a8:	e000      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80044aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	00100070 	.word	0x00100070
 80044cc:	00100040 	.word	0x00100040
 80044d0:	00100030 	.word	0x00100030
 80044d4:	00100020 	.word	0x00100020

080044d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	d831      	bhi.n	8004550 <HAL_TIM_ReadCapturedValue+0x78>
 80044ec:	a201      	add	r2, pc, #4	@ (adr r2, 80044f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004529 	.word	0x08004529
 80044f8:	08004551 	.word	0x08004551
 80044fc:	08004551 	.word	0x08004551
 8004500:	08004551 	.word	0x08004551
 8004504:	08004533 	.word	0x08004533
 8004508:	08004551 	.word	0x08004551
 800450c:	08004551 	.word	0x08004551
 8004510:	08004551 	.word	0x08004551
 8004514:	0800453d 	.word	0x0800453d
 8004518:	08004551 	.word	0x08004551
 800451c:	08004551 	.word	0x08004551
 8004520:	08004551 	.word	0x08004551
 8004524:	08004547 	.word	0x08004547
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800452e:	60fb      	str	r3, [r7, #12]

      break;
 8004530:	e00f      	b.n	8004552 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	60fb      	str	r3, [r7, #12]

      break;
 800453a:	e00a      	b.n	8004552 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004542:	60fb      	str	r3, [r7, #12]

      break;
 8004544:	e005      	b.n	8004552 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	60fb      	str	r3, [r7, #12]

      break;
 800454e:	e000      	b.n	8004552 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004550:	bf00      	nop
  }

  return tmpreg;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a42      	ldr	r2, [pc, #264]	@ (80046cc <TIM_Base_SetConfig+0x11c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00f      	beq.n	80045e8 <TIM_Base_SetConfig+0x38>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ce:	d00b      	beq.n	80045e8 <TIM_Base_SetConfig+0x38>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a3f      	ldr	r2, [pc, #252]	@ (80046d0 <TIM_Base_SetConfig+0x120>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d007      	beq.n	80045e8 <TIM_Base_SetConfig+0x38>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a3e      	ldr	r2, [pc, #248]	@ (80046d4 <TIM_Base_SetConfig+0x124>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <TIM_Base_SetConfig+0x38>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3d      	ldr	r2, [pc, #244]	@ (80046d8 <TIM_Base_SetConfig+0x128>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d108      	bne.n	80045fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a33      	ldr	r2, [pc, #204]	@ (80046cc <TIM_Base_SetConfig+0x11c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01b      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004608:	d017      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a30      	ldr	r2, [pc, #192]	@ (80046d0 <TIM_Base_SetConfig+0x120>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a2f      	ldr	r2, [pc, #188]	@ (80046d4 <TIM_Base_SetConfig+0x124>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00f      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2e      	ldr	r2, [pc, #184]	@ (80046d8 <TIM_Base_SetConfig+0x128>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00b      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2d      	ldr	r2, [pc, #180]	@ (80046dc <TIM_Base_SetConfig+0x12c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2c      	ldr	r2, [pc, #176]	@ (80046e0 <TIM_Base_SetConfig+0x130>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_Base_SetConfig+0x8a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a2b      	ldr	r2, [pc, #172]	@ (80046e4 <TIM_Base_SetConfig+0x134>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d108      	bne.n	800464c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a16      	ldr	r2, [pc, #88]	@ (80046cc <TIM_Base_SetConfig+0x11c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00f      	beq.n	8004698 <TIM_Base_SetConfig+0xe8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a17      	ldr	r2, [pc, #92]	@ (80046d8 <TIM_Base_SetConfig+0x128>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00b      	beq.n	8004698 <TIM_Base_SetConfig+0xe8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <TIM_Base_SetConfig+0x12c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <TIM_Base_SetConfig+0xe8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <TIM_Base_SetConfig+0x130>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_Base_SetConfig+0xe8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a14      	ldr	r2, [pc, #80]	@ (80046e4 <TIM_Base_SetConfig+0x134>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d103      	bne.n	80046a0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d105      	bne.n	80046be <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f023 0201 	bic.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]
  }
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40014400 	.word	0x40014400
 80046e4:	40014800 	.word	0x40014800

080046e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	f023 0201 	bic.w	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a24      	ldr	r2, [pc, #144]	@ (80047a4 <TIM_TI1_SetConfig+0xbc>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <TIM_TI1_SetConfig+0x56>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471c:	d00f      	beq.n	800473e <TIM_TI1_SetConfig+0x56>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a21      	ldr	r2, [pc, #132]	@ (80047a8 <TIM_TI1_SetConfig+0xc0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00b      	beq.n	800473e <TIM_TI1_SetConfig+0x56>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a20      	ldr	r2, [pc, #128]	@ (80047ac <TIM_TI1_SetConfig+0xc4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <TIM_TI1_SetConfig+0x56>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a1f      	ldr	r2, [pc, #124]	@ (80047b0 <TIM_TI1_SetConfig+0xc8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d003      	beq.n	800473e <TIM_TI1_SetConfig+0x56>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a1e      	ldr	r2, [pc, #120]	@ (80047b4 <TIM_TI1_SetConfig+0xcc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <TIM_TI1_SetConfig+0x5a>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <TIM_TI1_SetConfig+0x5c>
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f023 0303 	bic.w	r3, r3, #3
 800474e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e003      	b.n	8004762 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	b2db      	uxtb	r3, r3
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f023 030a 	bic.w	r3, r3, #10
 800477c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f003 030a 	and.w	r3, r3, #10
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	621a      	str	r2, [r3, #32]
}
 8004796:	bf00      	nop
 8004798:	371c      	adds	r7, #28
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40013400 	.word	0x40013400
 80047b4:	40014000 	.word	0x40014000

080047b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f023 0201 	bic.w	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f023 030a 	bic.w	r3, r3, #10
 80047f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004816:	b480      	push	{r7}
 8004818:	b087      	sub	sp, #28
 800481a:	af00      	add	r7, sp, #0
 800481c:	60f8      	str	r0, [r7, #12]
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f023 0210 	bic.w	r2, r3, #16
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	031b      	lsls	r3, r3, #12
 800485a:	b29b      	uxth	r3, r3
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004868:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	621a      	str	r2, [r3, #32]
}
 8004884:	bf00      	nop
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f023 0210 	bic.w	r2, r3, #16
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	031b      	lsls	r3, r3, #12
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	621a      	str	r2, [r3, #32]
}
 80048e4:	bf00      	nop
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f023 0303 	bic.w	r3, r3, #3
 800491c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800492c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	b2db      	uxtb	r3, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004940:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	621a      	str	r2, [r3, #32]
}
 800495c:	bf00      	nop
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004994:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	031b      	lsls	r3, r3, #12
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80049ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	031b      	lsls	r3, r3, #12
 80049c0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80049f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f043 0307 	orr.w	r3, r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	021a      	lsls	r2, r3, #8
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	609a      	str	r2, [r3, #8]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 031f 	and.w	r3, r3, #31
 8004a6e:	2201      	movs	r2, #1
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a1a      	ldr	r2, [r3, #32]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	401a      	ands	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a1a      	ldr	r2, [r3, #32]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	fa01 f303 	lsl.w	r3, r1, r3
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e065      	b.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2b      	ldr	r2, [pc, #172]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d108      	bne.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004afa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a1b      	ldr	r2, [pc, #108]	@ (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d018      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b36:	d013      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a18      	ldr	r2, [pc, #96]	@ (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a17      	ldr	r2, [pc, #92]	@ (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a12      	ldr	r2, [pc, #72]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d004      	beq.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a13      	ldr	r2, [pc, #76]	@ (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10c      	bne.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40012c00 	.word	0x40012c00
 8004b9c:	40013400 	.word	0x40013400
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40000800 	.word	0x40000800
 8004ba8:	40014000 	.word	0x40014000

08004bac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e042      	b.n	8004cd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fc fe07 	bl	8001870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2224      	movs	r2, #36	@ 0x24
 8004c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 faf4 	bl	8005270 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f825 	bl	8004cd8 <UART_SetConfig>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e01b      	b.n	8004cd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fb73 	bl	80053b4 <UART_CheckIdleState>
 8004cce:	4603      	mov	r3, r0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cdc:	b08c      	sub	sp, #48	@ 0x30
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4bab      	ldr	r3, [pc, #684]	@ (8004fb4 <UART_SetConfig+0x2dc>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4aa0      	ldr	r2, [pc, #640]	@ (8004fb8 <UART_SetConfig+0x2e0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004d4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	f023 010f 	bic.w	r1, r3, #15
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a91      	ldr	r2, [pc, #580]	@ (8004fbc <UART_SetConfig+0x2e4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d125      	bne.n	8004dc8 <UART_SetConfig+0xf0>
 8004d7c:	4b90      	ldr	r3, [pc, #576]	@ (8004fc0 <UART_SetConfig+0x2e8>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d81a      	bhi.n	8004dc0 <UART_SetConfig+0xe8>
 8004d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <UART_SetConfig+0xb8>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004db1 	.word	0x08004db1
 8004d98:	08004da9 	.word	0x08004da9
 8004d9c:	08004db9 	.word	0x08004db9
 8004da0:	2301      	movs	r3, #1
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004da6:	e0d6      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004da8:	2302      	movs	r3, #2
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dae:	e0d2      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004db0:	2304      	movs	r3, #4
 8004db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004db6:	e0ce      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004db8:	2308      	movs	r3, #8
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dbe:	e0ca      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dc6:	e0c6      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a7d      	ldr	r2, [pc, #500]	@ (8004fc4 <UART_SetConfig+0x2ec>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d138      	bne.n	8004e44 <UART_SetConfig+0x16c>
 8004dd2:	4b7b      	ldr	r3, [pc, #492]	@ (8004fc0 <UART_SetConfig+0x2e8>)
 8004dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd8:	f003 030c 	and.w	r3, r3, #12
 8004ddc:	2b0c      	cmp	r3, #12
 8004dde:	d82d      	bhi.n	8004e3c <UART_SetConfig+0x164>
 8004de0:	a201      	add	r2, pc, #4	@ (adr r2, 8004de8 <UART_SetConfig+0x110>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e1d 	.word	0x08004e1d
 8004dec:	08004e3d 	.word	0x08004e3d
 8004df0:	08004e3d 	.word	0x08004e3d
 8004df4:	08004e3d 	.word	0x08004e3d
 8004df8:	08004e2d 	.word	0x08004e2d
 8004dfc:	08004e3d 	.word	0x08004e3d
 8004e00:	08004e3d 	.word	0x08004e3d
 8004e04:	08004e3d 	.word	0x08004e3d
 8004e08:	08004e25 	.word	0x08004e25
 8004e0c:	08004e3d 	.word	0x08004e3d
 8004e10:	08004e3d 	.word	0x08004e3d
 8004e14:	08004e3d 	.word	0x08004e3d
 8004e18:	08004e35 	.word	0x08004e35
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e22:	e098      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004e24:	2302      	movs	r3, #2
 8004e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e2a:	e094      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e32:	e090      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004e34:	2308      	movs	r3, #8
 8004e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e3a:	e08c      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e42:	e088      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a5f      	ldr	r2, [pc, #380]	@ (8004fc8 <UART_SetConfig+0x2f0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d125      	bne.n	8004e9a <UART_SetConfig+0x1c2>
 8004e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8004fc0 <UART_SetConfig+0x2e8>)
 8004e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e58:	2b30      	cmp	r3, #48	@ 0x30
 8004e5a:	d016      	beq.n	8004e8a <UART_SetConfig+0x1b2>
 8004e5c:	2b30      	cmp	r3, #48	@ 0x30
 8004e5e:	d818      	bhi.n	8004e92 <UART_SetConfig+0x1ba>
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	d00a      	beq.n	8004e7a <UART_SetConfig+0x1a2>
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d814      	bhi.n	8004e92 <UART_SetConfig+0x1ba>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <UART_SetConfig+0x19a>
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d008      	beq.n	8004e82 <UART_SetConfig+0x1aa>
 8004e70:	e00f      	b.n	8004e92 <UART_SetConfig+0x1ba>
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e78:	e06d      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e80:	e069      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004e82:	2304      	movs	r3, #4
 8004e84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e88:	e065      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e90:	e061      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004e92:	2310      	movs	r3, #16
 8004e94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e98:	e05d      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4b      	ldr	r2, [pc, #300]	@ (8004fcc <UART_SetConfig+0x2f4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d125      	bne.n	8004ef0 <UART_SetConfig+0x218>
 8004ea4:	4b46      	ldr	r3, [pc, #280]	@ (8004fc0 <UART_SetConfig+0x2e8>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eaa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004eae:	2bc0      	cmp	r3, #192	@ 0xc0
 8004eb0:	d016      	beq.n	8004ee0 <UART_SetConfig+0x208>
 8004eb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004eb4:	d818      	bhi.n	8004ee8 <UART_SetConfig+0x210>
 8004eb6:	2b80      	cmp	r3, #128	@ 0x80
 8004eb8:	d00a      	beq.n	8004ed0 <UART_SetConfig+0x1f8>
 8004eba:	2b80      	cmp	r3, #128	@ 0x80
 8004ebc:	d814      	bhi.n	8004ee8 <UART_SetConfig+0x210>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <UART_SetConfig+0x1f0>
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	d008      	beq.n	8004ed8 <UART_SetConfig+0x200>
 8004ec6:	e00f      	b.n	8004ee8 <UART_SetConfig+0x210>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ece:	e042      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed6:	e03e      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ede:	e03a      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ee6:	e036      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004ee8:	2310      	movs	r3, #16
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eee:	e032      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a30      	ldr	r2, [pc, #192]	@ (8004fb8 <UART_SetConfig+0x2e0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d12a      	bne.n	8004f50 <UART_SetConfig+0x278>
 8004efa:	4b31      	ldr	r3, [pc, #196]	@ (8004fc0 <UART_SetConfig+0x2e8>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f08:	d01a      	beq.n	8004f40 <UART_SetConfig+0x268>
 8004f0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f0e:	d81b      	bhi.n	8004f48 <UART_SetConfig+0x270>
 8004f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f14:	d00c      	beq.n	8004f30 <UART_SetConfig+0x258>
 8004f16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f1a:	d815      	bhi.n	8004f48 <UART_SetConfig+0x270>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <UART_SetConfig+0x250>
 8004f20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f24:	d008      	beq.n	8004f38 <UART_SetConfig+0x260>
 8004f26:	e00f      	b.n	8004f48 <UART_SetConfig+0x270>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2e:	e012      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004f30:	2302      	movs	r3, #2
 8004f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f36:	e00e      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3e:	e00a      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004f40:	2308      	movs	r3, #8
 8004f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f46:	e006      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f4e:	e002      	b.n	8004f56 <UART_SetConfig+0x27e>
 8004f50:	2310      	movs	r3, #16
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a17      	ldr	r2, [pc, #92]	@ (8004fb8 <UART_SetConfig+0x2e0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	f040 80a8 	bne.w	80050b2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d834      	bhi.n	8004fd4 <UART_SetConfig+0x2fc>
 8004f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <UART_SetConfig+0x298>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f95 	.word	0x08004f95
 8004f74:	08004fd5 	.word	0x08004fd5
 8004f78:	08004f9d 	.word	0x08004f9d
 8004f7c:	08004fd5 	.word	0x08004fd5
 8004f80:	08004fa3 	.word	0x08004fa3
 8004f84:	08004fd5 	.word	0x08004fd5
 8004f88:	08004fd5 	.word	0x08004fd5
 8004f8c:	08004fd5 	.word	0x08004fd5
 8004f90:	08004fab 	.word	0x08004fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f94:	f7fe fb5e 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8004f98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f9a:	e021      	b.n	8004fe0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd0 <UART_SetConfig+0x2f8>)
 8004f9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fa0:	e01e      	b.n	8004fe0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7fe fae9 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 8004fa6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fa8:	e01a      	b.n	8004fe0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fb0:	e016      	b.n	8004fe0 <UART_SetConfig+0x308>
 8004fb2:	bf00      	nop
 8004fb4:	cfff69f3 	.word	0xcfff69f3
 8004fb8:	40008000 	.word	0x40008000
 8004fbc:	40013800 	.word	0x40013800
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40004400 	.word	0x40004400
 8004fc8:	40004800 	.word	0x40004800
 8004fcc:	40004c00 	.word	0x40004c00
 8004fd0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004fde:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 812a 	beq.w	800523c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	4a9e      	ldr	r2, [pc, #632]	@ (8005268 <UART_SetConfig+0x590>)
 8004fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	4413      	add	r3, r2
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	d305      	bcc.n	8005018 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	429a      	cmp	r2, r3
 8005016:	d903      	bls.n	8005020 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800501e:	e10d      	b.n	800523c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	2200      	movs	r2, #0
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	60fa      	str	r2, [r7, #12]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	4a8e      	ldr	r2, [pc, #568]	@ (8005268 <UART_SetConfig+0x590>)
 800502e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005032:	b29b      	uxth	r3, r3
 8005034:	2200      	movs	r2, #0
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	607a      	str	r2, [r7, #4]
 800503a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800503e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005042:	f7fb fe49 	bl	8000cd8 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	020b      	lsls	r3, r1, #8
 8005058:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800505c:	0202      	lsls	r2, r0, #8
 800505e:	6979      	ldr	r1, [r7, #20]
 8005060:	6849      	ldr	r1, [r1, #4]
 8005062:	0849      	lsrs	r1, r1, #1
 8005064:	2000      	movs	r0, #0
 8005066:	460c      	mov	r4, r1
 8005068:	4605      	mov	r5, r0
 800506a:	eb12 0804 	adds.w	r8, r2, r4
 800506e:	eb43 0905 	adc.w	r9, r3, r5
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	469a      	mov	sl, r3
 800507a:	4693      	mov	fp, r2
 800507c:	4652      	mov	r2, sl
 800507e:	465b      	mov	r3, fp
 8005080:	4640      	mov	r0, r8
 8005082:	4649      	mov	r1, r9
 8005084:	f7fb fe28 	bl	8000cd8 <__aeabi_uldivmod>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4613      	mov	r3, r2
 800508e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005096:	d308      	bcc.n	80050aa <UART_SetConfig+0x3d2>
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800509e:	d204      	bcs.n	80050aa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6a3a      	ldr	r2, [r7, #32]
 80050a6:	60da      	str	r2, [r3, #12]
 80050a8:	e0c8      	b.n	800523c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050b0:	e0c4      	b.n	800523c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ba:	d167      	bne.n	800518c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80050bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d828      	bhi.n	8005116 <UART_SetConfig+0x43e>
 80050c4:	a201      	add	r2, pc, #4	@ (adr r2, 80050cc <UART_SetConfig+0x3f4>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050f1 	.word	0x080050f1
 80050d0:	080050f9 	.word	0x080050f9
 80050d4:	08005101 	.word	0x08005101
 80050d8:	08005117 	.word	0x08005117
 80050dc:	08005107 	.word	0x08005107
 80050e0:	08005117 	.word	0x08005117
 80050e4:	08005117 	.word	0x08005117
 80050e8:	08005117 	.word	0x08005117
 80050ec:	0800510f 	.word	0x0800510f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f0:	f7fe fab0 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 80050f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050f6:	e014      	b.n	8005122 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f8:	f7fe fac2 	bl	8003680 <HAL_RCC_GetPCLK2Freq>
 80050fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80050fe:	e010      	b.n	8005122 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005100:	4b5a      	ldr	r3, [pc, #360]	@ (800526c <UART_SetConfig+0x594>)
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005104:	e00d      	b.n	8005122 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005106:	f7fe fa37 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 800510a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800510c:	e009      	b.n	8005122 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005114:	e005      	b.n	8005122 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005120:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8089 	beq.w	800523c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512e:	4a4e      	ldr	r2, [pc, #312]	@ (8005268 <UART_SetConfig+0x590>)
 8005130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005134:	461a      	mov	r2, r3
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	fbb3 f3f2 	udiv	r3, r3, r2
 800513c:	005a      	lsls	r2, r3, #1
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	441a      	add	r2, r3
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	fbb2 f3f3 	udiv	r3, r2, r3
 800514e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	2b0f      	cmp	r3, #15
 8005154:	d916      	bls.n	8005184 <UART_SetConfig+0x4ac>
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800515c:	d212      	bcs.n	8005184 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f023 030f 	bic.w	r3, r3, #15
 8005166:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	b29b      	uxth	r3, r3
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	b29a      	uxth	r2, r3
 8005174:	8bfb      	ldrh	r3, [r7, #30]
 8005176:	4313      	orrs	r3, r2
 8005178:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	8bfa      	ldrh	r2, [r7, #30]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	e05b      	b.n	800523c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800518a:	e057      	b.n	800523c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800518c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005190:	2b08      	cmp	r3, #8
 8005192:	d828      	bhi.n	80051e6 <UART_SetConfig+0x50e>
 8005194:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <UART_SetConfig+0x4c4>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051d1 	.word	0x080051d1
 80051a8:	080051e7 	.word	0x080051e7
 80051ac:	080051d7 	.word	0x080051d7
 80051b0:	080051e7 	.word	0x080051e7
 80051b4:	080051e7 	.word	0x080051e7
 80051b8:	080051e7 	.word	0x080051e7
 80051bc:	080051df 	.word	0x080051df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c0:	f7fe fa48 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 80051c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051c6:	e014      	b.n	80051f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c8:	f7fe fa5a 	bl	8003680 <HAL_RCC_GetPCLK2Freq>
 80051cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051ce:	e010      	b.n	80051f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d0:	4b26      	ldr	r3, [pc, #152]	@ (800526c <UART_SetConfig+0x594>)
 80051d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051d4:	e00d      	b.n	80051f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d6:	f7fe f9cf 	bl	8003578 <HAL_RCC_GetSysClockFreq>
 80051da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80051dc:	e009      	b.n	80051f2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80051e4:	e005      	b.n	80051f2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80051f0:	bf00      	nop
    }

    if (pclk != 0U)
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d021      	beq.n	800523c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005268 <UART_SetConfig+0x590>)
 80051fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005202:	461a      	mov	r2, r3
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	fbb3 f2f2 	udiv	r2, r3, r2
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	441a      	add	r2, r3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	2b0f      	cmp	r3, #15
 8005220:	d909      	bls.n	8005236 <UART_SetConfig+0x55e>
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005228:	d205      	bcs.n	8005236 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	b29a      	uxth	r2, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60da      	str	r2, [r3, #12]
 8005234:	e002      	b.n	800523c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2201      	movs	r2, #1
 8005240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2201      	movs	r2, #1
 8005248:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	2200      	movs	r2, #0
 8005250:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2200      	movs	r2, #0
 8005256:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005258:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800525c:	4618      	mov	r0, r3
 800525e:	3730      	adds	r7, #48	@ 0x30
 8005260:	46bd      	mov	sp, r7
 8005262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005266:	bf00      	nop
 8005268:	08009fc4 	.word	0x08009fc4
 800526c:	00f42400 	.word	0x00f42400

08005270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00a      	beq.n	8005322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01a      	beq.n	8005386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800536e:	d10a      	bne.n	8005386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b098      	sub	sp, #96	@ 0x60
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053c4:	f7fc fc98 	bl	8001cf8 <HAL_GetTick>
 80053c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d12f      	bne.n	8005438 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e0:	2200      	movs	r2, #0
 80053e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f88e 	bl	8005508 <UART_WaitOnFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d022      	beq.n	8005438 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005406:	653b      	str	r3, [r7, #80]	@ 0x50
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005410:	647b      	str	r3, [r7, #68]	@ 0x44
 8005412:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800541e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e6      	bne.n	80053f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e063      	b.n	8005500 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d149      	bne.n	80054da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005446:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544e:	2200      	movs	r2, #0
 8005450:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f857 	bl	8005508 <UART_WaitOnFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d03c      	beq.n	80054da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	623b      	str	r3, [r7, #32]
   return(result);
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005474:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	461a      	mov	r2, r3
 800547c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800547e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005480:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e6      	bne.n	8005460 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3308      	adds	r3, #8
 8005498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3308      	adds	r3, #8
 80054b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054b2:	61fa      	str	r2, [r7, #28]
 80054b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	69b9      	ldr	r1, [r7, #24]
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	617b      	str	r3, [r7, #20]
   return(result);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e5      	bne.n	8005492 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e012      	b.n	8005500 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3758      	adds	r7, #88	@ 0x58
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005518:	e04f      	b.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005520:	d04b      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005522:	f7fc fbe9 	bl	8001cf8 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <UART_WaitOnFlagUntilTimeout+0x30>
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e04e      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	d037      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b80      	cmp	r3, #128	@ 0x80
 800554e:	d034      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b40      	cmp	r3, #64	@ 0x40
 8005554:	d031      	beq.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b08      	cmp	r3, #8
 8005562:	d110      	bne.n	8005586 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2208      	movs	r2, #8
 800556a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f838 	bl	80055e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2208      	movs	r2, #8
 8005576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e029      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005594:	d111      	bne.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800559e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f81e 	bl	80055e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e00f      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4013      	ands	r3, r2
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	bf0c      	ite	eq
 80055ca:	2301      	moveq	r3, #1
 80055cc:	2300      	movne	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d0a0      	beq.n	800551a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b095      	sub	sp, #84	@ 0x54
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005608:	643b      	str	r3, [r7, #64]	@ 0x40
 800560a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800560e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e6      	bne.n	80055ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	61fb      	str	r3, [r7, #28]
   return(result);
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005632:	f023 0301 	bic.w	r3, r3, #1
 8005636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3308      	adds	r3, #8
 800563e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005640:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005642:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e3      	bne.n	800561c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005658:	2b01      	cmp	r3, #1
 800565a:	d118      	bne.n	800568e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	60bb      	str	r3, [r7, #8]
   return(result);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f023 0310 	bic.w	r3, r3, #16
 8005670:	647b      	str	r3, [r7, #68]	@ 0x44
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	6979      	ldr	r1, [r7, #20]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	613b      	str	r3, [r7, #16]
   return(result);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e6      	bne.n	800565c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80056a2:	bf00      	nop
 80056a4:	3754      	adds	r7, #84	@ 0x54
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e027      	b.n	8005714 <HAL_UARTEx_DisableFifoMode+0x66>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	@ 0x24
 80056d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0201 	bic.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80056f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005734:	2302      	movs	r3, #2
 8005736:	e02d      	b.n	8005794 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2224      	movs	r2, #36	@ 0x24
 8005744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0201 	bic.w	r2, r2, #1
 800575e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f84f 	bl	8005818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e02d      	b.n	8005810 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2224      	movs	r2, #36	@ 0x24
 80057c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0201 	bic.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	683a      	ldr	r2, [r7, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f811 	bl	8005818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2220      	movs	r2, #32
 8005802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005824:	2b00      	cmp	r3, #0
 8005826:	d108      	bne.n	800583a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005838:	e031      	b.n	800589e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800583a:	2308      	movs	r3, #8
 800583c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800583e:	2308      	movs	r3, #8
 8005840:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	0e5b      	lsrs	r3, r3, #25
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	0f5b      	lsrs	r3, r3, #29
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005862:	7bbb      	ldrb	r3, [r7, #14]
 8005864:	7b3a      	ldrb	r2, [r7, #12]
 8005866:	4911      	ldr	r1, [pc, #68]	@ (80058ac <UARTEx_SetNbDataToProcess+0x94>)
 8005868:	5c8a      	ldrb	r2, [r1, r2]
 800586a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800586e:	7b3a      	ldrb	r2, [r7, #12]
 8005870:	490f      	ldr	r1, [pc, #60]	@ (80058b0 <UARTEx_SetNbDataToProcess+0x98>)
 8005872:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005874:	fb93 f3f2 	sdiv	r3, r3, r2
 8005878:	b29a      	uxth	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	7b7a      	ldrb	r2, [r7, #13]
 8005884:	4909      	ldr	r1, [pc, #36]	@ (80058ac <UARTEx_SetNbDataToProcess+0x94>)
 8005886:	5c8a      	ldrb	r2, [r1, r2]
 8005888:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800588c:	7b7a      	ldrb	r2, [r7, #13]
 800588e:	4908      	ldr	r1, [pc, #32]	@ (80058b0 <UARTEx_SetNbDataToProcess+0x98>)
 8005890:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005892:	fb93 f3f2 	sdiv	r3, r3, r2
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	08009fdc 	.word	0x08009fdc
 80058b0:	08009fe4 	.word	0x08009fe4

080058b4 <__cvt>:
 80058b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058b8:	ec57 6b10 	vmov	r6, r7, d0
 80058bc:	2f00      	cmp	r7, #0
 80058be:	460c      	mov	r4, r1
 80058c0:	4619      	mov	r1, r3
 80058c2:	463b      	mov	r3, r7
 80058c4:	bfbb      	ittet	lt
 80058c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80058ca:	461f      	movlt	r7, r3
 80058cc:	2300      	movge	r3, #0
 80058ce:	232d      	movlt	r3, #45	@ 0x2d
 80058d0:	700b      	strb	r3, [r1, #0]
 80058d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80058d8:	4691      	mov	r9, r2
 80058da:	f023 0820 	bic.w	r8, r3, #32
 80058de:	bfbc      	itt	lt
 80058e0:	4632      	movlt	r2, r6
 80058e2:	4616      	movlt	r6, r2
 80058e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058e8:	d005      	beq.n	80058f6 <__cvt+0x42>
 80058ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80058ee:	d100      	bne.n	80058f2 <__cvt+0x3e>
 80058f0:	3401      	adds	r4, #1
 80058f2:	2102      	movs	r1, #2
 80058f4:	e000      	b.n	80058f8 <__cvt+0x44>
 80058f6:	2103      	movs	r1, #3
 80058f8:	ab03      	add	r3, sp, #12
 80058fa:	9301      	str	r3, [sp, #4]
 80058fc:	ab02      	add	r3, sp, #8
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	ec47 6b10 	vmov	d0, r6, r7
 8005904:	4653      	mov	r3, sl
 8005906:	4622      	mov	r2, r4
 8005908:	f001 f876 	bl	80069f8 <_dtoa_r>
 800590c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005910:	4605      	mov	r5, r0
 8005912:	d119      	bne.n	8005948 <__cvt+0x94>
 8005914:	f019 0f01 	tst.w	r9, #1
 8005918:	d00e      	beq.n	8005938 <__cvt+0x84>
 800591a:	eb00 0904 	add.w	r9, r0, r4
 800591e:	2200      	movs	r2, #0
 8005920:	2300      	movs	r3, #0
 8005922:	4630      	mov	r0, r6
 8005924:	4639      	mov	r1, r7
 8005926:	f7fb f8f7 	bl	8000b18 <__aeabi_dcmpeq>
 800592a:	b108      	cbz	r0, 8005930 <__cvt+0x7c>
 800592c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005930:	2230      	movs	r2, #48	@ 0x30
 8005932:	9b03      	ldr	r3, [sp, #12]
 8005934:	454b      	cmp	r3, r9
 8005936:	d31e      	bcc.n	8005976 <__cvt+0xc2>
 8005938:	9b03      	ldr	r3, [sp, #12]
 800593a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800593c:	1b5b      	subs	r3, r3, r5
 800593e:	4628      	mov	r0, r5
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	b004      	add	sp, #16
 8005944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800594c:	eb00 0904 	add.w	r9, r0, r4
 8005950:	d1e5      	bne.n	800591e <__cvt+0x6a>
 8005952:	7803      	ldrb	r3, [r0, #0]
 8005954:	2b30      	cmp	r3, #48	@ 0x30
 8005956:	d10a      	bne.n	800596e <__cvt+0xba>
 8005958:	2200      	movs	r2, #0
 800595a:	2300      	movs	r3, #0
 800595c:	4630      	mov	r0, r6
 800595e:	4639      	mov	r1, r7
 8005960:	f7fb f8da 	bl	8000b18 <__aeabi_dcmpeq>
 8005964:	b918      	cbnz	r0, 800596e <__cvt+0xba>
 8005966:	f1c4 0401 	rsb	r4, r4, #1
 800596a:	f8ca 4000 	str.w	r4, [sl]
 800596e:	f8da 3000 	ldr.w	r3, [sl]
 8005972:	4499      	add	r9, r3
 8005974:	e7d3      	b.n	800591e <__cvt+0x6a>
 8005976:	1c59      	adds	r1, r3, #1
 8005978:	9103      	str	r1, [sp, #12]
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	e7d9      	b.n	8005932 <__cvt+0x7e>

0800597e <__exponent>:
 800597e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005980:	2900      	cmp	r1, #0
 8005982:	bfba      	itte	lt
 8005984:	4249      	neglt	r1, r1
 8005986:	232d      	movlt	r3, #45	@ 0x2d
 8005988:	232b      	movge	r3, #43	@ 0x2b
 800598a:	2909      	cmp	r1, #9
 800598c:	7002      	strb	r2, [r0, #0]
 800598e:	7043      	strb	r3, [r0, #1]
 8005990:	dd29      	ble.n	80059e6 <__exponent+0x68>
 8005992:	f10d 0307 	add.w	r3, sp, #7
 8005996:	461d      	mov	r5, r3
 8005998:	270a      	movs	r7, #10
 800599a:	461a      	mov	r2, r3
 800599c:	fbb1 f6f7 	udiv	r6, r1, r7
 80059a0:	fb07 1416 	mls	r4, r7, r6, r1
 80059a4:	3430      	adds	r4, #48	@ 0x30
 80059a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80059aa:	460c      	mov	r4, r1
 80059ac:	2c63      	cmp	r4, #99	@ 0x63
 80059ae:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80059b2:	4631      	mov	r1, r6
 80059b4:	dcf1      	bgt.n	800599a <__exponent+0x1c>
 80059b6:	3130      	adds	r1, #48	@ 0x30
 80059b8:	1e94      	subs	r4, r2, #2
 80059ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80059be:	1c41      	adds	r1, r0, #1
 80059c0:	4623      	mov	r3, r4
 80059c2:	42ab      	cmp	r3, r5
 80059c4:	d30a      	bcc.n	80059dc <__exponent+0x5e>
 80059c6:	f10d 0309 	add.w	r3, sp, #9
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	42ac      	cmp	r4, r5
 80059ce:	bf88      	it	hi
 80059d0:	2300      	movhi	r3, #0
 80059d2:	3302      	adds	r3, #2
 80059d4:	4403      	add	r3, r0
 80059d6:	1a18      	subs	r0, r3, r0
 80059d8:	b003      	add	sp, #12
 80059da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80059e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80059e4:	e7ed      	b.n	80059c2 <__exponent+0x44>
 80059e6:	2330      	movs	r3, #48	@ 0x30
 80059e8:	3130      	adds	r1, #48	@ 0x30
 80059ea:	7083      	strb	r3, [r0, #2]
 80059ec:	70c1      	strb	r1, [r0, #3]
 80059ee:	1d03      	adds	r3, r0, #4
 80059f0:	e7f1      	b.n	80059d6 <__exponent+0x58>
	...

080059f4 <_printf_float>:
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	b08d      	sub	sp, #52	@ 0x34
 80059fa:	460c      	mov	r4, r1
 80059fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005a00:	4616      	mov	r6, r2
 8005a02:	461f      	mov	r7, r3
 8005a04:	4605      	mov	r5, r0
 8005a06:	f000 feef 	bl	80067e8 <_localeconv_r>
 8005a0a:	6803      	ldr	r3, [r0, #0]
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fa fc56 	bl	80002c0 <strlen>
 8005a14:	2300      	movs	r3, #0
 8005a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a18:	f8d8 3000 	ldr.w	r3, [r8]
 8005a1c:	9005      	str	r0, [sp, #20]
 8005a1e:	3307      	adds	r3, #7
 8005a20:	f023 0307 	bic.w	r3, r3, #7
 8005a24:	f103 0208 	add.w	r2, r3, #8
 8005a28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a2c:	f8d4 b000 	ldr.w	fp, [r4]
 8005a30:	f8c8 2000 	str.w	r2, [r8]
 8005a34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005a3c:	9307      	str	r3, [sp, #28]
 8005a3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a4a:	4b9c      	ldr	r3, [pc, #624]	@ (8005cbc <_printf_float+0x2c8>)
 8005a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a50:	f7fb f894 	bl	8000b7c <__aeabi_dcmpun>
 8005a54:	bb70      	cbnz	r0, 8005ab4 <_printf_float+0xc0>
 8005a56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a5a:	4b98      	ldr	r3, [pc, #608]	@ (8005cbc <_printf_float+0x2c8>)
 8005a5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a60:	f7fb f86e 	bl	8000b40 <__aeabi_dcmple>
 8005a64:	bb30      	cbnz	r0, 8005ab4 <_printf_float+0xc0>
 8005a66:	2200      	movs	r2, #0
 8005a68:	2300      	movs	r3, #0
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	4649      	mov	r1, r9
 8005a6e:	f7fb f85d 	bl	8000b2c <__aeabi_dcmplt>
 8005a72:	b110      	cbz	r0, 8005a7a <_printf_float+0x86>
 8005a74:	232d      	movs	r3, #45	@ 0x2d
 8005a76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a7a:	4a91      	ldr	r2, [pc, #580]	@ (8005cc0 <_printf_float+0x2cc>)
 8005a7c:	4b91      	ldr	r3, [pc, #580]	@ (8005cc4 <_printf_float+0x2d0>)
 8005a7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005a82:	bf94      	ite	ls
 8005a84:	4690      	movls	r8, r2
 8005a86:	4698      	movhi	r8, r3
 8005a88:	2303      	movs	r3, #3
 8005a8a:	6123      	str	r3, [r4, #16]
 8005a8c:	f02b 0304 	bic.w	r3, fp, #4
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	f04f 0900 	mov.w	r9, #0
 8005a96:	9700      	str	r7, [sp, #0]
 8005a98:	4633      	mov	r3, r6
 8005a9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 f9d2 	bl	8005e48 <_printf_common>
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f040 808d 	bne.w	8005bc4 <_printf_float+0x1d0>
 8005aaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aae:	b00d      	add	sp, #52	@ 0x34
 8005ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	4640      	mov	r0, r8
 8005aba:	4649      	mov	r1, r9
 8005abc:	f7fb f85e 	bl	8000b7c <__aeabi_dcmpun>
 8005ac0:	b140      	cbz	r0, 8005ad4 <_printf_float+0xe0>
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfbc      	itt	lt
 8005ac8:	232d      	movlt	r3, #45	@ 0x2d
 8005aca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005ace:	4a7e      	ldr	r2, [pc, #504]	@ (8005cc8 <_printf_float+0x2d4>)
 8005ad0:	4b7e      	ldr	r3, [pc, #504]	@ (8005ccc <_printf_float+0x2d8>)
 8005ad2:	e7d4      	b.n	8005a7e <_printf_float+0x8a>
 8005ad4:	6863      	ldr	r3, [r4, #4]
 8005ad6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005ada:	9206      	str	r2, [sp, #24]
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	d13b      	bne.n	8005b58 <_printf_float+0x164>
 8005ae0:	2306      	movs	r3, #6
 8005ae2:	6063      	str	r3, [r4, #4]
 8005ae4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005ae8:	2300      	movs	r3, #0
 8005aea:	6022      	str	r2, [r4, #0]
 8005aec:	9303      	str	r3, [sp, #12]
 8005aee:	ab0a      	add	r3, sp, #40	@ 0x28
 8005af0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005af4:	ab09      	add	r3, sp, #36	@ 0x24
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	6861      	ldr	r1, [r4, #4]
 8005afa:	ec49 8b10 	vmov	d0, r8, r9
 8005afe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005b02:	4628      	mov	r0, r5
 8005b04:	f7ff fed6 	bl	80058b4 <__cvt>
 8005b08:	9b06      	ldr	r3, [sp, #24]
 8005b0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b0c:	2b47      	cmp	r3, #71	@ 0x47
 8005b0e:	4680      	mov	r8, r0
 8005b10:	d129      	bne.n	8005b66 <_printf_float+0x172>
 8005b12:	1cc8      	adds	r0, r1, #3
 8005b14:	db02      	blt.n	8005b1c <_printf_float+0x128>
 8005b16:	6863      	ldr	r3, [r4, #4]
 8005b18:	4299      	cmp	r1, r3
 8005b1a:	dd41      	ble.n	8005ba0 <_printf_float+0x1ac>
 8005b1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b20:	fa5f fa8a 	uxtb.w	sl, sl
 8005b24:	3901      	subs	r1, #1
 8005b26:	4652      	mov	r2, sl
 8005b28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b2e:	f7ff ff26 	bl	800597e <__exponent>
 8005b32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b34:	1813      	adds	r3, r2, r0
 8005b36:	2a01      	cmp	r2, #1
 8005b38:	4681      	mov	r9, r0
 8005b3a:	6123      	str	r3, [r4, #16]
 8005b3c:	dc02      	bgt.n	8005b44 <_printf_float+0x150>
 8005b3e:	6822      	ldr	r2, [r4, #0]
 8005b40:	07d2      	lsls	r2, r2, #31
 8005b42:	d501      	bpl.n	8005b48 <_printf_float+0x154>
 8005b44:	3301      	adds	r3, #1
 8005b46:	6123      	str	r3, [r4, #16]
 8005b48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0a2      	beq.n	8005a96 <_printf_float+0xa2>
 8005b50:	232d      	movs	r3, #45	@ 0x2d
 8005b52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b56:	e79e      	b.n	8005a96 <_printf_float+0xa2>
 8005b58:	9a06      	ldr	r2, [sp, #24]
 8005b5a:	2a47      	cmp	r2, #71	@ 0x47
 8005b5c:	d1c2      	bne.n	8005ae4 <_printf_float+0xf0>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1c0      	bne.n	8005ae4 <_printf_float+0xf0>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e7bd      	b.n	8005ae2 <_printf_float+0xee>
 8005b66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b6a:	d9db      	bls.n	8005b24 <_printf_float+0x130>
 8005b6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005b70:	d118      	bne.n	8005ba4 <_printf_float+0x1b0>
 8005b72:	2900      	cmp	r1, #0
 8005b74:	6863      	ldr	r3, [r4, #4]
 8005b76:	dd0b      	ble.n	8005b90 <_printf_float+0x19c>
 8005b78:	6121      	str	r1, [r4, #16]
 8005b7a:	b913      	cbnz	r3, 8005b82 <_printf_float+0x18e>
 8005b7c:	6822      	ldr	r2, [r4, #0]
 8005b7e:	07d0      	lsls	r0, r2, #31
 8005b80:	d502      	bpl.n	8005b88 <_printf_float+0x194>
 8005b82:	3301      	adds	r3, #1
 8005b84:	440b      	add	r3, r1
 8005b86:	6123      	str	r3, [r4, #16]
 8005b88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005b8a:	f04f 0900 	mov.w	r9, #0
 8005b8e:	e7db      	b.n	8005b48 <_printf_float+0x154>
 8005b90:	b913      	cbnz	r3, 8005b98 <_printf_float+0x1a4>
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	07d2      	lsls	r2, r2, #31
 8005b96:	d501      	bpl.n	8005b9c <_printf_float+0x1a8>
 8005b98:	3302      	adds	r3, #2
 8005b9a:	e7f4      	b.n	8005b86 <_printf_float+0x192>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e7f2      	b.n	8005b86 <_printf_float+0x192>
 8005ba0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ba6:	4299      	cmp	r1, r3
 8005ba8:	db05      	blt.n	8005bb6 <_printf_float+0x1c2>
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	6121      	str	r1, [r4, #16]
 8005bae:	07d8      	lsls	r0, r3, #31
 8005bb0:	d5ea      	bpl.n	8005b88 <_printf_float+0x194>
 8005bb2:	1c4b      	adds	r3, r1, #1
 8005bb4:	e7e7      	b.n	8005b86 <_printf_float+0x192>
 8005bb6:	2900      	cmp	r1, #0
 8005bb8:	bfd4      	ite	le
 8005bba:	f1c1 0202 	rsble	r2, r1, #2
 8005bbe:	2201      	movgt	r2, #1
 8005bc0:	4413      	add	r3, r2
 8005bc2:	e7e0      	b.n	8005b86 <_printf_float+0x192>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	055a      	lsls	r2, r3, #21
 8005bc8:	d407      	bmi.n	8005bda <_printf_float+0x1e6>
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	4642      	mov	r2, r8
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d12b      	bne.n	8005c30 <_printf_float+0x23c>
 8005bd8:	e767      	b.n	8005aaa <_printf_float+0xb6>
 8005bda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bde:	f240 80dd 	bls.w	8005d9c <_printf_float+0x3a8>
 8005be2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005be6:	2200      	movs	r2, #0
 8005be8:	2300      	movs	r3, #0
 8005bea:	f7fa ff95 	bl	8000b18 <__aeabi_dcmpeq>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d033      	beq.n	8005c5a <_printf_float+0x266>
 8005bf2:	4a37      	ldr	r2, [pc, #220]	@ (8005cd0 <_printf_float+0x2dc>)
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	47b8      	blx	r7
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f43f af54 	beq.w	8005aaa <_printf_float+0xb6>
 8005c02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005c06:	4543      	cmp	r3, r8
 8005c08:	db02      	blt.n	8005c10 <_printf_float+0x21c>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	07d8      	lsls	r0, r3, #31
 8005c0e:	d50f      	bpl.n	8005c30 <_printf_float+0x23c>
 8005c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	f43f af45 	beq.w	8005aaa <_printf_float+0xb6>
 8005c20:	f04f 0900 	mov.w	r9, #0
 8005c24:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005c28:	f104 0a1a 	add.w	sl, r4, #26
 8005c2c:	45c8      	cmp	r8, r9
 8005c2e:	dc09      	bgt.n	8005c44 <_printf_float+0x250>
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	079b      	lsls	r3, r3, #30
 8005c34:	f100 8103 	bmi.w	8005e3e <_printf_float+0x44a>
 8005c38:	68e0      	ldr	r0, [r4, #12]
 8005c3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c3c:	4298      	cmp	r0, r3
 8005c3e:	bfb8      	it	lt
 8005c40:	4618      	movlt	r0, r3
 8005c42:	e734      	b.n	8005aae <_printf_float+0xba>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4652      	mov	r2, sl
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b8      	blx	r7
 8005c4e:	3001      	adds	r0, #1
 8005c50:	f43f af2b 	beq.w	8005aaa <_printf_float+0xb6>
 8005c54:	f109 0901 	add.w	r9, r9, #1
 8005c58:	e7e8      	b.n	8005c2c <_printf_float+0x238>
 8005c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dc39      	bgt.n	8005cd4 <_printf_float+0x2e0>
 8005c60:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd0 <_printf_float+0x2dc>)
 8005c62:	2301      	movs	r3, #1
 8005c64:	4631      	mov	r1, r6
 8005c66:	4628      	mov	r0, r5
 8005c68:	47b8      	blx	r7
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	f43f af1d 	beq.w	8005aaa <_printf_float+0xb6>
 8005c70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005c74:	ea59 0303 	orrs.w	r3, r9, r3
 8005c78:	d102      	bne.n	8005c80 <_printf_float+0x28c>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	07d9      	lsls	r1, r3, #31
 8005c7e:	d5d7      	bpl.n	8005c30 <_printf_float+0x23c>
 8005c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c84:	4631      	mov	r1, r6
 8005c86:	4628      	mov	r0, r5
 8005c88:	47b8      	blx	r7
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	f43f af0d 	beq.w	8005aaa <_printf_float+0xb6>
 8005c90:	f04f 0a00 	mov.w	sl, #0
 8005c94:	f104 0b1a 	add.w	fp, r4, #26
 8005c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c9a:	425b      	negs	r3, r3
 8005c9c:	4553      	cmp	r3, sl
 8005c9e:	dc01      	bgt.n	8005ca4 <_printf_float+0x2b0>
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	e793      	b.n	8005bcc <_printf_float+0x1d8>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	465a      	mov	r2, fp
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4628      	mov	r0, r5
 8005cac:	47b8      	blx	r7
 8005cae:	3001      	adds	r0, #1
 8005cb0:	f43f aefb 	beq.w	8005aaa <_printf_float+0xb6>
 8005cb4:	f10a 0a01 	add.w	sl, sl, #1
 8005cb8:	e7ee      	b.n	8005c98 <_printf_float+0x2a4>
 8005cba:	bf00      	nop
 8005cbc:	7fefffff 	.word	0x7fefffff
 8005cc0:	08009fec 	.word	0x08009fec
 8005cc4:	08009ff0 	.word	0x08009ff0
 8005cc8:	08009ff4 	.word	0x08009ff4
 8005ccc:	08009ff8 	.word	0x08009ff8
 8005cd0:	08009ffc 	.word	0x08009ffc
 8005cd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005cd6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005cda:	4553      	cmp	r3, sl
 8005cdc:	bfa8      	it	ge
 8005cde:	4653      	movge	r3, sl
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	4699      	mov	r9, r3
 8005ce4:	dc36      	bgt.n	8005d54 <_printf_float+0x360>
 8005ce6:	f04f 0b00 	mov.w	fp, #0
 8005cea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cee:	f104 021a 	add.w	r2, r4, #26
 8005cf2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005cf4:	9306      	str	r3, [sp, #24]
 8005cf6:	eba3 0309 	sub.w	r3, r3, r9
 8005cfa:	455b      	cmp	r3, fp
 8005cfc:	dc31      	bgt.n	8005d62 <_printf_float+0x36e>
 8005cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d00:	459a      	cmp	sl, r3
 8005d02:	dc3a      	bgt.n	8005d7a <_printf_float+0x386>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	07da      	lsls	r2, r3, #31
 8005d08:	d437      	bmi.n	8005d7a <_printf_float+0x386>
 8005d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d0c:	ebaa 0903 	sub.w	r9, sl, r3
 8005d10:	9b06      	ldr	r3, [sp, #24]
 8005d12:	ebaa 0303 	sub.w	r3, sl, r3
 8005d16:	4599      	cmp	r9, r3
 8005d18:	bfa8      	it	ge
 8005d1a:	4699      	movge	r9, r3
 8005d1c:	f1b9 0f00 	cmp.w	r9, #0
 8005d20:	dc33      	bgt.n	8005d8a <_printf_float+0x396>
 8005d22:	f04f 0800 	mov.w	r8, #0
 8005d26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d2a:	f104 0b1a 	add.w	fp, r4, #26
 8005d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d30:	ebaa 0303 	sub.w	r3, sl, r3
 8005d34:	eba3 0309 	sub.w	r3, r3, r9
 8005d38:	4543      	cmp	r3, r8
 8005d3a:	f77f af79 	ble.w	8005c30 <_printf_float+0x23c>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	465a      	mov	r2, fp
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f43f aeae 	beq.w	8005aaa <_printf_float+0xb6>
 8005d4e:	f108 0801 	add.w	r8, r8, #1
 8005d52:	e7ec      	b.n	8005d2e <_printf_float+0x33a>
 8005d54:	4642      	mov	r2, r8
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d1c2      	bne.n	8005ce6 <_printf_float+0x2f2>
 8005d60:	e6a3      	b.n	8005aaa <_printf_float+0xb6>
 8005d62:	2301      	movs	r3, #1
 8005d64:	4631      	mov	r1, r6
 8005d66:	4628      	mov	r0, r5
 8005d68:	9206      	str	r2, [sp, #24]
 8005d6a:	47b8      	blx	r7
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	f43f ae9c 	beq.w	8005aaa <_printf_float+0xb6>
 8005d72:	9a06      	ldr	r2, [sp, #24]
 8005d74:	f10b 0b01 	add.w	fp, fp, #1
 8005d78:	e7bb      	b.n	8005cf2 <_printf_float+0x2fe>
 8005d7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	d1c0      	bne.n	8005d0a <_printf_float+0x316>
 8005d88:	e68f      	b.n	8005aaa <_printf_float+0xb6>
 8005d8a:	9a06      	ldr	r2, [sp, #24]
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	4442      	add	r2, r8
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	d1c3      	bne.n	8005d22 <_printf_float+0x32e>
 8005d9a:	e686      	b.n	8005aaa <_printf_float+0xb6>
 8005d9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005da0:	f1ba 0f01 	cmp.w	sl, #1
 8005da4:	dc01      	bgt.n	8005daa <_printf_float+0x3b6>
 8005da6:	07db      	lsls	r3, r3, #31
 8005da8:	d536      	bpl.n	8005e18 <_printf_float+0x424>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4642      	mov	r2, r8
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b8      	blx	r7
 8005db4:	3001      	adds	r0, #1
 8005db6:	f43f ae78 	beq.w	8005aaa <_printf_float+0xb6>
 8005dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	47b8      	blx	r7
 8005dc4:	3001      	adds	r0, #1
 8005dc6:	f43f ae70 	beq.w	8005aaa <_printf_float+0xb6>
 8005dca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005dd6:	f7fa fe9f 	bl	8000b18 <__aeabi_dcmpeq>
 8005dda:	b9c0      	cbnz	r0, 8005e0e <_printf_float+0x41a>
 8005ddc:	4653      	mov	r3, sl
 8005dde:	f108 0201 	add.w	r2, r8, #1
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	d10c      	bne.n	8005e06 <_printf_float+0x412>
 8005dec:	e65d      	b.n	8005aaa <_printf_float+0xb6>
 8005dee:	2301      	movs	r3, #1
 8005df0:	465a      	mov	r2, fp
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b8      	blx	r7
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f43f ae56 	beq.w	8005aaa <_printf_float+0xb6>
 8005dfe:	f108 0801 	add.w	r8, r8, #1
 8005e02:	45d0      	cmp	r8, sl
 8005e04:	dbf3      	blt.n	8005dee <_printf_float+0x3fa>
 8005e06:	464b      	mov	r3, r9
 8005e08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e0c:	e6df      	b.n	8005bce <_printf_float+0x1da>
 8005e0e:	f04f 0800 	mov.w	r8, #0
 8005e12:	f104 0b1a 	add.w	fp, r4, #26
 8005e16:	e7f4      	b.n	8005e02 <_printf_float+0x40e>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4642      	mov	r2, r8
 8005e1c:	e7e1      	b.n	8005de2 <_printf_float+0x3ee>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	464a      	mov	r2, r9
 8005e22:	4631      	mov	r1, r6
 8005e24:	4628      	mov	r0, r5
 8005e26:	47b8      	blx	r7
 8005e28:	3001      	adds	r0, #1
 8005e2a:	f43f ae3e 	beq.w	8005aaa <_printf_float+0xb6>
 8005e2e:	f108 0801 	add.w	r8, r8, #1
 8005e32:	68e3      	ldr	r3, [r4, #12]
 8005e34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e36:	1a5b      	subs	r3, r3, r1
 8005e38:	4543      	cmp	r3, r8
 8005e3a:	dcf0      	bgt.n	8005e1e <_printf_float+0x42a>
 8005e3c:	e6fc      	b.n	8005c38 <_printf_float+0x244>
 8005e3e:	f04f 0800 	mov.w	r8, #0
 8005e42:	f104 0919 	add.w	r9, r4, #25
 8005e46:	e7f4      	b.n	8005e32 <_printf_float+0x43e>

08005e48 <_printf_common>:
 8005e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	4616      	mov	r6, r2
 8005e4e:	4698      	mov	r8, r3
 8005e50:	688a      	ldr	r2, [r1, #8]
 8005e52:	690b      	ldr	r3, [r1, #16]
 8005e54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	bfb8      	it	lt
 8005e5c:	4613      	movlt	r3, r2
 8005e5e:	6033      	str	r3, [r6, #0]
 8005e60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e64:	4607      	mov	r7, r0
 8005e66:	460c      	mov	r4, r1
 8005e68:	b10a      	cbz	r2, 8005e6e <_printf_common+0x26>
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	6033      	str	r3, [r6, #0]
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	0699      	lsls	r1, r3, #26
 8005e72:	bf42      	ittt	mi
 8005e74:	6833      	ldrmi	r3, [r6, #0]
 8005e76:	3302      	addmi	r3, #2
 8005e78:	6033      	strmi	r3, [r6, #0]
 8005e7a:	6825      	ldr	r5, [r4, #0]
 8005e7c:	f015 0506 	ands.w	r5, r5, #6
 8005e80:	d106      	bne.n	8005e90 <_printf_common+0x48>
 8005e82:	f104 0a19 	add.w	sl, r4, #25
 8005e86:	68e3      	ldr	r3, [r4, #12]
 8005e88:	6832      	ldr	r2, [r6, #0]
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	42ab      	cmp	r3, r5
 8005e8e:	dc26      	bgt.n	8005ede <_printf_common+0x96>
 8005e90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	3b00      	subs	r3, #0
 8005e98:	bf18      	it	ne
 8005e9a:	2301      	movne	r3, #1
 8005e9c:	0692      	lsls	r2, r2, #26
 8005e9e:	d42b      	bmi.n	8005ef8 <_printf_common+0xb0>
 8005ea0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	47c8      	blx	r9
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d01e      	beq.n	8005eec <_printf_common+0xa4>
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	6922      	ldr	r2, [r4, #16]
 8005eb2:	f003 0306 	and.w	r3, r3, #6
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	bf02      	ittt	eq
 8005eba:	68e5      	ldreq	r5, [r4, #12]
 8005ebc:	6833      	ldreq	r3, [r6, #0]
 8005ebe:	1aed      	subeq	r5, r5, r3
 8005ec0:	68a3      	ldr	r3, [r4, #8]
 8005ec2:	bf0c      	ite	eq
 8005ec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ec8:	2500      	movne	r5, #0
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	bfc4      	itt	gt
 8005ece:	1a9b      	subgt	r3, r3, r2
 8005ed0:	18ed      	addgt	r5, r5, r3
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	341a      	adds	r4, #26
 8005ed6:	42b5      	cmp	r5, r6
 8005ed8:	d11a      	bne.n	8005f10 <_printf_common+0xc8>
 8005eda:	2000      	movs	r0, #0
 8005edc:	e008      	b.n	8005ef0 <_printf_common+0xa8>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	47c8      	blx	r9
 8005ee8:	3001      	adds	r0, #1
 8005eea:	d103      	bne.n	8005ef4 <_printf_common+0xac>
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef4:	3501      	adds	r5, #1
 8005ef6:	e7c6      	b.n	8005e86 <_printf_common+0x3e>
 8005ef8:	18e1      	adds	r1, r4, r3
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	2030      	movs	r0, #48	@ 0x30
 8005efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f02:	4422      	add	r2, r4
 8005f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f0c:	3302      	adds	r3, #2
 8005f0e:	e7c7      	b.n	8005ea0 <_printf_common+0x58>
 8005f10:	2301      	movs	r3, #1
 8005f12:	4622      	mov	r2, r4
 8005f14:	4641      	mov	r1, r8
 8005f16:	4638      	mov	r0, r7
 8005f18:	47c8      	blx	r9
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d0e6      	beq.n	8005eec <_printf_common+0xa4>
 8005f1e:	3601      	adds	r6, #1
 8005f20:	e7d9      	b.n	8005ed6 <_printf_common+0x8e>
	...

08005f24 <_printf_i>:
 8005f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	7e0f      	ldrb	r7, [r1, #24]
 8005f2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f2c:	2f78      	cmp	r7, #120	@ 0x78
 8005f2e:	4691      	mov	r9, r2
 8005f30:	4680      	mov	r8, r0
 8005f32:	460c      	mov	r4, r1
 8005f34:	469a      	mov	sl, r3
 8005f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f3a:	d807      	bhi.n	8005f4c <_printf_i+0x28>
 8005f3c:	2f62      	cmp	r7, #98	@ 0x62
 8005f3e:	d80a      	bhi.n	8005f56 <_printf_i+0x32>
 8005f40:	2f00      	cmp	r7, #0
 8005f42:	f000 80d2 	beq.w	80060ea <_printf_i+0x1c6>
 8005f46:	2f58      	cmp	r7, #88	@ 0x58
 8005f48:	f000 80b9 	beq.w	80060be <_printf_i+0x19a>
 8005f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f54:	e03a      	b.n	8005fcc <_printf_i+0xa8>
 8005f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f5a:	2b15      	cmp	r3, #21
 8005f5c:	d8f6      	bhi.n	8005f4c <_printf_i+0x28>
 8005f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005f64 <_printf_i+0x40>)
 8005f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f64:	08005fbd 	.word	0x08005fbd
 8005f68:	08005fd1 	.word	0x08005fd1
 8005f6c:	08005f4d 	.word	0x08005f4d
 8005f70:	08005f4d 	.word	0x08005f4d
 8005f74:	08005f4d 	.word	0x08005f4d
 8005f78:	08005f4d 	.word	0x08005f4d
 8005f7c:	08005fd1 	.word	0x08005fd1
 8005f80:	08005f4d 	.word	0x08005f4d
 8005f84:	08005f4d 	.word	0x08005f4d
 8005f88:	08005f4d 	.word	0x08005f4d
 8005f8c:	08005f4d 	.word	0x08005f4d
 8005f90:	080060d1 	.word	0x080060d1
 8005f94:	08005ffb 	.word	0x08005ffb
 8005f98:	0800608b 	.word	0x0800608b
 8005f9c:	08005f4d 	.word	0x08005f4d
 8005fa0:	08005f4d 	.word	0x08005f4d
 8005fa4:	080060f3 	.word	0x080060f3
 8005fa8:	08005f4d 	.word	0x08005f4d
 8005fac:	08005ffb 	.word	0x08005ffb
 8005fb0:	08005f4d 	.word	0x08005f4d
 8005fb4:	08005f4d 	.word	0x08005f4d
 8005fb8:	08006093 	.word	0x08006093
 8005fbc:	6833      	ldr	r3, [r6, #0]
 8005fbe:	1d1a      	adds	r2, r3, #4
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6032      	str	r2, [r6, #0]
 8005fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e09d      	b.n	800610c <_printf_i+0x1e8>
 8005fd0:	6833      	ldr	r3, [r6, #0]
 8005fd2:	6820      	ldr	r0, [r4, #0]
 8005fd4:	1d19      	adds	r1, r3, #4
 8005fd6:	6031      	str	r1, [r6, #0]
 8005fd8:	0606      	lsls	r6, r0, #24
 8005fda:	d501      	bpl.n	8005fe0 <_printf_i+0xbc>
 8005fdc:	681d      	ldr	r5, [r3, #0]
 8005fde:	e003      	b.n	8005fe8 <_printf_i+0xc4>
 8005fe0:	0645      	lsls	r5, r0, #25
 8005fe2:	d5fb      	bpl.n	8005fdc <_printf_i+0xb8>
 8005fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	da03      	bge.n	8005ff4 <_printf_i+0xd0>
 8005fec:	232d      	movs	r3, #45	@ 0x2d
 8005fee:	426d      	negs	r5, r5
 8005ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ff4:	4859      	ldr	r0, [pc, #356]	@ (800615c <_printf_i+0x238>)
 8005ff6:	230a      	movs	r3, #10
 8005ff8:	e011      	b.n	800601e <_printf_i+0xfa>
 8005ffa:	6821      	ldr	r1, [r4, #0]
 8005ffc:	6833      	ldr	r3, [r6, #0]
 8005ffe:	0608      	lsls	r0, r1, #24
 8006000:	f853 5b04 	ldr.w	r5, [r3], #4
 8006004:	d402      	bmi.n	800600c <_printf_i+0xe8>
 8006006:	0649      	lsls	r1, r1, #25
 8006008:	bf48      	it	mi
 800600a:	b2ad      	uxthmi	r5, r5
 800600c:	2f6f      	cmp	r7, #111	@ 0x6f
 800600e:	4853      	ldr	r0, [pc, #332]	@ (800615c <_printf_i+0x238>)
 8006010:	6033      	str	r3, [r6, #0]
 8006012:	bf14      	ite	ne
 8006014:	230a      	movne	r3, #10
 8006016:	2308      	moveq	r3, #8
 8006018:	2100      	movs	r1, #0
 800601a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800601e:	6866      	ldr	r6, [r4, #4]
 8006020:	60a6      	str	r6, [r4, #8]
 8006022:	2e00      	cmp	r6, #0
 8006024:	bfa2      	ittt	ge
 8006026:	6821      	ldrge	r1, [r4, #0]
 8006028:	f021 0104 	bicge.w	r1, r1, #4
 800602c:	6021      	strge	r1, [r4, #0]
 800602e:	b90d      	cbnz	r5, 8006034 <_printf_i+0x110>
 8006030:	2e00      	cmp	r6, #0
 8006032:	d04b      	beq.n	80060cc <_printf_i+0x1a8>
 8006034:	4616      	mov	r6, r2
 8006036:	fbb5 f1f3 	udiv	r1, r5, r3
 800603a:	fb03 5711 	mls	r7, r3, r1, r5
 800603e:	5dc7      	ldrb	r7, [r0, r7]
 8006040:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006044:	462f      	mov	r7, r5
 8006046:	42bb      	cmp	r3, r7
 8006048:	460d      	mov	r5, r1
 800604a:	d9f4      	bls.n	8006036 <_printf_i+0x112>
 800604c:	2b08      	cmp	r3, #8
 800604e:	d10b      	bne.n	8006068 <_printf_i+0x144>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	07df      	lsls	r7, r3, #31
 8006054:	d508      	bpl.n	8006068 <_printf_i+0x144>
 8006056:	6923      	ldr	r3, [r4, #16]
 8006058:	6861      	ldr	r1, [r4, #4]
 800605a:	4299      	cmp	r1, r3
 800605c:	bfde      	ittt	le
 800605e:	2330      	movle	r3, #48	@ 0x30
 8006060:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006064:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006068:	1b92      	subs	r2, r2, r6
 800606a:	6122      	str	r2, [r4, #16]
 800606c:	f8cd a000 	str.w	sl, [sp]
 8006070:	464b      	mov	r3, r9
 8006072:	aa03      	add	r2, sp, #12
 8006074:	4621      	mov	r1, r4
 8006076:	4640      	mov	r0, r8
 8006078:	f7ff fee6 	bl	8005e48 <_printf_common>
 800607c:	3001      	adds	r0, #1
 800607e:	d14a      	bne.n	8006116 <_printf_i+0x1f2>
 8006080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006084:	b004      	add	sp, #16
 8006086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	f043 0320 	orr.w	r3, r3, #32
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	4833      	ldr	r0, [pc, #204]	@ (8006160 <_printf_i+0x23c>)
 8006094:	2778      	movs	r7, #120	@ 0x78
 8006096:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	6831      	ldr	r1, [r6, #0]
 800609e:	061f      	lsls	r7, r3, #24
 80060a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80060a4:	d402      	bmi.n	80060ac <_printf_i+0x188>
 80060a6:	065f      	lsls	r7, r3, #25
 80060a8:	bf48      	it	mi
 80060aa:	b2ad      	uxthmi	r5, r5
 80060ac:	6031      	str	r1, [r6, #0]
 80060ae:	07d9      	lsls	r1, r3, #31
 80060b0:	bf44      	itt	mi
 80060b2:	f043 0320 	orrmi.w	r3, r3, #32
 80060b6:	6023      	strmi	r3, [r4, #0]
 80060b8:	b11d      	cbz	r5, 80060c2 <_printf_i+0x19e>
 80060ba:	2310      	movs	r3, #16
 80060bc:	e7ac      	b.n	8006018 <_printf_i+0xf4>
 80060be:	4827      	ldr	r0, [pc, #156]	@ (800615c <_printf_i+0x238>)
 80060c0:	e7e9      	b.n	8006096 <_printf_i+0x172>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	f023 0320 	bic.w	r3, r3, #32
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	e7f6      	b.n	80060ba <_printf_i+0x196>
 80060cc:	4616      	mov	r6, r2
 80060ce:	e7bd      	b.n	800604c <_printf_i+0x128>
 80060d0:	6833      	ldr	r3, [r6, #0]
 80060d2:	6825      	ldr	r5, [r4, #0]
 80060d4:	6961      	ldr	r1, [r4, #20]
 80060d6:	1d18      	adds	r0, r3, #4
 80060d8:	6030      	str	r0, [r6, #0]
 80060da:	062e      	lsls	r6, r5, #24
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	d501      	bpl.n	80060e4 <_printf_i+0x1c0>
 80060e0:	6019      	str	r1, [r3, #0]
 80060e2:	e002      	b.n	80060ea <_printf_i+0x1c6>
 80060e4:	0668      	lsls	r0, r5, #25
 80060e6:	d5fb      	bpl.n	80060e0 <_printf_i+0x1bc>
 80060e8:	8019      	strh	r1, [r3, #0]
 80060ea:	2300      	movs	r3, #0
 80060ec:	6123      	str	r3, [r4, #16]
 80060ee:	4616      	mov	r6, r2
 80060f0:	e7bc      	b.n	800606c <_printf_i+0x148>
 80060f2:	6833      	ldr	r3, [r6, #0]
 80060f4:	1d1a      	adds	r2, r3, #4
 80060f6:	6032      	str	r2, [r6, #0]
 80060f8:	681e      	ldr	r6, [r3, #0]
 80060fa:	6862      	ldr	r2, [r4, #4]
 80060fc:	2100      	movs	r1, #0
 80060fe:	4630      	mov	r0, r6
 8006100:	f7fa f88e 	bl	8000220 <memchr>
 8006104:	b108      	cbz	r0, 800610a <_printf_i+0x1e6>
 8006106:	1b80      	subs	r0, r0, r6
 8006108:	6060      	str	r0, [r4, #4]
 800610a:	6863      	ldr	r3, [r4, #4]
 800610c:	6123      	str	r3, [r4, #16]
 800610e:	2300      	movs	r3, #0
 8006110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006114:	e7aa      	b.n	800606c <_printf_i+0x148>
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	4632      	mov	r2, r6
 800611a:	4649      	mov	r1, r9
 800611c:	4640      	mov	r0, r8
 800611e:	47d0      	blx	sl
 8006120:	3001      	adds	r0, #1
 8006122:	d0ad      	beq.n	8006080 <_printf_i+0x15c>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	079b      	lsls	r3, r3, #30
 8006128:	d413      	bmi.n	8006152 <_printf_i+0x22e>
 800612a:	68e0      	ldr	r0, [r4, #12]
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	4298      	cmp	r0, r3
 8006130:	bfb8      	it	lt
 8006132:	4618      	movlt	r0, r3
 8006134:	e7a6      	b.n	8006084 <_printf_i+0x160>
 8006136:	2301      	movs	r3, #1
 8006138:	4632      	mov	r2, r6
 800613a:	4649      	mov	r1, r9
 800613c:	4640      	mov	r0, r8
 800613e:	47d0      	blx	sl
 8006140:	3001      	adds	r0, #1
 8006142:	d09d      	beq.n	8006080 <_printf_i+0x15c>
 8006144:	3501      	adds	r5, #1
 8006146:	68e3      	ldr	r3, [r4, #12]
 8006148:	9903      	ldr	r1, [sp, #12]
 800614a:	1a5b      	subs	r3, r3, r1
 800614c:	42ab      	cmp	r3, r5
 800614e:	dcf2      	bgt.n	8006136 <_printf_i+0x212>
 8006150:	e7eb      	b.n	800612a <_printf_i+0x206>
 8006152:	2500      	movs	r5, #0
 8006154:	f104 0619 	add.w	r6, r4, #25
 8006158:	e7f5      	b.n	8006146 <_printf_i+0x222>
 800615a:	bf00      	nop
 800615c:	08009ffe 	.word	0x08009ffe
 8006160:	0800a00f 	.word	0x0800a00f

08006164 <_scanf_float>:
 8006164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006168:	b087      	sub	sp, #28
 800616a:	4617      	mov	r7, r2
 800616c:	9303      	str	r3, [sp, #12]
 800616e:	688b      	ldr	r3, [r1, #8]
 8006170:	1e5a      	subs	r2, r3, #1
 8006172:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006176:	bf81      	itttt	hi
 8006178:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800617c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006180:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006184:	608b      	strhi	r3, [r1, #8]
 8006186:	680b      	ldr	r3, [r1, #0]
 8006188:	460a      	mov	r2, r1
 800618a:	f04f 0500 	mov.w	r5, #0
 800618e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006192:	f842 3b1c 	str.w	r3, [r2], #28
 8006196:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800619a:	4680      	mov	r8, r0
 800619c:	460c      	mov	r4, r1
 800619e:	bf98      	it	ls
 80061a0:	f04f 0b00 	movls.w	fp, #0
 80061a4:	9201      	str	r2, [sp, #4]
 80061a6:	4616      	mov	r6, r2
 80061a8:	46aa      	mov	sl, r5
 80061aa:	46a9      	mov	r9, r5
 80061ac:	9502      	str	r5, [sp, #8]
 80061ae:	68a2      	ldr	r2, [r4, #8]
 80061b0:	b152      	cbz	r2, 80061c8 <_scanf_float+0x64>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b4e      	cmp	r3, #78	@ 0x4e
 80061b8:	d864      	bhi.n	8006284 <_scanf_float+0x120>
 80061ba:	2b40      	cmp	r3, #64	@ 0x40
 80061bc:	d83c      	bhi.n	8006238 <_scanf_float+0xd4>
 80061be:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80061c2:	b2c8      	uxtb	r0, r1
 80061c4:	280e      	cmp	r0, #14
 80061c6:	d93a      	bls.n	800623e <_scanf_float+0xda>
 80061c8:	f1b9 0f00 	cmp.w	r9, #0
 80061cc:	d003      	beq.n	80061d6 <_scanf_float+0x72>
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80061da:	f1ba 0f01 	cmp.w	sl, #1
 80061de:	f200 8117 	bhi.w	8006410 <_scanf_float+0x2ac>
 80061e2:	9b01      	ldr	r3, [sp, #4]
 80061e4:	429e      	cmp	r6, r3
 80061e6:	f200 8108 	bhi.w	80063fa <_scanf_float+0x296>
 80061ea:	2001      	movs	r0, #1
 80061ec:	b007      	add	sp, #28
 80061ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80061f6:	2a0d      	cmp	r2, #13
 80061f8:	d8e6      	bhi.n	80061c8 <_scanf_float+0x64>
 80061fa:	a101      	add	r1, pc, #4	@ (adr r1, 8006200 <_scanf_float+0x9c>)
 80061fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006200:	08006347 	.word	0x08006347
 8006204:	080061c9 	.word	0x080061c9
 8006208:	080061c9 	.word	0x080061c9
 800620c:	080061c9 	.word	0x080061c9
 8006210:	080063a7 	.word	0x080063a7
 8006214:	0800637f 	.word	0x0800637f
 8006218:	080061c9 	.word	0x080061c9
 800621c:	080061c9 	.word	0x080061c9
 8006220:	08006355 	.word	0x08006355
 8006224:	080061c9 	.word	0x080061c9
 8006228:	080061c9 	.word	0x080061c9
 800622c:	080061c9 	.word	0x080061c9
 8006230:	080061c9 	.word	0x080061c9
 8006234:	0800630d 	.word	0x0800630d
 8006238:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800623c:	e7db      	b.n	80061f6 <_scanf_float+0x92>
 800623e:	290e      	cmp	r1, #14
 8006240:	d8c2      	bhi.n	80061c8 <_scanf_float+0x64>
 8006242:	a001      	add	r0, pc, #4	@ (adr r0, 8006248 <_scanf_float+0xe4>)
 8006244:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006248:	080062fd 	.word	0x080062fd
 800624c:	080061c9 	.word	0x080061c9
 8006250:	080062fd 	.word	0x080062fd
 8006254:	08006393 	.word	0x08006393
 8006258:	080061c9 	.word	0x080061c9
 800625c:	080062a5 	.word	0x080062a5
 8006260:	080062e3 	.word	0x080062e3
 8006264:	080062e3 	.word	0x080062e3
 8006268:	080062e3 	.word	0x080062e3
 800626c:	080062e3 	.word	0x080062e3
 8006270:	080062e3 	.word	0x080062e3
 8006274:	080062e3 	.word	0x080062e3
 8006278:	080062e3 	.word	0x080062e3
 800627c:	080062e3 	.word	0x080062e3
 8006280:	080062e3 	.word	0x080062e3
 8006284:	2b6e      	cmp	r3, #110	@ 0x6e
 8006286:	d809      	bhi.n	800629c <_scanf_float+0x138>
 8006288:	2b60      	cmp	r3, #96	@ 0x60
 800628a:	d8b2      	bhi.n	80061f2 <_scanf_float+0x8e>
 800628c:	2b54      	cmp	r3, #84	@ 0x54
 800628e:	d07b      	beq.n	8006388 <_scanf_float+0x224>
 8006290:	2b59      	cmp	r3, #89	@ 0x59
 8006292:	d199      	bne.n	80061c8 <_scanf_float+0x64>
 8006294:	2d07      	cmp	r5, #7
 8006296:	d197      	bne.n	80061c8 <_scanf_float+0x64>
 8006298:	2508      	movs	r5, #8
 800629a:	e02c      	b.n	80062f6 <_scanf_float+0x192>
 800629c:	2b74      	cmp	r3, #116	@ 0x74
 800629e:	d073      	beq.n	8006388 <_scanf_float+0x224>
 80062a0:	2b79      	cmp	r3, #121	@ 0x79
 80062a2:	e7f6      	b.n	8006292 <_scanf_float+0x12e>
 80062a4:	6821      	ldr	r1, [r4, #0]
 80062a6:	05c8      	lsls	r0, r1, #23
 80062a8:	d51b      	bpl.n	80062e2 <_scanf_float+0x17e>
 80062aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80062ae:	6021      	str	r1, [r4, #0]
 80062b0:	f109 0901 	add.w	r9, r9, #1
 80062b4:	f1bb 0f00 	cmp.w	fp, #0
 80062b8:	d003      	beq.n	80062c2 <_scanf_float+0x15e>
 80062ba:	3201      	adds	r2, #1
 80062bc:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80062c0:	60a2      	str	r2, [r4, #8]
 80062c2:	68a3      	ldr	r3, [r4, #8]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	60a3      	str	r3, [r4, #8]
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	3301      	adds	r3, #1
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	f340 8087 	ble.w	80063e8 <_scanf_float+0x284>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	3301      	adds	r3, #1
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	e765      	b.n	80061ae <_scanf_float+0x4a>
 80062e2:	eb1a 0105 	adds.w	r1, sl, r5
 80062e6:	f47f af6f 	bne.w	80061c8 <_scanf_float+0x64>
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80062f0:	6022      	str	r2, [r4, #0]
 80062f2:	460d      	mov	r5, r1
 80062f4:	468a      	mov	sl, r1
 80062f6:	f806 3b01 	strb.w	r3, [r6], #1
 80062fa:	e7e2      	b.n	80062c2 <_scanf_float+0x15e>
 80062fc:	6822      	ldr	r2, [r4, #0]
 80062fe:	0610      	lsls	r0, r2, #24
 8006300:	f57f af62 	bpl.w	80061c8 <_scanf_float+0x64>
 8006304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006308:	6022      	str	r2, [r4, #0]
 800630a:	e7f4      	b.n	80062f6 <_scanf_float+0x192>
 800630c:	f1ba 0f00 	cmp.w	sl, #0
 8006310:	d10e      	bne.n	8006330 <_scanf_float+0x1cc>
 8006312:	f1b9 0f00 	cmp.w	r9, #0
 8006316:	d10e      	bne.n	8006336 <_scanf_float+0x1d2>
 8006318:	6822      	ldr	r2, [r4, #0]
 800631a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800631e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006322:	d108      	bne.n	8006336 <_scanf_float+0x1d2>
 8006324:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006328:	6022      	str	r2, [r4, #0]
 800632a:	f04f 0a01 	mov.w	sl, #1
 800632e:	e7e2      	b.n	80062f6 <_scanf_float+0x192>
 8006330:	f1ba 0f02 	cmp.w	sl, #2
 8006334:	d055      	beq.n	80063e2 <_scanf_float+0x27e>
 8006336:	2d01      	cmp	r5, #1
 8006338:	d002      	beq.n	8006340 <_scanf_float+0x1dc>
 800633a:	2d04      	cmp	r5, #4
 800633c:	f47f af44 	bne.w	80061c8 <_scanf_float+0x64>
 8006340:	3501      	adds	r5, #1
 8006342:	b2ed      	uxtb	r5, r5
 8006344:	e7d7      	b.n	80062f6 <_scanf_float+0x192>
 8006346:	f1ba 0f01 	cmp.w	sl, #1
 800634a:	f47f af3d 	bne.w	80061c8 <_scanf_float+0x64>
 800634e:	f04f 0a02 	mov.w	sl, #2
 8006352:	e7d0      	b.n	80062f6 <_scanf_float+0x192>
 8006354:	b97d      	cbnz	r5, 8006376 <_scanf_float+0x212>
 8006356:	f1b9 0f00 	cmp.w	r9, #0
 800635a:	f47f af38 	bne.w	80061ce <_scanf_float+0x6a>
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006364:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006368:	f040 8108 	bne.w	800657c <_scanf_float+0x418>
 800636c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006370:	6022      	str	r2, [r4, #0]
 8006372:	2501      	movs	r5, #1
 8006374:	e7bf      	b.n	80062f6 <_scanf_float+0x192>
 8006376:	2d03      	cmp	r5, #3
 8006378:	d0e2      	beq.n	8006340 <_scanf_float+0x1dc>
 800637a:	2d05      	cmp	r5, #5
 800637c:	e7de      	b.n	800633c <_scanf_float+0x1d8>
 800637e:	2d02      	cmp	r5, #2
 8006380:	f47f af22 	bne.w	80061c8 <_scanf_float+0x64>
 8006384:	2503      	movs	r5, #3
 8006386:	e7b6      	b.n	80062f6 <_scanf_float+0x192>
 8006388:	2d06      	cmp	r5, #6
 800638a:	f47f af1d 	bne.w	80061c8 <_scanf_float+0x64>
 800638e:	2507      	movs	r5, #7
 8006390:	e7b1      	b.n	80062f6 <_scanf_float+0x192>
 8006392:	6822      	ldr	r2, [r4, #0]
 8006394:	0591      	lsls	r1, r2, #22
 8006396:	f57f af17 	bpl.w	80061c8 <_scanf_float+0x64>
 800639a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800639e:	6022      	str	r2, [r4, #0]
 80063a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80063a4:	e7a7      	b.n	80062f6 <_scanf_float+0x192>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80063ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80063b0:	d006      	beq.n	80063c0 <_scanf_float+0x25c>
 80063b2:	0550      	lsls	r0, r2, #21
 80063b4:	f57f af08 	bpl.w	80061c8 <_scanf_float+0x64>
 80063b8:	f1b9 0f00 	cmp.w	r9, #0
 80063bc:	f000 80de 	beq.w	800657c <_scanf_float+0x418>
 80063c0:	0591      	lsls	r1, r2, #22
 80063c2:	bf58      	it	pl
 80063c4:	9902      	ldrpl	r1, [sp, #8]
 80063c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80063ca:	bf58      	it	pl
 80063cc:	eba9 0101 	subpl.w	r1, r9, r1
 80063d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80063d4:	bf58      	it	pl
 80063d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80063da:	6022      	str	r2, [r4, #0]
 80063dc:	f04f 0900 	mov.w	r9, #0
 80063e0:	e789      	b.n	80062f6 <_scanf_float+0x192>
 80063e2:	f04f 0a03 	mov.w	sl, #3
 80063e6:	e786      	b.n	80062f6 <_scanf_float+0x192>
 80063e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80063ec:	4639      	mov	r1, r7
 80063ee:	4640      	mov	r0, r8
 80063f0:	4798      	blx	r3
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f43f aedb 	beq.w	80061ae <_scanf_float+0x4a>
 80063f8:	e6e6      	b.n	80061c8 <_scanf_float+0x64>
 80063fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006402:	463a      	mov	r2, r7
 8006404:	4640      	mov	r0, r8
 8006406:	4798      	blx	r3
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	3b01      	subs	r3, #1
 800640c:	6123      	str	r3, [r4, #16]
 800640e:	e6e8      	b.n	80061e2 <_scanf_float+0x7e>
 8006410:	1e6b      	subs	r3, r5, #1
 8006412:	2b06      	cmp	r3, #6
 8006414:	d824      	bhi.n	8006460 <_scanf_float+0x2fc>
 8006416:	2d02      	cmp	r5, #2
 8006418:	d836      	bhi.n	8006488 <_scanf_float+0x324>
 800641a:	9b01      	ldr	r3, [sp, #4]
 800641c:	429e      	cmp	r6, r3
 800641e:	f67f aee4 	bls.w	80061ea <_scanf_float+0x86>
 8006422:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006426:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800642a:	463a      	mov	r2, r7
 800642c:	4640      	mov	r0, r8
 800642e:	4798      	blx	r3
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	3b01      	subs	r3, #1
 8006434:	6123      	str	r3, [r4, #16]
 8006436:	e7f0      	b.n	800641a <_scanf_float+0x2b6>
 8006438:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800643c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006440:	463a      	mov	r2, r7
 8006442:	4640      	mov	r0, r8
 8006444:	4798      	blx	r3
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	3b01      	subs	r3, #1
 800644a:	6123      	str	r3, [r4, #16]
 800644c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006450:	fa5f fa8a 	uxtb.w	sl, sl
 8006454:	f1ba 0f02 	cmp.w	sl, #2
 8006458:	d1ee      	bne.n	8006438 <_scanf_float+0x2d4>
 800645a:	3d03      	subs	r5, #3
 800645c:	b2ed      	uxtb	r5, r5
 800645e:	1b76      	subs	r6, r6, r5
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	05da      	lsls	r2, r3, #23
 8006464:	d530      	bpl.n	80064c8 <_scanf_float+0x364>
 8006466:	055b      	lsls	r3, r3, #21
 8006468:	d511      	bpl.n	800648e <_scanf_float+0x32a>
 800646a:	9b01      	ldr	r3, [sp, #4]
 800646c:	429e      	cmp	r6, r3
 800646e:	f67f aebc 	bls.w	80061ea <_scanf_float+0x86>
 8006472:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006476:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800647a:	463a      	mov	r2, r7
 800647c:	4640      	mov	r0, r8
 800647e:	4798      	blx	r3
 8006480:	6923      	ldr	r3, [r4, #16]
 8006482:	3b01      	subs	r3, #1
 8006484:	6123      	str	r3, [r4, #16]
 8006486:	e7f0      	b.n	800646a <_scanf_float+0x306>
 8006488:	46aa      	mov	sl, r5
 800648a:	46b3      	mov	fp, r6
 800648c:	e7de      	b.n	800644c <_scanf_float+0x2e8>
 800648e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	2965      	cmp	r1, #101	@ 0x65
 8006496:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800649a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	d00c      	beq.n	80064bc <_scanf_float+0x358>
 80064a2:	2945      	cmp	r1, #69	@ 0x45
 80064a4:	d00a      	beq.n	80064bc <_scanf_float+0x358>
 80064a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064aa:	463a      	mov	r2, r7
 80064ac:	4640      	mov	r0, r8
 80064ae:	4798      	blx	r3
 80064b0:	6923      	ldr	r3, [r4, #16]
 80064b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	1eb5      	subs	r5, r6, #2
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80064c0:	463a      	mov	r2, r7
 80064c2:	4640      	mov	r0, r8
 80064c4:	4798      	blx	r3
 80064c6:	462e      	mov	r6, r5
 80064c8:	6822      	ldr	r2, [r4, #0]
 80064ca:	f012 0210 	ands.w	r2, r2, #16
 80064ce:	d001      	beq.n	80064d4 <_scanf_float+0x370>
 80064d0:	2000      	movs	r0, #0
 80064d2:	e68b      	b.n	80061ec <_scanf_float+0x88>
 80064d4:	7032      	strb	r2, [r6, #0]
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80064dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e0:	d11c      	bne.n	800651c <_scanf_float+0x3b8>
 80064e2:	9b02      	ldr	r3, [sp, #8]
 80064e4:	454b      	cmp	r3, r9
 80064e6:	eba3 0209 	sub.w	r2, r3, r9
 80064ea:	d123      	bne.n	8006534 <_scanf_float+0x3d0>
 80064ec:	9901      	ldr	r1, [sp, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	4640      	mov	r0, r8
 80064f2:	f002 fbf9 	bl	8008ce8 <_strtod_r>
 80064f6:	9b03      	ldr	r3, [sp, #12]
 80064f8:	6821      	ldr	r1, [r4, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f011 0f02 	tst.w	r1, #2
 8006500:	ec57 6b10 	vmov	r6, r7, d0
 8006504:	f103 0204 	add.w	r2, r3, #4
 8006508:	d01f      	beq.n	800654a <_scanf_float+0x3e6>
 800650a:	9903      	ldr	r1, [sp, #12]
 800650c:	600a      	str	r2, [r1, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	e9c3 6700 	strd	r6, r7, [r3]
 8006514:	68e3      	ldr	r3, [r4, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60e3      	str	r3, [r4, #12]
 800651a:	e7d9      	b.n	80064d0 <_scanf_float+0x36c>
 800651c:	9b04      	ldr	r3, [sp, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0e4      	beq.n	80064ec <_scanf_float+0x388>
 8006522:	9905      	ldr	r1, [sp, #20]
 8006524:	230a      	movs	r3, #10
 8006526:	3101      	adds	r1, #1
 8006528:	4640      	mov	r0, r8
 800652a:	f002 fc5d 	bl	8008de8 <_strtol_r>
 800652e:	9b04      	ldr	r3, [sp, #16]
 8006530:	9e05      	ldr	r6, [sp, #20]
 8006532:	1ac2      	subs	r2, r0, r3
 8006534:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006538:	429e      	cmp	r6, r3
 800653a:	bf28      	it	cs
 800653c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006540:	4910      	ldr	r1, [pc, #64]	@ (8006584 <_scanf_float+0x420>)
 8006542:	4630      	mov	r0, r6
 8006544:	f000 f8e4 	bl	8006710 <siprintf>
 8006548:	e7d0      	b.n	80064ec <_scanf_float+0x388>
 800654a:	f011 0f04 	tst.w	r1, #4
 800654e:	9903      	ldr	r1, [sp, #12]
 8006550:	600a      	str	r2, [r1, #0]
 8006552:	d1dc      	bne.n	800650e <_scanf_float+0x3aa>
 8006554:	681d      	ldr	r5, [r3, #0]
 8006556:	4632      	mov	r2, r6
 8006558:	463b      	mov	r3, r7
 800655a:	4630      	mov	r0, r6
 800655c:	4639      	mov	r1, r7
 800655e:	f7fa fb0d 	bl	8000b7c <__aeabi_dcmpun>
 8006562:	b128      	cbz	r0, 8006570 <_scanf_float+0x40c>
 8006564:	4808      	ldr	r0, [pc, #32]	@ (8006588 <_scanf_float+0x424>)
 8006566:	f000 f9b7 	bl	80068d8 <nanf>
 800656a:	ed85 0a00 	vstr	s0, [r5]
 800656e:	e7d1      	b.n	8006514 <_scanf_float+0x3b0>
 8006570:	4630      	mov	r0, r6
 8006572:	4639      	mov	r1, r7
 8006574:	f7fa fb60 	bl	8000c38 <__aeabi_d2f>
 8006578:	6028      	str	r0, [r5, #0]
 800657a:	e7cb      	b.n	8006514 <_scanf_float+0x3b0>
 800657c:	f04f 0900 	mov.w	r9, #0
 8006580:	e629      	b.n	80061d6 <_scanf_float+0x72>
 8006582:	bf00      	nop
 8006584:	0800a020 	.word	0x0800a020
 8006588:	0800a3b5 	.word	0x0800a3b5

0800658c <std>:
 800658c:	2300      	movs	r3, #0
 800658e:	b510      	push	{r4, lr}
 8006590:	4604      	mov	r4, r0
 8006592:	e9c0 3300 	strd	r3, r3, [r0]
 8006596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800659a:	6083      	str	r3, [r0, #8]
 800659c:	8181      	strh	r1, [r0, #12]
 800659e:	6643      	str	r3, [r0, #100]	@ 0x64
 80065a0:	81c2      	strh	r2, [r0, #14]
 80065a2:	6183      	str	r3, [r0, #24]
 80065a4:	4619      	mov	r1, r3
 80065a6:	2208      	movs	r2, #8
 80065a8:	305c      	adds	r0, #92	@ 0x5c
 80065aa:	f000 f914 	bl	80067d6 <memset>
 80065ae:	4b0d      	ldr	r3, [pc, #52]	@ (80065e4 <std+0x58>)
 80065b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80065b2:	4b0d      	ldr	r3, [pc, #52]	@ (80065e8 <std+0x5c>)
 80065b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065b6:	4b0d      	ldr	r3, [pc, #52]	@ (80065ec <std+0x60>)
 80065b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065ba:	4b0d      	ldr	r3, [pc, #52]	@ (80065f0 <std+0x64>)
 80065bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80065be:	4b0d      	ldr	r3, [pc, #52]	@ (80065f4 <std+0x68>)
 80065c0:	6224      	str	r4, [r4, #32]
 80065c2:	429c      	cmp	r4, r3
 80065c4:	d006      	beq.n	80065d4 <std+0x48>
 80065c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065ca:	4294      	cmp	r4, r2
 80065cc:	d002      	beq.n	80065d4 <std+0x48>
 80065ce:	33d0      	adds	r3, #208	@ 0xd0
 80065d0:	429c      	cmp	r4, r3
 80065d2:	d105      	bne.n	80065e0 <std+0x54>
 80065d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065dc:	f000 b978 	b.w	80068d0 <__retarget_lock_init_recursive>
 80065e0:	bd10      	pop	{r4, pc}
 80065e2:	bf00      	nop
 80065e4:	08006751 	.word	0x08006751
 80065e8:	08006773 	.word	0x08006773
 80065ec:	080067ab 	.word	0x080067ab
 80065f0:	080067cf 	.word	0x080067cf
 80065f4:	2000033c 	.word	0x2000033c

080065f8 <stdio_exit_handler>:
 80065f8:	4a02      	ldr	r2, [pc, #8]	@ (8006604 <stdio_exit_handler+0xc>)
 80065fa:	4903      	ldr	r1, [pc, #12]	@ (8006608 <stdio_exit_handler+0x10>)
 80065fc:	4803      	ldr	r0, [pc, #12]	@ (800660c <stdio_exit_handler+0x14>)
 80065fe:	f000 b869 	b.w	80066d4 <_fwalk_sglue>
 8006602:	bf00      	nop
 8006604:	2000000c 	.word	0x2000000c
 8006608:	080091a5 	.word	0x080091a5
 800660c:	2000001c 	.word	0x2000001c

08006610 <cleanup_stdio>:
 8006610:	6841      	ldr	r1, [r0, #4]
 8006612:	4b0c      	ldr	r3, [pc, #48]	@ (8006644 <cleanup_stdio+0x34>)
 8006614:	4299      	cmp	r1, r3
 8006616:	b510      	push	{r4, lr}
 8006618:	4604      	mov	r4, r0
 800661a:	d001      	beq.n	8006620 <cleanup_stdio+0x10>
 800661c:	f002 fdc2 	bl	80091a4 <_fflush_r>
 8006620:	68a1      	ldr	r1, [r4, #8]
 8006622:	4b09      	ldr	r3, [pc, #36]	@ (8006648 <cleanup_stdio+0x38>)
 8006624:	4299      	cmp	r1, r3
 8006626:	d002      	beq.n	800662e <cleanup_stdio+0x1e>
 8006628:	4620      	mov	r0, r4
 800662a:	f002 fdbb 	bl	80091a4 <_fflush_r>
 800662e:	68e1      	ldr	r1, [r4, #12]
 8006630:	4b06      	ldr	r3, [pc, #24]	@ (800664c <cleanup_stdio+0x3c>)
 8006632:	4299      	cmp	r1, r3
 8006634:	d004      	beq.n	8006640 <cleanup_stdio+0x30>
 8006636:	4620      	mov	r0, r4
 8006638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663c:	f002 bdb2 	b.w	80091a4 <_fflush_r>
 8006640:	bd10      	pop	{r4, pc}
 8006642:	bf00      	nop
 8006644:	2000033c 	.word	0x2000033c
 8006648:	200003a4 	.word	0x200003a4
 800664c:	2000040c 	.word	0x2000040c

08006650 <global_stdio_init.part.0>:
 8006650:	b510      	push	{r4, lr}
 8006652:	4b0b      	ldr	r3, [pc, #44]	@ (8006680 <global_stdio_init.part.0+0x30>)
 8006654:	4c0b      	ldr	r4, [pc, #44]	@ (8006684 <global_stdio_init.part.0+0x34>)
 8006656:	4a0c      	ldr	r2, [pc, #48]	@ (8006688 <global_stdio_init.part.0+0x38>)
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	4620      	mov	r0, r4
 800665c:	2200      	movs	r2, #0
 800665e:	2104      	movs	r1, #4
 8006660:	f7ff ff94 	bl	800658c <std>
 8006664:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006668:	2201      	movs	r2, #1
 800666a:	2109      	movs	r1, #9
 800666c:	f7ff ff8e 	bl	800658c <std>
 8006670:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006674:	2202      	movs	r2, #2
 8006676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800667a:	2112      	movs	r1, #18
 800667c:	f7ff bf86 	b.w	800658c <std>
 8006680:	20000474 	.word	0x20000474
 8006684:	2000033c 	.word	0x2000033c
 8006688:	080065f9 	.word	0x080065f9

0800668c <__sfp_lock_acquire>:
 800668c:	4801      	ldr	r0, [pc, #4]	@ (8006694 <__sfp_lock_acquire+0x8>)
 800668e:	f000 b920 	b.w	80068d2 <__retarget_lock_acquire_recursive>
 8006692:	bf00      	nop
 8006694:	2000047d 	.word	0x2000047d

08006698 <__sfp_lock_release>:
 8006698:	4801      	ldr	r0, [pc, #4]	@ (80066a0 <__sfp_lock_release+0x8>)
 800669a:	f000 b91b 	b.w	80068d4 <__retarget_lock_release_recursive>
 800669e:	bf00      	nop
 80066a0:	2000047d 	.word	0x2000047d

080066a4 <__sinit>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	4604      	mov	r4, r0
 80066a8:	f7ff fff0 	bl	800668c <__sfp_lock_acquire>
 80066ac:	6a23      	ldr	r3, [r4, #32]
 80066ae:	b11b      	cbz	r3, 80066b8 <__sinit+0x14>
 80066b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b4:	f7ff bff0 	b.w	8006698 <__sfp_lock_release>
 80066b8:	4b04      	ldr	r3, [pc, #16]	@ (80066cc <__sinit+0x28>)
 80066ba:	6223      	str	r3, [r4, #32]
 80066bc:	4b04      	ldr	r3, [pc, #16]	@ (80066d0 <__sinit+0x2c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f5      	bne.n	80066b0 <__sinit+0xc>
 80066c4:	f7ff ffc4 	bl	8006650 <global_stdio_init.part.0>
 80066c8:	e7f2      	b.n	80066b0 <__sinit+0xc>
 80066ca:	bf00      	nop
 80066cc:	08006611 	.word	0x08006611
 80066d0:	20000474 	.word	0x20000474

080066d4 <_fwalk_sglue>:
 80066d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d8:	4607      	mov	r7, r0
 80066da:	4688      	mov	r8, r1
 80066dc:	4614      	mov	r4, r2
 80066de:	2600      	movs	r6, #0
 80066e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066e4:	f1b9 0901 	subs.w	r9, r9, #1
 80066e8:	d505      	bpl.n	80066f6 <_fwalk_sglue+0x22>
 80066ea:	6824      	ldr	r4, [r4, #0]
 80066ec:	2c00      	cmp	r4, #0
 80066ee:	d1f7      	bne.n	80066e0 <_fwalk_sglue+0xc>
 80066f0:	4630      	mov	r0, r6
 80066f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f6:	89ab      	ldrh	r3, [r5, #12]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d907      	bls.n	800670c <_fwalk_sglue+0x38>
 80066fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006700:	3301      	adds	r3, #1
 8006702:	d003      	beq.n	800670c <_fwalk_sglue+0x38>
 8006704:	4629      	mov	r1, r5
 8006706:	4638      	mov	r0, r7
 8006708:	47c0      	blx	r8
 800670a:	4306      	orrs	r6, r0
 800670c:	3568      	adds	r5, #104	@ 0x68
 800670e:	e7e9      	b.n	80066e4 <_fwalk_sglue+0x10>

08006710 <siprintf>:
 8006710:	b40e      	push	{r1, r2, r3}
 8006712:	b500      	push	{lr}
 8006714:	b09c      	sub	sp, #112	@ 0x70
 8006716:	ab1d      	add	r3, sp, #116	@ 0x74
 8006718:	9002      	str	r0, [sp, #8]
 800671a:	9006      	str	r0, [sp, #24]
 800671c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006720:	4809      	ldr	r0, [pc, #36]	@ (8006748 <siprintf+0x38>)
 8006722:	9107      	str	r1, [sp, #28]
 8006724:	9104      	str	r1, [sp, #16]
 8006726:	4909      	ldr	r1, [pc, #36]	@ (800674c <siprintf+0x3c>)
 8006728:	f853 2b04 	ldr.w	r2, [r3], #4
 800672c:	9105      	str	r1, [sp, #20]
 800672e:	6800      	ldr	r0, [r0, #0]
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	a902      	add	r1, sp, #8
 8006734:	f002 fbb6 	bl	8008ea4 <_svfiprintf_r>
 8006738:	9b02      	ldr	r3, [sp, #8]
 800673a:	2200      	movs	r2, #0
 800673c:	701a      	strb	r2, [r3, #0]
 800673e:	b01c      	add	sp, #112	@ 0x70
 8006740:	f85d eb04 	ldr.w	lr, [sp], #4
 8006744:	b003      	add	sp, #12
 8006746:	4770      	bx	lr
 8006748:	20000018 	.word	0x20000018
 800674c:	ffff0208 	.word	0xffff0208

08006750 <__sread>:
 8006750:	b510      	push	{r4, lr}
 8006752:	460c      	mov	r4, r1
 8006754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006758:	f000 f86c 	bl	8006834 <_read_r>
 800675c:	2800      	cmp	r0, #0
 800675e:	bfab      	itete	ge
 8006760:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006762:	89a3      	ldrhlt	r3, [r4, #12]
 8006764:	181b      	addge	r3, r3, r0
 8006766:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800676a:	bfac      	ite	ge
 800676c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800676e:	81a3      	strhlt	r3, [r4, #12]
 8006770:	bd10      	pop	{r4, pc}

08006772 <__swrite>:
 8006772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006776:	461f      	mov	r7, r3
 8006778:	898b      	ldrh	r3, [r1, #12]
 800677a:	05db      	lsls	r3, r3, #23
 800677c:	4605      	mov	r5, r0
 800677e:	460c      	mov	r4, r1
 8006780:	4616      	mov	r6, r2
 8006782:	d505      	bpl.n	8006790 <__swrite+0x1e>
 8006784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006788:	2302      	movs	r3, #2
 800678a:	2200      	movs	r2, #0
 800678c:	f000 f840 	bl	8006810 <_lseek_r>
 8006790:	89a3      	ldrh	r3, [r4, #12]
 8006792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006796:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800679a:	81a3      	strh	r3, [r4, #12]
 800679c:	4632      	mov	r2, r6
 800679e:	463b      	mov	r3, r7
 80067a0:	4628      	mov	r0, r5
 80067a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067a6:	f000 b857 	b.w	8006858 <_write_r>

080067aa <__sseek>:
 80067aa:	b510      	push	{r4, lr}
 80067ac:	460c      	mov	r4, r1
 80067ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b2:	f000 f82d 	bl	8006810 <_lseek_r>
 80067b6:	1c43      	adds	r3, r0, #1
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	bf15      	itete	ne
 80067bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067c6:	81a3      	strheq	r3, [r4, #12]
 80067c8:	bf18      	it	ne
 80067ca:	81a3      	strhne	r3, [r4, #12]
 80067cc:	bd10      	pop	{r4, pc}

080067ce <__sclose>:
 80067ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d2:	f000 b80d 	b.w	80067f0 <_close_r>

080067d6 <memset>:
 80067d6:	4402      	add	r2, r0
 80067d8:	4603      	mov	r3, r0
 80067da:	4293      	cmp	r3, r2
 80067dc:	d100      	bne.n	80067e0 <memset+0xa>
 80067de:	4770      	bx	lr
 80067e0:	f803 1b01 	strb.w	r1, [r3], #1
 80067e4:	e7f9      	b.n	80067da <memset+0x4>
	...

080067e8 <_localeconv_r>:
 80067e8:	4800      	ldr	r0, [pc, #0]	@ (80067ec <_localeconv_r+0x4>)
 80067ea:	4770      	bx	lr
 80067ec:	20000158 	.word	0x20000158

080067f0 <_close_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4d06      	ldr	r5, [pc, #24]	@ (800680c <_close_r+0x1c>)
 80067f4:	2300      	movs	r3, #0
 80067f6:	4604      	mov	r4, r0
 80067f8:	4608      	mov	r0, r1
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	f7fb f972 	bl	8001ae4 <_close>
 8006800:	1c43      	adds	r3, r0, #1
 8006802:	d102      	bne.n	800680a <_close_r+0x1a>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	b103      	cbz	r3, 800680a <_close_r+0x1a>
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	bd38      	pop	{r3, r4, r5, pc}
 800680c:	20000478 	.word	0x20000478

08006810 <_lseek_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d07      	ldr	r5, [pc, #28]	@ (8006830 <_lseek_r+0x20>)
 8006814:	4604      	mov	r4, r0
 8006816:	4608      	mov	r0, r1
 8006818:	4611      	mov	r1, r2
 800681a:	2200      	movs	r2, #0
 800681c:	602a      	str	r2, [r5, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	f7fb f987 	bl	8001b32 <_lseek>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_lseek_r+0x1e>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_lseek_r+0x1e>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	20000478 	.word	0x20000478

08006834 <_read_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d07      	ldr	r5, [pc, #28]	@ (8006854 <_read_r+0x20>)
 8006838:	4604      	mov	r4, r0
 800683a:	4608      	mov	r0, r1
 800683c:	4611      	mov	r1, r2
 800683e:	2200      	movs	r2, #0
 8006840:	602a      	str	r2, [r5, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f7fb f915 	bl	8001a72 <_read>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_read_r+0x1e>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_read_r+0x1e>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	20000478 	.word	0x20000478

08006858 <_write_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4d07      	ldr	r5, [pc, #28]	@ (8006878 <_write_r+0x20>)
 800685c:	4604      	mov	r4, r0
 800685e:	4608      	mov	r0, r1
 8006860:	4611      	mov	r1, r2
 8006862:	2200      	movs	r2, #0
 8006864:	602a      	str	r2, [r5, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f7fb f920 	bl	8001aac <_write>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_write_r+0x1e>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_write_r+0x1e>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	20000478 	.word	0x20000478

0800687c <__errno>:
 800687c:	4b01      	ldr	r3, [pc, #4]	@ (8006884 <__errno+0x8>)
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20000018 	.word	0x20000018

08006888 <__libc_init_array>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	4d0d      	ldr	r5, [pc, #52]	@ (80068c0 <__libc_init_array+0x38>)
 800688c:	4c0d      	ldr	r4, [pc, #52]	@ (80068c4 <__libc_init_array+0x3c>)
 800688e:	1b64      	subs	r4, r4, r5
 8006890:	10a4      	asrs	r4, r4, #2
 8006892:	2600      	movs	r6, #0
 8006894:	42a6      	cmp	r6, r4
 8006896:	d109      	bne.n	80068ac <__libc_init_array+0x24>
 8006898:	4d0b      	ldr	r5, [pc, #44]	@ (80068c8 <__libc_init_array+0x40>)
 800689a:	4c0c      	ldr	r4, [pc, #48]	@ (80068cc <__libc_init_array+0x44>)
 800689c:	f003 fb72 	bl	8009f84 <_init>
 80068a0:	1b64      	subs	r4, r4, r5
 80068a2:	10a4      	asrs	r4, r4, #2
 80068a4:	2600      	movs	r6, #0
 80068a6:	42a6      	cmp	r6, r4
 80068a8:	d105      	bne.n	80068b6 <__libc_init_array+0x2e>
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b0:	4798      	blx	r3
 80068b2:	3601      	adds	r6, #1
 80068b4:	e7ee      	b.n	8006894 <__libc_init_array+0xc>
 80068b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ba:	4798      	blx	r3
 80068bc:	3601      	adds	r6, #1
 80068be:	e7f2      	b.n	80068a6 <__libc_init_array+0x1e>
 80068c0:	0800a420 	.word	0x0800a420
 80068c4:	0800a420 	.word	0x0800a420
 80068c8:	0800a420 	.word	0x0800a420
 80068cc:	0800a424 	.word	0x0800a424

080068d0 <__retarget_lock_init_recursive>:
 80068d0:	4770      	bx	lr

080068d2 <__retarget_lock_acquire_recursive>:
 80068d2:	4770      	bx	lr

080068d4 <__retarget_lock_release_recursive>:
 80068d4:	4770      	bx	lr
	...

080068d8 <nanf>:
 80068d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80068e0 <nanf+0x8>
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	7fc00000 	.word	0x7fc00000

080068e4 <quorem>:
 80068e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e8:	6903      	ldr	r3, [r0, #16]
 80068ea:	690c      	ldr	r4, [r1, #16]
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	4607      	mov	r7, r0
 80068f0:	db7e      	blt.n	80069f0 <quorem+0x10c>
 80068f2:	3c01      	subs	r4, #1
 80068f4:	f101 0814 	add.w	r8, r1, #20
 80068f8:	00a3      	lsls	r3, r4, #2
 80068fa:	f100 0514 	add.w	r5, r0, #20
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800690a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800690e:	3301      	adds	r3, #1
 8006910:	429a      	cmp	r2, r3
 8006912:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006916:	fbb2 f6f3 	udiv	r6, r2, r3
 800691a:	d32e      	bcc.n	800697a <quorem+0x96>
 800691c:	f04f 0a00 	mov.w	sl, #0
 8006920:	46c4      	mov	ip, r8
 8006922:	46ae      	mov	lr, r5
 8006924:	46d3      	mov	fp, sl
 8006926:	f85c 3b04 	ldr.w	r3, [ip], #4
 800692a:	b298      	uxth	r0, r3
 800692c:	fb06 a000 	mla	r0, r6, r0, sl
 8006930:	0c02      	lsrs	r2, r0, #16
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	fb06 2303 	mla	r3, r6, r3, r2
 8006938:	f8de 2000 	ldr.w	r2, [lr]
 800693c:	b280      	uxth	r0, r0
 800693e:	b292      	uxth	r2, r2
 8006940:	1a12      	subs	r2, r2, r0
 8006942:	445a      	add	r2, fp
 8006944:	f8de 0000 	ldr.w	r0, [lr]
 8006948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800694c:	b29b      	uxth	r3, r3
 800694e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006952:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006956:	b292      	uxth	r2, r2
 8006958:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800695c:	45e1      	cmp	r9, ip
 800695e:	f84e 2b04 	str.w	r2, [lr], #4
 8006962:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006966:	d2de      	bcs.n	8006926 <quorem+0x42>
 8006968:	9b00      	ldr	r3, [sp, #0]
 800696a:	58eb      	ldr	r3, [r5, r3]
 800696c:	b92b      	cbnz	r3, 800697a <quorem+0x96>
 800696e:	9b01      	ldr	r3, [sp, #4]
 8006970:	3b04      	subs	r3, #4
 8006972:	429d      	cmp	r5, r3
 8006974:	461a      	mov	r2, r3
 8006976:	d32f      	bcc.n	80069d8 <quorem+0xf4>
 8006978:	613c      	str	r4, [r7, #16]
 800697a:	4638      	mov	r0, r7
 800697c:	f001 f9c4 	bl	8007d08 <__mcmp>
 8006980:	2800      	cmp	r0, #0
 8006982:	db25      	blt.n	80069d0 <quorem+0xec>
 8006984:	4629      	mov	r1, r5
 8006986:	2000      	movs	r0, #0
 8006988:	f858 2b04 	ldr.w	r2, [r8], #4
 800698c:	f8d1 c000 	ldr.w	ip, [r1]
 8006990:	fa1f fe82 	uxth.w	lr, r2
 8006994:	fa1f f38c 	uxth.w	r3, ip
 8006998:	eba3 030e 	sub.w	r3, r3, lr
 800699c:	4403      	add	r3, r0
 800699e:	0c12      	lsrs	r2, r2, #16
 80069a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ae:	45c1      	cmp	r9, r8
 80069b0:	f841 3b04 	str.w	r3, [r1], #4
 80069b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069b8:	d2e6      	bcs.n	8006988 <quorem+0xa4>
 80069ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069c2:	b922      	cbnz	r2, 80069ce <quorem+0xea>
 80069c4:	3b04      	subs	r3, #4
 80069c6:	429d      	cmp	r5, r3
 80069c8:	461a      	mov	r2, r3
 80069ca:	d30b      	bcc.n	80069e4 <quorem+0x100>
 80069cc:	613c      	str	r4, [r7, #16]
 80069ce:	3601      	adds	r6, #1
 80069d0:	4630      	mov	r0, r6
 80069d2:	b003      	add	sp, #12
 80069d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d8:	6812      	ldr	r2, [r2, #0]
 80069da:	3b04      	subs	r3, #4
 80069dc:	2a00      	cmp	r2, #0
 80069de:	d1cb      	bne.n	8006978 <quorem+0x94>
 80069e0:	3c01      	subs	r4, #1
 80069e2:	e7c6      	b.n	8006972 <quorem+0x8e>
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	3b04      	subs	r3, #4
 80069e8:	2a00      	cmp	r2, #0
 80069ea:	d1ef      	bne.n	80069cc <quorem+0xe8>
 80069ec:	3c01      	subs	r4, #1
 80069ee:	e7ea      	b.n	80069c6 <quorem+0xe2>
 80069f0:	2000      	movs	r0, #0
 80069f2:	e7ee      	b.n	80069d2 <quorem+0xee>
 80069f4:	0000      	movs	r0, r0
	...

080069f8 <_dtoa_r>:
 80069f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	69c7      	ldr	r7, [r0, #28]
 80069fe:	b099      	sub	sp, #100	@ 0x64
 8006a00:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a04:	ec55 4b10 	vmov	r4, r5, d0
 8006a08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006a0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a0c:	4683      	mov	fp, r0
 8006a0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a12:	b97f      	cbnz	r7, 8006a34 <_dtoa_r+0x3c>
 8006a14:	2010      	movs	r0, #16
 8006a16:	f000 fdfd 	bl	8007614 <malloc>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a20:	b920      	cbnz	r0, 8006a2c <_dtoa_r+0x34>
 8006a22:	4ba7      	ldr	r3, [pc, #668]	@ (8006cc0 <_dtoa_r+0x2c8>)
 8006a24:	21ef      	movs	r1, #239	@ 0xef
 8006a26:	48a7      	ldr	r0, [pc, #668]	@ (8006cc4 <_dtoa_r+0x2cc>)
 8006a28:	f002 fc36 	bl	8009298 <__assert_func>
 8006a2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a30:	6007      	str	r7, [r0, #0]
 8006a32:	60c7      	str	r7, [r0, #12]
 8006a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a38:	6819      	ldr	r1, [r3, #0]
 8006a3a:	b159      	cbz	r1, 8006a54 <_dtoa_r+0x5c>
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	604a      	str	r2, [r1, #4]
 8006a40:	2301      	movs	r3, #1
 8006a42:	4093      	lsls	r3, r2
 8006a44:	608b      	str	r3, [r1, #8]
 8006a46:	4658      	mov	r0, fp
 8006a48:	f000 feda 	bl	8007800 <_Bfree>
 8006a4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	1e2b      	subs	r3, r5, #0
 8006a56:	bfb9      	ittee	lt
 8006a58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a5c:	9303      	strlt	r3, [sp, #12]
 8006a5e:	2300      	movge	r3, #0
 8006a60:	6033      	strge	r3, [r6, #0]
 8006a62:	9f03      	ldr	r7, [sp, #12]
 8006a64:	4b98      	ldr	r3, [pc, #608]	@ (8006cc8 <_dtoa_r+0x2d0>)
 8006a66:	bfbc      	itt	lt
 8006a68:	2201      	movlt	r2, #1
 8006a6a:	6032      	strlt	r2, [r6, #0]
 8006a6c:	43bb      	bics	r3, r7
 8006a6e:	d112      	bne.n	8006a96 <_dtoa_r+0x9e>
 8006a70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a7c:	4323      	orrs	r3, r4
 8006a7e:	f000 854d 	beq.w	800751c <_dtoa_r+0xb24>
 8006a82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006cdc <_dtoa_r+0x2e4>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 854f 	beq.w	800752c <_dtoa_r+0xb34>
 8006a8e:	f10a 0303 	add.w	r3, sl, #3
 8006a92:	f000 bd49 	b.w	8007528 <_dtoa_r+0xb30>
 8006a96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	ec51 0b17 	vmov	r0, r1, d7
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006aa6:	f7fa f837 	bl	8000b18 <__aeabi_dcmpeq>
 8006aaa:	4680      	mov	r8, r0
 8006aac:	b158      	cbz	r0, 8006ac6 <_dtoa_r+0xce>
 8006aae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ab6:	b113      	cbz	r3, 8006abe <_dtoa_r+0xc6>
 8006ab8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006aba:	4b84      	ldr	r3, [pc, #528]	@ (8006ccc <_dtoa_r+0x2d4>)
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ce0 <_dtoa_r+0x2e8>
 8006ac2:	f000 bd33 	b.w	800752c <_dtoa_r+0xb34>
 8006ac6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006aca:	aa16      	add	r2, sp, #88	@ 0x58
 8006acc:	a917      	add	r1, sp, #92	@ 0x5c
 8006ace:	4658      	mov	r0, fp
 8006ad0:	f001 fa3a 	bl	8007f48 <__d2b>
 8006ad4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ad8:	4681      	mov	r9, r0
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	d077      	beq.n	8006bce <_dtoa_r+0x1d6>
 8006ade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ae0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006af0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006af4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006af8:	4619      	mov	r1, r3
 8006afa:	2200      	movs	r2, #0
 8006afc:	4b74      	ldr	r3, [pc, #464]	@ (8006cd0 <_dtoa_r+0x2d8>)
 8006afe:	f7f9 fbeb 	bl	80002d8 <__aeabi_dsub>
 8006b02:	a369      	add	r3, pc, #420	@ (adr r3, 8006ca8 <_dtoa_r+0x2b0>)
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f7f9 fd9e 	bl	8000648 <__aeabi_dmul>
 8006b0c:	a368      	add	r3, pc, #416	@ (adr r3, 8006cb0 <_dtoa_r+0x2b8>)
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	f7f9 fbe3 	bl	80002dc <__adddf3>
 8006b16:	4604      	mov	r4, r0
 8006b18:	4630      	mov	r0, r6
 8006b1a:	460d      	mov	r5, r1
 8006b1c:	f7f9 fd2a 	bl	8000574 <__aeabi_i2d>
 8006b20:	a365      	add	r3, pc, #404	@ (adr r3, 8006cb8 <_dtoa_r+0x2c0>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	f7f9 fd8f 	bl	8000648 <__aeabi_dmul>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4620      	mov	r0, r4
 8006b30:	4629      	mov	r1, r5
 8006b32:	f7f9 fbd3 	bl	80002dc <__adddf3>
 8006b36:	4604      	mov	r4, r0
 8006b38:	460d      	mov	r5, r1
 8006b3a:	f7fa f835 	bl	8000ba8 <__aeabi_d2iz>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4607      	mov	r7, r0
 8006b42:	2300      	movs	r3, #0
 8006b44:	4620      	mov	r0, r4
 8006b46:	4629      	mov	r1, r5
 8006b48:	f7f9 fff0 	bl	8000b2c <__aeabi_dcmplt>
 8006b4c:	b140      	cbz	r0, 8006b60 <_dtoa_r+0x168>
 8006b4e:	4638      	mov	r0, r7
 8006b50:	f7f9 fd10 	bl	8000574 <__aeabi_i2d>
 8006b54:	4622      	mov	r2, r4
 8006b56:	462b      	mov	r3, r5
 8006b58:	f7f9 ffde 	bl	8000b18 <__aeabi_dcmpeq>
 8006b5c:	b900      	cbnz	r0, 8006b60 <_dtoa_r+0x168>
 8006b5e:	3f01      	subs	r7, #1
 8006b60:	2f16      	cmp	r7, #22
 8006b62:	d851      	bhi.n	8006c08 <_dtoa_r+0x210>
 8006b64:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd4 <_dtoa_r+0x2dc>)
 8006b66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b72:	f7f9 ffdb 	bl	8000b2c <__aeabi_dcmplt>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d048      	beq.n	8006c0c <_dtoa_r+0x214>
 8006b7a:	3f01      	subs	r7, #1
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b82:	1b9b      	subs	r3, r3, r6
 8006b84:	1e5a      	subs	r2, r3, #1
 8006b86:	bf44      	itt	mi
 8006b88:	f1c3 0801 	rsbmi	r8, r3, #1
 8006b8c:	2300      	movmi	r3, #0
 8006b8e:	9208      	str	r2, [sp, #32]
 8006b90:	bf54      	ite	pl
 8006b92:	f04f 0800 	movpl.w	r8, #0
 8006b96:	9308      	strmi	r3, [sp, #32]
 8006b98:	2f00      	cmp	r7, #0
 8006b9a:	db39      	blt.n	8006c10 <_dtoa_r+0x218>
 8006b9c:	9b08      	ldr	r3, [sp, #32]
 8006b9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006ba0:	443b      	add	r3, r7
 8006ba2:	9308      	str	r3, [sp, #32]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	d864      	bhi.n	8006c78 <_dtoa_r+0x280>
 8006bae:	2b05      	cmp	r3, #5
 8006bb0:	bfc4      	itt	gt
 8006bb2:	3b04      	subgt	r3, #4
 8006bb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb8:	f1a3 0302 	sub.w	r3, r3, #2
 8006bbc:	bfcc      	ite	gt
 8006bbe:	2400      	movgt	r4, #0
 8006bc0:	2401      	movle	r4, #1
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d863      	bhi.n	8006c8e <_dtoa_r+0x296>
 8006bc6:	e8df f003 	tbb	[pc, r3]
 8006bca:	372a      	.short	0x372a
 8006bcc:	5535      	.short	0x5535
 8006bce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006bd2:	441e      	add	r6, r3
 8006bd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	bfc1      	itttt	gt
 8006bdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006be0:	409f      	lslgt	r7, r3
 8006be2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006be6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006bea:	bfd6      	itet	le
 8006bec:	f1c3 0320 	rsble	r3, r3, #32
 8006bf0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006bf4:	fa04 f003 	lslle.w	r0, r4, r3
 8006bf8:	f7f9 fcac 	bl	8000554 <__aeabi_ui2d>
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c02:	3e01      	subs	r6, #1
 8006c04:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c06:	e777      	b.n	8006af8 <_dtoa_r+0x100>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e7b8      	b.n	8006b7e <_dtoa_r+0x186>
 8006c0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c0e:	e7b7      	b.n	8006b80 <_dtoa_r+0x188>
 8006c10:	427b      	negs	r3, r7
 8006c12:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c14:	2300      	movs	r3, #0
 8006c16:	eba8 0807 	sub.w	r8, r8, r7
 8006c1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c1c:	e7c4      	b.n	8006ba8 <_dtoa_r+0x1b0>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	dc35      	bgt.n	8006c94 <_dtoa_r+0x29c>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	9307      	str	r3, [sp, #28]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c32:	e00b      	b.n	8006c4c <_dtoa_r+0x254>
 8006c34:	2301      	movs	r3, #1
 8006c36:	e7f3      	b.n	8006c20 <_dtoa_r+0x228>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	9307      	str	r3, [sp, #28]
 8006c48:	bfb8      	it	lt
 8006c4a:	2301      	movlt	r3, #1
 8006c4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c50:	2100      	movs	r1, #0
 8006c52:	2204      	movs	r2, #4
 8006c54:	f102 0514 	add.w	r5, r2, #20
 8006c58:	429d      	cmp	r5, r3
 8006c5a:	d91f      	bls.n	8006c9c <_dtoa_r+0x2a4>
 8006c5c:	6041      	str	r1, [r0, #4]
 8006c5e:	4658      	mov	r0, fp
 8006c60:	f000 fd8e 	bl	8007780 <_Balloc>
 8006c64:	4682      	mov	sl, r0
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d13c      	bne.n	8006ce4 <_dtoa_r+0x2ec>
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd8 <_dtoa_r+0x2e0>)
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c72:	e6d8      	b.n	8006a26 <_dtoa_r+0x2e>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e7e0      	b.n	8006c3a <_dtoa_r+0x242>
 8006c78:	2401      	movs	r4, #1
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	9307      	str	r3, [sp, #28]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2312      	movs	r3, #18
 8006c8c:	e7d0      	b.n	8006c30 <_dtoa_r+0x238>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c92:	e7f5      	b.n	8006c80 <_dtoa_r+0x288>
 8006c94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	9307      	str	r3, [sp, #28]
 8006c9a:	e7d7      	b.n	8006c4c <_dtoa_r+0x254>
 8006c9c:	3101      	adds	r1, #1
 8006c9e:	0052      	lsls	r2, r2, #1
 8006ca0:	e7d8      	b.n	8006c54 <_dtoa_r+0x25c>
 8006ca2:	bf00      	nop
 8006ca4:	f3af 8000 	nop.w
 8006ca8:	636f4361 	.word	0x636f4361
 8006cac:	3fd287a7 	.word	0x3fd287a7
 8006cb0:	8b60c8b3 	.word	0x8b60c8b3
 8006cb4:	3fc68a28 	.word	0x3fc68a28
 8006cb8:	509f79fb 	.word	0x509f79fb
 8006cbc:	3fd34413 	.word	0x3fd34413
 8006cc0:	0800a032 	.word	0x0800a032
 8006cc4:	0800a049 	.word	0x0800a049
 8006cc8:	7ff00000 	.word	0x7ff00000
 8006ccc:	08009ffd 	.word	0x08009ffd
 8006cd0:	3ff80000 	.word	0x3ff80000
 8006cd4:	0800a140 	.word	0x0800a140
 8006cd8:	0800a0a1 	.word	0x0800a0a1
 8006cdc:	0800a02e 	.word	0x0800a02e
 8006ce0:	08009ffc 	.word	0x08009ffc
 8006ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ce8:	6018      	str	r0, [r3, #0]
 8006cea:	9b07      	ldr	r3, [sp, #28]
 8006cec:	2b0e      	cmp	r3, #14
 8006cee:	f200 80a4 	bhi.w	8006e3a <_dtoa_r+0x442>
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	f000 80a1 	beq.w	8006e3a <_dtoa_r+0x442>
 8006cf8:	2f00      	cmp	r7, #0
 8006cfa:	dd33      	ble.n	8006d64 <_dtoa_r+0x36c>
 8006cfc:	4bad      	ldr	r3, [pc, #692]	@ (8006fb4 <_dtoa_r+0x5bc>)
 8006cfe:	f007 020f 	and.w	r2, r7, #15
 8006d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d06:	ed93 7b00 	vldr	d7, [r3]
 8006d0a:	05f8      	lsls	r0, r7, #23
 8006d0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d14:	d516      	bpl.n	8006d44 <_dtoa_r+0x34c>
 8006d16:	4ba8      	ldr	r3, [pc, #672]	@ (8006fb8 <_dtoa_r+0x5c0>)
 8006d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d20:	f7f9 fdbc 	bl	800089c <__aeabi_ddiv>
 8006d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d28:	f004 040f 	and.w	r4, r4, #15
 8006d2c:	2603      	movs	r6, #3
 8006d2e:	4da2      	ldr	r5, [pc, #648]	@ (8006fb8 <_dtoa_r+0x5c0>)
 8006d30:	b954      	cbnz	r4, 8006d48 <_dtoa_r+0x350>
 8006d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d3a:	f7f9 fdaf 	bl	800089c <__aeabi_ddiv>
 8006d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d42:	e028      	b.n	8006d96 <_dtoa_r+0x39e>
 8006d44:	2602      	movs	r6, #2
 8006d46:	e7f2      	b.n	8006d2e <_dtoa_r+0x336>
 8006d48:	07e1      	lsls	r1, r4, #31
 8006d4a:	d508      	bpl.n	8006d5e <_dtoa_r+0x366>
 8006d4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d54:	f7f9 fc78 	bl	8000648 <__aeabi_dmul>
 8006d58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d5c:	3601      	adds	r6, #1
 8006d5e:	1064      	asrs	r4, r4, #1
 8006d60:	3508      	adds	r5, #8
 8006d62:	e7e5      	b.n	8006d30 <_dtoa_r+0x338>
 8006d64:	f000 80d2 	beq.w	8006f0c <_dtoa_r+0x514>
 8006d68:	427c      	negs	r4, r7
 8006d6a:	4b92      	ldr	r3, [pc, #584]	@ (8006fb4 <_dtoa_r+0x5bc>)
 8006d6c:	4d92      	ldr	r5, [pc, #584]	@ (8006fb8 <_dtoa_r+0x5c0>)
 8006d6e:	f004 020f 	and.w	r2, r4, #15
 8006d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d7e:	f7f9 fc63 	bl	8000648 <__aeabi_dmul>
 8006d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d86:	1124      	asrs	r4, r4, #4
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2602      	movs	r6, #2
 8006d8c:	2c00      	cmp	r4, #0
 8006d8e:	f040 80b2 	bne.w	8006ef6 <_dtoa_r+0x4fe>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1d3      	bne.n	8006d3e <_dtoa_r+0x346>
 8006d96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 80b7 	beq.w	8006f10 <_dtoa_r+0x518>
 8006da2:	4b86      	ldr	r3, [pc, #536]	@ (8006fbc <_dtoa_r+0x5c4>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	4620      	mov	r0, r4
 8006da8:	4629      	mov	r1, r5
 8006daa:	f7f9 febf 	bl	8000b2c <__aeabi_dcmplt>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f000 80ae 	beq.w	8006f10 <_dtoa_r+0x518>
 8006db4:	9b07      	ldr	r3, [sp, #28]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 80aa 	beq.w	8006f10 <_dtoa_r+0x518>
 8006dbc:	9b00      	ldr	r3, [sp, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	dd37      	ble.n	8006e32 <_dtoa_r+0x43a>
 8006dc2:	1e7b      	subs	r3, r7, #1
 8006dc4:	9304      	str	r3, [sp, #16]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8006fc0 <_dtoa_r+0x5c8>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4629      	mov	r1, r5
 8006dce:	f7f9 fc3b 	bl	8000648 <__aeabi_dmul>
 8006dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dd6:	9c00      	ldr	r4, [sp, #0]
 8006dd8:	3601      	adds	r6, #1
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7f9 fbca 	bl	8000574 <__aeabi_i2d>
 8006de0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006de4:	f7f9 fc30 	bl	8000648 <__aeabi_dmul>
 8006de8:	4b76      	ldr	r3, [pc, #472]	@ (8006fc4 <_dtoa_r+0x5cc>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	f7f9 fa76 	bl	80002dc <__adddf3>
 8006df0:	4605      	mov	r5, r0
 8006df2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006df6:	2c00      	cmp	r4, #0
 8006df8:	f040 808d 	bne.w	8006f16 <_dtoa_r+0x51e>
 8006dfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e00:	4b71      	ldr	r3, [pc, #452]	@ (8006fc8 <_dtoa_r+0x5d0>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	f7f9 fa68 	bl	80002d8 <__aeabi_dsub>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e10:	462a      	mov	r2, r5
 8006e12:	4633      	mov	r3, r6
 8006e14:	f7f9 fea8 	bl	8000b68 <__aeabi_dcmpgt>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	f040 828b 	bne.w	8007334 <_dtoa_r+0x93c>
 8006e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e22:	462a      	mov	r2, r5
 8006e24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e28:	f7f9 fe80 	bl	8000b2c <__aeabi_dcmplt>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	f040 8128 	bne.w	8007082 <_dtoa_r+0x68a>
 8006e32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f2c0 815a 	blt.w	80070f6 <_dtoa_r+0x6fe>
 8006e42:	2f0e      	cmp	r7, #14
 8006e44:	f300 8157 	bgt.w	80070f6 <_dtoa_r+0x6fe>
 8006e48:	4b5a      	ldr	r3, [pc, #360]	@ (8006fb4 <_dtoa_r+0x5bc>)
 8006e4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e4e:	ed93 7b00 	vldr	d7, [r3]
 8006e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	ed8d 7b00 	vstr	d7, [sp]
 8006e5a:	da03      	bge.n	8006e64 <_dtoa_r+0x46c>
 8006e5c:	9b07      	ldr	r3, [sp, #28]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f340 8101 	ble.w	8007066 <_dtoa_r+0x66e>
 8006e64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e68:	4656      	mov	r6, sl
 8006e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	4629      	mov	r1, r5
 8006e72:	f7f9 fd13 	bl	800089c <__aeabi_ddiv>
 8006e76:	f7f9 fe97 	bl	8000ba8 <__aeabi_d2iz>
 8006e7a:	4680      	mov	r8, r0
 8006e7c:	f7f9 fb7a 	bl	8000574 <__aeabi_i2d>
 8006e80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e84:	f7f9 fbe0 	bl	8000648 <__aeabi_dmul>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e94:	f7f9 fa20 	bl	80002d8 <__aeabi_dsub>
 8006e98:	f806 4b01 	strb.w	r4, [r6], #1
 8006e9c:	9d07      	ldr	r5, [sp, #28]
 8006e9e:	eba6 040a 	sub.w	r4, r6, sl
 8006ea2:	42a5      	cmp	r5, r4
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	f040 8117 	bne.w	80070da <_dtoa_r+0x6e2>
 8006eac:	f7f9 fa16 	bl	80002dc <__adddf3>
 8006eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	f7f9 fe56 	bl	8000b68 <__aeabi_dcmpgt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f040 80f9 	bne.w	80070b4 <_dtoa_r+0x6bc>
 8006ec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7f9 fe25 	bl	8000b18 <__aeabi_dcmpeq>
 8006ece:	b118      	cbz	r0, 8006ed8 <_dtoa_r+0x4e0>
 8006ed0:	f018 0f01 	tst.w	r8, #1
 8006ed4:	f040 80ee 	bne.w	80070b4 <_dtoa_r+0x6bc>
 8006ed8:	4649      	mov	r1, r9
 8006eda:	4658      	mov	r0, fp
 8006edc:	f000 fc90 	bl	8007800 <_Bfree>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	7033      	strb	r3, [r6, #0]
 8006ee4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ee6:	3701      	adds	r7, #1
 8006ee8:	601f      	str	r7, [r3, #0]
 8006eea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 831d 	beq.w	800752c <_dtoa_r+0xb34>
 8006ef2:	601e      	str	r6, [r3, #0]
 8006ef4:	e31a      	b.n	800752c <_dtoa_r+0xb34>
 8006ef6:	07e2      	lsls	r2, r4, #31
 8006ef8:	d505      	bpl.n	8006f06 <_dtoa_r+0x50e>
 8006efa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006efe:	f7f9 fba3 	bl	8000648 <__aeabi_dmul>
 8006f02:	3601      	adds	r6, #1
 8006f04:	2301      	movs	r3, #1
 8006f06:	1064      	asrs	r4, r4, #1
 8006f08:	3508      	adds	r5, #8
 8006f0a:	e73f      	b.n	8006d8c <_dtoa_r+0x394>
 8006f0c:	2602      	movs	r6, #2
 8006f0e:	e742      	b.n	8006d96 <_dtoa_r+0x39e>
 8006f10:	9c07      	ldr	r4, [sp, #28]
 8006f12:	9704      	str	r7, [sp, #16]
 8006f14:	e761      	b.n	8006dda <_dtoa_r+0x3e2>
 8006f16:	4b27      	ldr	r3, [pc, #156]	@ (8006fb4 <_dtoa_r+0x5bc>)
 8006f18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f22:	4454      	add	r4, sl
 8006f24:	2900      	cmp	r1, #0
 8006f26:	d053      	beq.n	8006fd0 <_dtoa_r+0x5d8>
 8006f28:	4928      	ldr	r1, [pc, #160]	@ (8006fcc <_dtoa_r+0x5d4>)
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	f7f9 fcb6 	bl	800089c <__aeabi_ddiv>
 8006f30:	4633      	mov	r3, r6
 8006f32:	462a      	mov	r2, r5
 8006f34:	f7f9 f9d0 	bl	80002d8 <__aeabi_dsub>
 8006f38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f3c:	4656      	mov	r6, sl
 8006f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f42:	f7f9 fe31 	bl	8000ba8 <__aeabi_d2iz>
 8006f46:	4605      	mov	r5, r0
 8006f48:	f7f9 fb14 	bl	8000574 <__aeabi_i2d>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	460b      	mov	r3, r1
 8006f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f54:	f7f9 f9c0 	bl	80002d8 <__aeabi_dsub>
 8006f58:	3530      	adds	r5, #48	@ 0x30
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f62:	f806 5b01 	strb.w	r5, [r6], #1
 8006f66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f6a:	f7f9 fddf 	bl	8000b2c <__aeabi_dcmplt>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d171      	bne.n	8007056 <_dtoa_r+0x65e>
 8006f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f76:	4911      	ldr	r1, [pc, #68]	@ (8006fbc <_dtoa_r+0x5c4>)
 8006f78:	2000      	movs	r0, #0
 8006f7a:	f7f9 f9ad 	bl	80002d8 <__aeabi_dsub>
 8006f7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f82:	f7f9 fdd3 	bl	8000b2c <__aeabi_dcmplt>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f040 8095 	bne.w	80070b6 <_dtoa_r+0x6be>
 8006f8c:	42a6      	cmp	r6, r4
 8006f8e:	f43f af50 	beq.w	8006e32 <_dtoa_r+0x43a>
 8006f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f96:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc0 <_dtoa_r+0x5c8>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f7f9 fb55 	bl	8000648 <__aeabi_dmul>
 8006f9e:	4b08      	ldr	r3, [pc, #32]	@ (8006fc0 <_dtoa_r+0x5c8>)
 8006fa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006faa:	f7f9 fb4d 	bl	8000648 <__aeabi_dmul>
 8006fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fb2:	e7c4      	b.n	8006f3e <_dtoa_r+0x546>
 8006fb4:	0800a140 	.word	0x0800a140
 8006fb8:	0800a118 	.word	0x0800a118
 8006fbc:	3ff00000 	.word	0x3ff00000
 8006fc0:	40240000 	.word	0x40240000
 8006fc4:	401c0000 	.word	0x401c0000
 8006fc8:	40140000 	.word	0x40140000
 8006fcc:	3fe00000 	.word	0x3fe00000
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f7f9 fb38 	bl	8000648 <__aeabi_dmul>
 8006fd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fdc:	9415      	str	r4, [sp, #84]	@ 0x54
 8006fde:	4656      	mov	r6, sl
 8006fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe4:	f7f9 fde0 	bl	8000ba8 <__aeabi_d2iz>
 8006fe8:	4605      	mov	r5, r0
 8006fea:	f7f9 fac3 	bl	8000574 <__aeabi_i2d>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ff6:	f7f9 f96f 	bl	80002d8 <__aeabi_dsub>
 8006ffa:	3530      	adds	r5, #48	@ 0x30
 8006ffc:	f806 5b01 	strb.w	r5, [r6], #1
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	42a6      	cmp	r6, r4
 8007006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	d124      	bne.n	800705a <_dtoa_r+0x662>
 8007010:	4bac      	ldr	r3, [pc, #688]	@ (80072c4 <_dtoa_r+0x8cc>)
 8007012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007016:	f7f9 f961 	bl	80002dc <__adddf3>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007022:	f7f9 fda1 	bl	8000b68 <__aeabi_dcmpgt>
 8007026:	2800      	cmp	r0, #0
 8007028:	d145      	bne.n	80070b6 <_dtoa_r+0x6be>
 800702a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800702e:	49a5      	ldr	r1, [pc, #660]	@ (80072c4 <_dtoa_r+0x8cc>)
 8007030:	2000      	movs	r0, #0
 8007032:	f7f9 f951 	bl	80002d8 <__aeabi_dsub>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800703e:	f7f9 fd75 	bl	8000b2c <__aeabi_dcmplt>
 8007042:	2800      	cmp	r0, #0
 8007044:	f43f aef5 	beq.w	8006e32 <_dtoa_r+0x43a>
 8007048:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800704a:	1e73      	subs	r3, r6, #1
 800704c:	9315      	str	r3, [sp, #84]	@ 0x54
 800704e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007052:	2b30      	cmp	r3, #48	@ 0x30
 8007054:	d0f8      	beq.n	8007048 <_dtoa_r+0x650>
 8007056:	9f04      	ldr	r7, [sp, #16]
 8007058:	e73e      	b.n	8006ed8 <_dtoa_r+0x4e0>
 800705a:	4b9b      	ldr	r3, [pc, #620]	@ (80072c8 <_dtoa_r+0x8d0>)
 800705c:	f7f9 faf4 	bl	8000648 <__aeabi_dmul>
 8007060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007064:	e7bc      	b.n	8006fe0 <_dtoa_r+0x5e8>
 8007066:	d10c      	bne.n	8007082 <_dtoa_r+0x68a>
 8007068:	4b98      	ldr	r3, [pc, #608]	@ (80072cc <_dtoa_r+0x8d4>)
 800706a:	2200      	movs	r2, #0
 800706c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007070:	f7f9 faea 	bl	8000648 <__aeabi_dmul>
 8007074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007078:	f7f9 fd6c 	bl	8000b54 <__aeabi_dcmpge>
 800707c:	2800      	cmp	r0, #0
 800707e:	f000 8157 	beq.w	8007330 <_dtoa_r+0x938>
 8007082:	2400      	movs	r4, #0
 8007084:	4625      	mov	r5, r4
 8007086:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007088:	43db      	mvns	r3, r3
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	4656      	mov	r6, sl
 800708e:	2700      	movs	r7, #0
 8007090:	4621      	mov	r1, r4
 8007092:	4658      	mov	r0, fp
 8007094:	f000 fbb4 	bl	8007800 <_Bfree>
 8007098:	2d00      	cmp	r5, #0
 800709a:	d0dc      	beq.n	8007056 <_dtoa_r+0x65e>
 800709c:	b12f      	cbz	r7, 80070aa <_dtoa_r+0x6b2>
 800709e:	42af      	cmp	r7, r5
 80070a0:	d003      	beq.n	80070aa <_dtoa_r+0x6b2>
 80070a2:	4639      	mov	r1, r7
 80070a4:	4658      	mov	r0, fp
 80070a6:	f000 fbab 	bl	8007800 <_Bfree>
 80070aa:	4629      	mov	r1, r5
 80070ac:	4658      	mov	r0, fp
 80070ae:	f000 fba7 	bl	8007800 <_Bfree>
 80070b2:	e7d0      	b.n	8007056 <_dtoa_r+0x65e>
 80070b4:	9704      	str	r7, [sp, #16]
 80070b6:	4633      	mov	r3, r6
 80070b8:	461e      	mov	r6, r3
 80070ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070be:	2a39      	cmp	r2, #57	@ 0x39
 80070c0:	d107      	bne.n	80070d2 <_dtoa_r+0x6da>
 80070c2:	459a      	cmp	sl, r3
 80070c4:	d1f8      	bne.n	80070b8 <_dtoa_r+0x6c0>
 80070c6:	9a04      	ldr	r2, [sp, #16]
 80070c8:	3201      	adds	r2, #1
 80070ca:	9204      	str	r2, [sp, #16]
 80070cc:	2230      	movs	r2, #48	@ 0x30
 80070ce:	f88a 2000 	strb.w	r2, [sl]
 80070d2:	781a      	ldrb	r2, [r3, #0]
 80070d4:	3201      	adds	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	e7bd      	b.n	8007056 <_dtoa_r+0x65e>
 80070da:	4b7b      	ldr	r3, [pc, #492]	@ (80072c8 <_dtoa_r+0x8d0>)
 80070dc:	2200      	movs	r2, #0
 80070de:	f7f9 fab3 	bl	8000648 <__aeabi_dmul>
 80070e2:	2200      	movs	r2, #0
 80070e4:	2300      	movs	r3, #0
 80070e6:	4604      	mov	r4, r0
 80070e8:	460d      	mov	r5, r1
 80070ea:	f7f9 fd15 	bl	8000b18 <__aeabi_dcmpeq>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	f43f aebb 	beq.w	8006e6a <_dtoa_r+0x472>
 80070f4:	e6f0      	b.n	8006ed8 <_dtoa_r+0x4e0>
 80070f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80070f8:	2a00      	cmp	r2, #0
 80070fa:	f000 80db 	beq.w	80072b4 <_dtoa_r+0x8bc>
 80070fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007100:	2a01      	cmp	r2, #1
 8007102:	f300 80bf 	bgt.w	8007284 <_dtoa_r+0x88c>
 8007106:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007108:	2a00      	cmp	r2, #0
 800710a:	f000 80b7 	beq.w	800727c <_dtoa_r+0x884>
 800710e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007112:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007114:	4646      	mov	r6, r8
 8007116:	9a08      	ldr	r2, [sp, #32]
 8007118:	2101      	movs	r1, #1
 800711a:	441a      	add	r2, r3
 800711c:	4658      	mov	r0, fp
 800711e:	4498      	add	r8, r3
 8007120:	9208      	str	r2, [sp, #32]
 8007122:	f000 fc6b 	bl	80079fc <__i2b>
 8007126:	4605      	mov	r5, r0
 8007128:	b15e      	cbz	r6, 8007142 <_dtoa_r+0x74a>
 800712a:	9b08      	ldr	r3, [sp, #32]
 800712c:	2b00      	cmp	r3, #0
 800712e:	dd08      	ble.n	8007142 <_dtoa_r+0x74a>
 8007130:	42b3      	cmp	r3, r6
 8007132:	9a08      	ldr	r2, [sp, #32]
 8007134:	bfa8      	it	ge
 8007136:	4633      	movge	r3, r6
 8007138:	eba8 0803 	sub.w	r8, r8, r3
 800713c:	1af6      	subs	r6, r6, r3
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	9308      	str	r3, [sp, #32]
 8007142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007144:	b1f3      	cbz	r3, 8007184 <_dtoa_r+0x78c>
 8007146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80b7 	beq.w	80072bc <_dtoa_r+0x8c4>
 800714e:	b18c      	cbz	r4, 8007174 <_dtoa_r+0x77c>
 8007150:	4629      	mov	r1, r5
 8007152:	4622      	mov	r2, r4
 8007154:	4658      	mov	r0, fp
 8007156:	f000 fd11 	bl	8007b7c <__pow5mult>
 800715a:	464a      	mov	r2, r9
 800715c:	4601      	mov	r1, r0
 800715e:	4605      	mov	r5, r0
 8007160:	4658      	mov	r0, fp
 8007162:	f000 fc61 	bl	8007a28 <__multiply>
 8007166:	4649      	mov	r1, r9
 8007168:	9004      	str	r0, [sp, #16]
 800716a:	4658      	mov	r0, fp
 800716c:	f000 fb48 	bl	8007800 <_Bfree>
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	4699      	mov	r9, r3
 8007174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007176:	1b1a      	subs	r2, r3, r4
 8007178:	d004      	beq.n	8007184 <_dtoa_r+0x78c>
 800717a:	4649      	mov	r1, r9
 800717c:	4658      	mov	r0, fp
 800717e:	f000 fcfd 	bl	8007b7c <__pow5mult>
 8007182:	4681      	mov	r9, r0
 8007184:	2101      	movs	r1, #1
 8007186:	4658      	mov	r0, fp
 8007188:	f000 fc38 	bl	80079fc <__i2b>
 800718c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800718e:	4604      	mov	r4, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 81cf 	beq.w	8007534 <_dtoa_r+0xb3c>
 8007196:	461a      	mov	r2, r3
 8007198:	4601      	mov	r1, r0
 800719a:	4658      	mov	r0, fp
 800719c:	f000 fcee 	bl	8007b7c <__pow5mult>
 80071a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	4604      	mov	r4, r0
 80071a6:	f300 8095 	bgt.w	80072d4 <_dtoa_r+0x8dc>
 80071aa:	9b02      	ldr	r3, [sp, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 8087 	bne.w	80072c0 <_dtoa_r+0x8c8>
 80071b2:	9b03      	ldr	r3, [sp, #12]
 80071b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f040 8089 	bne.w	80072d0 <_dtoa_r+0x8d8>
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071c4:	0d1b      	lsrs	r3, r3, #20
 80071c6:	051b      	lsls	r3, r3, #20
 80071c8:	b12b      	cbz	r3, 80071d6 <_dtoa_r+0x7de>
 80071ca:	9b08      	ldr	r3, [sp, #32]
 80071cc:	3301      	adds	r3, #1
 80071ce:	9308      	str	r3, [sp, #32]
 80071d0:	f108 0801 	add.w	r8, r8, #1
 80071d4:	2301      	movs	r3, #1
 80071d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 81b0 	beq.w	8007540 <_dtoa_r+0xb48>
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071e6:	6918      	ldr	r0, [r3, #16]
 80071e8:	f000 fbbc 	bl	8007964 <__hi0bits>
 80071ec:	f1c0 0020 	rsb	r0, r0, #32
 80071f0:	9b08      	ldr	r3, [sp, #32]
 80071f2:	4418      	add	r0, r3
 80071f4:	f010 001f 	ands.w	r0, r0, #31
 80071f8:	d077      	beq.n	80072ea <_dtoa_r+0x8f2>
 80071fa:	f1c0 0320 	rsb	r3, r0, #32
 80071fe:	2b04      	cmp	r3, #4
 8007200:	dd6b      	ble.n	80072da <_dtoa_r+0x8e2>
 8007202:	9b08      	ldr	r3, [sp, #32]
 8007204:	f1c0 001c 	rsb	r0, r0, #28
 8007208:	4403      	add	r3, r0
 800720a:	4480      	add	r8, r0
 800720c:	4406      	add	r6, r0
 800720e:	9308      	str	r3, [sp, #32]
 8007210:	f1b8 0f00 	cmp.w	r8, #0
 8007214:	dd05      	ble.n	8007222 <_dtoa_r+0x82a>
 8007216:	4649      	mov	r1, r9
 8007218:	4642      	mov	r2, r8
 800721a:	4658      	mov	r0, fp
 800721c:	f000 fd08 	bl	8007c30 <__lshift>
 8007220:	4681      	mov	r9, r0
 8007222:	9b08      	ldr	r3, [sp, #32]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dd05      	ble.n	8007234 <_dtoa_r+0x83c>
 8007228:	4621      	mov	r1, r4
 800722a:	461a      	mov	r2, r3
 800722c:	4658      	mov	r0, fp
 800722e:	f000 fcff 	bl	8007c30 <__lshift>
 8007232:	4604      	mov	r4, r0
 8007234:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007236:	2b00      	cmp	r3, #0
 8007238:	d059      	beq.n	80072ee <_dtoa_r+0x8f6>
 800723a:	4621      	mov	r1, r4
 800723c:	4648      	mov	r0, r9
 800723e:	f000 fd63 	bl	8007d08 <__mcmp>
 8007242:	2800      	cmp	r0, #0
 8007244:	da53      	bge.n	80072ee <_dtoa_r+0x8f6>
 8007246:	1e7b      	subs	r3, r7, #1
 8007248:	9304      	str	r3, [sp, #16]
 800724a:	4649      	mov	r1, r9
 800724c:	2300      	movs	r3, #0
 800724e:	220a      	movs	r2, #10
 8007250:	4658      	mov	r0, fp
 8007252:	f000 faf7 	bl	8007844 <__multadd>
 8007256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007258:	4681      	mov	r9, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 8172 	beq.w	8007544 <_dtoa_r+0xb4c>
 8007260:	2300      	movs	r3, #0
 8007262:	4629      	mov	r1, r5
 8007264:	220a      	movs	r2, #10
 8007266:	4658      	mov	r0, fp
 8007268:	f000 faec 	bl	8007844 <__multadd>
 800726c:	9b00      	ldr	r3, [sp, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	4605      	mov	r5, r0
 8007272:	dc67      	bgt.n	8007344 <_dtoa_r+0x94c>
 8007274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007276:	2b02      	cmp	r3, #2
 8007278:	dc41      	bgt.n	80072fe <_dtoa_r+0x906>
 800727a:	e063      	b.n	8007344 <_dtoa_r+0x94c>
 800727c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800727e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007282:	e746      	b.n	8007112 <_dtoa_r+0x71a>
 8007284:	9b07      	ldr	r3, [sp, #28]
 8007286:	1e5c      	subs	r4, r3, #1
 8007288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800728a:	42a3      	cmp	r3, r4
 800728c:	bfbf      	itttt	lt
 800728e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007290:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007292:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007294:	1ae3      	sublt	r3, r4, r3
 8007296:	bfb4      	ite	lt
 8007298:	18d2      	addlt	r2, r2, r3
 800729a:	1b1c      	subge	r4, r3, r4
 800729c:	9b07      	ldr	r3, [sp, #28]
 800729e:	bfbc      	itt	lt
 80072a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80072a2:	2400      	movlt	r4, #0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bfb5      	itete	lt
 80072a8:	eba8 0603 	sublt.w	r6, r8, r3
 80072ac:	9b07      	ldrge	r3, [sp, #28]
 80072ae:	2300      	movlt	r3, #0
 80072b0:	4646      	movge	r6, r8
 80072b2:	e730      	b.n	8007116 <_dtoa_r+0x71e>
 80072b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80072b8:	4646      	mov	r6, r8
 80072ba:	e735      	b.n	8007128 <_dtoa_r+0x730>
 80072bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072be:	e75c      	b.n	800717a <_dtoa_r+0x782>
 80072c0:	2300      	movs	r3, #0
 80072c2:	e788      	b.n	80071d6 <_dtoa_r+0x7de>
 80072c4:	3fe00000 	.word	0x3fe00000
 80072c8:	40240000 	.word	0x40240000
 80072cc:	40140000 	.word	0x40140000
 80072d0:	9b02      	ldr	r3, [sp, #8]
 80072d2:	e780      	b.n	80071d6 <_dtoa_r+0x7de>
 80072d4:	2300      	movs	r3, #0
 80072d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072d8:	e782      	b.n	80071e0 <_dtoa_r+0x7e8>
 80072da:	d099      	beq.n	8007210 <_dtoa_r+0x818>
 80072dc:	9a08      	ldr	r2, [sp, #32]
 80072de:	331c      	adds	r3, #28
 80072e0:	441a      	add	r2, r3
 80072e2:	4498      	add	r8, r3
 80072e4:	441e      	add	r6, r3
 80072e6:	9208      	str	r2, [sp, #32]
 80072e8:	e792      	b.n	8007210 <_dtoa_r+0x818>
 80072ea:	4603      	mov	r3, r0
 80072ec:	e7f6      	b.n	80072dc <_dtoa_r+0x8e4>
 80072ee:	9b07      	ldr	r3, [sp, #28]
 80072f0:	9704      	str	r7, [sp, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	dc20      	bgt.n	8007338 <_dtoa_r+0x940>
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	dd1e      	ble.n	800733c <_dtoa_r+0x944>
 80072fe:	9b00      	ldr	r3, [sp, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f47f aec0 	bne.w	8007086 <_dtoa_r+0x68e>
 8007306:	4621      	mov	r1, r4
 8007308:	2205      	movs	r2, #5
 800730a:	4658      	mov	r0, fp
 800730c:	f000 fa9a 	bl	8007844 <__multadd>
 8007310:	4601      	mov	r1, r0
 8007312:	4604      	mov	r4, r0
 8007314:	4648      	mov	r0, r9
 8007316:	f000 fcf7 	bl	8007d08 <__mcmp>
 800731a:	2800      	cmp	r0, #0
 800731c:	f77f aeb3 	ble.w	8007086 <_dtoa_r+0x68e>
 8007320:	4656      	mov	r6, sl
 8007322:	2331      	movs	r3, #49	@ 0x31
 8007324:	f806 3b01 	strb.w	r3, [r6], #1
 8007328:	9b04      	ldr	r3, [sp, #16]
 800732a:	3301      	adds	r3, #1
 800732c:	9304      	str	r3, [sp, #16]
 800732e:	e6ae      	b.n	800708e <_dtoa_r+0x696>
 8007330:	9c07      	ldr	r4, [sp, #28]
 8007332:	9704      	str	r7, [sp, #16]
 8007334:	4625      	mov	r5, r4
 8007336:	e7f3      	b.n	8007320 <_dtoa_r+0x928>
 8007338:	9b07      	ldr	r3, [sp, #28]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 8104 	beq.w	800754c <_dtoa_r+0xb54>
 8007344:	2e00      	cmp	r6, #0
 8007346:	dd05      	ble.n	8007354 <_dtoa_r+0x95c>
 8007348:	4629      	mov	r1, r5
 800734a:	4632      	mov	r2, r6
 800734c:	4658      	mov	r0, fp
 800734e:	f000 fc6f 	bl	8007c30 <__lshift>
 8007352:	4605      	mov	r5, r0
 8007354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007356:	2b00      	cmp	r3, #0
 8007358:	d05a      	beq.n	8007410 <_dtoa_r+0xa18>
 800735a:	6869      	ldr	r1, [r5, #4]
 800735c:	4658      	mov	r0, fp
 800735e:	f000 fa0f 	bl	8007780 <_Balloc>
 8007362:	4606      	mov	r6, r0
 8007364:	b928      	cbnz	r0, 8007372 <_dtoa_r+0x97a>
 8007366:	4b84      	ldr	r3, [pc, #528]	@ (8007578 <_dtoa_r+0xb80>)
 8007368:	4602      	mov	r2, r0
 800736a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800736e:	f7ff bb5a 	b.w	8006a26 <_dtoa_r+0x2e>
 8007372:	692a      	ldr	r2, [r5, #16]
 8007374:	3202      	adds	r2, #2
 8007376:	0092      	lsls	r2, r2, #2
 8007378:	f105 010c 	add.w	r1, r5, #12
 800737c:	300c      	adds	r0, #12
 800737e:	f001 ff75 	bl	800926c <memcpy>
 8007382:	2201      	movs	r2, #1
 8007384:	4631      	mov	r1, r6
 8007386:	4658      	mov	r0, fp
 8007388:	f000 fc52 	bl	8007c30 <__lshift>
 800738c:	f10a 0301 	add.w	r3, sl, #1
 8007390:	9307      	str	r3, [sp, #28]
 8007392:	9b00      	ldr	r3, [sp, #0]
 8007394:	4453      	add	r3, sl
 8007396:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	462f      	mov	r7, r5
 80073a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073a2:	4605      	mov	r5, r0
 80073a4:	9b07      	ldr	r3, [sp, #28]
 80073a6:	4621      	mov	r1, r4
 80073a8:	3b01      	subs	r3, #1
 80073aa:	4648      	mov	r0, r9
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	f7ff fa99 	bl	80068e4 <quorem>
 80073b2:	4639      	mov	r1, r7
 80073b4:	9002      	str	r0, [sp, #8]
 80073b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073ba:	4648      	mov	r0, r9
 80073bc:	f000 fca4 	bl	8007d08 <__mcmp>
 80073c0:	462a      	mov	r2, r5
 80073c2:	9008      	str	r0, [sp, #32]
 80073c4:	4621      	mov	r1, r4
 80073c6:	4658      	mov	r0, fp
 80073c8:	f000 fcba 	bl	8007d40 <__mdiff>
 80073cc:	68c2      	ldr	r2, [r0, #12]
 80073ce:	4606      	mov	r6, r0
 80073d0:	bb02      	cbnz	r2, 8007414 <_dtoa_r+0xa1c>
 80073d2:	4601      	mov	r1, r0
 80073d4:	4648      	mov	r0, r9
 80073d6:	f000 fc97 	bl	8007d08 <__mcmp>
 80073da:	4602      	mov	r2, r0
 80073dc:	4631      	mov	r1, r6
 80073de:	4658      	mov	r0, fp
 80073e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80073e2:	f000 fa0d 	bl	8007800 <_Bfree>
 80073e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073ea:	9e07      	ldr	r6, [sp, #28]
 80073ec:	ea43 0102 	orr.w	r1, r3, r2
 80073f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073f2:	4319      	orrs	r1, r3
 80073f4:	d110      	bne.n	8007418 <_dtoa_r+0xa20>
 80073f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073fa:	d029      	beq.n	8007450 <_dtoa_r+0xa58>
 80073fc:	9b08      	ldr	r3, [sp, #32]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	dd02      	ble.n	8007408 <_dtoa_r+0xa10>
 8007402:	9b02      	ldr	r3, [sp, #8]
 8007404:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007408:	9b00      	ldr	r3, [sp, #0]
 800740a:	f883 8000 	strb.w	r8, [r3]
 800740e:	e63f      	b.n	8007090 <_dtoa_r+0x698>
 8007410:	4628      	mov	r0, r5
 8007412:	e7bb      	b.n	800738c <_dtoa_r+0x994>
 8007414:	2201      	movs	r2, #1
 8007416:	e7e1      	b.n	80073dc <_dtoa_r+0x9e4>
 8007418:	9b08      	ldr	r3, [sp, #32]
 800741a:	2b00      	cmp	r3, #0
 800741c:	db04      	blt.n	8007428 <_dtoa_r+0xa30>
 800741e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007420:	430b      	orrs	r3, r1
 8007422:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007424:	430b      	orrs	r3, r1
 8007426:	d120      	bne.n	800746a <_dtoa_r+0xa72>
 8007428:	2a00      	cmp	r2, #0
 800742a:	dded      	ble.n	8007408 <_dtoa_r+0xa10>
 800742c:	4649      	mov	r1, r9
 800742e:	2201      	movs	r2, #1
 8007430:	4658      	mov	r0, fp
 8007432:	f000 fbfd 	bl	8007c30 <__lshift>
 8007436:	4621      	mov	r1, r4
 8007438:	4681      	mov	r9, r0
 800743a:	f000 fc65 	bl	8007d08 <__mcmp>
 800743e:	2800      	cmp	r0, #0
 8007440:	dc03      	bgt.n	800744a <_dtoa_r+0xa52>
 8007442:	d1e1      	bne.n	8007408 <_dtoa_r+0xa10>
 8007444:	f018 0f01 	tst.w	r8, #1
 8007448:	d0de      	beq.n	8007408 <_dtoa_r+0xa10>
 800744a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800744e:	d1d8      	bne.n	8007402 <_dtoa_r+0xa0a>
 8007450:	9a00      	ldr	r2, [sp, #0]
 8007452:	2339      	movs	r3, #57	@ 0x39
 8007454:	7013      	strb	r3, [r2, #0]
 8007456:	4633      	mov	r3, r6
 8007458:	461e      	mov	r6, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007460:	2a39      	cmp	r2, #57	@ 0x39
 8007462:	d052      	beq.n	800750a <_dtoa_r+0xb12>
 8007464:	3201      	adds	r2, #1
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	e612      	b.n	8007090 <_dtoa_r+0x698>
 800746a:	2a00      	cmp	r2, #0
 800746c:	dd07      	ble.n	800747e <_dtoa_r+0xa86>
 800746e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007472:	d0ed      	beq.n	8007450 <_dtoa_r+0xa58>
 8007474:	9a00      	ldr	r2, [sp, #0]
 8007476:	f108 0301 	add.w	r3, r8, #1
 800747a:	7013      	strb	r3, [r2, #0]
 800747c:	e608      	b.n	8007090 <_dtoa_r+0x698>
 800747e:	9b07      	ldr	r3, [sp, #28]
 8007480:	9a07      	ldr	r2, [sp, #28]
 8007482:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007488:	4293      	cmp	r3, r2
 800748a:	d028      	beq.n	80074de <_dtoa_r+0xae6>
 800748c:	4649      	mov	r1, r9
 800748e:	2300      	movs	r3, #0
 8007490:	220a      	movs	r2, #10
 8007492:	4658      	mov	r0, fp
 8007494:	f000 f9d6 	bl	8007844 <__multadd>
 8007498:	42af      	cmp	r7, r5
 800749a:	4681      	mov	r9, r0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	f04f 020a 	mov.w	r2, #10
 80074a4:	4639      	mov	r1, r7
 80074a6:	4658      	mov	r0, fp
 80074a8:	d107      	bne.n	80074ba <_dtoa_r+0xac2>
 80074aa:	f000 f9cb 	bl	8007844 <__multadd>
 80074ae:	4607      	mov	r7, r0
 80074b0:	4605      	mov	r5, r0
 80074b2:	9b07      	ldr	r3, [sp, #28]
 80074b4:	3301      	adds	r3, #1
 80074b6:	9307      	str	r3, [sp, #28]
 80074b8:	e774      	b.n	80073a4 <_dtoa_r+0x9ac>
 80074ba:	f000 f9c3 	bl	8007844 <__multadd>
 80074be:	4629      	mov	r1, r5
 80074c0:	4607      	mov	r7, r0
 80074c2:	2300      	movs	r3, #0
 80074c4:	220a      	movs	r2, #10
 80074c6:	4658      	mov	r0, fp
 80074c8:	f000 f9bc 	bl	8007844 <__multadd>
 80074cc:	4605      	mov	r5, r0
 80074ce:	e7f0      	b.n	80074b2 <_dtoa_r+0xaba>
 80074d0:	9b00      	ldr	r3, [sp, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bfcc      	ite	gt
 80074d6:	461e      	movgt	r6, r3
 80074d8:	2601      	movle	r6, #1
 80074da:	4456      	add	r6, sl
 80074dc:	2700      	movs	r7, #0
 80074de:	4649      	mov	r1, r9
 80074e0:	2201      	movs	r2, #1
 80074e2:	4658      	mov	r0, fp
 80074e4:	f000 fba4 	bl	8007c30 <__lshift>
 80074e8:	4621      	mov	r1, r4
 80074ea:	4681      	mov	r9, r0
 80074ec:	f000 fc0c 	bl	8007d08 <__mcmp>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	dcb0      	bgt.n	8007456 <_dtoa_r+0xa5e>
 80074f4:	d102      	bne.n	80074fc <_dtoa_r+0xb04>
 80074f6:	f018 0f01 	tst.w	r8, #1
 80074fa:	d1ac      	bne.n	8007456 <_dtoa_r+0xa5e>
 80074fc:	4633      	mov	r3, r6
 80074fe:	461e      	mov	r6, r3
 8007500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007504:	2a30      	cmp	r2, #48	@ 0x30
 8007506:	d0fa      	beq.n	80074fe <_dtoa_r+0xb06>
 8007508:	e5c2      	b.n	8007090 <_dtoa_r+0x698>
 800750a:	459a      	cmp	sl, r3
 800750c:	d1a4      	bne.n	8007458 <_dtoa_r+0xa60>
 800750e:	9b04      	ldr	r3, [sp, #16]
 8007510:	3301      	adds	r3, #1
 8007512:	9304      	str	r3, [sp, #16]
 8007514:	2331      	movs	r3, #49	@ 0x31
 8007516:	f88a 3000 	strb.w	r3, [sl]
 800751a:	e5b9      	b.n	8007090 <_dtoa_r+0x698>
 800751c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800751e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800757c <_dtoa_r+0xb84>
 8007522:	b11b      	cbz	r3, 800752c <_dtoa_r+0xb34>
 8007524:	f10a 0308 	add.w	r3, sl, #8
 8007528:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800752a:	6013      	str	r3, [r2, #0]
 800752c:	4650      	mov	r0, sl
 800752e:	b019      	add	sp, #100	@ 0x64
 8007530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007536:	2b01      	cmp	r3, #1
 8007538:	f77f ae37 	ble.w	80071aa <_dtoa_r+0x7b2>
 800753c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800753e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007540:	2001      	movs	r0, #1
 8007542:	e655      	b.n	80071f0 <_dtoa_r+0x7f8>
 8007544:	9b00      	ldr	r3, [sp, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f77f aed6 	ble.w	80072f8 <_dtoa_r+0x900>
 800754c:	4656      	mov	r6, sl
 800754e:	4621      	mov	r1, r4
 8007550:	4648      	mov	r0, r9
 8007552:	f7ff f9c7 	bl	80068e4 <quorem>
 8007556:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800755a:	f806 8b01 	strb.w	r8, [r6], #1
 800755e:	9b00      	ldr	r3, [sp, #0]
 8007560:	eba6 020a 	sub.w	r2, r6, sl
 8007564:	4293      	cmp	r3, r2
 8007566:	ddb3      	ble.n	80074d0 <_dtoa_r+0xad8>
 8007568:	4649      	mov	r1, r9
 800756a:	2300      	movs	r3, #0
 800756c:	220a      	movs	r2, #10
 800756e:	4658      	mov	r0, fp
 8007570:	f000 f968 	bl	8007844 <__multadd>
 8007574:	4681      	mov	r9, r0
 8007576:	e7ea      	b.n	800754e <_dtoa_r+0xb56>
 8007578:	0800a0a1 	.word	0x0800a0a1
 800757c:	0800a025 	.word	0x0800a025

08007580 <_free_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4605      	mov	r5, r0
 8007584:	2900      	cmp	r1, #0
 8007586:	d041      	beq.n	800760c <_free_r+0x8c>
 8007588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800758c:	1f0c      	subs	r4, r1, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfb8      	it	lt
 8007592:	18e4      	addlt	r4, r4, r3
 8007594:	f000 f8e8 	bl	8007768 <__malloc_lock>
 8007598:	4a1d      	ldr	r2, [pc, #116]	@ (8007610 <_free_r+0x90>)
 800759a:	6813      	ldr	r3, [r2, #0]
 800759c:	b933      	cbnz	r3, 80075ac <_free_r+0x2c>
 800759e:	6063      	str	r3, [r4, #4]
 80075a0:	6014      	str	r4, [r2, #0]
 80075a2:	4628      	mov	r0, r5
 80075a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a8:	f000 b8e4 	b.w	8007774 <__malloc_unlock>
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d908      	bls.n	80075c2 <_free_r+0x42>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	1821      	adds	r1, r4, r0
 80075b4:	428b      	cmp	r3, r1
 80075b6:	bf01      	itttt	eq
 80075b8:	6819      	ldreq	r1, [r3, #0]
 80075ba:	685b      	ldreq	r3, [r3, #4]
 80075bc:	1809      	addeq	r1, r1, r0
 80075be:	6021      	streq	r1, [r4, #0]
 80075c0:	e7ed      	b.n	800759e <_free_r+0x1e>
 80075c2:	461a      	mov	r2, r3
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	b10b      	cbz	r3, 80075cc <_free_r+0x4c>
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	d9fa      	bls.n	80075c2 <_free_r+0x42>
 80075cc:	6811      	ldr	r1, [r2, #0]
 80075ce:	1850      	adds	r0, r2, r1
 80075d0:	42a0      	cmp	r0, r4
 80075d2:	d10b      	bne.n	80075ec <_free_r+0x6c>
 80075d4:	6820      	ldr	r0, [r4, #0]
 80075d6:	4401      	add	r1, r0
 80075d8:	1850      	adds	r0, r2, r1
 80075da:	4283      	cmp	r3, r0
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	d1e0      	bne.n	80075a2 <_free_r+0x22>
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	6053      	str	r3, [r2, #4]
 80075e6:	4408      	add	r0, r1
 80075e8:	6010      	str	r0, [r2, #0]
 80075ea:	e7da      	b.n	80075a2 <_free_r+0x22>
 80075ec:	d902      	bls.n	80075f4 <_free_r+0x74>
 80075ee:	230c      	movs	r3, #12
 80075f0:	602b      	str	r3, [r5, #0]
 80075f2:	e7d6      	b.n	80075a2 <_free_r+0x22>
 80075f4:	6820      	ldr	r0, [r4, #0]
 80075f6:	1821      	adds	r1, r4, r0
 80075f8:	428b      	cmp	r3, r1
 80075fa:	bf04      	itt	eq
 80075fc:	6819      	ldreq	r1, [r3, #0]
 80075fe:	685b      	ldreq	r3, [r3, #4]
 8007600:	6063      	str	r3, [r4, #4]
 8007602:	bf04      	itt	eq
 8007604:	1809      	addeq	r1, r1, r0
 8007606:	6021      	streq	r1, [r4, #0]
 8007608:	6054      	str	r4, [r2, #4]
 800760a:	e7ca      	b.n	80075a2 <_free_r+0x22>
 800760c:	bd38      	pop	{r3, r4, r5, pc}
 800760e:	bf00      	nop
 8007610:	20000484 	.word	0x20000484

08007614 <malloc>:
 8007614:	4b02      	ldr	r3, [pc, #8]	@ (8007620 <malloc+0xc>)
 8007616:	4601      	mov	r1, r0
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	f000 b825 	b.w	8007668 <_malloc_r>
 800761e:	bf00      	nop
 8007620:	20000018 	.word	0x20000018

08007624 <sbrk_aligned>:
 8007624:	b570      	push	{r4, r5, r6, lr}
 8007626:	4e0f      	ldr	r6, [pc, #60]	@ (8007664 <sbrk_aligned+0x40>)
 8007628:	460c      	mov	r4, r1
 800762a:	6831      	ldr	r1, [r6, #0]
 800762c:	4605      	mov	r5, r0
 800762e:	b911      	cbnz	r1, 8007636 <sbrk_aligned+0x12>
 8007630:	f001 fe0c 	bl	800924c <_sbrk_r>
 8007634:	6030      	str	r0, [r6, #0]
 8007636:	4621      	mov	r1, r4
 8007638:	4628      	mov	r0, r5
 800763a:	f001 fe07 	bl	800924c <_sbrk_r>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d103      	bne.n	800764a <sbrk_aligned+0x26>
 8007642:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007646:	4620      	mov	r0, r4
 8007648:	bd70      	pop	{r4, r5, r6, pc}
 800764a:	1cc4      	adds	r4, r0, #3
 800764c:	f024 0403 	bic.w	r4, r4, #3
 8007650:	42a0      	cmp	r0, r4
 8007652:	d0f8      	beq.n	8007646 <sbrk_aligned+0x22>
 8007654:	1a21      	subs	r1, r4, r0
 8007656:	4628      	mov	r0, r5
 8007658:	f001 fdf8 	bl	800924c <_sbrk_r>
 800765c:	3001      	adds	r0, #1
 800765e:	d1f2      	bne.n	8007646 <sbrk_aligned+0x22>
 8007660:	e7ef      	b.n	8007642 <sbrk_aligned+0x1e>
 8007662:	bf00      	nop
 8007664:	20000480 	.word	0x20000480

08007668 <_malloc_r>:
 8007668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800766c:	1ccd      	adds	r5, r1, #3
 800766e:	f025 0503 	bic.w	r5, r5, #3
 8007672:	3508      	adds	r5, #8
 8007674:	2d0c      	cmp	r5, #12
 8007676:	bf38      	it	cc
 8007678:	250c      	movcc	r5, #12
 800767a:	2d00      	cmp	r5, #0
 800767c:	4606      	mov	r6, r0
 800767e:	db01      	blt.n	8007684 <_malloc_r+0x1c>
 8007680:	42a9      	cmp	r1, r5
 8007682:	d904      	bls.n	800768e <_malloc_r+0x26>
 8007684:	230c      	movs	r3, #12
 8007686:	6033      	str	r3, [r6, #0]
 8007688:	2000      	movs	r0, #0
 800768a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800768e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007764 <_malloc_r+0xfc>
 8007692:	f000 f869 	bl	8007768 <__malloc_lock>
 8007696:	f8d8 3000 	ldr.w	r3, [r8]
 800769a:	461c      	mov	r4, r3
 800769c:	bb44      	cbnz	r4, 80076f0 <_malloc_r+0x88>
 800769e:	4629      	mov	r1, r5
 80076a0:	4630      	mov	r0, r6
 80076a2:	f7ff ffbf 	bl	8007624 <sbrk_aligned>
 80076a6:	1c43      	adds	r3, r0, #1
 80076a8:	4604      	mov	r4, r0
 80076aa:	d158      	bne.n	800775e <_malloc_r+0xf6>
 80076ac:	f8d8 4000 	ldr.w	r4, [r8]
 80076b0:	4627      	mov	r7, r4
 80076b2:	2f00      	cmp	r7, #0
 80076b4:	d143      	bne.n	800773e <_malloc_r+0xd6>
 80076b6:	2c00      	cmp	r4, #0
 80076b8:	d04b      	beq.n	8007752 <_malloc_r+0xea>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	4639      	mov	r1, r7
 80076be:	4630      	mov	r0, r6
 80076c0:	eb04 0903 	add.w	r9, r4, r3
 80076c4:	f001 fdc2 	bl	800924c <_sbrk_r>
 80076c8:	4581      	cmp	r9, r0
 80076ca:	d142      	bne.n	8007752 <_malloc_r+0xea>
 80076cc:	6821      	ldr	r1, [r4, #0]
 80076ce:	1a6d      	subs	r5, r5, r1
 80076d0:	4629      	mov	r1, r5
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7ff ffa6 	bl	8007624 <sbrk_aligned>
 80076d8:	3001      	adds	r0, #1
 80076da:	d03a      	beq.n	8007752 <_malloc_r+0xea>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	442b      	add	r3, r5
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	f8d8 3000 	ldr.w	r3, [r8]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	bb62      	cbnz	r2, 8007744 <_malloc_r+0xdc>
 80076ea:	f8c8 7000 	str.w	r7, [r8]
 80076ee:	e00f      	b.n	8007710 <_malloc_r+0xa8>
 80076f0:	6822      	ldr	r2, [r4, #0]
 80076f2:	1b52      	subs	r2, r2, r5
 80076f4:	d420      	bmi.n	8007738 <_malloc_r+0xd0>
 80076f6:	2a0b      	cmp	r2, #11
 80076f8:	d917      	bls.n	800772a <_malloc_r+0xc2>
 80076fa:	1961      	adds	r1, r4, r5
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	6025      	str	r5, [r4, #0]
 8007700:	bf18      	it	ne
 8007702:	6059      	strne	r1, [r3, #4]
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	bf08      	it	eq
 8007708:	f8c8 1000 	streq.w	r1, [r8]
 800770c:	5162      	str	r2, [r4, r5]
 800770e:	604b      	str	r3, [r1, #4]
 8007710:	4630      	mov	r0, r6
 8007712:	f000 f82f 	bl	8007774 <__malloc_unlock>
 8007716:	f104 000b 	add.w	r0, r4, #11
 800771a:	1d23      	adds	r3, r4, #4
 800771c:	f020 0007 	bic.w	r0, r0, #7
 8007720:	1ac2      	subs	r2, r0, r3
 8007722:	bf1c      	itt	ne
 8007724:	1a1b      	subne	r3, r3, r0
 8007726:	50a3      	strne	r3, [r4, r2]
 8007728:	e7af      	b.n	800768a <_malloc_r+0x22>
 800772a:	6862      	ldr	r2, [r4, #4]
 800772c:	42a3      	cmp	r3, r4
 800772e:	bf0c      	ite	eq
 8007730:	f8c8 2000 	streq.w	r2, [r8]
 8007734:	605a      	strne	r2, [r3, #4]
 8007736:	e7eb      	b.n	8007710 <_malloc_r+0xa8>
 8007738:	4623      	mov	r3, r4
 800773a:	6864      	ldr	r4, [r4, #4]
 800773c:	e7ae      	b.n	800769c <_malloc_r+0x34>
 800773e:	463c      	mov	r4, r7
 8007740:	687f      	ldr	r7, [r7, #4]
 8007742:	e7b6      	b.n	80076b2 <_malloc_r+0x4a>
 8007744:	461a      	mov	r2, r3
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	42a3      	cmp	r3, r4
 800774a:	d1fb      	bne.n	8007744 <_malloc_r+0xdc>
 800774c:	2300      	movs	r3, #0
 800774e:	6053      	str	r3, [r2, #4]
 8007750:	e7de      	b.n	8007710 <_malloc_r+0xa8>
 8007752:	230c      	movs	r3, #12
 8007754:	6033      	str	r3, [r6, #0]
 8007756:	4630      	mov	r0, r6
 8007758:	f000 f80c 	bl	8007774 <__malloc_unlock>
 800775c:	e794      	b.n	8007688 <_malloc_r+0x20>
 800775e:	6005      	str	r5, [r0, #0]
 8007760:	e7d6      	b.n	8007710 <_malloc_r+0xa8>
 8007762:	bf00      	nop
 8007764:	20000484 	.word	0x20000484

08007768 <__malloc_lock>:
 8007768:	4801      	ldr	r0, [pc, #4]	@ (8007770 <__malloc_lock+0x8>)
 800776a:	f7ff b8b2 	b.w	80068d2 <__retarget_lock_acquire_recursive>
 800776e:	bf00      	nop
 8007770:	2000047c 	.word	0x2000047c

08007774 <__malloc_unlock>:
 8007774:	4801      	ldr	r0, [pc, #4]	@ (800777c <__malloc_unlock+0x8>)
 8007776:	f7ff b8ad 	b.w	80068d4 <__retarget_lock_release_recursive>
 800777a:	bf00      	nop
 800777c:	2000047c 	.word	0x2000047c

08007780 <_Balloc>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	69c6      	ldr	r6, [r0, #28]
 8007784:	4604      	mov	r4, r0
 8007786:	460d      	mov	r5, r1
 8007788:	b976      	cbnz	r6, 80077a8 <_Balloc+0x28>
 800778a:	2010      	movs	r0, #16
 800778c:	f7ff ff42 	bl	8007614 <malloc>
 8007790:	4602      	mov	r2, r0
 8007792:	61e0      	str	r0, [r4, #28]
 8007794:	b920      	cbnz	r0, 80077a0 <_Balloc+0x20>
 8007796:	4b18      	ldr	r3, [pc, #96]	@ (80077f8 <_Balloc+0x78>)
 8007798:	4818      	ldr	r0, [pc, #96]	@ (80077fc <_Balloc+0x7c>)
 800779a:	216b      	movs	r1, #107	@ 0x6b
 800779c:	f001 fd7c 	bl	8009298 <__assert_func>
 80077a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077a4:	6006      	str	r6, [r0, #0]
 80077a6:	60c6      	str	r6, [r0, #12]
 80077a8:	69e6      	ldr	r6, [r4, #28]
 80077aa:	68f3      	ldr	r3, [r6, #12]
 80077ac:	b183      	cbz	r3, 80077d0 <_Balloc+0x50>
 80077ae:	69e3      	ldr	r3, [r4, #28]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077b6:	b9b8      	cbnz	r0, 80077e8 <_Balloc+0x68>
 80077b8:	2101      	movs	r1, #1
 80077ba:	fa01 f605 	lsl.w	r6, r1, r5
 80077be:	1d72      	adds	r2, r6, #5
 80077c0:	0092      	lsls	r2, r2, #2
 80077c2:	4620      	mov	r0, r4
 80077c4:	f001 fd86 	bl	80092d4 <_calloc_r>
 80077c8:	b160      	cbz	r0, 80077e4 <_Balloc+0x64>
 80077ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ce:	e00e      	b.n	80077ee <_Balloc+0x6e>
 80077d0:	2221      	movs	r2, #33	@ 0x21
 80077d2:	2104      	movs	r1, #4
 80077d4:	4620      	mov	r0, r4
 80077d6:	f001 fd7d 	bl	80092d4 <_calloc_r>
 80077da:	69e3      	ldr	r3, [r4, #28]
 80077dc:	60f0      	str	r0, [r6, #12]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e4      	bne.n	80077ae <_Balloc+0x2e>
 80077e4:	2000      	movs	r0, #0
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	6802      	ldr	r2, [r0, #0]
 80077ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ee:	2300      	movs	r3, #0
 80077f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077f4:	e7f7      	b.n	80077e6 <_Balloc+0x66>
 80077f6:	bf00      	nop
 80077f8:	0800a032 	.word	0x0800a032
 80077fc:	0800a0b2 	.word	0x0800a0b2

08007800 <_Bfree>:
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	69c6      	ldr	r6, [r0, #28]
 8007804:	4605      	mov	r5, r0
 8007806:	460c      	mov	r4, r1
 8007808:	b976      	cbnz	r6, 8007828 <_Bfree+0x28>
 800780a:	2010      	movs	r0, #16
 800780c:	f7ff ff02 	bl	8007614 <malloc>
 8007810:	4602      	mov	r2, r0
 8007812:	61e8      	str	r0, [r5, #28]
 8007814:	b920      	cbnz	r0, 8007820 <_Bfree+0x20>
 8007816:	4b09      	ldr	r3, [pc, #36]	@ (800783c <_Bfree+0x3c>)
 8007818:	4809      	ldr	r0, [pc, #36]	@ (8007840 <_Bfree+0x40>)
 800781a:	218f      	movs	r1, #143	@ 0x8f
 800781c:	f001 fd3c 	bl	8009298 <__assert_func>
 8007820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007824:	6006      	str	r6, [r0, #0]
 8007826:	60c6      	str	r6, [r0, #12]
 8007828:	b13c      	cbz	r4, 800783a <_Bfree+0x3a>
 800782a:	69eb      	ldr	r3, [r5, #28]
 800782c:	6862      	ldr	r2, [r4, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007834:	6021      	str	r1, [r4, #0]
 8007836:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	0800a032 	.word	0x0800a032
 8007840:	0800a0b2 	.word	0x0800a0b2

08007844 <__multadd>:
 8007844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007848:	690d      	ldr	r5, [r1, #16]
 800784a:	4607      	mov	r7, r0
 800784c:	460c      	mov	r4, r1
 800784e:	461e      	mov	r6, r3
 8007850:	f101 0c14 	add.w	ip, r1, #20
 8007854:	2000      	movs	r0, #0
 8007856:	f8dc 3000 	ldr.w	r3, [ip]
 800785a:	b299      	uxth	r1, r3
 800785c:	fb02 6101 	mla	r1, r2, r1, r6
 8007860:	0c1e      	lsrs	r6, r3, #16
 8007862:	0c0b      	lsrs	r3, r1, #16
 8007864:	fb02 3306 	mla	r3, r2, r6, r3
 8007868:	b289      	uxth	r1, r1
 800786a:	3001      	adds	r0, #1
 800786c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007870:	4285      	cmp	r5, r0
 8007872:	f84c 1b04 	str.w	r1, [ip], #4
 8007876:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800787a:	dcec      	bgt.n	8007856 <__multadd+0x12>
 800787c:	b30e      	cbz	r6, 80078c2 <__multadd+0x7e>
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	42ab      	cmp	r3, r5
 8007882:	dc19      	bgt.n	80078b8 <__multadd+0x74>
 8007884:	6861      	ldr	r1, [r4, #4]
 8007886:	4638      	mov	r0, r7
 8007888:	3101      	adds	r1, #1
 800788a:	f7ff ff79 	bl	8007780 <_Balloc>
 800788e:	4680      	mov	r8, r0
 8007890:	b928      	cbnz	r0, 800789e <__multadd+0x5a>
 8007892:	4602      	mov	r2, r0
 8007894:	4b0c      	ldr	r3, [pc, #48]	@ (80078c8 <__multadd+0x84>)
 8007896:	480d      	ldr	r0, [pc, #52]	@ (80078cc <__multadd+0x88>)
 8007898:	21ba      	movs	r1, #186	@ 0xba
 800789a:	f001 fcfd 	bl	8009298 <__assert_func>
 800789e:	6922      	ldr	r2, [r4, #16]
 80078a0:	3202      	adds	r2, #2
 80078a2:	f104 010c 	add.w	r1, r4, #12
 80078a6:	0092      	lsls	r2, r2, #2
 80078a8:	300c      	adds	r0, #12
 80078aa:	f001 fcdf 	bl	800926c <memcpy>
 80078ae:	4621      	mov	r1, r4
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7ff ffa5 	bl	8007800 <_Bfree>
 80078b6:	4644      	mov	r4, r8
 80078b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078bc:	3501      	adds	r5, #1
 80078be:	615e      	str	r6, [r3, #20]
 80078c0:	6125      	str	r5, [r4, #16]
 80078c2:	4620      	mov	r0, r4
 80078c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078c8:	0800a0a1 	.word	0x0800a0a1
 80078cc:	0800a0b2 	.word	0x0800a0b2

080078d0 <__s2b>:
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	460c      	mov	r4, r1
 80078d6:	4615      	mov	r5, r2
 80078d8:	461f      	mov	r7, r3
 80078da:	2209      	movs	r2, #9
 80078dc:	3308      	adds	r3, #8
 80078de:	4606      	mov	r6, r0
 80078e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078e4:	2100      	movs	r1, #0
 80078e6:	2201      	movs	r2, #1
 80078e8:	429a      	cmp	r2, r3
 80078ea:	db09      	blt.n	8007900 <__s2b+0x30>
 80078ec:	4630      	mov	r0, r6
 80078ee:	f7ff ff47 	bl	8007780 <_Balloc>
 80078f2:	b940      	cbnz	r0, 8007906 <__s2b+0x36>
 80078f4:	4602      	mov	r2, r0
 80078f6:	4b19      	ldr	r3, [pc, #100]	@ (800795c <__s2b+0x8c>)
 80078f8:	4819      	ldr	r0, [pc, #100]	@ (8007960 <__s2b+0x90>)
 80078fa:	21d3      	movs	r1, #211	@ 0xd3
 80078fc:	f001 fccc 	bl	8009298 <__assert_func>
 8007900:	0052      	lsls	r2, r2, #1
 8007902:	3101      	adds	r1, #1
 8007904:	e7f0      	b.n	80078e8 <__s2b+0x18>
 8007906:	9b08      	ldr	r3, [sp, #32]
 8007908:	6143      	str	r3, [r0, #20]
 800790a:	2d09      	cmp	r5, #9
 800790c:	f04f 0301 	mov.w	r3, #1
 8007910:	6103      	str	r3, [r0, #16]
 8007912:	dd16      	ble.n	8007942 <__s2b+0x72>
 8007914:	f104 0909 	add.w	r9, r4, #9
 8007918:	46c8      	mov	r8, r9
 800791a:	442c      	add	r4, r5
 800791c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007920:	4601      	mov	r1, r0
 8007922:	3b30      	subs	r3, #48	@ 0x30
 8007924:	220a      	movs	r2, #10
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff ff8c 	bl	8007844 <__multadd>
 800792c:	45a0      	cmp	r8, r4
 800792e:	d1f5      	bne.n	800791c <__s2b+0x4c>
 8007930:	f1a5 0408 	sub.w	r4, r5, #8
 8007934:	444c      	add	r4, r9
 8007936:	1b2d      	subs	r5, r5, r4
 8007938:	1963      	adds	r3, r4, r5
 800793a:	42bb      	cmp	r3, r7
 800793c:	db04      	blt.n	8007948 <__s2b+0x78>
 800793e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007942:	340a      	adds	r4, #10
 8007944:	2509      	movs	r5, #9
 8007946:	e7f6      	b.n	8007936 <__s2b+0x66>
 8007948:	f814 3b01 	ldrb.w	r3, [r4], #1
 800794c:	4601      	mov	r1, r0
 800794e:	3b30      	subs	r3, #48	@ 0x30
 8007950:	220a      	movs	r2, #10
 8007952:	4630      	mov	r0, r6
 8007954:	f7ff ff76 	bl	8007844 <__multadd>
 8007958:	e7ee      	b.n	8007938 <__s2b+0x68>
 800795a:	bf00      	nop
 800795c:	0800a0a1 	.word	0x0800a0a1
 8007960:	0800a0b2 	.word	0x0800a0b2

08007964 <__hi0bits>:
 8007964:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007968:	4603      	mov	r3, r0
 800796a:	bf36      	itet	cc
 800796c:	0403      	lslcc	r3, r0, #16
 800796e:	2000      	movcs	r0, #0
 8007970:	2010      	movcc	r0, #16
 8007972:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007976:	bf3c      	itt	cc
 8007978:	021b      	lslcc	r3, r3, #8
 800797a:	3008      	addcc	r0, #8
 800797c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007980:	bf3c      	itt	cc
 8007982:	011b      	lslcc	r3, r3, #4
 8007984:	3004      	addcc	r0, #4
 8007986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798a:	bf3c      	itt	cc
 800798c:	009b      	lslcc	r3, r3, #2
 800798e:	3002      	addcc	r0, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	db05      	blt.n	80079a0 <__hi0bits+0x3c>
 8007994:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007998:	f100 0001 	add.w	r0, r0, #1
 800799c:	bf08      	it	eq
 800799e:	2020      	moveq	r0, #32
 80079a0:	4770      	bx	lr

080079a2 <__lo0bits>:
 80079a2:	6803      	ldr	r3, [r0, #0]
 80079a4:	4602      	mov	r2, r0
 80079a6:	f013 0007 	ands.w	r0, r3, #7
 80079aa:	d00b      	beq.n	80079c4 <__lo0bits+0x22>
 80079ac:	07d9      	lsls	r1, r3, #31
 80079ae:	d421      	bmi.n	80079f4 <__lo0bits+0x52>
 80079b0:	0798      	lsls	r0, r3, #30
 80079b2:	bf49      	itett	mi
 80079b4:	085b      	lsrmi	r3, r3, #1
 80079b6:	089b      	lsrpl	r3, r3, #2
 80079b8:	2001      	movmi	r0, #1
 80079ba:	6013      	strmi	r3, [r2, #0]
 80079bc:	bf5c      	itt	pl
 80079be:	6013      	strpl	r3, [r2, #0]
 80079c0:	2002      	movpl	r0, #2
 80079c2:	4770      	bx	lr
 80079c4:	b299      	uxth	r1, r3
 80079c6:	b909      	cbnz	r1, 80079cc <__lo0bits+0x2a>
 80079c8:	0c1b      	lsrs	r3, r3, #16
 80079ca:	2010      	movs	r0, #16
 80079cc:	b2d9      	uxtb	r1, r3
 80079ce:	b909      	cbnz	r1, 80079d4 <__lo0bits+0x32>
 80079d0:	3008      	adds	r0, #8
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	0719      	lsls	r1, r3, #28
 80079d6:	bf04      	itt	eq
 80079d8:	091b      	lsreq	r3, r3, #4
 80079da:	3004      	addeq	r0, #4
 80079dc:	0799      	lsls	r1, r3, #30
 80079de:	bf04      	itt	eq
 80079e0:	089b      	lsreq	r3, r3, #2
 80079e2:	3002      	addeq	r0, #2
 80079e4:	07d9      	lsls	r1, r3, #31
 80079e6:	d403      	bmi.n	80079f0 <__lo0bits+0x4e>
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	f100 0001 	add.w	r0, r0, #1
 80079ee:	d003      	beq.n	80079f8 <__lo0bits+0x56>
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	4770      	bx	lr
 80079f4:	2000      	movs	r0, #0
 80079f6:	4770      	bx	lr
 80079f8:	2020      	movs	r0, #32
 80079fa:	4770      	bx	lr

080079fc <__i2b>:
 80079fc:	b510      	push	{r4, lr}
 80079fe:	460c      	mov	r4, r1
 8007a00:	2101      	movs	r1, #1
 8007a02:	f7ff febd 	bl	8007780 <_Balloc>
 8007a06:	4602      	mov	r2, r0
 8007a08:	b928      	cbnz	r0, 8007a16 <__i2b+0x1a>
 8007a0a:	4b05      	ldr	r3, [pc, #20]	@ (8007a20 <__i2b+0x24>)
 8007a0c:	4805      	ldr	r0, [pc, #20]	@ (8007a24 <__i2b+0x28>)
 8007a0e:	f240 1145 	movw	r1, #325	@ 0x145
 8007a12:	f001 fc41 	bl	8009298 <__assert_func>
 8007a16:	2301      	movs	r3, #1
 8007a18:	6144      	str	r4, [r0, #20]
 8007a1a:	6103      	str	r3, [r0, #16]
 8007a1c:	bd10      	pop	{r4, pc}
 8007a1e:	bf00      	nop
 8007a20:	0800a0a1 	.word	0x0800a0a1
 8007a24:	0800a0b2 	.word	0x0800a0b2

08007a28 <__multiply>:
 8007a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2c:	4614      	mov	r4, r2
 8007a2e:	690a      	ldr	r2, [r1, #16]
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	bfa8      	it	ge
 8007a36:	4623      	movge	r3, r4
 8007a38:	460f      	mov	r7, r1
 8007a3a:	bfa4      	itt	ge
 8007a3c:	460c      	movge	r4, r1
 8007a3e:	461f      	movge	r7, r3
 8007a40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a48:	68a3      	ldr	r3, [r4, #8]
 8007a4a:	6861      	ldr	r1, [r4, #4]
 8007a4c:	eb0a 0609 	add.w	r6, sl, r9
 8007a50:	42b3      	cmp	r3, r6
 8007a52:	b085      	sub	sp, #20
 8007a54:	bfb8      	it	lt
 8007a56:	3101      	addlt	r1, #1
 8007a58:	f7ff fe92 	bl	8007780 <_Balloc>
 8007a5c:	b930      	cbnz	r0, 8007a6c <__multiply+0x44>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	4b44      	ldr	r3, [pc, #272]	@ (8007b74 <__multiply+0x14c>)
 8007a62:	4845      	ldr	r0, [pc, #276]	@ (8007b78 <__multiply+0x150>)
 8007a64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a68:	f001 fc16 	bl	8009298 <__assert_func>
 8007a6c:	f100 0514 	add.w	r5, r0, #20
 8007a70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a74:	462b      	mov	r3, r5
 8007a76:	2200      	movs	r2, #0
 8007a78:	4543      	cmp	r3, r8
 8007a7a:	d321      	bcc.n	8007ac0 <__multiply+0x98>
 8007a7c:	f107 0114 	add.w	r1, r7, #20
 8007a80:	f104 0214 	add.w	r2, r4, #20
 8007a84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a8c:	9302      	str	r3, [sp, #8]
 8007a8e:	1b13      	subs	r3, r2, r4
 8007a90:	3b15      	subs	r3, #21
 8007a92:	f023 0303 	bic.w	r3, r3, #3
 8007a96:	3304      	adds	r3, #4
 8007a98:	f104 0715 	add.w	r7, r4, #21
 8007a9c:	42ba      	cmp	r2, r7
 8007a9e:	bf38      	it	cc
 8007aa0:	2304      	movcc	r3, #4
 8007aa2:	9301      	str	r3, [sp, #4]
 8007aa4:	9b02      	ldr	r3, [sp, #8]
 8007aa6:	9103      	str	r1, [sp, #12]
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	d80c      	bhi.n	8007ac6 <__multiply+0x9e>
 8007aac:	2e00      	cmp	r6, #0
 8007aae:	dd03      	ble.n	8007ab8 <__multiply+0x90>
 8007ab0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d05b      	beq.n	8007b70 <__multiply+0x148>
 8007ab8:	6106      	str	r6, [r0, #16]
 8007aba:	b005      	add	sp, #20
 8007abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac0:	f843 2b04 	str.w	r2, [r3], #4
 8007ac4:	e7d8      	b.n	8007a78 <__multiply+0x50>
 8007ac6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007aca:	f1ba 0f00 	cmp.w	sl, #0
 8007ace:	d024      	beq.n	8007b1a <__multiply+0xf2>
 8007ad0:	f104 0e14 	add.w	lr, r4, #20
 8007ad4:	46a9      	mov	r9, r5
 8007ad6:	f04f 0c00 	mov.w	ip, #0
 8007ada:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ade:	f8d9 3000 	ldr.w	r3, [r9]
 8007ae2:	fa1f fb87 	uxth.w	fp, r7
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007aec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007af0:	f8d9 7000 	ldr.w	r7, [r9]
 8007af4:	4463      	add	r3, ip
 8007af6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007afa:	fb0a c70b 	mla	r7, sl, fp, ip
 8007afe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b08:	4572      	cmp	r2, lr
 8007b0a:	f849 3b04 	str.w	r3, [r9], #4
 8007b0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b12:	d8e2      	bhi.n	8007ada <__multiply+0xb2>
 8007b14:	9b01      	ldr	r3, [sp, #4]
 8007b16:	f845 c003 	str.w	ip, [r5, r3]
 8007b1a:	9b03      	ldr	r3, [sp, #12]
 8007b1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b20:	3104      	adds	r1, #4
 8007b22:	f1b9 0f00 	cmp.w	r9, #0
 8007b26:	d021      	beq.n	8007b6c <__multiply+0x144>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	f104 0c14 	add.w	ip, r4, #20
 8007b2e:	46ae      	mov	lr, r5
 8007b30:	f04f 0a00 	mov.w	sl, #0
 8007b34:	f8bc b000 	ldrh.w	fp, [ip]
 8007b38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b3c:	fb09 770b 	mla	r7, r9, fp, r7
 8007b40:	4457      	add	r7, sl
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b48:	f84e 3b04 	str.w	r3, [lr], #4
 8007b4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b54:	f8be 3000 	ldrh.w	r3, [lr]
 8007b58:	fb09 330a 	mla	r3, r9, sl, r3
 8007b5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b60:	4562      	cmp	r2, ip
 8007b62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b66:	d8e5      	bhi.n	8007b34 <__multiply+0x10c>
 8007b68:	9f01      	ldr	r7, [sp, #4]
 8007b6a:	51eb      	str	r3, [r5, r7]
 8007b6c:	3504      	adds	r5, #4
 8007b6e:	e799      	b.n	8007aa4 <__multiply+0x7c>
 8007b70:	3e01      	subs	r6, #1
 8007b72:	e79b      	b.n	8007aac <__multiply+0x84>
 8007b74:	0800a0a1 	.word	0x0800a0a1
 8007b78:	0800a0b2 	.word	0x0800a0b2

08007b7c <__pow5mult>:
 8007b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b80:	4615      	mov	r5, r2
 8007b82:	f012 0203 	ands.w	r2, r2, #3
 8007b86:	4607      	mov	r7, r0
 8007b88:	460e      	mov	r6, r1
 8007b8a:	d007      	beq.n	8007b9c <__pow5mult+0x20>
 8007b8c:	4c25      	ldr	r4, [pc, #148]	@ (8007c24 <__pow5mult+0xa8>)
 8007b8e:	3a01      	subs	r2, #1
 8007b90:	2300      	movs	r3, #0
 8007b92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b96:	f7ff fe55 	bl	8007844 <__multadd>
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	10ad      	asrs	r5, r5, #2
 8007b9e:	d03d      	beq.n	8007c1c <__pow5mult+0xa0>
 8007ba0:	69fc      	ldr	r4, [r7, #28]
 8007ba2:	b97c      	cbnz	r4, 8007bc4 <__pow5mult+0x48>
 8007ba4:	2010      	movs	r0, #16
 8007ba6:	f7ff fd35 	bl	8007614 <malloc>
 8007baa:	4602      	mov	r2, r0
 8007bac:	61f8      	str	r0, [r7, #28]
 8007bae:	b928      	cbnz	r0, 8007bbc <__pow5mult+0x40>
 8007bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c28 <__pow5mult+0xac>)
 8007bb2:	481e      	ldr	r0, [pc, #120]	@ (8007c2c <__pow5mult+0xb0>)
 8007bb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007bb8:	f001 fb6e 	bl	8009298 <__assert_func>
 8007bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bc0:	6004      	str	r4, [r0, #0]
 8007bc2:	60c4      	str	r4, [r0, #12]
 8007bc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007bc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bcc:	b94c      	cbnz	r4, 8007be2 <__pow5mult+0x66>
 8007bce:	f240 2171 	movw	r1, #625	@ 0x271
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	f7ff ff12 	bl	80079fc <__i2b>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bde:	4604      	mov	r4, r0
 8007be0:	6003      	str	r3, [r0, #0]
 8007be2:	f04f 0900 	mov.w	r9, #0
 8007be6:	07eb      	lsls	r3, r5, #31
 8007be8:	d50a      	bpl.n	8007c00 <__pow5mult+0x84>
 8007bea:	4631      	mov	r1, r6
 8007bec:	4622      	mov	r2, r4
 8007bee:	4638      	mov	r0, r7
 8007bf0:	f7ff ff1a 	bl	8007a28 <__multiply>
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	4680      	mov	r8, r0
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f7ff fe01 	bl	8007800 <_Bfree>
 8007bfe:	4646      	mov	r6, r8
 8007c00:	106d      	asrs	r5, r5, #1
 8007c02:	d00b      	beq.n	8007c1c <__pow5mult+0xa0>
 8007c04:	6820      	ldr	r0, [r4, #0]
 8007c06:	b938      	cbnz	r0, 8007c18 <__pow5mult+0x9c>
 8007c08:	4622      	mov	r2, r4
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	f7ff ff0b 	bl	8007a28 <__multiply>
 8007c12:	6020      	str	r0, [r4, #0]
 8007c14:	f8c0 9000 	str.w	r9, [r0]
 8007c18:	4604      	mov	r4, r0
 8007c1a:	e7e4      	b.n	8007be6 <__pow5mult+0x6a>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c22:	bf00      	nop
 8007c24:	0800a10c 	.word	0x0800a10c
 8007c28:	0800a032 	.word	0x0800a032
 8007c2c:	0800a0b2 	.word	0x0800a0b2

08007c30 <__lshift>:
 8007c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c34:	460c      	mov	r4, r1
 8007c36:	6849      	ldr	r1, [r1, #4]
 8007c38:	6923      	ldr	r3, [r4, #16]
 8007c3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c3e:	68a3      	ldr	r3, [r4, #8]
 8007c40:	4607      	mov	r7, r0
 8007c42:	4691      	mov	r9, r2
 8007c44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c48:	f108 0601 	add.w	r6, r8, #1
 8007c4c:	42b3      	cmp	r3, r6
 8007c4e:	db0b      	blt.n	8007c68 <__lshift+0x38>
 8007c50:	4638      	mov	r0, r7
 8007c52:	f7ff fd95 	bl	8007780 <_Balloc>
 8007c56:	4605      	mov	r5, r0
 8007c58:	b948      	cbnz	r0, 8007c6e <__lshift+0x3e>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	4b28      	ldr	r3, [pc, #160]	@ (8007d00 <__lshift+0xd0>)
 8007c5e:	4829      	ldr	r0, [pc, #164]	@ (8007d04 <__lshift+0xd4>)
 8007c60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c64:	f001 fb18 	bl	8009298 <__assert_func>
 8007c68:	3101      	adds	r1, #1
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	e7ee      	b.n	8007c4c <__lshift+0x1c>
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f100 0114 	add.w	r1, r0, #20
 8007c74:	f100 0210 	add.w	r2, r0, #16
 8007c78:	4618      	mov	r0, r3
 8007c7a:	4553      	cmp	r3, sl
 8007c7c:	db33      	blt.n	8007ce6 <__lshift+0xb6>
 8007c7e:	6920      	ldr	r0, [r4, #16]
 8007c80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c84:	f104 0314 	add.w	r3, r4, #20
 8007c88:	f019 091f 	ands.w	r9, r9, #31
 8007c8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c94:	d02b      	beq.n	8007cee <__lshift+0xbe>
 8007c96:	f1c9 0e20 	rsb	lr, r9, #32
 8007c9a:	468a      	mov	sl, r1
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	6818      	ldr	r0, [r3, #0]
 8007ca0:	fa00 f009 	lsl.w	r0, r0, r9
 8007ca4:	4310      	orrs	r0, r2
 8007ca6:	f84a 0b04 	str.w	r0, [sl], #4
 8007caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cae:	459c      	cmp	ip, r3
 8007cb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cb4:	d8f3      	bhi.n	8007c9e <__lshift+0x6e>
 8007cb6:	ebac 0304 	sub.w	r3, ip, r4
 8007cba:	3b15      	subs	r3, #21
 8007cbc:	f023 0303 	bic.w	r3, r3, #3
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	f104 0015 	add.w	r0, r4, #21
 8007cc6:	4584      	cmp	ip, r0
 8007cc8:	bf38      	it	cc
 8007cca:	2304      	movcc	r3, #4
 8007ccc:	50ca      	str	r2, [r1, r3]
 8007cce:	b10a      	cbz	r2, 8007cd4 <__lshift+0xa4>
 8007cd0:	f108 0602 	add.w	r6, r8, #2
 8007cd4:	3e01      	subs	r6, #1
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	612e      	str	r6, [r5, #16]
 8007cda:	4621      	mov	r1, r4
 8007cdc:	f7ff fd90 	bl	8007800 <_Bfree>
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cea:	3301      	adds	r3, #1
 8007cec:	e7c5      	b.n	8007c7a <__lshift+0x4a>
 8007cee:	3904      	subs	r1, #4
 8007cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cf8:	459c      	cmp	ip, r3
 8007cfa:	d8f9      	bhi.n	8007cf0 <__lshift+0xc0>
 8007cfc:	e7ea      	b.n	8007cd4 <__lshift+0xa4>
 8007cfe:	bf00      	nop
 8007d00:	0800a0a1 	.word	0x0800a0a1
 8007d04:	0800a0b2 	.word	0x0800a0b2

08007d08 <__mcmp>:
 8007d08:	690a      	ldr	r2, [r1, #16]
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	6900      	ldr	r0, [r0, #16]
 8007d0e:	1a80      	subs	r0, r0, r2
 8007d10:	b530      	push	{r4, r5, lr}
 8007d12:	d10e      	bne.n	8007d32 <__mcmp+0x2a>
 8007d14:	3314      	adds	r3, #20
 8007d16:	3114      	adds	r1, #20
 8007d18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d28:	4295      	cmp	r5, r2
 8007d2a:	d003      	beq.n	8007d34 <__mcmp+0x2c>
 8007d2c:	d205      	bcs.n	8007d3a <__mcmp+0x32>
 8007d2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d32:	bd30      	pop	{r4, r5, pc}
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	d3f3      	bcc.n	8007d20 <__mcmp+0x18>
 8007d38:	e7fb      	b.n	8007d32 <__mcmp+0x2a>
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	e7f9      	b.n	8007d32 <__mcmp+0x2a>
	...

08007d40 <__mdiff>:
 8007d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	4689      	mov	r9, r1
 8007d46:	4606      	mov	r6, r0
 8007d48:	4611      	mov	r1, r2
 8007d4a:	4648      	mov	r0, r9
 8007d4c:	4614      	mov	r4, r2
 8007d4e:	f7ff ffdb 	bl	8007d08 <__mcmp>
 8007d52:	1e05      	subs	r5, r0, #0
 8007d54:	d112      	bne.n	8007d7c <__mdiff+0x3c>
 8007d56:	4629      	mov	r1, r5
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f7ff fd11 	bl	8007780 <_Balloc>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	b928      	cbnz	r0, 8007d6e <__mdiff+0x2e>
 8007d62:	4b3f      	ldr	r3, [pc, #252]	@ (8007e60 <__mdiff+0x120>)
 8007d64:	f240 2137 	movw	r1, #567	@ 0x237
 8007d68:	483e      	ldr	r0, [pc, #248]	@ (8007e64 <__mdiff+0x124>)
 8007d6a:	f001 fa95 	bl	8009298 <__assert_func>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d74:	4610      	mov	r0, r2
 8007d76:	b003      	add	sp, #12
 8007d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7c:	bfbc      	itt	lt
 8007d7e:	464b      	movlt	r3, r9
 8007d80:	46a1      	movlt	r9, r4
 8007d82:	4630      	mov	r0, r6
 8007d84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d88:	bfba      	itte	lt
 8007d8a:	461c      	movlt	r4, r3
 8007d8c:	2501      	movlt	r5, #1
 8007d8e:	2500      	movge	r5, #0
 8007d90:	f7ff fcf6 	bl	8007780 <_Balloc>
 8007d94:	4602      	mov	r2, r0
 8007d96:	b918      	cbnz	r0, 8007da0 <__mdiff+0x60>
 8007d98:	4b31      	ldr	r3, [pc, #196]	@ (8007e60 <__mdiff+0x120>)
 8007d9a:	f240 2145 	movw	r1, #581	@ 0x245
 8007d9e:	e7e3      	b.n	8007d68 <__mdiff+0x28>
 8007da0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007da4:	6926      	ldr	r6, [r4, #16]
 8007da6:	60c5      	str	r5, [r0, #12]
 8007da8:	f109 0310 	add.w	r3, r9, #16
 8007dac:	f109 0514 	add.w	r5, r9, #20
 8007db0:	f104 0e14 	add.w	lr, r4, #20
 8007db4:	f100 0b14 	add.w	fp, r0, #20
 8007db8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007dbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	46d9      	mov	r9, fp
 8007dc4:	f04f 0c00 	mov.w	ip, #0
 8007dc8:	9b01      	ldr	r3, [sp, #4]
 8007dca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007dce:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	fa1f f38a 	uxth.w	r3, sl
 8007dd8:	4619      	mov	r1, r3
 8007dda:	b283      	uxth	r3, r0
 8007ddc:	1acb      	subs	r3, r1, r3
 8007dde:	0c00      	lsrs	r0, r0, #16
 8007de0:	4463      	add	r3, ip
 8007de2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007de6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007df0:	4576      	cmp	r6, lr
 8007df2:	f849 3b04 	str.w	r3, [r9], #4
 8007df6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dfa:	d8e5      	bhi.n	8007dc8 <__mdiff+0x88>
 8007dfc:	1b33      	subs	r3, r6, r4
 8007dfe:	3b15      	subs	r3, #21
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	3415      	adds	r4, #21
 8007e06:	3304      	adds	r3, #4
 8007e08:	42a6      	cmp	r6, r4
 8007e0a:	bf38      	it	cc
 8007e0c:	2304      	movcc	r3, #4
 8007e0e:	441d      	add	r5, r3
 8007e10:	445b      	add	r3, fp
 8007e12:	461e      	mov	r6, r3
 8007e14:	462c      	mov	r4, r5
 8007e16:	4544      	cmp	r4, r8
 8007e18:	d30e      	bcc.n	8007e38 <__mdiff+0xf8>
 8007e1a:	f108 0103 	add.w	r1, r8, #3
 8007e1e:	1b49      	subs	r1, r1, r5
 8007e20:	f021 0103 	bic.w	r1, r1, #3
 8007e24:	3d03      	subs	r5, #3
 8007e26:	45a8      	cmp	r8, r5
 8007e28:	bf38      	it	cc
 8007e2a:	2100      	movcc	r1, #0
 8007e2c:	440b      	add	r3, r1
 8007e2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e32:	b191      	cbz	r1, 8007e5a <__mdiff+0x11a>
 8007e34:	6117      	str	r7, [r2, #16]
 8007e36:	e79d      	b.n	8007d74 <__mdiff+0x34>
 8007e38:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e3c:	46e6      	mov	lr, ip
 8007e3e:	0c08      	lsrs	r0, r1, #16
 8007e40:	fa1c fc81 	uxtah	ip, ip, r1
 8007e44:	4471      	add	r1, lr
 8007e46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e4a:	b289      	uxth	r1, r1
 8007e4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e50:	f846 1b04 	str.w	r1, [r6], #4
 8007e54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e58:	e7dd      	b.n	8007e16 <__mdiff+0xd6>
 8007e5a:	3f01      	subs	r7, #1
 8007e5c:	e7e7      	b.n	8007e2e <__mdiff+0xee>
 8007e5e:	bf00      	nop
 8007e60:	0800a0a1 	.word	0x0800a0a1
 8007e64:	0800a0b2 	.word	0x0800a0b2

08007e68 <__ulp>:
 8007e68:	b082      	sub	sp, #8
 8007e6a:	ed8d 0b00 	vstr	d0, [sp]
 8007e6e:	9a01      	ldr	r2, [sp, #4]
 8007e70:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb0 <__ulp+0x48>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	dc08      	bgt.n	8007e8e <__ulp+0x26>
 8007e7c:	425b      	negs	r3, r3
 8007e7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e86:	da04      	bge.n	8007e92 <__ulp+0x2a>
 8007e88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e8c:	4113      	asrs	r3, r2
 8007e8e:	2200      	movs	r2, #0
 8007e90:	e008      	b.n	8007ea4 <__ulp+0x3c>
 8007e92:	f1a2 0314 	sub.w	r3, r2, #20
 8007e96:	2b1e      	cmp	r3, #30
 8007e98:	bfda      	itte	le
 8007e9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007e9e:	40da      	lsrle	r2, r3
 8007ea0:	2201      	movgt	r2, #1
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	ec41 0b10 	vmov	d0, r0, r1
 8007eac:	b002      	add	sp, #8
 8007eae:	4770      	bx	lr
 8007eb0:	7ff00000 	.word	0x7ff00000

08007eb4 <__b2d>:
 8007eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb8:	6906      	ldr	r6, [r0, #16]
 8007eba:	f100 0814 	add.w	r8, r0, #20
 8007ebe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007ec2:	1f37      	subs	r7, r6, #4
 8007ec4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f7ff fd4b 	bl	8007964 <__hi0bits>
 8007ece:	f1c0 0320 	rsb	r3, r0, #32
 8007ed2:	280a      	cmp	r0, #10
 8007ed4:	600b      	str	r3, [r1, #0]
 8007ed6:	491b      	ldr	r1, [pc, #108]	@ (8007f44 <__b2d+0x90>)
 8007ed8:	dc15      	bgt.n	8007f06 <__b2d+0x52>
 8007eda:	f1c0 0c0b 	rsb	ip, r0, #11
 8007ede:	fa22 f30c 	lsr.w	r3, r2, ip
 8007ee2:	45b8      	cmp	r8, r7
 8007ee4:	ea43 0501 	orr.w	r5, r3, r1
 8007ee8:	bf34      	ite	cc
 8007eea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007eee:	2300      	movcs	r3, #0
 8007ef0:	3015      	adds	r0, #21
 8007ef2:	fa02 f000 	lsl.w	r0, r2, r0
 8007ef6:	fa23 f30c 	lsr.w	r3, r3, ip
 8007efa:	4303      	orrs	r3, r0
 8007efc:	461c      	mov	r4, r3
 8007efe:	ec45 4b10 	vmov	d0, r4, r5
 8007f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f06:	45b8      	cmp	r8, r7
 8007f08:	bf3a      	itte	cc
 8007f0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f0e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f12:	2300      	movcs	r3, #0
 8007f14:	380b      	subs	r0, #11
 8007f16:	d012      	beq.n	8007f3e <__b2d+0x8a>
 8007f18:	f1c0 0120 	rsb	r1, r0, #32
 8007f1c:	fa23 f401 	lsr.w	r4, r3, r1
 8007f20:	4082      	lsls	r2, r0
 8007f22:	4322      	orrs	r2, r4
 8007f24:	4547      	cmp	r7, r8
 8007f26:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007f2a:	bf8c      	ite	hi
 8007f2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f30:	2200      	movls	r2, #0
 8007f32:	4083      	lsls	r3, r0
 8007f34:	40ca      	lsrs	r2, r1
 8007f36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	e7de      	b.n	8007efc <__b2d+0x48>
 8007f3e:	ea42 0501 	orr.w	r5, r2, r1
 8007f42:	e7db      	b.n	8007efc <__b2d+0x48>
 8007f44:	3ff00000 	.word	0x3ff00000

08007f48 <__d2b>:
 8007f48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f4c:	460f      	mov	r7, r1
 8007f4e:	2101      	movs	r1, #1
 8007f50:	ec59 8b10 	vmov	r8, r9, d0
 8007f54:	4616      	mov	r6, r2
 8007f56:	f7ff fc13 	bl	8007780 <_Balloc>
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	b930      	cbnz	r0, 8007f6c <__d2b+0x24>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4b23      	ldr	r3, [pc, #140]	@ (8007ff0 <__d2b+0xa8>)
 8007f62:	4824      	ldr	r0, [pc, #144]	@ (8007ff4 <__d2b+0xac>)
 8007f64:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f68:	f001 f996 	bl	8009298 <__assert_func>
 8007f6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f74:	b10d      	cbz	r5, 8007f7a <__d2b+0x32>
 8007f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f7a:	9301      	str	r3, [sp, #4]
 8007f7c:	f1b8 0300 	subs.w	r3, r8, #0
 8007f80:	d023      	beq.n	8007fca <__d2b+0x82>
 8007f82:	4668      	mov	r0, sp
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	f7ff fd0c 	bl	80079a2 <__lo0bits>
 8007f8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f8e:	b1d0      	cbz	r0, 8007fc6 <__d2b+0x7e>
 8007f90:	f1c0 0320 	rsb	r3, r0, #32
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	40c2      	lsrs	r2, r0
 8007f9c:	6163      	str	r3, [r4, #20]
 8007f9e:	9201      	str	r2, [sp, #4]
 8007fa0:	9b01      	ldr	r3, [sp, #4]
 8007fa2:	61a3      	str	r3, [r4, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	bf0c      	ite	eq
 8007fa8:	2201      	moveq	r2, #1
 8007faa:	2202      	movne	r2, #2
 8007fac:	6122      	str	r2, [r4, #16]
 8007fae:	b1a5      	cbz	r5, 8007fda <__d2b+0x92>
 8007fb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fb4:	4405      	add	r5, r0
 8007fb6:	603d      	str	r5, [r7, #0]
 8007fb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fbc:	6030      	str	r0, [r6, #0]
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	b003      	add	sp, #12
 8007fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fc6:	6161      	str	r1, [r4, #20]
 8007fc8:	e7ea      	b.n	8007fa0 <__d2b+0x58>
 8007fca:	a801      	add	r0, sp, #4
 8007fcc:	f7ff fce9 	bl	80079a2 <__lo0bits>
 8007fd0:	9b01      	ldr	r3, [sp, #4]
 8007fd2:	6163      	str	r3, [r4, #20]
 8007fd4:	3020      	adds	r0, #32
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	e7e8      	b.n	8007fac <__d2b+0x64>
 8007fda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fde:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fe2:	6038      	str	r0, [r7, #0]
 8007fe4:	6918      	ldr	r0, [r3, #16]
 8007fe6:	f7ff fcbd 	bl	8007964 <__hi0bits>
 8007fea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fee:	e7e5      	b.n	8007fbc <__d2b+0x74>
 8007ff0:	0800a0a1 	.word	0x0800a0a1
 8007ff4:	0800a0b2 	.word	0x0800a0b2

08007ff8 <__ratio>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	e9cd 1000 	strd	r1, r0, [sp]
 8008002:	a902      	add	r1, sp, #8
 8008004:	f7ff ff56 	bl	8007eb4 <__b2d>
 8008008:	9800      	ldr	r0, [sp, #0]
 800800a:	a903      	add	r1, sp, #12
 800800c:	ec55 4b10 	vmov	r4, r5, d0
 8008010:	f7ff ff50 	bl	8007eb4 <__b2d>
 8008014:	9b01      	ldr	r3, [sp, #4]
 8008016:	6919      	ldr	r1, [r3, #16]
 8008018:	9b00      	ldr	r3, [sp, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	1ac9      	subs	r1, r1, r3
 800801e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008022:	1a9b      	subs	r3, r3, r2
 8008024:	ec5b ab10 	vmov	sl, fp, d0
 8008028:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800802c:	2b00      	cmp	r3, #0
 800802e:	bfce      	itee	gt
 8008030:	462a      	movgt	r2, r5
 8008032:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008036:	465a      	movle	r2, fp
 8008038:	462f      	mov	r7, r5
 800803a:	46d9      	mov	r9, fp
 800803c:	bfcc      	ite	gt
 800803e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008042:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008046:	464b      	mov	r3, r9
 8008048:	4652      	mov	r2, sl
 800804a:	4620      	mov	r0, r4
 800804c:	4639      	mov	r1, r7
 800804e:	f7f8 fc25 	bl	800089c <__aeabi_ddiv>
 8008052:	ec41 0b10 	vmov	d0, r0, r1
 8008056:	b005      	add	sp, #20
 8008058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800805c <__copybits>:
 800805c:	3901      	subs	r1, #1
 800805e:	b570      	push	{r4, r5, r6, lr}
 8008060:	1149      	asrs	r1, r1, #5
 8008062:	6914      	ldr	r4, [r2, #16]
 8008064:	3101      	adds	r1, #1
 8008066:	f102 0314 	add.w	r3, r2, #20
 800806a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800806e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008072:	1f05      	subs	r5, r0, #4
 8008074:	42a3      	cmp	r3, r4
 8008076:	d30c      	bcc.n	8008092 <__copybits+0x36>
 8008078:	1aa3      	subs	r3, r4, r2
 800807a:	3b11      	subs	r3, #17
 800807c:	f023 0303 	bic.w	r3, r3, #3
 8008080:	3211      	adds	r2, #17
 8008082:	42a2      	cmp	r2, r4
 8008084:	bf88      	it	hi
 8008086:	2300      	movhi	r3, #0
 8008088:	4418      	add	r0, r3
 800808a:	2300      	movs	r3, #0
 800808c:	4288      	cmp	r0, r1
 800808e:	d305      	bcc.n	800809c <__copybits+0x40>
 8008090:	bd70      	pop	{r4, r5, r6, pc}
 8008092:	f853 6b04 	ldr.w	r6, [r3], #4
 8008096:	f845 6f04 	str.w	r6, [r5, #4]!
 800809a:	e7eb      	b.n	8008074 <__copybits+0x18>
 800809c:	f840 3b04 	str.w	r3, [r0], #4
 80080a0:	e7f4      	b.n	800808c <__copybits+0x30>

080080a2 <__any_on>:
 80080a2:	f100 0214 	add.w	r2, r0, #20
 80080a6:	6900      	ldr	r0, [r0, #16]
 80080a8:	114b      	asrs	r3, r1, #5
 80080aa:	4298      	cmp	r0, r3
 80080ac:	b510      	push	{r4, lr}
 80080ae:	db11      	blt.n	80080d4 <__any_on+0x32>
 80080b0:	dd0a      	ble.n	80080c8 <__any_on+0x26>
 80080b2:	f011 011f 	ands.w	r1, r1, #31
 80080b6:	d007      	beq.n	80080c8 <__any_on+0x26>
 80080b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080bc:	fa24 f001 	lsr.w	r0, r4, r1
 80080c0:	fa00 f101 	lsl.w	r1, r0, r1
 80080c4:	428c      	cmp	r4, r1
 80080c6:	d10b      	bne.n	80080e0 <__any_on+0x3e>
 80080c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d803      	bhi.n	80080d8 <__any_on+0x36>
 80080d0:	2000      	movs	r0, #0
 80080d2:	bd10      	pop	{r4, pc}
 80080d4:	4603      	mov	r3, r0
 80080d6:	e7f7      	b.n	80080c8 <__any_on+0x26>
 80080d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080dc:	2900      	cmp	r1, #0
 80080de:	d0f5      	beq.n	80080cc <__any_on+0x2a>
 80080e0:	2001      	movs	r0, #1
 80080e2:	e7f6      	b.n	80080d2 <__any_on+0x30>

080080e4 <sulp>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	4604      	mov	r4, r0
 80080e8:	460d      	mov	r5, r1
 80080ea:	ec45 4b10 	vmov	d0, r4, r5
 80080ee:	4616      	mov	r6, r2
 80080f0:	f7ff feba 	bl	8007e68 <__ulp>
 80080f4:	ec51 0b10 	vmov	r0, r1, d0
 80080f8:	b17e      	cbz	r6, 800811a <sulp+0x36>
 80080fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008102:	2b00      	cmp	r3, #0
 8008104:	dd09      	ble.n	800811a <sulp+0x36>
 8008106:	051b      	lsls	r3, r3, #20
 8008108:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800810c:	2400      	movs	r4, #0
 800810e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008112:	4622      	mov	r2, r4
 8008114:	462b      	mov	r3, r5
 8008116:	f7f8 fa97 	bl	8000648 <__aeabi_dmul>
 800811a:	ec41 0b10 	vmov	d0, r0, r1
 800811e:	bd70      	pop	{r4, r5, r6, pc}

08008120 <_strtod_l>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	b09f      	sub	sp, #124	@ 0x7c
 8008126:	460c      	mov	r4, r1
 8008128:	9217      	str	r2, [sp, #92]	@ 0x5c
 800812a:	2200      	movs	r2, #0
 800812c:	921a      	str	r2, [sp, #104]	@ 0x68
 800812e:	9005      	str	r0, [sp, #20]
 8008130:	f04f 0a00 	mov.w	sl, #0
 8008134:	f04f 0b00 	mov.w	fp, #0
 8008138:	460a      	mov	r2, r1
 800813a:	9219      	str	r2, [sp, #100]	@ 0x64
 800813c:	7811      	ldrb	r1, [r2, #0]
 800813e:	292b      	cmp	r1, #43	@ 0x2b
 8008140:	d04a      	beq.n	80081d8 <_strtod_l+0xb8>
 8008142:	d838      	bhi.n	80081b6 <_strtod_l+0x96>
 8008144:	290d      	cmp	r1, #13
 8008146:	d832      	bhi.n	80081ae <_strtod_l+0x8e>
 8008148:	2908      	cmp	r1, #8
 800814a:	d832      	bhi.n	80081b2 <_strtod_l+0x92>
 800814c:	2900      	cmp	r1, #0
 800814e:	d03b      	beq.n	80081c8 <_strtod_l+0xa8>
 8008150:	2200      	movs	r2, #0
 8008152:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008154:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008156:	782a      	ldrb	r2, [r5, #0]
 8008158:	2a30      	cmp	r2, #48	@ 0x30
 800815a:	f040 80b3 	bne.w	80082c4 <_strtod_l+0x1a4>
 800815e:	786a      	ldrb	r2, [r5, #1]
 8008160:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008164:	2a58      	cmp	r2, #88	@ 0x58
 8008166:	d16e      	bne.n	8008246 <_strtod_l+0x126>
 8008168:	9302      	str	r3, [sp, #8]
 800816a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	4a8e      	ldr	r2, [pc, #568]	@ (80083ac <_strtod_l+0x28c>)
 8008174:	9805      	ldr	r0, [sp, #20]
 8008176:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008178:	a919      	add	r1, sp, #100	@ 0x64
 800817a:	f001 f927 	bl	80093cc <__gethex>
 800817e:	f010 060f 	ands.w	r6, r0, #15
 8008182:	4604      	mov	r4, r0
 8008184:	d005      	beq.n	8008192 <_strtod_l+0x72>
 8008186:	2e06      	cmp	r6, #6
 8008188:	d128      	bne.n	80081dc <_strtod_l+0xbc>
 800818a:	3501      	adds	r5, #1
 800818c:	2300      	movs	r3, #0
 800818e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008192:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008194:	2b00      	cmp	r3, #0
 8008196:	f040 858e 	bne.w	8008cb6 <_strtod_l+0xb96>
 800819a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800819c:	b1cb      	cbz	r3, 80081d2 <_strtod_l+0xb2>
 800819e:	4652      	mov	r2, sl
 80081a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80081a4:	ec43 2b10 	vmov	d0, r2, r3
 80081a8:	b01f      	add	sp, #124	@ 0x7c
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	2920      	cmp	r1, #32
 80081b0:	d1ce      	bne.n	8008150 <_strtod_l+0x30>
 80081b2:	3201      	adds	r2, #1
 80081b4:	e7c1      	b.n	800813a <_strtod_l+0x1a>
 80081b6:	292d      	cmp	r1, #45	@ 0x2d
 80081b8:	d1ca      	bne.n	8008150 <_strtod_l+0x30>
 80081ba:	2101      	movs	r1, #1
 80081bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80081be:	1c51      	adds	r1, r2, #1
 80081c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80081c2:	7852      	ldrb	r2, [r2, #1]
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	d1c5      	bne.n	8008154 <_strtod_l+0x34>
 80081c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f040 8570 	bne.w	8008cb2 <_strtod_l+0xb92>
 80081d2:	4652      	mov	r2, sl
 80081d4:	465b      	mov	r3, fp
 80081d6:	e7e5      	b.n	80081a4 <_strtod_l+0x84>
 80081d8:	2100      	movs	r1, #0
 80081da:	e7ef      	b.n	80081bc <_strtod_l+0x9c>
 80081dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081de:	b13a      	cbz	r2, 80081f0 <_strtod_l+0xd0>
 80081e0:	2135      	movs	r1, #53	@ 0x35
 80081e2:	a81c      	add	r0, sp, #112	@ 0x70
 80081e4:	f7ff ff3a 	bl	800805c <__copybits>
 80081e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081ea:	9805      	ldr	r0, [sp, #20]
 80081ec:	f7ff fb08 	bl	8007800 <_Bfree>
 80081f0:	3e01      	subs	r6, #1
 80081f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80081f4:	2e04      	cmp	r6, #4
 80081f6:	d806      	bhi.n	8008206 <_strtod_l+0xe6>
 80081f8:	e8df f006 	tbb	[pc, r6]
 80081fc:	201d0314 	.word	0x201d0314
 8008200:	14          	.byte	0x14
 8008201:	00          	.byte	0x00
 8008202:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008206:	05e1      	lsls	r1, r4, #23
 8008208:	bf48      	it	mi
 800820a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800820e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008212:	0d1b      	lsrs	r3, r3, #20
 8008214:	051b      	lsls	r3, r3, #20
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1bb      	bne.n	8008192 <_strtod_l+0x72>
 800821a:	f7fe fb2f 	bl	800687c <__errno>
 800821e:	2322      	movs	r3, #34	@ 0x22
 8008220:	6003      	str	r3, [r0, #0]
 8008222:	e7b6      	b.n	8008192 <_strtod_l+0x72>
 8008224:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008228:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800822c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008230:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008234:	e7e7      	b.n	8008206 <_strtod_l+0xe6>
 8008236:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80083b4 <_strtod_l+0x294>
 800823a:	e7e4      	b.n	8008206 <_strtod_l+0xe6>
 800823c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008240:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008244:	e7df      	b.n	8008206 <_strtod_l+0xe6>
 8008246:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	9219      	str	r2, [sp, #100]	@ 0x64
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	2b30      	cmp	r3, #48	@ 0x30
 8008250:	d0f9      	beq.n	8008246 <_strtod_l+0x126>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d09d      	beq.n	8008192 <_strtod_l+0x72>
 8008256:	2301      	movs	r3, #1
 8008258:	9309      	str	r3, [sp, #36]	@ 0x24
 800825a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800825c:	930c      	str	r3, [sp, #48]	@ 0x30
 800825e:	2300      	movs	r3, #0
 8008260:	9308      	str	r3, [sp, #32]
 8008262:	930a      	str	r3, [sp, #40]	@ 0x28
 8008264:	461f      	mov	r7, r3
 8008266:	220a      	movs	r2, #10
 8008268:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800826a:	7805      	ldrb	r5, [r0, #0]
 800826c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008270:	b2d9      	uxtb	r1, r3
 8008272:	2909      	cmp	r1, #9
 8008274:	d928      	bls.n	80082c8 <_strtod_l+0x1a8>
 8008276:	494e      	ldr	r1, [pc, #312]	@ (80083b0 <_strtod_l+0x290>)
 8008278:	2201      	movs	r2, #1
 800827a:	f000 ffd5 	bl	8009228 <strncmp>
 800827e:	2800      	cmp	r0, #0
 8008280:	d032      	beq.n	80082e8 <_strtod_l+0x1c8>
 8008282:	2000      	movs	r0, #0
 8008284:	462a      	mov	r2, r5
 8008286:	4681      	mov	r9, r0
 8008288:	463d      	mov	r5, r7
 800828a:	4603      	mov	r3, r0
 800828c:	2a65      	cmp	r2, #101	@ 0x65
 800828e:	d001      	beq.n	8008294 <_strtod_l+0x174>
 8008290:	2a45      	cmp	r2, #69	@ 0x45
 8008292:	d114      	bne.n	80082be <_strtod_l+0x19e>
 8008294:	b91d      	cbnz	r5, 800829e <_strtod_l+0x17e>
 8008296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008298:	4302      	orrs	r2, r0
 800829a:	d095      	beq.n	80081c8 <_strtod_l+0xa8>
 800829c:	2500      	movs	r5, #0
 800829e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80082a0:	1c62      	adds	r2, r4, #1
 80082a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80082a4:	7862      	ldrb	r2, [r4, #1]
 80082a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80082a8:	d077      	beq.n	800839a <_strtod_l+0x27a>
 80082aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80082ac:	d07b      	beq.n	80083a6 <_strtod_l+0x286>
 80082ae:	f04f 0c00 	mov.w	ip, #0
 80082b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80082b6:	2909      	cmp	r1, #9
 80082b8:	f240 8082 	bls.w	80083c0 <_strtod_l+0x2a0>
 80082bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80082be:	f04f 0800 	mov.w	r8, #0
 80082c2:	e0a2      	b.n	800840a <_strtod_l+0x2ea>
 80082c4:	2300      	movs	r3, #0
 80082c6:	e7c7      	b.n	8008258 <_strtod_l+0x138>
 80082c8:	2f08      	cmp	r7, #8
 80082ca:	bfd5      	itete	le
 80082cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80082ce:	9908      	ldrgt	r1, [sp, #32]
 80082d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80082d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80082d8:	f100 0001 	add.w	r0, r0, #1
 80082dc:	bfd4      	ite	le
 80082de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80082e0:	9308      	strgt	r3, [sp, #32]
 80082e2:	3701      	adds	r7, #1
 80082e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80082e6:	e7bf      	b.n	8008268 <_strtod_l+0x148>
 80082e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80082ee:	785a      	ldrb	r2, [r3, #1]
 80082f0:	b37f      	cbz	r7, 8008352 <_strtod_l+0x232>
 80082f2:	4681      	mov	r9, r0
 80082f4:	463d      	mov	r5, r7
 80082f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80082fa:	2b09      	cmp	r3, #9
 80082fc:	d912      	bls.n	8008324 <_strtod_l+0x204>
 80082fe:	2301      	movs	r3, #1
 8008300:	e7c4      	b.n	800828c <_strtod_l+0x16c>
 8008302:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	9219      	str	r2, [sp, #100]	@ 0x64
 8008308:	785a      	ldrb	r2, [r3, #1]
 800830a:	3001      	adds	r0, #1
 800830c:	2a30      	cmp	r2, #48	@ 0x30
 800830e:	d0f8      	beq.n	8008302 <_strtod_l+0x1e2>
 8008310:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008314:	2b08      	cmp	r3, #8
 8008316:	f200 84d3 	bhi.w	8008cc0 <_strtod_l+0xba0>
 800831a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800831c:	930c      	str	r3, [sp, #48]	@ 0x30
 800831e:	4681      	mov	r9, r0
 8008320:	2000      	movs	r0, #0
 8008322:	4605      	mov	r5, r0
 8008324:	3a30      	subs	r2, #48	@ 0x30
 8008326:	f100 0301 	add.w	r3, r0, #1
 800832a:	d02a      	beq.n	8008382 <_strtod_l+0x262>
 800832c:	4499      	add	r9, r3
 800832e:	eb00 0c05 	add.w	ip, r0, r5
 8008332:	462b      	mov	r3, r5
 8008334:	210a      	movs	r1, #10
 8008336:	4563      	cmp	r3, ip
 8008338:	d10d      	bne.n	8008356 <_strtod_l+0x236>
 800833a:	1c69      	adds	r1, r5, #1
 800833c:	4401      	add	r1, r0
 800833e:	4428      	add	r0, r5
 8008340:	2808      	cmp	r0, #8
 8008342:	dc16      	bgt.n	8008372 <_strtod_l+0x252>
 8008344:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008346:	230a      	movs	r3, #10
 8008348:	fb03 2300 	mla	r3, r3, r0, r2
 800834c:	930a      	str	r3, [sp, #40]	@ 0x28
 800834e:	2300      	movs	r3, #0
 8008350:	e018      	b.n	8008384 <_strtod_l+0x264>
 8008352:	4638      	mov	r0, r7
 8008354:	e7da      	b.n	800830c <_strtod_l+0x1ec>
 8008356:	2b08      	cmp	r3, #8
 8008358:	f103 0301 	add.w	r3, r3, #1
 800835c:	dc03      	bgt.n	8008366 <_strtod_l+0x246>
 800835e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008360:	434e      	muls	r6, r1
 8008362:	960a      	str	r6, [sp, #40]	@ 0x28
 8008364:	e7e7      	b.n	8008336 <_strtod_l+0x216>
 8008366:	2b10      	cmp	r3, #16
 8008368:	bfde      	ittt	le
 800836a:	9e08      	ldrle	r6, [sp, #32]
 800836c:	434e      	mulle	r6, r1
 800836e:	9608      	strle	r6, [sp, #32]
 8008370:	e7e1      	b.n	8008336 <_strtod_l+0x216>
 8008372:	280f      	cmp	r0, #15
 8008374:	dceb      	bgt.n	800834e <_strtod_l+0x22e>
 8008376:	9808      	ldr	r0, [sp, #32]
 8008378:	230a      	movs	r3, #10
 800837a:	fb03 2300 	mla	r3, r3, r0, r2
 800837e:	9308      	str	r3, [sp, #32]
 8008380:	e7e5      	b.n	800834e <_strtod_l+0x22e>
 8008382:	4629      	mov	r1, r5
 8008384:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008386:	1c50      	adds	r0, r2, #1
 8008388:	9019      	str	r0, [sp, #100]	@ 0x64
 800838a:	7852      	ldrb	r2, [r2, #1]
 800838c:	4618      	mov	r0, r3
 800838e:	460d      	mov	r5, r1
 8008390:	e7b1      	b.n	80082f6 <_strtod_l+0x1d6>
 8008392:	f04f 0900 	mov.w	r9, #0
 8008396:	2301      	movs	r3, #1
 8008398:	e77d      	b.n	8008296 <_strtod_l+0x176>
 800839a:	f04f 0c00 	mov.w	ip, #0
 800839e:	1ca2      	adds	r2, r4, #2
 80083a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80083a2:	78a2      	ldrb	r2, [r4, #2]
 80083a4:	e785      	b.n	80082b2 <_strtod_l+0x192>
 80083a6:	f04f 0c01 	mov.w	ip, #1
 80083aa:	e7f8      	b.n	800839e <_strtod_l+0x27e>
 80083ac:	0800a220 	.word	0x0800a220
 80083b0:	0800a208 	.word	0x0800a208
 80083b4:	7ff00000 	.word	0x7ff00000
 80083b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083ba:	1c51      	adds	r1, r2, #1
 80083bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80083be:	7852      	ldrb	r2, [r2, #1]
 80083c0:	2a30      	cmp	r2, #48	@ 0x30
 80083c2:	d0f9      	beq.n	80083b8 <_strtod_l+0x298>
 80083c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80083c8:	2908      	cmp	r1, #8
 80083ca:	f63f af78 	bhi.w	80082be <_strtod_l+0x19e>
 80083ce:	3a30      	subs	r2, #48	@ 0x30
 80083d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80083d6:	f04f 080a 	mov.w	r8, #10
 80083da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80083dc:	1c56      	adds	r6, r2, #1
 80083de:	9619      	str	r6, [sp, #100]	@ 0x64
 80083e0:	7852      	ldrb	r2, [r2, #1]
 80083e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80083e6:	f1be 0f09 	cmp.w	lr, #9
 80083ea:	d939      	bls.n	8008460 <_strtod_l+0x340>
 80083ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80083ee:	1a76      	subs	r6, r6, r1
 80083f0:	2e08      	cmp	r6, #8
 80083f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80083f6:	dc03      	bgt.n	8008400 <_strtod_l+0x2e0>
 80083f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80083fa:	4588      	cmp	r8, r1
 80083fc:	bfa8      	it	ge
 80083fe:	4688      	movge	r8, r1
 8008400:	f1bc 0f00 	cmp.w	ip, #0
 8008404:	d001      	beq.n	800840a <_strtod_l+0x2ea>
 8008406:	f1c8 0800 	rsb	r8, r8, #0
 800840a:	2d00      	cmp	r5, #0
 800840c:	d14e      	bne.n	80084ac <_strtod_l+0x38c>
 800840e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008410:	4308      	orrs	r0, r1
 8008412:	f47f aebe 	bne.w	8008192 <_strtod_l+0x72>
 8008416:	2b00      	cmp	r3, #0
 8008418:	f47f aed6 	bne.w	80081c8 <_strtod_l+0xa8>
 800841c:	2a69      	cmp	r2, #105	@ 0x69
 800841e:	d028      	beq.n	8008472 <_strtod_l+0x352>
 8008420:	dc25      	bgt.n	800846e <_strtod_l+0x34e>
 8008422:	2a49      	cmp	r2, #73	@ 0x49
 8008424:	d025      	beq.n	8008472 <_strtod_l+0x352>
 8008426:	2a4e      	cmp	r2, #78	@ 0x4e
 8008428:	f47f aece 	bne.w	80081c8 <_strtod_l+0xa8>
 800842c:	499b      	ldr	r1, [pc, #620]	@ (800869c <_strtod_l+0x57c>)
 800842e:	a819      	add	r0, sp, #100	@ 0x64
 8008430:	f001 f9ee 	bl	8009810 <__match>
 8008434:	2800      	cmp	r0, #0
 8008436:	f43f aec7 	beq.w	80081c8 <_strtod_l+0xa8>
 800843a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b28      	cmp	r3, #40	@ 0x28
 8008440:	d12e      	bne.n	80084a0 <_strtod_l+0x380>
 8008442:	4997      	ldr	r1, [pc, #604]	@ (80086a0 <_strtod_l+0x580>)
 8008444:	aa1c      	add	r2, sp, #112	@ 0x70
 8008446:	a819      	add	r0, sp, #100	@ 0x64
 8008448:	f001 f9f6 	bl	8009838 <__hexnan>
 800844c:	2805      	cmp	r0, #5
 800844e:	d127      	bne.n	80084a0 <_strtod_l+0x380>
 8008450:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008452:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008456:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800845a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800845e:	e698      	b.n	8008192 <_strtod_l+0x72>
 8008460:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008462:	fb08 2101 	mla	r1, r8, r1, r2
 8008466:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800846a:	920e      	str	r2, [sp, #56]	@ 0x38
 800846c:	e7b5      	b.n	80083da <_strtod_l+0x2ba>
 800846e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008470:	e7da      	b.n	8008428 <_strtod_l+0x308>
 8008472:	498c      	ldr	r1, [pc, #560]	@ (80086a4 <_strtod_l+0x584>)
 8008474:	a819      	add	r0, sp, #100	@ 0x64
 8008476:	f001 f9cb 	bl	8009810 <__match>
 800847a:	2800      	cmp	r0, #0
 800847c:	f43f aea4 	beq.w	80081c8 <_strtod_l+0xa8>
 8008480:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008482:	4989      	ldr	r1, [pc, #548]	@ (80086a8 <_strtod_l+0x588>)
 8008484:	3b01      	subs	r3, #1
 8008486:	a819      	add	r0, sp, #100	@ 0x64
 8008488:	9319      	str	r3, [sp, #100]	@ 0x64
 800848a:	f001 f9c1 	bl	8009810 <__match>
 800848e:	b910      	cbnz	r0, 8008496 <_strtod_l+0x376>
 8008490:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008492:	3301      	adds	r3, #1
 8008494:	9319      	str	r3, [sp, #100]	@ 0x64
 8008496:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80086b8 <_strtod_l+0x598>
 800849a:	f04f 0a00 	mov.w	sl, #0
 800849e:	e678      	b.n	8008192 <_strtod_l+0x72>
 80084a0:	4882      	ldr	r0, [pc, #520]	@ (80086ac <_strtod_l+0x58c>)
 80084a2:	f000 fef1 	bl	8009288 <nan>
 80084a6:	ec5b ab10 	vmov	sl, fp, d0
 80084aa:	e672      	b.n	8008192 <_strtod_l+0x72>
 80084ac:	eba8 0309 	sub.w	r3, r8, r9
 80084b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80084b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80084b4:	2f00      	cmp	r7, #0
 80084b6:	bf08      	it	eq
 80084b8:	462f      	moveq	r7, r5
 80084ba:	2d10      	cmp	r5, #16
 80084bc:	462c      	mov	r4, r5
 80084be:	bfa8      	it	ge
 80084c0:	2410      	movge	r4, #16
 80084c2:	f7f8 f847 	bl	8000554 <__aeabi_ui2d>
 80084c6:	2d09      	cmp	r5, #9
 80084c8:	4682      	mov	sl, r0
 80084ca:	468b      	mov	fp, r1
 80084cc:	dc13      	bgt.n	80084f6 <_strtod_l+0x3d6>
 80084ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f43f ae5e 	beq.w	8008192 <_strtod_l+0x72>
 80084d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d8:	dd78      	ble.n	80085cc <_strtod_l+0x4ac>
 80084da:	2b16      	cmp	r3, #22
 80084dc:	dc5f      	bgt.n	800859e <_strtod_l+0x47e>
 80084de:	4974      	ldr	r1, [pc, #464]	@ (80086b0 <_strtod_l+0x590>)
 80084e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084e8:	4652      	mov	r2, sl
 80084ea:	465b      	mov	r3, fp
 80084ec:	f7f8 f8ac 	bl	8000648 <__aeabi_dmul>
 80084f0:	4682      	mov	sl, r0
 80084f2:	468b      	mov	fp, r1
 80084f4:	e64d      	b.n	8008192 <_strtod_l+0x72>
 80084f6:	4b6e      	ldr	r3, [pc, #440]	@ (80086b0 <_strtod_l+0x590>)
 80084f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008500:	f7f8 f8a2 	bl	8000648 <__aeabi_dmul>
 8008504:	4682      	mov	sl, r0
 8008506:	9808      	ldr	r0, [sp, #32]
 8008508:	468b      	mov	fp, r1
 800850a:	f7f8 f823 	bl	8000554 <__aeabi_ui2d>
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	4650      	mov	r0, sl
 8008514:	4659      	mov	r1, fp
 8008516:	f7f7 fee1 	bl	80002dc <__adddf3>
 800851a:	2d0f      	cmp	r5, #15
 800851c:	4682      	mov	sl, r0
 800851e:	468b      	mov	fp, r1
 8008520:	ddd5      	ble.n	80084ce <_strtod_l+0x3ae>
 8008522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008524:	1b2c      	subs	r4, r5, r4
 8008526:	441c      	add	r4, r3
 8008528:	2c00      	cmp	r4, #0
 800852a:	f340 8096 	ble.w	800865a <_strtod_l+0x53a>
 800852e:	f014 030f 	ands.w	r3, r4, #15
 8008532:	d00a      	beq.n	800854a <_strtod_l+0x42a>
 8008534:	495e      	ldr	r1, [pc, #376]	@ (80086b0 <_strtod_l+0x590>)
 8008536:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800853a:	4652      	mov	r2, sl
 800853c:	465b      	mov	r3, fp
 800853e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008542:	f7f8 f881 	bl	8000648 <__aeabi_dmul>
 8008546:	4682      	mov	sl, r0
 8008548:	468b      	mov	fp, r1
 800854a:	f034 040f 	bics.w	r4, r4, #15
 800854e:	d073      	beq.n	8008638 <_strtod_l+0x518>
 8008550:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008554:	dd48      	ble.n	80085e8 <_strtod_l+0x4c8>
 8008556:	2400      	movs	r4, #0
 8008558:	46a0      	mov	r8, r4
 800855a:	940a      	str	r4, [sp, #40]	@ 0x28
 800855c:	46a1      	mov	r9, r4
 800855e:	9a05      	ldr	r2, [sp, #20]
 8008560:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80086b8 <_strtod_l+0x598>
 8008564:	2322      	movs	r3, #34	@ 0x22
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	f04f 0a00 	mov.w	sl, #0
 800856c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800856e:	2b00      	cmp	r3, #0
 8008570:	f43f ae0f 	beq.w	8008192 <_strtod_l+0x72>
 8008574:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008576:	9805      	ldr	r0, [sp, #20]
 8008578:	f7ff f942 	bl	8007800 <_Bfree>
 800857c:	9805      	ldr	r0, [sp, #20]
 800857e:	4649      	mov	r1, r9
 8008580:	f7ff f93e 	bl	8007800 <_Bfree>
 8008584:	9805      	ldr	r0, [sp, #20]
 8008586:	4641      	mov	r1, r8
 8008588:	f7ff f93a 	bl	8007800 <_Bfree>
 800858c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800858e:	9805      	ldr	r0, [sp, #20]
 8008590:	f7ff f936 	bl	8007800 <_Bfree>
 8008594:	9805      	ldr	r0, [sp, #20]
 8008596:	4621      	mov	r1, r4
 8008598:	f7ff f932 	bl	8007800 <_Bfree>
 800859c:	e5f9      	b.n	8008192 <_strtod_l+0x72>
 800859e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80085a4:	4293      	cmp	r3, r2
 80085a6:	dbbc      	blt.n	8008522 <_strtod_l+0x402>
 80085a8:	4c41      	ldr	r4, [pc, #260]	@ (80086b0 <_strtod_l+0x590>)
 80085aa:	f1c5 050f 	rsb	r5, r5, #15
 80085ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80085b2:	4652      	mov	r2, sl
 80085b4:	465b      	mov	r3, fp
 80085b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ba:	f7f8 f845 	bl	8000648 <__aeabi_dmul>
 80085be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c0:	1b5d      	subs	r5, r3, r5
 80085c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80085c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085ca:	e78f      	b.n	80084ec <_strtod_l+0x3cc>
 80085cc:	3316      	adds	r3, #22
 80085ce:	dba8      	blt.n	8008522 <_strtod_l+0x402>
 80085d0:	4b37      	ldr	r3, [pc, #220]	@ (80086b0 <_strtod_l+0x590>)
 80085d2:	eba9 0808 	sub.w	r8, r9, r8
 80085d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80085da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80085de:	4650      	mov	r0, sl
 80085e0:	4659      	mov	r1, fp
 80085e2:	f7f8 f95b 	bl	800089c <__aeabi_ddiv>
 80085e6:	e783      	b.n	80084f0 <_strtod_l+0x3d0>
 80085e8:	4b32      	ldr	r3, [pc, #200]	@ (80086b4 <_strtod_l+0x594>)
 80085ea:	9308      	str	r3, [sp, #32]
 80085ec:	2300      	movs	r3, #0
 80085ee:	1124      	asrs	r4, r4, #4
 80085f0:	4650      	mov	r0, sl
 80085f2:	4659      	mov	r1, fp
 80085f4:	461e      	mov	r6, r3
 80085f6:	2c01      	cmp	r4, #1
 80085f8:	dc21      	bgt.n	800863e <_strtod_l+0x51e>
 80085fa:	b10b      	cbz	r3, 8008600 <_strtod_l+0x4e0>
 80085fc:	4682      	mov	sl, r0
 80085fe:	468b      	mov	fp, r1
 8008600:	492c      	ldr	r1, [pc, #176]	@ (80086b4 <_strtod_l+0x594>)
 8008602:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008606:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800860a:	4652      	mov	r2, sl
 800860c:	465b      	mov	r3, fp
 800860e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008612:	f7f8 f819 	bl	8000648 <__aeabi_dmul>
 8008616:	4b28      	ldr	r3, [pc, #160]	@ (80086b8 <_strtod_l+0x598>)
 8008618:	460a      	mov	r2, r1
 800861a:	400b      	ands	r3, r1
 800861c:	4927      	ldr	r1, [pc, #156]	@ (80086bc <_strtod_l+0x59c>)
 800861e:	428b      	cmp	r3, r1
 8008620:	4682      	mov	sl, r0
 8008622:	d898      	bhi.n	8008556 <_strtod_l+0x436>
 8008624:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008628:	428b      	cmp	r3, r1
 800862a:	bf86      	itte	hi
 800862c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80086c0 <_strtod_l+0x5a0>
 8008630:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008634:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008638:	2300      	movs	r3, #0
 800863a:	9308      	str	r3, [sp, #32]
 800863c:	e07a      	b.n	8008734 <_strtod_l+0x614>
 800863e:	07e2      	lsls	r2, r4, #31
 8008640:	d505      	bpl.n	800864e <_strtod_l+0x52e>
 8008642:	9b08      	ldr	r3, [sp, #32]
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	f7f7 fffe 	bl	8000648 <__aeabi_dmul>
 800864c:	2301      	movs	r3, #1
 800864e:	9a08      	ldr	r2, [sp, #32]
 8008650:	3208      	adds	r2, #8
 8008652:	3601      	adds	r6, #1
 8008654:	1064      	asrs	r4, r4, #1
 8008656:	9208      	str	r2, [sp, #32]
 8008658:	e7cd      	b.n	80085f6 <_strtod_l+0x4d6>
 800865a:	d0ed      	beq.n	8008638 <_strtod_l+0x518>
 800865c:	4264      	negs	r4, r4
 800865e:	f014 020f 	ands.w	r2, r4, #15
 8008662:	d00a      	beq.n	800867a <_strtod_l+0x55a>
 8008664:	4b12      	ldr	r3, [pc, #72]	@ (80086b0 <_strtod_l+0x590>)
 8008666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800866a:	4650      	mov	r0, sl
 800866c:	4659      	mov	r1, fp
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f7f8 f913 	bl	800089c <__aeabi_ddiv>
 8008676:	4682      	mov	sl, r0
 8008678:	468b      	mov	fp, r1
 800867a:	1124      	asrs	r4, r4, #4
 800867c:	d0dc      	beq.n	8008638 <_strtod_l+0x518>
 800867e:	2c1f      	cmp	r4, #31
 8008680:	dd20      	ble.n	80086c4 <_strtod_l+0x5a4>
 8008682:	2400      	movs	r4, #0
 8008684:	46a0      	mov	r8, r4
 8008686:	940a      	str	r4, [sp, #40]	@ 0x28
 8008688:	46a1      	mov	r9, r4
 800868a:	9a05      	ldr	r2, [sp, #20]
 800868c:	2322      	movs	r3, #34	@ 0x22
 800868e:	f04f 0a00 	mov.w	sl, #0
 8008692:	f04f 0b00 	mov.w	fp, #0
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	e768      	b.n	800856c <_strtod_l+0x44c>
 800869a:	bf00      	nop
 800869c:	08009ff9 	.word	0x08009ff9
 80086a0:	0800a20c 	.word	0x0800a20c
 80086a4:	08009ff1 	.word	0x08009ff1
 80086a8:	0800a028 	.word	0x0800a028
 80086ac:	0800a3b5 	.word	0x0800a3b5
 80086b0:	0800a140 	.word	0x0800a140
 80086b4:	0800a118 	.word	0x0800a118
 80086b8:	7ff00000 	.word	0x7ff00000
 80086bc:	7ca00000 	.word	0x7ca00000
 80086c0:	7fefffff 	.word	0x7fefffff
 80086c4:	f014 0310 	ands.w	r3, r4, #16
 80086c8:	bf18      	it	ne
 80086ca:	236a      	movne	r3, #106	@ 0x6a
 80086cc:	4ea9      	ldr	r6, [pc, #676]	@ (8008974 <_strtod_l+0x854>)
 80086ce:	9308      	str	r3, [sp, #32]
 80086d0:	4650      	mov	r0, sl
 80086d2:	4659      	mov	r1, fp
 80086d4:	2300      	movs	r3, #0
 80086d6:	07e2      	lsls	r2, r4, #31
 80086d8:	d504      	bpl.n	80086e4 <_strtod_l+0x5c4>
 80086da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086de:	f7f7 ffb3 	bl	8000648 <__aeabi_dmul>
 80086e2:	2301      	movs	r3, #1
 80086e4:	1064      	asrs	r4, r4, #1
 80086e6:	f106 0608 	add.w	r6, r6, #8
 80086ea:	d1f4      	bne.n	80086d6 <_strtod_l+0x5b6>
 80086ec:	b10b      	cbz	r3, 80086f2 <_strtod_l+0x5d2>
 80086ee:	4682      	mov	sl, r0
 80086f0:	468b      	mov	fp, r1
 80086f2:	9b08      	ldr	r3, [sp, #32]
 80086f4:	b1b3      	cbz	r3, 8008724 <_strtod_l+0x604>
 80086f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80086fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80086fe:	2b00      	cmp	r3, #0
 8008700:	4659      	mov	r1, fp
 8008702:	dd0f      	ble.n	8008724 <_strtod_l+0x604>
 8008704:	2b1f      	cmp	r3, #31
 8008706:	dd55      	ble.n	80087b4 <_strtod_l+0x694>
 8008708:	2b34      	cmp	r3, #52	@ 0x34
 800870a:	bfde      	ittt	le
 800870c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008710:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008714:	4093      	lslle	r3, r2
 8008716:	f04f 0a00 	mov.w	sl, #0
 800871a:	bfcc      	ite	gt
 800871c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008720:	ea03 0b01 	andle.w	fp, r3, r1
 8008724:	2200      	movs	r2, #0
 8008726:	2300      	movs	r3, #0
 8008728:	4650      	mov	r0, sl
 800872a:	4659      	mov	r1, fp
 800872c:	f7f8 f9f4 	bl	8000b18 <__aeabi_dcmpeq>
 8008730:	2800      	cmp	r0, #0
 8008732:	d1a6      	bne.n	8008682 <_strtod_l+0x562>
 8008734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800873a:	9805      	ldr	r0, [sp, #20]
 800873c:	462b      	mov	r3, r5
 800873e:	463a      	mov	r2, r7
 8008740:	f7ff f8c6 	bl	80078d0 <__s2b>
 8008744:	900a      	str	r0, [sp, #40]	@ 0x28
 8008746:	2800      	cmp	r0, #0
 8008748:	f43f af05 	beq.w	8008556 <_strtod_l+0x436>
 800874c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800874e:	2a00      	cmp	r2, #0
 8008750:	eba9 0308 	sub.w	r3, r9, r8
 8008754:	bfa8      	it	ge
 8008756:	2300      	movge	r3, #0
 8008758:	9312      	str	r3, [sp, #72]	@ 0x48
 800875a:	2400      	movs	r4, #0
 800875c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008760:	9316      	str	r3, [sp, #88]	@ 0x58
 8008762:	46a0      	mov	r8, r4
 8008764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008766:	9805      	ldr	r0, [sp, #20]
 8008768:	6859      	ldr	r1, [r3, #4]
 800876a:	f7ff f809 	bl	8007780 <_Balloc>
 800876e:	4681      	mov	r9, r0
 8008770:	2800      	cmp	r0, #0
 8008772:	f43f aef4 	beq.w	800855e <_strtod_l+0x43e>
 8008776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008778:	691a      	ldr	r2, [r3, #16]
 800877a:	3202      	adds	r2, #2
 800877c:	f103 010c 	add.w	r1, r3, #12
 8008780:	0092      	lsls	r2, r2, #2
 8008782:	300c      	adds	r0, #12
 8008784:	f000 fd72 	bl	800926c <memcpy>
 8008788:	ec4b ab10 	vmov	d0, sl, fp
 800878c:	9805      	ldr	r0, [sp, #20]
 800878e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008790:	a91b      	add	r1, sp, #108	@ 0x6c
 8008792:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008796:	f7ff fbd7 	bl	8007f48 <__d2b>
 800879a:	901a      	str	r0, [sp, #104]	@ 0x68
 800879c:	2800      	cmp	r0, #0
 800879e:	f43f aede 	beq.w	800855e <_strtod_l+0x43e>
 80087a2:	9805      	ldr	r0, [sp, #20]
 80087a4:	2101      	movs	r1, #1
 80087a6:	f7ff f929 	bl	80079fc <__i2b>
 80087aa:	4680      	mov	r8, r0
 80087ac:	b948      	cbnz	r0, 80087c2 <_strtod_l+0x6a2>
 80087ae:	f04f 0800 	mov.w	r8, #0
 80087b2:	e6d4      	b.n	800855e <_strtod_l+0x43e>
 80087b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80087b8:	fa02 f303 	lsl.w	r3, r2, r3
 80087bc:	ea03 0a0a 	and.w	sl, r3, sl
 80087c0:	e7b0      	b.n	8008724 <_strtod_l+0x604>
 80087c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80087c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	bfab      	itete	ge
 80087ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80087cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80087ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80087d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80087d2:	bfac      	ite	ge
 80087d4:	18ef      	addge	r7, r5, r3
 80087d6:	1b5e      	sublt	r6, r3, r5
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	1aed      	subs	r5, r5, r3
 80087dc:	4415      	add	r5, r2
 80087de:	4b66      	ldr	r3, [pc, #408]	@ (8008978 <_strtod_l+0x858>)
 80087e0:	3d01      	subs	r5, #1
 80087e2:	429d      	cmp	r5, r3
 80087e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80087e8:	da50      	bge.n	800888c <_strtod_l+0x76c>
 80087ea:	1b5b      	subs	r3, r3, r5
 80087ec:	2b1f      	cmp	r3, #31
 80087ee:	eba2 0203 	sub.w	r2, r2, r3
 80087f2:	f04f 0101 	mov.w	r1, #1
 80087f6:	dc3d      	bgt.n	8008874 <_strtod_l+0x754>
 80087f8:	fa01 f303 	lsl.w	r3, r1, r3
 80087fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087fe:	2300      	movs	r3, #0
 8008800:	9310      	str	r3, [sp, #64]	@ 0x40
 8008802:	18bd      	adds	r5, r7, r2
 8008804:	9b08      	ldr	r3, [sp, #32]
 8008806:	42af      	cmp	r7, r5
 8008808:	4416      	add	r6, r2
 800880a:	441e      	add	r6, r3
 800880c:	463b      	mov	r3, r7
 800880e:	bfa8      	it	ge
 8008810:	462b      	movge	r3, r5
 8008812:	42b3      	cmp	r3, r6
 8008814:	bfa8      	it	ge
 8008816:	4633      	movge	r3, r6
 8008818:	2b00      	cmp	r3, #0
 800881a:	bfc2      	ittt	gt
 800881c:	1aed      	subgt	r5, r5, r3
 800881e:	1af6      	subgt	r6, r6, r3
 8008820:	1aff      	subgt	r7, r7, r3
 8008822:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008824:	2b00      	cmp	r3, #0
 8008826:	dd16      	ble.n	8008856 <_strtod_l+0x736>
 8008828:	4641      	mov	r1, r8
 800882a:	9805      	ldr	r0, [sp, #20]
 800882c:	461a      	mov	r2, r3
 800882e:	f7ff f9a5 	bl	8007b7c <__pow5mult>
 8008832:	4680      	mov	r8, r0
 8008834:	2800      	cmp	r0, #0
 8008836:	d0ba      	beq.n	80087ae <_strtod_l+0x68e>
 8008838:	4601      	mov	r1, r0
 800883a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800883c:	9805      	ldr	r0, [sp, #20]
 800883e:	f7ff f8f3 	bl	8007a28 <__multiply>
 8008842:	900e      	str	r0, [sp, #56]	@ 0x38
 8008844:	2800      	cmp	r0, #0
 8008846:	f43f ae8a 	beq.w	800855e <_strtod_l+0x43e>
 800884a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800884c:	9805      	ldr	r0, [sp, #20]
 800884e:	f7fe ffd7 	bl	8007800 <_Bfree>
 8008852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008854:	931a      	str	r3, [sp, #104]	@ 0x68
 8008856:	2d00      	cmp	r5, #0
 8008858:	dc1d      	bgt.n	8008896 <_strtod_l+0x776>
 800885a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd23      	ble.n	80088a8 <_strtod_l+0x788>
 8008860:	4649      	mov	r1, r9
 8008862:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008864:	9805      	ldr	r0, [sp, #20]
 8008866:	f7ff f989 	bl	8007b7c <__pow5mult>
 800886a:	4681      	mov	r9, r0
 800886c:	b9e0      	cbnz	r0, 80088a8 <_strtod_l+0x788>
 800886e:	f04f 0900 	mov.w	r9, #0
 8008872:	e674      	b.n	800855e <_strtod_l+0x43e>
 8008874:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008878:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800887c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008880:	35e2      	adds	r5, #226	@ 0xe2
 8008882:	fa01 f305 	lsl.w	r3, r1, r5
 8008886:	9310      	str	r3, [sp, #64]	@ 0x40
 8008888:	9113      	str	r1, [sp, #76]	@ 0x4c
 800888a:	e7ba      	b.n	8008802 <_strtod_l+0x6e2>
 800888c:	2300      	movs	r3, #0
 800888e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008890:	2301      	movs	r3, #1
 8008892:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008894:	e7b5      	b.n	8008802 <_strtod_l+0x6e2>
 8008896:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008898:	9805      	ldr	r0, [sp, #20]
 800889a:	462a      	mov	r2, r5
 800889c:	f7ff f9c8 	bl	8007c30 <__lshift>
 80088a0:	901a      	str	r0, [sp, #104]	@ 0x68
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d1d9      	bne.n	800885a <_strtod_l+0x73a>
 80088a6:	e65a      	b.n	800855e <_strtod_l+0x43e>
 80088a8:	2e00      	cmp	r6, #0
 80088aa:	dd07      	ble.n	80088bc <_strtod_l+0x79c>
 80088ac:	4649      	mov	r1, r9
 80088ae:	9805      	ldr	r0, [sp, #20]
 80088b0:	4632      	mov	r2, r6
 80088b2:	f7ff f9bd 	bl	8007c30 <__lshift>
 80088b6:	4681      	mov	r9, r0
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d0d8      	beq.n	800886e <_strtod_l+0x74e>
 80088bc:	2f00      	cmp	r7, #0
 80088be:	dd08      	ble.n	80088d2 <_strtod_l+0x7b2>
 80088c0:	4641      	mov	r1, r8
 80088c2:	9805      	ldr	r0, [sp, #20]
 80088c4:	463a      	mov	r2, r7
 80088c6:	f7ff f9b3 	bl	8007c30 <__lshift>
 80088ca:	4680      	mov	r8, r0
 80088cc:	2800      	cmp	r0, #0
 80088ce:	f43f ae46 	beq.w	800855e <_strtod_l+0x43e>
 80088d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088d4:	9805      	ldr	r0, [sp, #20]
 80088d6:	464a      	mov	r2, r9
 80088d8:	f7ff fa32 	bl	8007d40 <__mdiff>
 80088dc:	4604      	mov	r4, r0
 80088de:	2800      	cmp	r0, #0
 80088e0:	f43f ae3d 	beq.w	800855e <_strtod_l+0x43e>
 80088e4:	68c3      	ldr	r3, [r0, #12]
 80088e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088e8:	2300      	movs	r3, #0
 80088ea:	60c3      	str	r3, [r0, #12]
 80088ec:	4641      	mov	r1, r8
 80088ee:	f7ff fa0b 	bl	8007d08 <__mcmp>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	da46      	bge.n	8008984 <_strtod_l+0x864>
 80088f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088f8:	ea53 030a 	orrs.w	r3, r3, sl
 80088fc:	d16c      	bne.n	80089d8 <_strtod_l+0x8b8>
 80088fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008902:	2b00      	cmp	r3, #0
 8008904:	d168      	bne.n	80089d8 <_strtod_l+0x8b8>
 8008906:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800890a:	0d1b      	lsrs	r3, r3, #20
 800890c:	051b      	lsls	r3, r3, #20
 800890e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008912:	d961      	bls.n	80089d8 <_strtod_l+0x8b8>
 8008914:	6963      	ldr	r3, [r4, #20]
 8008916:	b913      	cbnz	r3, 800891e <_strtod_l+0x7fe>
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	2b01      	cmp	r3, #1
 800891c:	dd5c      	ble.n	80089d8 <_strtod_l+0x8b8>
 800891e:	4621      	mov	r1, r4
 8008920:	2201      	movs	r2, #1
 8008922:	9805      	ldr	r0, [sp, #20]
 8008924:	f7ff f984 	bl	8007c30 <__lshift>
 8008928:	4641      	mov	r1, r8
 800892a:	4604      	mov	r4, r0
 800892c:	f7ff f9ec 	bl	8007d08 <__mcmp>
 8008930:	2800      	cmp	r0, #0
 8008932:	dd51      	ble.n	80089d8 <_strtod_l+0x8b8>
 8008934:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008938:	9a08      	ldr	r2, [sp, #32]
 800893a:	0d1b      	lsrs	r3, r3, #20
 800893c:	051b      	lsls	r3, r3, #20
 800893e:	2a00      	cmp	r2, #0
 8008940:	d06b      	beq.n	8008a1a <_strtod_l+0x8fa>
 8008942:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008946:	d868      	bhi.n	8008a1a <_strtod_l+0x8fa>
 8008948:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800894c:	f67f ae9d 	bls.w	800868a <_strtod_l+0x56a>
 8008950:	4b0a      	ldr	r3, [pc, #40]	@ (800897c <_strtod_l+0x85c>)
 8008952:	4650      	mov	r0, sl
 8008954:	4659      	mov	r1, fp
 8008956:	2200      	movs	r2, #0
 8008958:	f7f7 fe76 	bl	8000648 <__aeabi_dmul>
 800895c:	4b08      	ldr	r3, [pc, #32]	@ (8008980 <_strtod_l+0x860>)
 800895e:	400b      	ands	r3, r1
 8008960:	4682      	mov	sl, r0
 8008962:	468b      	mov	fp, r1
 8008964:	2b00      	cmp	r3, #0
 8008966:	f47f ae05 	bne.w	8008574 <_strtod_l+0x454>
 800896a:	9a05      	ldr	r2, [sp, #20]
 800896c:	2322      	movs	r3, #34	@ 0x22
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	e600      	b.n	8008574 <_strtod_l+0x454>
 8008972:	bf00      	nop
 8008974:	0800a238 	.word	0x0800a238
 8008978:	fffffc02 	.word	0xfffffc02
 800897c:	39500000 	.word	0x39500000
 8008980:	7ff00000 	.word	0x7ff00000
 8008984:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008988:	d165      	bne.n	8008a56 <_strtod_l+0x936>
 800898a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800898c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008990:	b35a      	cbz	r2, 80089ea <_strtod_l+0x8ca>
 8008992:	4a9f      	ldr	r2, [pc, #636]	@ (8008c10 <_strtod_l+0xaf0>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d12b      	bne.n	80089f0 <_strtod_l+0x8d0>
 8008998:	9b08      	ldr	r3, [sp, #32]
 800899a:	4651      	mov	r1, sl
 800899c:	b303      	cbz	r3, 80089e0 <_strtod_l+0x8c0>
 800899e:	4b9d      	ldr	r3, [pc, #628]	@ (8008c14 <_strtod_l+0xaf4>)
 80089a0:	465a      	mov	r2, fp
 80089a2:	4013      	ands	r3, r2
 80089a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80089a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089ac:	d81b      	bhi.n	80089e6 <_strtod_l+0x8c6>
 80089ae:	0d1b      	lsrs	r3, r3, #20
 80089b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089b4:	fa02 f303 	lsl.w	r3, r2, r3
 80089b8:	4299      	cmp	r1, r3
 80089ba:	d119      	bne.n	80089f0 <_strtod_l+0x8d0>
 80089bc:	4b96      	ldr	r3, [pc, #600]	@ (8008c18 <_strtod_l+0xaf8>)
 80089be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d102      	bne.n	80089ca <_strtod_l+0x8aa>
 80089c4:	3101      	adds	r1, #1
 80089c6:	f43f adca 	beq.w	800855e <_strtod_l+0x43e>
 80089ca:	4b92      	ldr	r3, [pc, #584]	@ (8008c14 <_strtod_l+0xaf4>)
 80089cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089ce:	401a      	ands	r2, r3
 80089d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80089d4:	f04f 0a00 	mov.w	sl, #0
 80089d8:	9b08      	ldr	r3, [sp, #32]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1b8      	bne.n	8008950 <_strtod_l+0x830>
 80089de:	e5c9      	b.n	8008574 <_strtod_l+0x454>
 80089e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089e4:	e7e8      	b.n	80089b8 <_strtod_l+0x898>
 80089e6:	4613      	mov	r3, r2
 80089e8:	e7e6      	b.n	80089b8 <_strtod_l+0x898>
 80089ea:	ea53 030a 	orrs.w	r3, r3, sl
 80089ee:	d0a1      	beq.n	8008934 <_strtod_l+0x814>
 80089f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089f2:	b1db      	cbz	r3, 8008a2c <_strtod_l+0x90c>
 80089f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089f6:	4213      	tst	r3, r2
 80089f8:	d0ee      	beq.n	80089d8 <_strtod_l+0x8b8>
 80089fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089fc:	9a08      	ldr	r2, [sp, #32]
 80089fe:	4650      	mov	r0, sl
 8008a00:	4659      	mov	r1, fp
 8008a02:	b1bb      	cbz	r3, 8008a34 <_strtod_l+0x914>
 8008a04:	f7ff fb6e 	bl	80080e4 <sulp>
 8008a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a0c:	ec53 2b10 	vmov	r2, r3, d0
 8008a10:	f7f7 fc64 	bl	80002dc <__adddf3>
 8008a14:	4682      	mov	sl, r0
 8008a16:	468b      	mov	fp, r1
 8008a18:	e7de      	b.n	80089d8 <_strtod_l+0x8b8>
 8008a1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008a1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a26:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008a2a:	e7d5      	b.n	80089d8 <_strtod_l+0x8b8>
 8008a2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a2e:	ea13 0f0a 	tst.w	r3, sl
 8008a32:	e7e1      	b.n	80089f8 <_strtod_l+0x8d8>
 8008a34:	f7ff fb56 	bl	80080e4 <sulp>
 8008a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a3c:	ec53 2b10 	vmov	r2, r3, d0
 8008a40:	f7f7 fc4a 	bl	80002d8 <__aeabi_dsub>
 8008a44:	2200      	movs	r2, #0
 8008a46:	2300      	movs	r3, #0
 8008a48:	4682      	mov	sl, r0
 8008a4a:	468b      	mov	fp, r1
 8008a4c:	f7f8 f864 	bl	8000b18 <__aeabi_dcmpeq>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d0c1      	beq.n	80089d8 <_strtod_l+0x8b8>
 8008a54:	e619      	b.n	800868a <_strtod_l+0x56a>
 8008a56:	4641      	mov	r1, r8
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f7ff facd 	bl	8007ff8 <__ratio>
 8008a5e:	ec57 6b10 	vmov	r6, r7, d0
 8008a62:	2200      	movs	r2, #0
 8008a64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a68:	4630      	mov	r0, r6
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	f7f8 f868 	bl	8000b40 <__aeabi_dcmple>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d06f      	beq.n	8008b54 <_strtod_l+0xa34>
 8008a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d17a      	bne.n	8008b70 <_strtod_l+0xa50>
 8008a7a:	f1ba 0f00 	cmp.w	sl, #0
 8008a7e:	d158      	bne.n	8008b32 <_strtod_l+0xa12>
 8008a80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d15a      	bne.n	8008b40 <_strtod_l+0xa20>
 8008a8a:	4b64      	ldr	r3, [pc, #400]	@ (8008c1c <_strtod_l+0xafc>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4630      	mov	r0, r6
 8008a90:	4639      	mov	r1, r7
 8008a92:	f7f8 f84b 	bl	8000b2c <__aeabi_dcmplt>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d159      	bne.n	8008b4e <_strtod_l+0xa2e>
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4639      	mov	r1, r7
 8008a9e:	4b60      	ldr	r3, [pc, #384]	@ (8008c20 <_strtod_l+0xb00>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f7f7 fdd1 	bl	8000648 <__aeabi_dmul>
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	460f      	mov	r7, r1
 8008aaa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008aae:	9606      	str	r6, [sp, #24]
 8008ab0:	9307      	str	r3, [sp, #28]
 8008ab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ab6:	4d57      	ldr	r5, [pc, #348]	@ (8008c14 <_strtod_l+0xaf4>)
 8008ab8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008abe:	401d      	ands	r5, r3
 8008ac0:	4b58      	ldr	r3, [pc, #352]	@ (8008c24 <_strtod_l+0xb04>)
 8008ac2:	429d      	cmp	r5, r3
 8008ac4:	f040 80b2 	bne.w	8008c2c <_strtod_l+0xb0c>
 8008ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008ace:	ec4b ab10 	vmov	d0, sl, fp
 8008ad2:	f7ff f9c9 	bl	8007e68 <__ulp>
 8008ad6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ada:	ec51 0b10 	vmov	r0, r1, d0
 8008ade:	f7f7 fdb3 	bl	8000648 <__aeabi_dmul>
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	465b      	mov	r3, fp
 8008ae6:	f7f7 fbf9 	bl	80002dc <__adddf3>
 8008aea:	460b      	mov	r3, r1
 8008aec:	4949      	ldr	r1, [pc, #292]	@ (8008c14 <_strtod_l+0xaf4>)
 8008aee:	4a4e      	ldr	r2, [pc, #312]	@ (8008c28 <_strtod_l+0xb08>)
 8008af0:	4019      	ands	r1, r3
 8008af2:	4291      	cmp	r1, r2
 8008af4:	4682      	mov	sl, r0
 8008af6:	d942      	bls.n	8008b7e <_strtod_l+0xa5e>
 8008af8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008afa:	4b47      	ldr	r3, [pc, #284]	@ (8008c18 <_strtod_l+0xaf8>)
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d103      	bne.n	8008b08 <_strtod_l+0x9e8>
 8008b00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b02:	3301      	adds	r3, #1
 8008b04:	f43f ad2b 	beq.w	800855e <_strtod_l+0x43e>
 8008b08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008c18 <_strtod_l+0xaf8>
 8008b0c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008b10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b12:	9805      	ldr	r0, [sp, #20]
 8008b14:	f7fe fe74 	bl	8007800 <_Bfree>
 8008b18:	9805      	ldr	r0, [sp, #20]
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	f7fe fe70 	bl	8007800 <_Bfree>
 8008b20:	9805      	ldr	r0, [sp, #20]
 8008b22:	4641      	mov	r1, r8
 8008b24:	f7fe fe6c 	bl	8007800 <_Bfree>
 8008b28:	9805      	ldr	r0, [sp, #20]
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	f7fe fe68 	bl	8007800 <_Bfree>
 8008b30:	e618      	b.n	8008764 <_strtod_l+0x644>
 8008b32:	f1ba 0f01 	cmp.w	sl, #1
 8008b36:	d103      	bne.n	8008b40 <_strtod_l+0xa20>
 8008b38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f43f ada5 	beq.w	800868a <_strtod_l+0x56a>
 8008b40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008bf0 <_strtod_l+0xad0>
 8008b44:	4f35      	ldr	r7, [pc, #212]	@ (8008c1c <_strtod_l+0xafc>)
 8008b46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b4a:	2600      	movs	r6, #0
 8008b4c:	e7b1      	b.n	8008ab2 <_strtod_l+0x992>
 8008b4e:	4f34      	ldr	r7, [pc, #208]	@ (8008c20 <_strtod_l+0xb00>)
 8008b50:	2600      	movs	r6, #0
 8008b52:	e7aa      	b.n	8008aaa <_strtod_l+0x98a>
 8008b54:	4b32      	ldr	r3, [pc, #200]	@ (8008c20 <_strtod_l+0xb00>)
 8008b56:	4630      	mov	r0, r6
 8008b58:	4639      	mov	r1, r7
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f7f7 fd74 	bl	8000648 <__aeabi_dmul>
 8008b60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b62:	4606      	mov	r6, r0
 8008b64:	460f      	mov	r7, r1
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d09f      	beq.n	8008aaa <_strtod_l+0x98a>
 8008b6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008b6e:	e7a0      	b.n	8008ab2 <_strtod_l+0x992>
 8008b70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008bf8 <_strtod_l+0xad8>
 8008b74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b78:	ec57 6b17 	vmov	r6, r7, d7
 8008b7c:	e799      	b.n	8008ab2 <_strtod_l+0x992>
 8008b7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008b82:	9b08      	ldr	r3, [sp, #32]
 8008b84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1c1      	bne.n	8008b10 <_strtod_l+0x9f0>
 8008b8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b90:	0d1b      	lsrs	r3, r3, #20
 8008b92:	051b      	lsls	r3, r3, #20
 8008b94:	429d      	cmp	r5, r3
 8008b96:	d1bb      	bne.n	8008b10 <_strtod_l+0x9f0>
 8008b98:	4630      	mov	r0, r6
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	f7f8 f8b4 	bl	8000d08 <__aeabi_d2lz>
 8008ba0:	f7f7 fd24 	bl	80005ec <__aeabi_l2d>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4630      	mov	r0, r6
 8008baa:	4639      	mov	r1, r7
 8008bac:	f7f7 fb94 	bl	80002d8 <__aeabi_dsub>
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008bb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008bbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bbe:	ea46 060a 	orr.w	r6, r6, sl
 8008bc2:	431e      	orrs	r6, r3
 8008bc4:	d06f      	beq.n	8008ca6 <_strtod_l+0xb86>
 8008bc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c00 <_strtod_l+0xae0>)
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f7f7 ffae 	bl	8000b2c <__aeabi_dcmplt>
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f47f accf 	bne.w	8008574 <_strtod_l+0x454>
 8008bd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008c08 <_strtod_l+0xae8>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008be0:	f7f7 ffc2 	bl	8000b68 <__aeabi_dcmpgt>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d093      	beq.n	8008b10 <_strtod_l+0x9f0>
 8008be8:	e4c4      	b.n	8008574 <_strtod_l+0x454>
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w
 8008bf0:	00000000 	.word	0x00000000
 8008bf4:	bff00000 	.word	0xbff00000
 8008bf8:	00000000 	.word	0x00000000
 8008bfc:	3ff00000 	.word	0x3ff00000
 8008c00:	94a03595 	.word	0x94a03595
 8008c04:	3fdfffff 	.word	0x3fdfffff
 8008c08:	35afe535 	.word	0x35afe535
 8008c0c:	3fe00000 	.word	0x3fe00000
 8008c10:	000fffff 	.word	0x000fffff
 8008c14:	7ff00000 	.word	0x7ff00000
 8008c18:	7fefffff 	.word	0x7fefffff
 8008c1c:	3ff00000 	.word	0x3ff00000
 8008c20:	3fe00000 	.word	0x3fe00000
 8008c24:	7fe00000 	.word	0x7fe00000
 8008c28:	7c9fffff 	.word	0x7c9fffff
 8008c2c:	9b08      	ldr	r3, [sp, #32]
 8008c2e:	b323      	cbz	r3, 8008c7a <_strtod_l+0xb5a>
 8008c30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008c34:	d821      	bhi.n	8008c7a <_strtod_l+0xb5a>
 8008c36:	a328      	add	r3, pc, #160	@ (adr r3, 8008cd8 <_strtod_l+0xbb8>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	f7f7 ff7e 	bl	8000b40 <__aeabi_dcmple>
 8008c44:	b1a0      	cbz	r0, 8008c70 <_strtod_l+0xb50>
 8008c46:	4639      	mov	r1, r7
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7f7 ffd5 	bl	8000bf8 <__aeabi_d2uiz>
 8008c4e:	2801      	cmp	r0, #1
 8008c50:	bf38      	it	cc
 8008c52:	2001      	movcc	r0, #1
 8008c54:	f7f7 fc7e 	bl	8000554 <__aeabi_ui2d>
 8008c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	460f      	mov	r7, r1
 8008c5e:	b9fb      	cbnz	r3, 8008ca0 <_strtod_l+0xb80>
 8008c60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c64:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c66:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008c6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008c76:	1b5b      	subs	r3, r3, r5
 8008c78:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008c82:	f7ff f8f1 	bl	8007e68 <__ulp>
 8008c86:	4650      	mov	r0, sl
 8008c88:	ec53 2b10 	vmov	r2, r3, d0
 8008c8c:	4659      	mov	r1, fp
 8008c8e:	f7f7 fcdb 	bl	8000648 <__aeabi_dmul>
 8008c92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008c96:	f7f7 fb21 	bl	80002dc <__adddf3>
 8008c9a:	4682      	mov	sl, r0
 8008c9c:	468b      	mov	fp, r1
 8008c9e:	e770      	b.n	8008b82 <_strtod_l+0xa62>
 8008ca0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008ca4:	e7e0      	b.n	8008c68 <_strtod_l+0xb48>
 8008ca6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ce0 <_strtod_l+0xbc0>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 ff3e 	bl	8000b2c <__aeabi_dcmplt>
 8008cb0:	e798      	b.n	8008be4 <_strtod_l+0xac4>
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008cb6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008cb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	f7ff ba6d 	b.w	800819a <_strtod_l+0x7a>
 8008cc0:	2a65      	cmp	r2, #101	@ 0x65
 8008cc2:	f43f ab66 	beq.w	8008392 <_strtod_l+0x272>
 8008cc6:	2a45      	cmp	r2, #69	@ 0x45
 8008cc8:	f43f ab63 	beq.w	8008392 <_strtod_l+0x272>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f7ff bb9e 	b.w	800840e <_strtod_l+0x2ee>
 8008cd2:	bf00      	nop
 8008cd4:	f3af 8000 	nop.w
 8008cd8:	ffc00000 	.word	0xffc00000
 8008cdc:	41dfffff 	.word	0x41dfffff
 8008ce0:	94a03595 	.word	0x94a03595
 8008ce4:	3fcfffff 	.word	0x3fcfffff

08008ce8 <_strtod_r>:
 8008ce8:	4b01      	ldr	r3, [pc, #4]	@ (8008cf0 <_strtod_r+0x8>)
 8008cea:	f7ff ba19 	b.w	8008120 <_strtod_l>
 8008cee:	bf00      	nop
 8008cf0:	20000068 	.word	0x20000068

08008cf4 <_strtol_l.constprop.0>:
 8008cf4:	2b24      	cmp	r3, #36	@ 0x24
 8008cf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfa:	4686      	mov	lr, r0
 8008cfc:	4690      	mov	r8, r2
 8008cfe:	d801      	bhi.n	8008d04 <_strtol_l.constprop.0+0x10>
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d106      	bne.n	8008d12 <_strtol_l.constprop.0+0x1e>
 8008d04:	f7fd fdba 	bl	800687c <__errno>
 8008d08:	2316      	movs	r3, #22
 8008d0a:	6003      	str	r3, [r0, #0]
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d12:	4834      	ldr	r0, [pc, #208]	@ (8008de4 <_strtol_l.constprop.0+0xf0>)
 8008d14:	460d      	mov	r5, r1
 8008d16:	462a      	mov	r2, r5
 8008d18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d1c:	5d06      	ldrb	r6, [r0, r4]
 8008d1e:	f016 0608 	ands.w	r6, r6, #8
 8008d22:	d1f8      	bne.n	8008d16 <_strtol_l.constprop.0+0x22>
 8008d24:	2c2d      	cmp	r4, #45	@ 0x2d
 8008d26:	d12d      	bne.n	8008d84 <_strtol_l.constprop.0+0x90>
 8008d28:	782c      	ldrb	r4, [r5, #0]
 8008d2a:	2601      	movs	r6, #1
 8008d2c:	1c95      	adds	r5, r2, #2
 8008d2e:	f033 0210 	bics.w	r2, r3, #16
 8008d32:	d109      	bne.n	8008d48 <_strtol_l.constprop.0+0x54>
 8008d34:	2c30      	cmp	r4, #48	@ 0x30
 8008d36:	d12a      	bne.n	8008d8e <_strtol_l.constprop.0+0x9a>
 8008d38:	782a      	ldrb	r2, [r5, #0]
 8008d3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d3e:	2a58      	cmp	r2, #88	@ 0x58
 8008d40:	d125      	bne.n	8008d8e <_strtol_l.constprop.0+0x9a>
 8008d42:	786c      	ldrb	r4, [r5, #1]
 8008d44:	2310      	movs	r3, #16
 8008d46:	3502      	adds	r5, #2
 8008d48:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d4c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008d50:	2200      	movs	r2, #0
 8008d52:	fbbc f9f3 	udiv	r9, ip, r3
 8008d56:	4610      	mov	r0, r2
 8008d58:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d5c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d60:	2f09      	cmp	r7, #9
 8008d62:	d81b      	bhi.n	8008d9c <_strtol_l.constprop.0+0xa8>
 8008d64:	463c      	mov	r4, r7
 8008d66:	42a3      	cmp	r3, r4
 8008d68:	dd27      	ble.n	8008dba <_strtol_l.constprop.0+0xc6>
 8008d6a:	1c57      	adds	r7, r2, #1
 8008d6c:	d007      	beq.n	8008d7e <_strtol_l.constprop.0+0x8a>
 8008d6e:	4581      	cmp	r9, r0
 8008d70:	d320      	bcc.n	8008db4 <_strtol_l.constprop.0+0xc0>
 8008d72:	d101      	bne.n	8008d78 <_strtol_l.constprop.0+0x84>
 8008d74:	45a2      	cmp	sl, r4
 8008d76:	db1d      	blt.n	8008db4 <_strtol_l.constprop.0+0xc0>
 8008d78:	fb00 4003 	mla	r0, r0, r3, r4
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d82:	e7eb      	b.n	8008d5c <_strtol_l.constprop.0+0x68>
 8008d84:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d86:	bf04      	itt	eq
 8008d88:	782c      	ldrbeq	r4, [r5, #0]
 8008d8a:	1c95      	addeq	r5, r2, #2
 8008d8c:	e7cf      	b.n	8008d2e <_strtol_l.constprop.0+0x3a>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1da      	bne.n	8008d48 <_strtol_l.constprop.0+0x54>
 8008d92:	2c30      	cmp	r4, #48	@ 0x30
 8008d94:	bf0c      	ite	eq
 8008d96:	2308      	moveq	r3, #8
 8008d98:	230a      	movne	r3, #10
 8008d9a:	e7d5      	b.n	8008d48 <_strtol_l.constprop.0+0x54>
 8008d9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008da0:	2f19      	cmp	r7, #25
 8008da2:	d801      	bhi.n	8008da8 <_strtol_l.constprop.0+0xb4>
 8008da4:	3c37      	subs	r4, #55	@ 0x37
 8008da6:	e7de      	b.n	8008d66 <_strtol_l.constprop.0+0x72>
 8008da8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008dac:	2f19      	cmp	r7, #25
 8008dae:	d804      	bhi.n	8008dba <_strtol_l.constprop.0+0xc6>
 8008db0:	3c57      	subs	r4, #87	@ 0x57
 8008db2:	e7d8      	b.n	8008d66 <_strtol_l.constprop.0+0x72>
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008db8:	e7e1      	b.n	8008d7e <_strtol_l.constprop.0+0x8a>
 8008dba:	1c53      	adds	r3, r2, #1
 8008dbc:	d108      	bne.n	8008dd0 <_strtol_l.constprop.0+0xdc>
 8008dbe:	2322      	movs	r3, #34	@ 0x22
 8008dc0:	f8ce 3000 	str.w	r3, [lr]
 8008dc4:	4660      	mov	r0, ip
 8008dc6:	f1b8 0f00 	cmp.w	r8, #0
 8008dca:	d0a0      	beq.n	8008d0e <_strtol_l.constprop.0+0x1a>
 8008dcc:	1e69      	subs	r1, r5, #1
 8008dce:	e006      	b.n	8008dde <_strtol_l.constprop.0+0xea>
 8008dd0:	b106      	cbz	r6, 8008dd4 <_strtol_l.constprop.0+0xe0>
 8008dd2:	4240      	negs	r0, r0
 8008dd4:	f1b8 0f00 	cmp.w	r8, #0
 8008dd8:	d099      	beq.n	8008d0e <_strtol_l.constprop.0+0x1a>
 8008dda:	2a00      	cmp	r2, #0
 8008ddc:	d1f6      	bne.n	8008dcc <_strtol_l.constprop.0+0xd8>
 8008dde:	f8c8 1000 	str.w	r1, [r8]
 8008de2:	e794      	b.n	8008d0e <_strtol_l.constprop.0+0x1a>
 8008de4:	0800a261 	.word	0x0800a261

08008de8 <_strtol_r>:
 8008de8:	f7ff bf84 	b.w	8008cf4 <_strtol_l.constprop.0>

08008dec <__ssputs_r>:
 8008dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df0:	688e      	ldr	r6, [r1, #8]
 8008df2:	461f      	mov	r7, r3
 8008df4:	42be      	cmp	r6, r7
 8008df6:	680b      	ldr	r3, [r1, #0]
 8008df8:	4682      	mov	sl, r0
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	4690      	mov	r8, r2
 8008dfe:	d82d      	bhi.n	8008e5c <__ssputs_r+0x70>
 8008e00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e08:	d026      	beq.n	8008e58 <__ssputs_r+0x6c>
 8008e0a:	6965      	ldr	r5, [r4, #20]
 8008e0c:	6909      	ldr	r1, [r1, #16]
 8008e0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e12:	eba3 0901 	sub.w	r9, r3, r1
 8008e16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e1a:	1c7b      	adds	r3, r7, #1
 8008e1c:	444b      	add	r3, r9
 8008e1e:	106d      	asrs	r5, r5, #1
 8008e20:	429d      	cmp	r5, r3
 8008e22:	bf38      	it	cc
 8008e24:	461d      	movcc	r5, r3
 8008e26:	0553      	lsls	r3, r2, #21
 8008e28:	d527      	bpl.n	8008e7a <__ssputs_r+0x8e>
 8008e2a:	4629      	mov	r1, r5
 8008e2c:	f7fe fc1c 	bl	8007668 <_malloc_r>
 8008e30:	4606      	mov	r6, r0
 8008e32:	b360      	cbz	r0, 8008e8e <__ssputs_r+0xa2>
 8008e34:	6921      	ldr	r1, [r4, #16]
 8008e36:	464a      	mov	r2, r9
 8008e38:	f000 fa18 	bl	800926c <memcpy>
 8008e3c:	89a3      	ldrh	r3, [r4, #12]
 8008e3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e46:	81a3      	strh	r3, [r4, #12]
 8008e48:	6126      	str	r6, [r4, #16]
 8008e4a:	6165      	str	r5, [r4, #20]
 8008e4c:	444e      	add	r6, r9
 8008e4e:	eba5 0509 	sub.w	r5, r5, r9
 8008e52:	6026      	str	r6, [r4, #0]
 8008e54:	60a5      	str	r5, [r4, #8]
 8008e56:	463e      	mov	r6, r7
 8008e58:	42be      	cmp	r6, r7
 8008e5a:	d900      	bls.n	8008e5e <__ssputs_r+0x72>
 8008e5c:	463e      	mov	r6, r7
 8008e5e:	6820      	ldr	r0, [r4, #0]
 8008e60:	4632      	mov	r2, r6
 8008e62:	4641      	mov	r1, r8
 8008e64:	f000 f9c6 	bl	80091f4 <memmove>
 8008e68:	68a3      	ldr	r3, [r4, #8]
 8008e6a:	1b9b      	subs	r3, r3, r6
 8008e6c:	60a3      	str	r3, [r4, #8]
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	4433      	add	r3, r6
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	2000      	movs	r0, #0
 8008e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7a:	462a      	mov	r2, r5
 8008e7c:	f000 fd89 	bl	8009992 <_realloc_r>
 8008e80:	4606      	mov	r6, r0
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d1e0      	bne.n	8008e48 <__ssputs_r+0x5c>
 8008e86:	6921      	ldr	r1, [r4, #16]
 8008e88:	4650      	mov	r0, sl
 8008e8a:	f7fe fb79 	bl	8007580 <_free_r>
 8008e8e:	230c      	movs	r3, #12
 8008e90:	f8ca 3000 	str.w	r3, [sl]
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ea0:	e7e9      	b.n	8008e76 <__ssputs_r+0x8a>
	...

08008ea4 <_svfiprintf_r>:
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	4698      	mov	r8, r3
 8008eaa:	898b      	ldrh	r3, [r1, #12]
 8008eac:	061b      	lsls	r3, r3, #24
 8008eae:	b09d      	sub	sp, #116	@ 0x74
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	4614      	mov	r4, r2
 8008eb6:	d510      	bpl.n	8008eda <_svfiprintf_r+0x36>
 8008eb8:	690b      	ldr	r3, [r1, #16]
 8008eba:	b973      	cbnz	r3, 8008eda <_svfiprintf_r+0x36>
 8008ebc:	2140      	movs	r1, #64	@ 0x40
 8008ebe:	f7fe fbd3 	bl	8007668 <_malloc_r>
 8008ec2:	6028      	str	r0, [r5, #0]
 8008ec4:	6128      	str	r0, [r5, #16]
 8008ec6:	b930      	cbnz	r0, 8008ed6 <_svfiprintf_r+0x32>
 8008ec8:	230c      	movs	r3, #12
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ed0:	b01d      	add	sp, #116	@ 0x74
 8008ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed6:	2340      	movs	r3, #64	@ 0x40
 8008ed8:	616b      	str	r3, [r5, #20]
 8008eda:	2300      	movs	r3, #0
 8008edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ede:	2320      	movs	r3, #32
 8008ee0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ee4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ee8:	2330      	movs	r3, #48	@ 0x30
 8008eea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009088 <_svfiprintf_r+0x1e4>
 8008eee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ef2:	f04f 0901 	mov.w	r9, #1
 8008ef6:	4623      	mov	r3, r4
 8008ef8:	469a      	mov	sl, r3
 8008efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008efe:	b10a      	cbz	r2, 8008f04 <_svfiprintf_r+0x60>
 8008f00:	2a25      	cmp	r2, #37	@ 0x25
 8008f02:	d1f9      	bne.n	8008ef8 <_svfiprintf_r+0x54>
 8008f04:	ebba 0b04 	subs.w	fp, sl, r4
 8008f08:	d00b      	beq.n	8008f22 <_svfiprintf_r+0x7e>
 8008f0a:	465b      	mov	r3, fp
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	4629      	mov	r1, r5
 8008f10:	4638      	mov	r0, r7
 8008f12:	f7ff ff6b 	bl	8008dec <__ssputs_r>
 8008f16:	3001      	adds	r0, #1
 8008f18:	f000 80a7 	beq.w	800906a <_svfiprintf_r+0x1c6>
 8008f1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f1e:	445a      	add	r2, fp
 8008f20:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f22:	f89a 3000 	ldrb.w	r3, [sl]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 809f 	beq.w	800906a <_svfiprintf_r+0x1c6>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f36:	f10a 0a01 	add.w	sl, sl, #1
 8008f3a:	9304      	str	r3, [sp, #16]
 8008f3c:	9307      	str	r3, [sp, #28]
 8008f3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f42:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f44:	4654      	mov	r4, sl
 8008f46:	2205      	movs	r2, #5
 8008f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f4c:	484e      	ldr	r0, [pc, #312]	@ (8009088 <_svfiprintf_r+0x1e4>)
 8008f4e:	f7f7 f967 	bl	8000220 <memchr>
 8008f52:	9a04      	ldr	r2, [sp, #16]
 8008f54:	b9d8      	cbnz	r0, 8008f8e <_svfiprintf_r+0xea>
 8008f56:	06d0      	lsls	r0, r2, #27
 8008f58:	bf44      	itt	mi
 8008f5a:	2320      	movmi	r3, #32
 8008f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f60:	0711      	lsls	r1, r2, #28
 8008f62:	bf44      	itt	mi
 8008f64:	232b      	movmi	r3, #43	@ 0x2b
 8008f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f70:	d015      	beq.n	8008f9e <_svfiprintf_r+0xfa>
 8008f72:	9a07      	ldr	r2, [sp, #28]
 8008f74:	4654      	mov	r4, sl
 8008f76:	2000      	movs	r0, #0
 8008f78:	f04f 0c0a 	mov.w	ip, #10
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f82:	3b30      	subs	r3, #48	@ 0x30
 8008f84:	2b09      	cmp	r3, #9
 8008f86:	d94b      	bls.n	8009020 <_svfiprintf_r+0x17c>
 8008f88:	b1b0      	cbz	r0, 8008fb8 <_svfiprintf_r+0x114>
 8008f8a:	9207      	str	r2, [sp, #28]
 8008f8c:	e014      	b.n	8008fb8 <_svfiprintf_r+0x114>
 8008f8e:	eba0 0308 	sub.w	r3, r0, r8
 8008f92:	fa09 f303 	lsl.w	r3, r9, r3
 8008f96:	4313      	orrs	r3, r2
 8008f98:	9304      	str	r3, [sp, #16]
 8008f9a:	46a2      	mov	sl, r4
 8008f9c:	e7d2      	b.n	8008f44 <_svfiprintf_r+0xa0>
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	1d19      	adds	r1, r3, #4
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	9103      	str	r1, [sp, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	bfbb      	ittet	lt
 8008faa:	425b      	neglt	r3, r3
 8008fac:	f042 0202 	orrlt.w	r2, r2, #2
 8008fb0:	9307      	strge	r3, [sp, #28]
 8008fb2:	9307      	strlt	r3, [sp, #28]
 8008fb4:	bfb8      	it	lt
 8008fb6:	9204      	strlt	r2, [sp, #16]
 8008fb8:	7823      	ldrb	r3, [r4, #0]
 8008fba:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fbc:	d10a      	bne.n	8008fd4 <_svfiprintf_r+0x130>
 8008fbe:	7863      	ldrb	r3, [r4, #1]
 8008fc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fc2:	d132      	bne.n	800902a <_svfiprintf_r+0x186>
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	1d1a      	adds	r2, r3, #4
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	9203      	str	r2, [sp, #12]
 8008fcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fd0:	3402      	adds	r4, #2
 8008fd2:	9305      	str	r3, [sp, #20]
 8008fd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009098 <_svfiprintf_r+0x1f4>
 8008fd8:	7821      	ldrb	r1, [r4, #0]
 8008fda:	2203      	movs	r2, #3
 8008fdc:	4650      	mov	r0, sl
 8008fde:	f7f7 f91f 	bl	8000220 <memchr>
 8008fe2:	b138      	cbz	r0, 8008ff4 <_svfiprintf_r+0x150>
 8008fe4:	9b04      	ldr	r3, [sp, #16]
 8008fe6:	eba0 000a 	sub.w	r0, r0, sl
 8008fea:	2240      	movs	r2, #64	@ 0x40
 8008fec:	4082      	lsls	r2, r0
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	3401      	adds	r4, #1
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff8:	4824      	ldr	r0, [pc, #144]	@ (800908c <_svfiprintf_r+0x1e8>)
 8008ffa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ffe:	2206      	movs	r2, #6
 8009000:	f7f7 f90e 	bl	8000220 <memchr>
 8009004:	2800      	cmp	r0, #0
 8009006:	d036      	beq.n	8009076 <_svfiprintf_r+0x1d2>
 8009008:	4b21      	ldr	r3, [pc, #132]	@ (8009090 <_svfiprintf_r+0x1ec>)
 800900a:	bb1b      	cbnz	r3, 8009054 <_svfiprintf_r+0x1b0>
 800900c:	9b03      	ldr	r3, [sp, #12]
 800900e:	3307      	adds	r3, #7
 8009010:	f023 0307 	bic.w	r3, r3, #7
 8009014:	3308      	adds	r3, #8
 8009016:	9303      	str	r3, [sp, #12]
 8009018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901a:	4433      	add	r3, r6
 800901c:	9309      	str	r3, [sp, #36]	@ 0x24
 800901e:	e76a      	b.n	8008ef6 <_svfiprintf_r+0x52>
 8009020:	fb0c 3202 	mla	r2, ip, r2, r3
 8009024:	460c      	mov	r4, r1
 8009026:	2001      	movs	r0, #1
 8009028:	e7a8      	b.n	8008f7c <_svfiprintf_r+0xd8>
 800902a:	2300      	movs	r3, #0
 800902c:	3401      	adds	r4, #1
 800902e:	9305      	str	r3, [sp, #20]
 8009030:	4619      	mov	r1, r3
 8009032:	f04f 0c0a 	mov.w	ip, #10
 8009036:	4620      	mov	r0, r4
 8009038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800903c:	3a30      	subs	r2, #48	@ 0x30
 800903e:	2a09      	cmp	r2, #9
 8009040:	d903      	bls.n	800904a <_svfiprintf_r+0x1a6>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0c6      	beq.n	8008fd4 <_svfiprintf_r+0x130>
 8009046:	9105      	str	r1, [sp, #20]
 8009048:	e7c4      	b.n	8008fd4 <_svfiprintf_r+0x130>
 800904a:	fb0c 2101 	mla	r1, ip, r1, r2
 800904e:	4604      	mov	r4, r0
 8009050:	2301      	movs	r3, #1
 8009052:	e7f0      	b.n	8009036 <_svfiprintf_r+0x192>
 8009054:	ab03      	add	r3, sp, #12
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	462a      	mov	r2, r5
 800905a:	4b0e      	ldr	r3, [pc, #56]	@ (8009094 <_svfiprintf_r+0x1f0>)
 800905c:	a904      	add	r1, sp, #16
 800905e:	4638      	mov	r0, r7
 8009060:	f7fc fcc8 	bl	80059f4 <_printf_float>
 8009064:	1c42      	adds	r2, r0, #1
 8009066:	4606      	mov	r6, r0
 8009068:	d1d6      	bne.n	8009018 <_svfiprintf_r+0x174>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	065b      	lsls	r3, r3, #25
 800906e:	f53f af2d 	bmi.w	8008ecc <_svfiprintf_r+0x28>
 8009072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009074:	e72c      	b.n	8008ed0 <_svfiprintf_r+0x2c>
 8009076:	ab03      	add	r3, sp, #12
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	462a      	mov	r2, r5
 800907c:	4b05      	ldr	r3, [pc, #20]	@ (8009094 <_svfiprintf_r+0x1f0>)
 800907e:	a904      	add	r1, sp, #16
 8009080:	4638      	mov	r0, r7
 8009082:	f7fc ff4f 	bl	8005f24 <_printf_i>
 8009086:	e7ed      	b.n	8009064 <_svfiprintf_r+0x1c0>
 8009088:	0800a361 	.word	0x0800a361
 800908c:	0800a36b 	.word	0x0800a36b
 8009090:	080059f5 	.word	0x080059f5
 8009094:	08008ded 	.word	0x08008ded
 8009098:	0800a367 	.word	0x0800a367

0800909c <__sflush_r>:
 800909c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a4:	0716      	lsls	r6, r2, #28
 80090a6:	4605      	mov	r5, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	d454      	bmi.n	8009156 <__sflush_r+0xba>
 80090ac:	684b      	ldr	r3, [r1, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	dc02      	bgt.n	80090b8 <__sflush_r+0x1c>
 80090b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	dd48      	ble.n	800914a <__sflush_r+0xae>
 80090b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090ba:	2e00      	cmp	r6, #0
 80090bc:	d045      	beq.n	800914a <__sflush_r+0xae>
 80090be:	2300      	movs	r3, #0
 80090c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090c4:	682f      	ldr	r7, [r5, #0]
 80090c6:	6a21      	ldr	r1, [r4, #32]
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	d030      	beq.n	800912e <__sflush_r+0x92>
 80090cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	0759      	lsls	r1, r3, #29
 80090d2:	d505      	bpl.n	80090e0 <__sflush_r+0x44>
 80090d4:	6863      	ldr	r3, [r4, #4]
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090da:	b10b      	cbz	r3, 80090e0 <__sflush_r+0x44>
 80090dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	2300      	movs	r3, #0
 80090e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090e4:	6a21      	ldr	r1, [r4, #32]
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b0      	blx	r6
 80090ea:	1c43      	adds	r3, r0, #1
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	d106      	bne.n	80090fe <__sflush_r+0x62>
 80090f0:	6829      	ldr	r1, [r5, #0]
 80090f2:	291d      	cmp	r1, #29
 80090f4:	d82b      	bhi.n	800914e <__sflush_r+0xb2>
 80090f6:	4a2a      	ldr	r2, [pc, #168]	@ (80091a0 <__sflush_r+0x104>)
 80090f8:	410a      	asrs	r2, r1
 80090fa:	07d6      	lsls	r6, r2, #31
 80090fc:	d427      	bmi.n	800914e <__sflush_r+0xb2>
 80090fe:	2200      	movs	r2, #0
 8009100:	6062      	str	r2, [r4, #4]
 8009102:	04d9      	lsls	r1, r3, #19
 8009104:	6922      	ldr	r2, [r4, #16]
 8009106:	6022      	str	r2, [r4, #0]
 8009108:	d504      	bpl.n	8009114 <__sflush_r+0x78>
 800910a:	1c42      	adds	r2, r0, #1
 800910c:	d101      	bne.n	8009112 <__sflush_r+0x76>
 800910e:	682b      	ldr	r3, [r5, #0]
 8009110:	b903      	cbnz	r3, 8009114 <__sflush_r+0x78>
 8009112:	6560      	str	r0, [r4, #84]	@ 0x54
 8009114:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009116:	602f      	str	r7, [r5, #0]
 8009118:	b1b9      	cbz	r1, 800914a <__sflush_r+0xae>
 800911a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800911e:	4299      	cmp	r1, r3
 8009120:	d002      	beq.n	8009128 <__sflush_r+0x8c>
 8009122:	4628      	mov	r0, r5
 8009124:	f7fe fa2c 	bl	8007580 <_free_r>
 8009128:	2300      	movs	r3, #0
 800912a:	6363      	str	r3, [r4, #52]	@ 0x34
 800912c:	e00d      	b.n	800914a <__sflush_r+0xae>
 800912e:	2301      	movs	r3, #1
 8009130:	4628      	mov	r0, r5
 8009132:	47b0      	blx	r6
 8009134:	4602      	mov	r2, r0
 8009136:	1c50      	adds	r0, r2, #1
 8009138:	d1c9      	bne.n	80090ce <__sflush_r+0x32>
 800913a:	682b      	ldr	r3, [r5, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0c6      	beq.n	80090ce <__sflush_r+0x32>
 8009140:	2b1d      	cmp	r3, #29
 8009142:	d001      	beq.n	8009148 <__sflush_r+0xac>
 8009144:	2b16      	cmp	r3, #22
 8009146:	d11e      	bne.n	8009186 <__sflush_r+0xea>
 8009148:	602f      	str	r7, [r5, #0]
 800914a:	2000      	movs	r0, #0
 800914c:	e022      	b.n	8009194 <__sflush_r+0xf8>
 800914e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009152:	b21b      	sxth	r3, r3
 8009154:	e01b      	b.n	800918e <__sflush_r+0xf2>
 8009156:	690f      	ldr	r7, [r1, #16]
 8009158:	2f00      	cmp	r7, #0
 800915a:	d0f6      	beq.n	800914a <__sflush_r+0xae>
 800915c:	0793      	lsls	r3, r2, #30
 800915e:	680e      	ldr	r6, [r1, #0]
 8009160:	bf08      	it	eq
 8009162:	694b      	ldreq	r3, [r1, #20]
 8009164:	600f      	str	r7, [r1, #0]
 8009166:	bf18      	it	ne
 8009168:	2300      	movne	r3, #0
 800916a:	eba6 0807 	sub.w	r8, r6, r7
 800916e:	608b      	str	r3, [r1, #8]
 8009170:	f1b8 0f00 	cmp.w	r8, #0
 8009174:	dde9      	ble.n	800914a <__sflush_r+0xae>
 8009176:	6a21      	ldr	r1, [r4, #32]
 8009178:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800917a:	4643      	mov	r3, r8
 800917c:	463a      	mov	r2, r7
 800917e:	4628      	mov	r0, r5
 8009180:	47b0      	blx	r6
 8009182:	2800      	cmp	r0, #0
 8009184:	dc08      	bgt.n	8009198 <__sflush_r+0xfc>
 8009186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009198:	4407      	add	r7, r0
 800919a:	eba8 0800 	sub.w	r8, r8, r0
 800919e:	e7e7      	b.n	8009170 <__sflush_r+0xd4>
 80091a0:	dfbffffe 	.word	0xdfbffffe

080091a4 <_fflush_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	690b      	ldr	r3, [r1, #16]
 80091a8:	4605      	mov	r5, r0
 80091aa:	460c      	mov	r4, r1
 80091ac:	b913      	cbnz	r3, 80091b4 <_fflush_r+0x10>
 80091ae:	2500      	movs	r5, #0
 80091b0:	4628      	mov	r0, r5
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	b118      	cbz	r0, 80091be <_fflush_r+0x1a>
 80091b6:	6a03      	ldr	r3, [r0, #32]
 80091b8:	b90b      	cbnz	r3, 80091be <_fflush_r+0x1a>
 80091ba:	f7fd fa73 	bl	80066a4 <__sinit>
 80091be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0f3      	beq.n	80091ae <_fflush_r+0xa>
 80091c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091c8:	07d0      	lsls	r0, r2, #31
 80091ca:	d404      	bmi.n	80091d6 <_fflush_r+0x32>
 80091cc:	0599      	lsls	r1, r3, #22
 80091ce:	d402      	bmi.n	80091d6 <_fflush_r+0x32>
 80091d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091d2:	f7fd fb7e 	bl	80068d2 <__retarget_lock_acquire_recursive>
 80091d6:	4628      	mov	r0, r5
 80091d8:	4621      	mov	r1, r4
 80091da:	f7ff ff5f 	bl	800909c <__sflush_r>
 80091de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091e0:	07da      	lsls	r2, r3, #31
 80091e2:	4605      	mov	r5, r0
 80091e4:	d4e4      	bmi.n	80091b0 <_fflush_r+0xc>
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	059b      	lsls	r3, r3, #22
 80091ea:	d4e1      	bmi.n	80091b0 <_fflush_r+0xc>
 80091ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ee:	f7fd fb71 	bl	80068d4 <__retarget_lock_release_recursive>
 80091f2:	e7dd      	b.n	80091b0 <_fflush_r+0xc>

080091f4 <memmove>:
 80091f4:	4288      	cmp	r0, r1
 80091f6:	b510      	push	{r4, lr}
 80091f8:	eb01 0402 	add.w	r4, r1, r2
 80091fc:	d902      	bls.n	8009204 <memmove+0x10>
 80091fe:	4284      	cmp	r4, r0
 8009200:	4623      	mov	r3, r4
 8009202:	d807      	bhi.n	8009214 <memmove+0x20>
 8009204:	1e43      	subs	r3, r0, #1
 8009206:	42a1      	cmp	r1, r4
 8009208:	d008      	beq.n	800921c <memmove+0x28>
 800920a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800920e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009212:	e7f8      	b.n	8009206 <memmove+0x12>
 8009214:	4402      	add	r2, r0
 8009216:	4601      	mov	r1, r0
 8009218:	428a      	cmp	r2, r1
 800921a:	d100      	bne.n	800921e <memmove+0x2a>
 800921c:	bd10      	pop	{r4, pc}
 800921e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009226:	e7f7      	b.n	8009218 <memmove+0x24>

08009228 <strncmp>:
 8009228:	b510      	push	{r4, lr}
 800922a:	b16a      	cbz	r2, 8009248 <strncmp+0x20>
 800922c:	3901      	subs	r1, #1
 800922e:	1884      	adds	r4, r0, r2
 8009230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009234:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009238:	429a      	cmp	r2, r3
 800923a:	d103      	bne.n	8009244 <strncmp+0x1c>
 800923c:	42a0      	cmp	r0, r4
 800923e:	d001      	beq.n	8009244 <strncmp+0x1c>
 8009240:	2a00      	cmp	r2, #0
 8009242:	d1f5      	bne.n	8009230 <strncmp+0x8>
 8009244:	1ad0      	subs	r0, r2, r3
 8009246:	bd10      	pop	{r4, pc}
 8009248:	4610      	mov	r0, r2
 800924a:	e7fc      	b.n	8009246 <strncmp+0x1e>

0800924c <_sbrk_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4d06      	ldr	r5, [pc, #24]	@ (8009268 <_sbrk_r+0x1c>)
 8009250:	2300      	movs	r3, #0
 8009252:	4604      	mov	r4, r0
 8009254:	4608      	mov	r0, r1
 8009256:	602b      	str	r3, [r5, #0]
 8009258:	f7f8 fc78 	bl	8001b4c <_sbrk>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_sbrk_r+0x1a>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_sbrk_r+0x1a>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	20000478 	.word	0x20000478

0800926c <memcpy>:
 800926c:	440a      	add	r2, r1
 800926e:	4291      	cmp	r1, r2
 8009270:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009274:	d100      	bne.n	8009278 <memcpy+0xc>
 8009276:	4770      	bx	lr
 8009278:	b510      	push	{r4, lr}
 800927a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800927e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009282:	4291      	cmp	r1, r2
 8009284:	d1f9      	bne.n	800927a <memcpy+0xe>
 8009286:	bd10      	pop	{r4, pc}

08009288 <nan>:
 8009288:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009290 <nan+0x8>
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	00000000 	.word	0x00000000
 8009294:	7ff80000 	.word	0x7ff80000

08009298 <__assert_func>:
 8009298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800929a:	4614      	mov	r4, r2
 800929c:	461a      	mov	r2, r3
 800929e:	4b09      	ldr	r3, [pc, #36]	@ (80092c4 <__assert_func+0x2c>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4605      	mov	r5, r0
 80092a4:	68d8      	ldr	r0, [r3, #12]
 80092a6:	b954      	cbnz	r4, 80092be <__assert_func+0x26>
 80092a8:	4b07      	ldr	r3, [pc, #28]	@ (80092c8 <__assert_func+0x30>)
 80092aa:	461c      	mov	r4, r3
 80092ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092b0:	9100      	str	r1, [sp, #0]
 80092b2:	462b      	mov	r3, r5
 80092b4:	4905      	ldr	r1, [pc, #20]	@ (80092cc <__assert_func+0x34>)
 80092b6:	f000 fba7 	bl	8009a08 <fiprintf>
 80092ba:	f000 fbb7 	bl	8009a2c <abort>
 80092be:	4b04      	ldr	r3, [pc, #16]	@ (80092d0 <__assert_func+0x38>)
 80092c0:	e7f4      	b.n	80092ac <__assert_func+0x14>
 80092c2:	bf00      	nop
 80092c4:	20000018 	.word	0x20000018
 80092c8:	0800a3b5 	.word	0x0800a3b5
 80092cc:	0800a387 	.word	0x0800a387
 80092d0:	0800a37a 	.word	0x0800a37a

080092d4 <_calloc_r>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	fba1 5402 	umull	r5, r4, r1, r2
 80092da:	b93c      	cbnz	r4, 80092ec <_calloc_r+0x18>
 80092dc:	4629      	mov	r1, r5
 80092de:	f7fe f9c3 	bl	8007668 <_malloc_r>
 80092e2:	4606      	mov	r6, r0
 80092e4:	b928      	cbnz	r0, 80092f2 <_calloc_r+0x1e>
 80092e6:	2600      	movs	r6, #0
 80092e8:	4630      	mov	r0, r6
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	220c      	movs	r2, #12
 80092ee:	6002      	str	r2, [r0, #0]
 80092f0:	e7f9      	b.n	80092e6 <_calloc_r+0x12>
 80092f2:	462a      	mov	r2, r5
 80092f4:	4621      	mov	r1, r4
 80092f6:	f7fd fa6e 	bl	80067d6 <memset>
 80092fa:	e7f5      	b.n	80092e8 <_calloc_r+0x14>

080092fc <rshift>:
 80092fc:	6903      	ldr	r3, [r0, #16]
 80092fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009302:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009306:	ea4f 1261 	mov.w	r2, r1, asr #5
 800930a:	f100 0414 	add.w	r4, r0, #20
 800930e:	dd45      	ble.n	800939c <rshift+0xa0>
 8009310:	f011 011f 	ands.w	r1, r1, #31
 8009314:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009318:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800931c:	d10c      	bne.n	8009338 <rshift+0x3c>
 800931e:	f100 0710 	add.w	r7, r0, #16
 8009322:	4629      	mov	r1, r5
 8009324:	42b1      	cmp	r1, r6
 8009326:	d334      	bcc.n	8009392 <rshift+0x96>
 8009328:	1a9b      	subs	r3, r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	1eea      	subs	r2, r5, #3
 800932e:	4296      	cmp	r6, r2
 8009330:	bf38      	it	cc
 8009332:	2300      	movcc	r3, #0
 8009334:	4423      	add	r3, r4
 8009336:	e015      	b.n	8009364 <rshift+0x68>
 8009338:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800933c:	f1c1 0820 	rsb	r8, r1, #32
 8009340:	40cf      	lsrs	r7, r1
 8009342:	f105 0e04 	add.w	lr, r5, #4
 8009346:	46a1      	mov	r9, r4
 8009348:	4576      	cmp	r6, lr
 800934a:	46f4      	mov	ip, lr
 800934c:	d815      	bhi.n	800937a <rshift+0x7e>
 800934e:	1a9a      	subs	r2, r3, r2
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	3a04      	subs	r2, #4
 8009354:	3501      	adds	r5, #1
 8009356:	42ae      	cmp	r6, r5
 8009358:	bf38      	it	cc
 800935a:	2200      	movcc	r2, #0
 800935c:	18a3      	adds	r3, r4, r2
 800935e:	50a7      	str	r7, [r4, r2]
 8009360:	b107      	cbz	r7, 8009364 <rshift+0x68>
 8009362:	3304      	adds	r3, #4
 8009364:	1b1a      	subs	r2, r3, r4
 8009366:	42a3      	cmp	r3, r4
 8009368:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800936c:	bf08      	it	eq
 800936e:	2300      	moveq	r3, #0
 8009370:	6102      	str	r2, [r0, #16]
 8009372:	bf08      	it	eq
 8009374:	6143      	streq	r3, [r0, #20]
 8009376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800937a:	f8dc c000 	ldr.w	ip, [ip]
 800937e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009382:	ea4c 0707 	orr.w	r7, ip, r7
 8009386:	f849 7b04 	str.w	r7, [r9], #4
 800938a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800938e:	40cf      	lsrs	r7, r1
 8009390:	e7da      	b.n	8009348 <rshift+0x4c>
 8009392:	f851 cb04 	ldr.w	ip, [r1], #4
 8009396:	f847 cf04 	str.w	ip, [r7, #4]!
 800939a:	e7c3      	b.n	8009324 <rshift+0x28>
 800939c:	4623      	mov	r3, r4
 800939e:	e7e1      	b.n	8009364 <rshift+0x68>

080093a0 <__hexdig_fun>:
 80093a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80093a4:	2b09      	cmp	r3, #9
 80093a6:	d802      	bhi.n	80093ae <__hexdig_fun+0xe>
 80093a8:	3820      	subs	r0, #32
 80093aa:	b2c0      	uxtb	r0, r0
 80093ac:	4770      	bx	lr
 80093ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80093b2:	2b05      	cmp	r3, #5
 80093b4:	d801      	bhi.n	80093ba <__hexdig_fun+0x1a>
 80093b6:	3847      	subs	r0, #71	@ 0x47
 80093b8:	e7f7      	b.n	80093aa <__hexdig_fun+0xa>
 80093ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80093be:	2b05      	cmp	r3, #5
 80093c0:	d801      	bhi.n	80093c6 <__hexdig_fun+0x26>
 80093c2:	3827      	subs	r0, #39	@ 0x27
 80093c4:	e7f1      	b.n	80093aa <__hexdig_fun+0xa>
 80093c6:	2000      	movs	r0, #0
 80093c8:	4770      	bx	lr
	...

080093cc <__gethex>:
 80093cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d0:	b085      	sub	sp, #20
 80093d2:	468a      	mov	sl, r1
 80093d4:	9302      	str	r3, [sp, #8]
 80093d6:	680b      	ldr	r3, [r1, #0]
 80093d8:	9001      	str	r0, [sp, #4]
 80093da:	4690      	mov	r8, r2
 80093dc:	1c9c      	adds	r4, r3, #2
 80093de:	46a1      	mov	r9, r4
 80093e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80093e4:	2830      	cmp	r0, #48	@ 0x30
 80093e6:	d0fa      	beq.n	80093de <__gethex+0x12>
 80093e8:	eba9 0303 	sub.w	r3, r9, r3
 80093ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80093f0:	f7ff ffd6 	bl	80093a0 <__hexdig_fun>
 80093f4:	4605      	mov	r5, r0
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d168      	bne.n	80094cc <__gethex+0x100>
 80093fa:	49a0      	ldr	r1, [pc, #640]	@ (800967c <__gethex+0x2b0>)
 80093fc:	2201      	movs	r2, #1
 80093fe:	4648      	mov	r0, r9
 8009400:	f7ff ff12 	bl	8009228 <strncmp>
 8009404:	4607      	mov	r7, r0
 8009406:	2800      	cmp	r0, #0
 8009408:	d167      	bne.n	80094da <__gethex+0x10e>
 800940a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800940e:	4626      	mov	r6, r4
 8009410:	f7ff ffc6 	bl	80093a0 <__hexdig_fun>
 8009414:	2800      	cmp	r0, #0
 8009416:	d062      	beq.n	80094de <__gethex+0x112>
 8009418:	4623      	mov	r3, r4
 800941a:	7818      	ldrb	r0, [r3, #0]
 800941c:	2830      	cmp	r0, #48	@ 0x30
 800941e:	4699      	mov	r9, r3
 8009420:	f103 0301 	add.w	r3, r3, #1
 8009424:	d0f9      	beq.n	800941a <__gethex+0x4e>
 8009426:	f7ff ffbb 	bl	80093a0 <__hexdig_fun>
 800942a:	fab0 f580 	clz	r5, r0
 800942e:	096d      	lsrs	r5, r5, #5
 8009430:	f04f 0b01 	mov.w	fp, #1
 8009434:	464a      	mov	r2, r9
 8009436:	4616      	mov	r6, r2
 8009438:	3201      	adds	r2, #1
 800943a:	7830      	ldrb	r0, [r6, #0]
 800943c:	f7ff ffb0 	bl	80093a0 <__hexdig_fun>
 8009440:	2800      	cmp	r0, #0
 8009442:	d1f8      	bne.n	8009436 <__gethex+0x6a>
 8009444:	498d      	ldr	r1, [pc, #564]	@ (800967c <__gethex+0x2b0>)
 8009446:	2201      	movs	r2, #1
 8009448:	4630      	mov	r0, r6
 800944a:	f7ff feed 	bl	8009228 <strncmp>
 800944e:	2800      	cmp	r0, #0
 8009450:	d13f      	bne.n	80094d2 <__gethex+0x106>
 8009452:	b944      	cbnz	r4, 8009466 <__gethex+0x9a>
 8009454:	1c74      	adds	r4, r6, #1
 8009456:	4622      	mov	r2, r4
 8009458:	4616      	mov	r6, r2
 800945a:	3201      	adds	r2, #1
 800945c:	7830      	ldrb	r0, [r6, #0]
 800945e:	f7ff ff9f 	bl	80093a0 <__hexdig_fun>
 8009462:	2800      	cmp	r0, #0
 8009464:	d1f8      	bne.n	8009458 <__gethex+0x8c>
 8009466:	1ba4      	subs	r4, r4, r6
 8009468:	00a7      	lsls	r7, r4, #2
 800946a:	7833      	ldrb	r3, [r6, #0]
 800946c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009470:	2b50      	cmp	r3, #80	@ 0x50
 8009472:	d13e      	bne.n	80094f2 <__gethex+0x126>
 8009474:	7873      	ldrb	r3, [r6, #1]
 8009476:	2b2b      	cmp	r3, #43	@ 0x2b
 8009478:	d033      	beq.n	80094e2 <__gethex+0x116>
 800947a:	2b2d      	cmp	r3, #45	@ 0x2d
 800947c:	d034      	beq.n	80094e8 <__gethex+0x11c>
 800947e:	1c71      	adds	r1, r6, #1
 8009480:	2400      	movs	r4, #0
 8009482:	7808      	ldrb	r0, [r1, #0]
 8009484:	f7ff ff8c 	bl	80093a0 <__hexdig_fun>
 8009488:	1e43      	subs	r3, r0, #1
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b18      	cmp	r3, #24
 800948e:	d830      	bhi.n	80094f2 <__gethex+0x126>
 8009490:	f1a0 0210 	sub.w	r2, r0, #16
 8009494:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009498:	f7ff ff82 	bl	80093a0 <__hexdig_fun>
 800949c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80094a0:	fa5f fc8c 	uxtb.w	ip, ip
 80094a4:	f1bc 0f18 	cmp.w	ip, #24
 80094a8:	f04f 030a 	mov.w	r3, #10
 80094ac:	d91e      	bls.n	80094ec <__gethex+0x120>
 80094ae:	b104      	cbz	r4, 80094b2 <__gethex+0xe6>
 80094b0:	4252      	negs	r2, r2
 80094b2:	4417      	add	r7, r2
 80094b4:	f8ca 1000 	str.w	r1, [sl]
 80094b8:	b1ed      	cbz	r5, 80094f6 <__gethex+0x12a>
 80094ba:	f1bb 0f00 	cmp.w	fp, #0
 80094be:	bf0c      	ite	eq
 80094c0:	2506      	moveq	r5, #6
 80094c2:	2500      	movne	r5, #0
 80094c4:	4628      	mov	r0, r5
 80094c6:	b005      	add	sp, #20
 80094c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094cc:	2500      	movs	r5, #0
 80094ce:	462c      	mov	r4, r5
 80094d0:	e7b0      	b.n	8009434 <__gethex+0x68>
 80094d2:	2c00      	cmp	r4, #0
 80094d4:	d1c7      	bne.n	8009466 <__gethex+0x9a>
 80094d6:	4627      	mov	r7, r4
 80094d8:	e7c7      	b.n	800946a <__gethex+0x9e>
 80094da:	464e      	mov	r6, r9
 80094dc:	462f      	mov	r7, r5
 80094de:	2501      	movs	r5, #1
 80094e0:	e7c3      	b.n	800946a <__gethex+0x9e>
 80094e2:	2400      	movs	r4, #0
 80094e4:	1cb1      	adds	r1, r6, #2
 80094e6:	e7cc      	b.n	8009482 <__gethex+0xb6>
 80094e8:	2401      	movs	r4, #1
 80094ea:	e7fb      	b.n	80094e4 <__gethex+0x118>
 80094ec:	fb03 0002 	mla	r0, r3, r2, r0
 80094f0:	e7ce      	b.n	8009490 <__gethex+0xc4>
 80094f2:	4631      	mov	r1, r6
 80094f4:	e7de      	b.n	80094b4 <__gethex+0xe8>
 80094f6:	eba6 0309 	sub.w	r3, r6, r9
 80094fa:	3b01      	subs	r3, #1
 80094fc:	4629      	mov	r1, r5
 80094fe:	2b07      	cmp	r3, #7
 8009500:	dc0a      	bgt.n	8009518 <__gethex+0x14c>
 8009502:	9801      	ldr	r0, [sp, #4]
 8009504:	f7fe f93c 	bl	8007780 <_Balloc>
 8009508:	4604      	mov	r4, r0
 800950a:	b940      	cbnz	r0, 800951e <__gethex+0x152>
 800950c:	4b5c      	ldr	r3, [pc, #368]	@ (8009680 <__gethex+0x2b4>)
 800950e:	4602      	mov	r2, r0
 8009510:	21e4      	movs	r1, #228	@ 0xe4
 8009512:	485c      	ldr	r0, [pc, #368]	@ (8009684 <__gethex+0x2b8>)
 8009514:	f7ff fec0 	bl	8009298 <__assert_func>
 8009518:	3101      	adds	r1, #1
 800951a:	105b      	asrs	r3, r3, #1
 800951c:	e7ef      	b.n	80094fe <__gethex+0x132>
 800951e:	f100 0a14 	add.w	sl, r0, #20
 8009522:	2300      	movs	r3, #0
 8009524:	4655      	mov	r5, sl
 8009526:	469b      	mov	fp, r3
 8009528:	45b1      	cmp	r9, r6
 800952a:	d337      	bcc.n	800959c <__gethex+0x1d0>
 800952c:	f845 bb04 	str.w	fp, [r5], #4
 8009530:	eba5 050a 	sub.w	r5, r5, sl
 8009534:	10ad      	asrs	r5, r5, #2
 8009536:	6125      	str	r5, [r4, #16]
 8009538:	4658      	mov	r0, fp
 800953a:	f7fe fa13 	bl	8007964 <__hi0bits>
 800953e:	016d      	lsls	r5, r5, #5
 8009540:	f8d8 6000 	ldr.w	r6, [r8]
 8009544:	1a2d      	subs	r5, r5, r0
 8009546:	42b5      	cmp	r5, r6
 8009548:	dd54      	ble.n	80095f4 <__gethex+0x228>
 800954a:	1bad      	subs	r5, r5, r6
 800954c:	4629      	mov	r1, r5
 800954e:	4620      	mov	r0, r4
 8009550:	f7fe fda7 	bl	80080a2 <__any_on>
 8009554:	4681      	mov	r9, r0
 8009556:	b178      	cbz	r0, 8009578 <__gethex+0x1ac>
 8009558:	1e6b      	subs	r3, r5, #1
 800955a:	1159      	asrs	r1, r3, #5
 800955c:	f003 021f 	and.w	r2, r3, #31
 8009560:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009564:	f04f 0901 	mov.w	r9, #1
 8009568:	fa09 f202 	lsl.w	r2, r9, r2
 800956c:	420a      	tst	r2, r1
 800956e:	d003      	beq.n	8009578 <__gethex+0x1ac>
 8009570:	454b      	cmp	r3, r9
 8009572:	dc36      	bgt.n	80095e2 <__gethex+0x216>
 8009574:	f04f 0902 	mov.w	r9, #2
 8009578:	4629      	mov	r1, r5
 800957a:	4620      	mov	r0, r4
 800957c:	f7ff febe 	bl	80092fc <rshift>
 8009580:	442f      	add	r7, r5
 8009582:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009586:	42bb      	cmp	r3, r7
 8009588:	da42      	bge.n	8009610 <__gethex+0x244>
 800958a:	9801      	ldr	r0, [sp, #4]
 800958c:	4621      	mov	r1, r4
 800958e:	f7fe f937 	bl	8007800 <_Bfree>
 8009592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009594:	2300      	movs	r3, #0
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	25a3      	movs	r5, #163	@ 0xa3
 800959a:	e793      	b.n	80094c4 <__gethex+0xf8>
 800959c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80095a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80095a2:	d012      	beq.n	80095ca <__gethex+0x1fe>
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	d104      	bne.n	80095b2 <__gethex+0x1e6>
 80095a8:	f845 bb04 	str.w	fp, [r5], #4
 80095ac:	f04f 0b00 	mov.w	fp, #0
 80095b0:	465b      	mov	r3, fp
 80095b2:	7830      	ldrb	r0, [r6, #0]
 80095b4:	9303      	str	r3, [sp, #12]
 80095b6:	f7ff fef3 	bl	80093a0 <__hexdig_fun>
 80095ba:	9b03      	ldr	r3, [sp, #12]
 80095bc:	f000 000f 	and.w	r0, r0, #15
 80095c0:	4098      	lsls	r0, r3
 80095c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80095c6:	3304      	adds	r3, #4
 80095c8:	e7ae      	b.n	8009528 <__gethex+0x15c>
 80095ca:	45b1      	cmp	r9, r6
 80095cc:	d8ea      	bhi.n	80095a4 <__gethex+0x1d8>
 80095ce:	492b      	ldr	r1, [pc, #172]	@ (800967c <__gethex+0x2b0>)
 80095d0:	9303      	str	r3, [sp, #12]
 80095d2:	2201      	movs	r2, #1
 80095d4:	4630      	mov	r0, r6
 80095d6:	f7ff fe27 	bl	8009228 <strncmp>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	2800      	cmp	r0, #0
 80095de:	d1e1      	bne.n	80095a4 <__gethex+0x1d8>
 80095e0:	e7a2      	b.n	8009528 <__gethex+0x15c>
 80095e2:	1ea9      	subs	r1, r5, #2
 80095e4:	4620      	mov	r0, r4
 80095e6:	f7fe fd5c 	bl	80080a2 <__any_on>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0c2      	beq.n	8009574 <__gethex+0x1a8>
 80095ee:	f04f 0903 	mov.w	r9, #3
 80095f2:	e7c1      	b.n	8009578 <__gethex+0x1ac>
 80095f4:	da09      	bge.n	800960a <__gethex+0x23e>
 80095f6:	1b75      	subs	r5, r6, r5
 80095f8:	4621      	mov	r1, r4
 80095fa:	9801      	ldr	r0, [sp, #4]
 80095fc:	462a      	mov	r2, r5
 80095fe:	f7fe fb17 	bl	8007c30 <__lshift>
 8009602:	1b7f      	subs	r7, r7, r5
 8009604:	4604      	mov	r4, r0
 8009606:	f100 0a14 	add.w	sl, r0, #20
 800960a:	f04f 0900 	mov.w	r9, #0
 800960e:	e7b8      	b.n	8009582 <__gethex+0x1b6>
 8009610:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009614:	42bd      	cmp	r5, r7
 8009616:	dd6f      	ble.n	80096f8 <__gethex+0x32c>
 8009618:	1bed      	subs	r5, r5, r7
 800961a:	42ae      	cmp	r6, r5
 800961c:	dc34      	bgt.n	8009688 <__gethex+0x2bc>
 800961e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d022      	beq.n	800966c <__gethex+0x2a0>
 8009626:	2b03      	cmp	r3, #3
 8009628:	d024      	beq.n	8009674 <__gethex+0x2a8>
 800962a:	2b01      	cmp	r3, #1
 800962c:	d115      	bne.n	800965a <__gethex+0x28e>
 800962e:	42ae      	cmp	r6, r5
 8009630:	d113      	bne.n	800965a <__gethex+0x28e>
 8009632:	2e01      	cmp	r6, #1
 8009634:	d10b      	bne.n	800964e <__gethex+0x282>
 8009636:	9a02      	ldr	r2, [sp, #8]
 8009638:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800963c:	6013      	str	r3, [r2, #0]
 800963e:	2301      	movs	r3, #1
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	f8ca 3000 	str.w	r3, [sl]
 8009646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009648:	2562      	movs	r5, #98	@ 0x62
 800964a:	601c      	str	r4, [r3, #0]
 800964c:	e73a      	b.n	80094c4 <__gethex+0xf8>
 800964e:	1e71      	subs	r1, r6, #1
 8009650:	4620      	mov	r0, r4
 8009652:	f7fe fd26 	bl	80080a2 <__any_on>
 8009656:	2800      	cmp	r0, #0
 8009658:	d1ed      	bne.n	8009636 <__gethex+0x26a>
 800965a:	9801      	ldr	r0, [sp, #4]
 800965c:	4621      	mov	r1, r4
 800965e:	f7fe f8cf 	bl	8007800 <_Bfree>
 8009662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009664:	2300      	movs	r3, #0
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	2550      	movs	r5, #80	@ 0x50
 800966a:	e72b      	b.n	80094c4 <__gethex+0xf8>
 800966c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f3      	bne.n	800965a <__gethex+0x28e>
 8009672:	e7e0      	b.n	8009636 <__gethex+0x26a>
 8009674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1dd      	bne.n	8009636 <__gethex+0x26a>
 800967a:	e7ee      	b.n	800965a <__gethex+0x28e>
 800967c:	0800a208 	.word	0x0800a208
 8009680:	0800a0a1 	.word	0x0800a0a1
 8009684:	0800a3b6 	.word	0x0800a3b6
 8009688:	1e6f      	subs	r7, r5, #1
 800968a:	f1b9 0f00 	cmp.w	r9, #0
 800968e:	d130      	bne.n	80096f2 <__gethex+0x326>
 8009690:	b127      	cbz	r7, 800969c <__gethex+0x2d0>
 8009692:	4639      	mov	r1, r7
 8009694:	4620      	mov	r0, r4
 8009696:	f7fe fd04 	bl	80080a2 <__any_on>
 800969a:	4681      	mov	r9, r0
 800969c:	117a      	asrs	r2, r7, #5
 800969e:	2301      	movs	r3, #1
 80096a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80096a4:	f007 071f 	and.w	r7, r7, #31
 80096a8:	40bb      	lsls	r3, r7
 80096aa:	4213      	tst	r3, r2
 80096ac:	4629      	mov	r1, r5
 80096ae:	4620      	mov	r0, r4
 80096b0:	bf18      	it	ne
 80096b2:	f049 0902 	orrne.w	r9, r9, #2
 80096b6:	f7ff fe21 	bl	80092fc <rshift>
 80096ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80096be:	1b76      	subs	r6, r6, r5
 80096c0:	2502      	movs	r5, #2
 80096c2:	f1b9 0f00 	cmp.w	r9, #0
 80096c6:	d047      	beq.n	8009758 <__gethex+0x38c>
 80096c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d015      	beq.n	80096fc <__gethex+0x330>
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d017      	beq.n	8009704 <__gethex+0x338>
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d109      	bne.n	80096ec <__gethex+0x320>
 80096d8:	f019 0f02 	tst.w	r9, #2
 80096dc:	d006      	beq.n	80096ec <__gethex+0x320>
 80096de:	f8da 3000 	ldr.w	r3, [sl]
 80096e2:	ea49 0903 	orr.w	r9, r9, r3
 80096e6:	f019 0f01 	tst.w	r9, #1
 80096ea:	d10e      	bne.n	800970a <__gethex+0x33e>
 80096ec:	f045 0510 	orr.w	r5, r5, #16
 80096f0:	e032      	b.n	8009758 <__gethex+0x38c>
 80096f2:	f04f 0901 	mov.w	r9, #1
 80096f6:	e7d1      	b.n	800969c <__gethex+0x2d0>
 80096f8:	2501      	movs	r5, #1
 80096fa:	e7e2      	b.n	80096c2 <__gethex+0x2f6>
 80096fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096fe:	f1c3 0301 	rsb	r3, r3, #1
 8009702:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0f0      	beq.n	80096ec <__gethex+0x320>
 800970a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800970e:	f104 0314 	add.w	r3, r4, #20
 8009712:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009716:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800971a:	f04f 0c00 	mov.w	ip, #0
 800971e:	4618      	mov	r0, r3
 8009720:	f853 2b04 	ldr.w	r2, [r3], #4
 8009724:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009728:	d01b      	beq.n	8009762 <__gethex+0x396>
 800972a:	3201      	adds	r2, #1
 800972c:	6002      	str	r2, [r0, #0]
 800972e:	2d02      	cmp	r5, #2
 8009730:	f104 0314 	add.w	r3, r4, #20
 8009734:	d13c      	bne.n	80097b0 <__gethex+0x3e4>
 8009736:	f8d8 2000 	ldr.w	r2, [r8]
 800973a:	3a01      	subs	r2, #1
 800973c:	42b2      	cmp	r2, r6
 800973e:	d109      	bne.n	8009754 <__gethex+0x388>
 8009740:	1171      	asrs	r1, r6, #5
 8009742:	2201      	movs	r2, #1
 8009744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009748:	f006 061f 	and.w	r6, r6, #31
 800974c:	fa02 f606 	lsl.w	r6, r2, r6
 8009750:	421e      	tst	r6, r3
 8009752:	d13a      	bne.n	80097ca <__gethex+0x3fe>
 8009754:	f045 0520 	orr.w	r5, r5, #32
 8009758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800975a:	601c      	str	r4, [r3, #0]
 800975c:	9b02      	ldr	r3, [sp, #8]
 800975e:	601f      	str	r7, [r3, #0]
 8009760:	e6b0      	b.n	80094c4 <__gethex+0xf8>
 8009762:	4299      	cmp	r1, r3
 8009764:	f843 cc04 	str.w	ip, [r3, #-4]
 8009768:	d8d9      	bhi.n	800971e <__gethex+0x352>
 800976a:	68a3      	ldr	r3, [r4, #8]
 800976c:	459b      	cmp	fp, r3
 800976e:	db17      	blt.n	80097a0 <__gethex+0x3d4>
 8009770:	6861      	ldr	r1, [r4, #4]
 8009772:	9801      	ldr	r0, [sp, #4]
 8009774:	3101      	adds	r1, #1
 8009776:	f7fe f803 	bl	8007780 <_Balloc>
 800977a:	4681      	mov	r9, r0
 800977c:	b918      	cbnz	r0, 8009786 <__gethex+0x3ba>
 800977e:	4b1a      	ldr	r3, [pc, #104]	@ (80097e8 <__gethex+0x41c>)
 8009780:	4602      	mov	r2, r0
 8009782:	2184      	movs	r1, #132	@ 0x84
 8009784:	e6c5      	b.n	8009512 <__gethex+0x146>
 8009786:	6922      	ldr	r2, [r4, #16]
 8009788:	3202      	adds	r2, #2
 800978a:	f104 010c 	add.w	r1, r4, #12
 800978e:	0092      	lsls	r2, r2, #2
 8009790:	300c      	adds	r0, #12
 8009792:	f7ff fd6b 	bl	800926c <memcpy>
 8009796:	4621      	mov	r1, r4
 8009798:	9801      	ldr	r0, [sp, #4]
 800979a:	f7fe f831 	bl	8007800 <_Bfree>
 800979e:	464c      	mov	r4, r9
 80097a0:	6923      	ldr	r3, [r4, #16]
 80097a2:	1c5a      	adds	r2, r3, #1
 80097a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097a8:	6122      	str	r2, [r4, #16]
 80097aa:	2201      	movs	r2, #1
 80097ac:	615a      	str	r2, [r3, #20]
 80097ae:	e7be      	b.n	800972e <__gethex+0x362>
 80097b0:	6922      	ldr	r2, [r4, #16]
 80097b2:	455a      	cmp	r2, fp
 80097b4:	dd0b      	ble.n	80097ce <__gethex+0x402>
 80097b6:	2101      	movs	r1, #1
 80097b8:	4620      	mov	r0, r4
 80097ba:	f7ff fd9f 	bl	80092fc <rshift>
 80097be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097c2:	3701      	adds	r7, #1
 80097c4:	42bb      	cmp	r3, r7
 80097c6:	f6ff aee0 	blt.w	800958a <__gethex+0x1be>
 80097ca:	2501      	movs	r5, #1
 80097cc:	e7c2      	b.n	8009754 <__gethex+0x388>
 80097ce:	f016 061f 	ands.w	r6, r6, #31
 80097d2:	d0fa      	beq.n	80097ca <__gethex+0x3fe>
 80097d4:	4453      	add	r3, sl
 80097d6:	f1c6 0620 	rsb	r6, r6, #32
 80097da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80097de:	f7fe f8c1 	bl	8007964 <__hi0bits>
 80097e2:	42b0      	cmp	r0, r6
 80097e4:	dbe7      	blt.n	80097b6 <__gethex+0x3ea>
 80097e6:	e7f0      	b.n	80097ca <__gethex+0x3fe>
 80097e8:	0800a0a1 	.word	0x0800a0a1

080097ec <L_shift>:
 80097ec:	f1c2 0208 	rsb	r2, r2, #8
 80097f0:	0092      	lsls	r2, r2, #2
 80097f2:	b570      	push	{r4, r5, r6, lr}
 80097f4:	f1c2 0620 	rsb	r6, r2, #32
 80097f8:	6843      	ldr	r3, [r0, #4]
 80097fa:	6804      	ldr	r4, [r0, #0]
 80097fc:	fa03 f506 	lsl.w	r5, r3, r6
 8009800:	432c      	orrs	r4, r5
 8009802:	40d3      	lsrs	r3, r2
 8009804:	6004      	str	r4, [r0, #0]
 8009806:	f840 3f04 	str.w	r3, [r0, #4]!
 800980a:	4288      	cmp	r0, r1
 800980c:	d3f4      	bcc.n	80097f8 <L_shift+0xc>
 800980e:	bd70      	pop	{r4, r5, r6, pc}

08009810 <__match>:
 8009810:	b530      	push	{r4, r5, lr}
 8009812:	6803      	ldr	r3, [r0, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800981a:	b914      	cbnz	r4, 8009822 <__match+0x12>
 800981c:	6003      	str	r3, [r0, #0]
 800981e:	2001      	movs	r0, #1
 8009820:	bd30      	pop	{r4, r5, pc}
 8009822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009826:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800982a:	2d19      	cmp	r5, #25
 800982c:	bf98      	it	ls
 800982e:	3220      	addls	r2, #32
 8009830:	42a2      	cmp	r2, r4
 8009832:	d0f0      	beq.n	8009816 <__match+0x6>
 8009834:	2000      	movs	r0, #0
 8009836:	e7f3      	b.n	8009820 <__match+0x10>

08009838 <__hexnan>:
 8009838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	680b      	ldr	r3, [r1, #0]
 800983e:	6801      	ldr	r1, [r0, #0]
 8009840:	115e      	asrs	r6, r3, #5
 8009842:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009846:	f013 031f 	ands.w	r3, r3, #31
 800984a:	b087      	sub	sp, #28
 800984c:	bf18      	it	ne
 800984e:	3604      	addne	r6, #4
 8009850:	2500      	movs	r5, #0
 8009852:	1f37      	subs	r7, r6, #4
 8009854:	4682      	mov	sl, r0
 8009856:	4690      	mov	r8, r2
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	f846 5c04 	str.w	r5, [r6, #-4]
 800985e:	46b9      	mov	r9, r7
 8009860:	463c      	mov	r4, r7
 8009862:	9502      	str	r5, [sp, #8]
 8009864:	46ab      	mov	fp, r5
 8009866:	784a      	ldrb	r2, [r1, #1]
 8009868:	1c4b      	adds	r3, r1, #1
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	b342      	cbz	r2, 80098c0 <__hexnan+0x88>
 800986e:	4610      	mov	r0, r2
 8009870:	9105      	str	r1, [sp, #20]
 8009872:	9204      	str	r2, [sp, #16]
 8009874:	f7ff fd94 	bl	80093a0 <__hexdig_fun>
 8009878:	2800      	cmp	r0, #0
 800987a:	d151      	bne.n	8009920 <__hexnan+0xe8>
 800987c:	9a04      	ldr	r2, [sp, #16]
 800987e:	9905      	ldr	r1, [sp, #20]
 8009880:	2a20      	cmp	r2, #32
 8009882:	d818      	bhi.n	80098b6 <__hexnan+0x7e>
 8009884:	9b02      	ldr	r3, [sp, #8]
 8009886:	459b      	cmp	fp, r3
 8009888:	dd13      	ble.n	80098b2 <__hexnan+0x7a>
 800988a:	454c      	cmp	r4, r9
 800988c:	d206      	bcs.n	800989c <__hexnan+0x64>
 800988e:	2d07      	cmp	r5, #7
 8009890:	dc04      	bgt.n	800989c <__hexnan+0x64>
 8009892:	462a      	mov	r2, r5
 8009894:	4649      	mov	r1, r9
 8009896:	4620      	mov	r0, r4
 8009898:	f7ff ffa8 	bl	80097ec <L_shift>
 800989c:	4544      	cmp	r4, r8
 800989e:	d952      	bls.n	8009946 <__hexnan+0x10e>
 80098a0:	2300      	movs	r3, #0
 80098a2:	f1a4 0904 	sub.w	r9, r4, #4
 80098a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80098aa:	f8cd b008 	str.w	fp, [sp, #8]
 80098ae:	464c      	mov	r4, r9
 80098b0:	461d      	mov	r5, r3
 80098b2:	9903      	ldr	r1, [sp, #12]
 80098b4:	e7d7      	b.n	8009866 <__hexnan+0x2e>
 80098b6:	2a29      	cmp	r2, #41	@ 0x29
 80098b8:	d157      	bne.n	800996a <__hexnan+0x132>
 80098ba:	3102      	adds	r1, #2
 80098bc:	f8ca 1000 	str.w	r1, [sl]
 80098c0:	f1bb 0f00 	cmp.w	fp, #0
 80098c4:	d051      	beq.n	800996a <__hexnan+0x132>
 80098c6:	454c      	cmp	r4, r9
 80098c8:	d206      	bcs.n	80098d8 <__hexnan+0xa0>
 80098ca:	2d07      	cmp	r5, #7
 80098cc:	dc04      	bgt.n	80098d8 <__hexnan+0xa0>
 80098ce:	462a      	mov	r2, r5
 80098d0:	4649      	mov	r1, r9
 80098d2:	4620      	mov	r0, r4
 80098d4:	f7ff ff8a 	bl	80097ec <L_shift>
 80098d8:	4544      	cmp	r4, r8
 80098da:	d936      	bls.n	800994a <__hexnan+0x112>
 80098dc:	f1a8 0204 	sub.w	r2, r8, #4
 80098e0:	4623      	mov	r3, r4
 80098e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80098e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80098ea:	429f      	cmp	r7, r3
 80098ec:	d2f9      	bcs.n	80098e2 <__hexnan+0xaa>
 80098ee:	1b3b      	subs	r3, r7, r4
 80098f0:	f023 0303 	bic.w	r3, r3, #3
 80098f4:	3304      	adds	r3, #4
 80098f6:	3401      	adds	r4, #1
 80098f8:	3e03      	subs	r6, #3
 80098fa:	42b4      	cmp	r4, r6
 80098fc:	bf88      	it	hi
 80098fe:	2304      	movhi	r3, #4
 8009900:	4443      	add	r3, r8
 8009902:	2200      	movs	r2, #0
 8009904:	f843 2b04 	str.w	r2, [r3], #4
 8009908:	429f      	cmp	r7, r3
 800990a:	d2fb      	bcs.n	8009904 <__hexnan+0xcc>
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	b91b      	cbnz	r3, 8009918 <__hexnan+0xe0>
 8009910:	4547      	cmp	r7, r8
 8009912:	d128      	bne.n	8009966 <__hexnan+0x12e>
 8009914:	2301      	movs	r3, #1
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	2005      	movs	r0, #5
 800991a:	b007      	add	sp, #28
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	3501      	adds	r5, #1
 8009922:	2d08      	cmp	r5, #8
 8009924:	f10b 0b01 	add.w	fp, fp, #1
 8009928:	dd06      	ble.n	8009938 <__hexnan+0x100>
 800992a:	4544      	cmp	r4, r8
 800992c:	d9c1      	bls.n	80098b2 <__hexnan+0x7a>
 800992e:	2300      	movs	r3, #0
 8009930:	f844 3c04 	str.w	r3, [r4, #-4]
 8009934:	2501      	movs	r5, #1
 8009936:	3c04      	subs	r4, #4
 8009938:	6822      	ldr	r2, [r4, #0]
 800993a:	f000 000f 	and.w	r0, r0, #15
 800993e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009942:	6020      	str	r0, [r4, #0]
 8009944:	e7b5      	b.n	80098b2 <__hexnan+0x7a>
 8009946:	2508      	movs	r5, #8
 8009948:	e7b3      	b.n	80098b2 <__hexnan+0x7a>
 800994a:	9b01      	ldr	r3, [sp, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d0dd      	beq.n	800990c <__hexnan+0xd4>
 8009950:	f1c3 0320 	rsb	r3, r3, #32
 8009954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009958:	40da      	lsrs	r2, r3
 800995a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800995e:	4013      	ands	r3, r2
 8009960:	f846 3c04 	str.w	r3, [r6, #-4]
 8009964:	e7d2      	b.n	800990c <__hexnan+0xd4>
 8009966:	3f04      	subs	r7, #4
 8009968:	e7d0      	b.n	800990c <__hexnan+0xd4>
 800996a:	2004      	movs	r0, #4
 800996c:	e7d5      	b.n	800991a <__hexnan+0xe2>

0800996e <__ascii_mbtowc>:
 800996e:	b082      	sub	sp, #8
 8009970:	b901      	cbnz	r1, 8009974 <__ascii_mbtowc+0x6>
 8009972:	a901      	add	r1, sp, #4
 8009974:	b142      	cbz	r2, 8009988 <__ascii_mbtowc+0x1a>
 8009976:	b14b      	cbz	r3, 800998c <__ascii_mbtowc+0x1e>
 8009978:	7813      	ldrb	r3, [r2, #0]
 800997a:	600b      	str	r3, [r1, #0]
 800997c:	7812      	ldrb	r2, [r2, #0]
 800997e:	1e10      	subs	r0, r2, #0
 8009980:	bf18      	it	ne
 8009982:	2001      	movne	r0, #1
 8009984:	b002      	add	sp, #8
 8009986:	4770      	bx	lr
 8009988:	4610      	mov	r0, r2
 800998a:	e7fb      	b.n	8009984 <__ascii_mbtowc+0x16>
 800998c:	f06f 0001 	mvn.w	r0, #1
 8009990:	e7f8      	b.n	8009984 <__ascii_mbtowc+0x16>

08009992 <_realloc_r>:
 8009992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	4680      	mov	r8, r0
 8009998:	4615      	mov	r5, r2
 800999a:	460c      	mov	r4, r1
 800999c:	b921      	cbnz	r1, 80099a8 <_realloc_r+0x16>
 800999e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099a2:	4611      	mov	r1, r2
 80099a4:	f7fd be60 	b.w	8007668 <_malloc_r>
 80099a8:	b92a      	cbnz	r2, 80099b6 <_realloc_r+0x24>
 80099aa:	f7fd fde9 	bl	8007580 <_free_r>
 80099ae:	2400      	movs	r4, #0
 80099b0:	4620      	mov	r0, r4
 80099b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b6:	f000 f840 	bl	8009a3a <_malloc_usable_size_r>
 80099ba:	4285      	cmp	r5, r0
 80099bc:	4606      	mov	r6, r0
 80099be:	d802      	bhi.n	80099c6 <_realloc_r+0x34>
 80099c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80099c4:	d8f4      	bhi.n	80099b0 <_realloc_r+0x1e>
 80099c6:	4629      	mov	r1, r5
 80099c8:	4640      	mov	r0, r8
 80099ca:	f7fd fe4d 	bl	8007668 <_malloc_r>
 80099ce:	4607      	mov	r7, r0
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d0ec      	beq.n	80099ae <_realloc_r+0x1c>
 80099d4:	42b5      	cmp	r5, r6
 80099d6:	462a      	mov	r2, r5
 80099d8:	4621      	mov	r1, r4
 80099da:	bf28      	it	cs
 80099dc:	4632      	movcs	r2, r6
 80099de:	f7ff fc45 	bl	800926c <memcpy>
 80099e2:	4621      	mov	r1, r4
 80099e4:	4640      	mov	r0, r8
 80099e6:	f7fd fdcb 	bl	8007580 <_free_r>
 80099ea:	463c      	mov	r4, r7
 80099ec:	e7e0      	b.n	80099b0 <_realloc_r+0x1e>

080099ee <__ascii_wctomb>:
 80099ee:	4603      	mov	r3, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	b141      	cbz	r1, 8009a06 <__ascii_wctomb+0x18>
 80099f4:	2aff      	cmp	r2, #255	@ 0xff
 80099f6:	d904      	bls.n	8009a02 <__ascii_wctomb+0x14>
 80099f8:	228a      	movs	r2, #138	@ 0x8a
 80099fa:	601a      	str	r2, [r3, #0]
 80099fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a00:	4770      	bx	lr
 8009a02:	700a      	strb	r2, [r1, #0]
 8009a04:	2001      	movs	r0, #1
 8009a06:	4770      	bx	lr

08009a08 <fiprintf>:
 8009a08:	b40e      	push	{r1, r2, r3}
 8009a0a:	b503      	push	{r0, r1, lr}
 8009a0c:	4601      	mov	r1, r0
 8009a0e:	ab03      	add	r3, sp, #12
 8009a10:	4805      	ldr	r0, [pc, #20]	@ (8009a28 <fiprintf+0x20>)
 8009a12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a16:	6800      	ldr	r0, [r0, #0]
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	f000 f83f 	bl	8009a9c <_vfiprintf_r>
 8009a1e:	b002      	add	sp, #8
 8009a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a24:	b003      	add	sp, #12
 8009a26:	4770      	bx	lr
 8009a28:	20000018 	.word	0x20000018

08009a2c <abort>:
 8009a2c:	b508      	push	{r3, lr}
 8009a2e:	2006      	movs	r0, #6
 8009a30:	f000 fa08 	bl	8009e44 <raise>
 8009a34:	2001      	movs	r0, #1
 8009a36:	f7f8 f811 	bl	8001a5c <_exit>

08009a3a <_malloc_usable_size_r>:
 8009a3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a3e:	1f18      	subs	r0, r3, #4
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	bfbc      	itt	lt
 8009a44:	580b      	ldrlt	r3, [r1, r0]
 8009a46:	18c0      	addlt	r0, r0, r3
 8009a48:	4770      	bx	lr

08009a4a <__sfputc_r>:
 8009a4a:	6893      	ldr	r3, [r2, #8]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	b410      	push	{r4}
 8009a52:	6093      	str	r3, [r2, #8]
 8009a54:	da08      	bge.n	8009a68 <__sfputc_r+0x1e>
 8009a56:	6994      	ldr	r4, [r2, #24]
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	db01      	blt.n	8009a60 <__sfputc_r+0x16>
 8009a5c:	290a      	cmp	r1, #10
 8009a5e:	d103      	bne.n	8009a68 <__sfputc_r+0x1e>
 8009a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a64:	f000 b932 	b.w	8009ccc <__swbuf_r>
 8009a68:	6813      	ldr	r3, [r2, #0]
 8009a6a:	1c58      	adds	r0, r3, #1
 8009a6c:	6010      	str	r0, [r2, #0]
 8009a6e:	7019      	strb	r1, [r3, #0]
 8009a70:	4608      	mov	r0, r1
 8009a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <__sfputs_r>:
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	4606      	mov	r6, r0
 8009a7c:	460f      	mov	r7, r1
 8009a7e:	4614      	mov	r4, r2
 8009a80:	18d5      	adds	r5, r2, r3
 8009a82:	42ac      	cmp	r4, r5
 8009a84:	d101      	bne.n	8009a8a <__sfputs_r+0x12>
 8009a86:	2000      	movs	r0, #0
 8009a88:	e007      	b.n	8009a9a <__sfputs_r+0x22>
 8009a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a8e:	463a      	mov	r2, r7
 8009a90:	4630      	mov	r0, r6
 8009a92:	f7ff ffda 	bl	8009a4a <__sfputc_r>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	d1f3      	bne.n	8009a82 <__sfputs_r+0xa>
 8009a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a9c <_vfiprintf_r>:
 8009a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	b09d      	sub	sp, #116	@ 0x74
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	4698      	mov	r8, r3
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	b118      	cbz	r0, 8009ab4 <_vfiprintf_r+0x18>
 8009aac:	6a03      	ldr	r3, [r0, #32]
 8009aae:	b90b      	cbnz	r3, 8009ab4 <_vfiprintf_r+0x18>
 8009ab0:	f7fc fdf8 	bl	80066a4 <__sinit>
 8009ab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ab6:	07d9      	lsls	r1, r3, #31
 8009ab8:	d405      	bmi.n	8009ac6 <_vfiprintf_r+0x2a>
 8009aba:	89ab      	ldrh	r3, [r5, #12]
 8009abc:	059a      	lsls	r2, r3, #22
 8009abe:	d402      	bmi.n	8009ac6 <_vfiprintf_r+0x2a>
 8009ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ac2:	f7fc ff06 	bl	80068d2 <__retarget_lock_acquire_recursive>
 8009ac6:	89ab      	ldrh	r3, [r5, #12]
 8009ac8:	071b      	lsls	r3, r3, #28
 8009aca:	d501      	bpl.n	8009ad0 <_vfiprintf_r+0x34>
 8009acc:	692b      	ldr	r3, [r5, #16]
 8009ace:	b99b      	cbnz	r3, 8009af8 <_vfiprintf_r+0x5c>
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	f000 f938 	bl	8009d48 <__swsetup_r>
 8009ad8:	b170      	cbz	r0, 8009af8 <_vfiprintf_r+0x5c>
 8009ada:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009adc:	07dc      	lsls	r4, r3, #31
 8009ade:	d504      	bpl.n	8009aea <_vfiprintf_r+0x4e>
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ae4:	b01d      	add	sp, #116	@ 0x74
 8009ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aea:	89ab      	ldrh	r3, [r5, #12]
 8009aec:	0598      	lsls	r0, r3, #22
 8009aee:	d4f7      	bmi.n	8009ae0 <_vfiprintf_r+0x44>
 8009af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009af2:	f7fc feef 	bl	80068d4 <__retarget_lock_release_recursive>
 8009af6:	e7f3      	b.n	8009ae0 <_vfiprintf_r+0x44>
 8009af8:	2300      	movs	r3, #0
 8009afa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009afc:	2320      	movs	r3, #32
 8009afe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b06:	2330      	movs	r3, #48	@ 0x30
 8009b08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009cb8 <_vfiprintf_r+0x21c>
 8009b0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b10:	f04f 0901 	mov.w	r9, #1
 8009b14:	4623      	mov	r3, r4
 8009b16:	469a      	mov	sl, r3
 8009b18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b1c:	b10a      	cbz	r2, 8009b22 <_vfiprintf_r+0x86>
 8009b1e:	2a25      	cmp	r2, #37	@ 0x25
 8009b20:	d1f9      	bne.n	8009b16 <_vfiprintf_r+0x7a>
 8009b22:	ebba 0b04 	subs.w	fp, sl, r4
 8009b26:	d00b      	beq.n	8009b40 <_vfiprintf_r+0xa4>
 8009b28:	465b      	mov	r3, fp
 8009b2a:	4622      	mov	r2, r4
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7ff ffa2 	bl	8009a78 <__sfputs_r>
 8009b34:	3001      	adds	r0, #1
 8009b36:	f000 80a7 	beq.w	8009c88 <_vfiprintf_r+0x1ec>
 8009b3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b3c:	445a      	add	r2, fp
 8009b3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b40:	f89a 3000 	ldrb.w	r3, [sl]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 809f 	beq.w	8009c88 <_vfiprintf_r+0x1ec>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b54:	f10a 0a01 	add.w	sl, sl, #1
 8009b58:	9304      	str	r3, [sp, #16]
 8009b5a:	9307      	str	r3, [sp, #28]
 8009b5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b60:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b62:	4654      	mov	r4, sl
 8009b64:	2205      	movs	r2, #5
 8009b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b6a:	4853      	ldr	r0, [pc, #332]	@ (8009cb8 <_vfiprintf_r+0x21c>)
 8009b6c:	f7f6 fb58 	bl	8000220 <memchr>
 8009b70:	9a04      	ldr	r2, [sp, #16]
 8009b72:	b9d8      	cbnz	r0, 8009bac <_vfiprintf_r+0x110>
 8009b74:	06d1      	lsls	r1, r2, #27
 8009b76:	bf44      	itt	mi
 8009b78:	2320      	movmi	r3, #32
 8009b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b7e:	0713      	lsls	r3, r2, #28
 8009b80:	bf44      	itt	mi
 8009b82:	232b      	movmi	r3, #43	@ 0x2b
 8009b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b88:	f89a 3000 	ldrb.w	r3, [sl]
 8009b8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b8e:	d015      	beq.n	8009bbc <_vfiprintf_r+0x120>
 8009b90:	9a07      	ldr	r2, [sp, #28]
 8009b92:	4654      	mov	r4, sl
 8009b94:	2000      	movs	r0, #0
 8009b96:	f04f 0c0a 	mov.w	ip, #10
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ba0:	3b30      	subs	r3, #48	@ 0x30
 8009ba2:	2b09      	cmp	r3, #9
 8009ba4:	d94b      	bls.n	8009c3e <_vfiprintf_r+0x1a2>
 8009ba6:	b1b0      	cbz	r0, 8009bd6 <_vfiprintf_r+0x13a>
 8009ba8:	9207      	str	r2, [sp, #28]
 8009baa:	e014      	b.n	8009bd6 <_vfiprintf_r+0x13a>
 8009bac:	eba0 0308 	sub.w	r3, r0, r8
 8009bb0:	fa09 f303 	lsl.w	r3, r9, r3
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	9304      	str	r3, [sp, #16]
 8009bb8:	46a2      	mov	sl, r4
 8009bba:	e7d2      	b.n	8009b62 <_vfiprintf_r+0xc6>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	1d19      	adds	r1, r3, #4
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	9103      	str	r1, [sp, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	bfbb      	ittet	lt
 8009bc8:	425b      	neglt	r3, r3
 8009bca:	f042 0202 	orrlt.w	r2, r2, #2
 8009bce:	9307      	strge	r3, [sp, #28]
 8009bd0:	9307      	strlt	r3, [sp, #28]
 8009bd2:	bfb8      	it	lt
 8009bd4:	9204      	strlt	r2, [sp, #16]
 8009bd6:	7823      	ldrb	r3, [r4, #0]
 8009bd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bda:	d10a      	bne.n	8009bf2 <_vfiprintf_r+0x156>
 8009bdc:	7863      	ldrb	r3, [r4, #1]
 8009bde:	2b2a      	cmp	r3, #42	@ 0x2a
 8009be0:	d132      	bne.n	8009c48 <_vfiprintf_r+0x1ac>
 8009be2:	9b03      	ldr	r3, [sp, #12]
 8009be4:	1d1a      	adds	r2, r3, #4
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	9203      	str	r2, [sp, #12]
 8009bea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bee:	3402      	adds	r4, #2
 8009bf0:	9305      	str	r3, [sp, #20]
 8009bf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cc8 <_vfiprintf_r+0x22c>
 8009bf6:	7821      	ldrb	r1, [r4, #0]
 8009bf8:	2203      	movs	r2, #3
 8009bfa:	4650      	mov	r0, sl
 8009bfc:	f7f6 fb10 	bl	8000220 <memchr>
 8009c00:	b138      	cbz	r0, 8009c12 <_vfiprintf_r+0x176>
 8009c02:	9b04      	ldr	r3, [sp, #16]
 8009c04:	eba0 000a 	sub.w	r0, r0, sl
 8009c08:	2240      	movs	r2, #64	@ 0x40
 8009c0a:	4082      	lsls	r2, r0
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	3401      	adds	r4, #1
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c16:	4829      	ldr	r0, [pc, #164]	@ (8009cbc <_vfiprintf_r+0x220>)
 8009c18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c1c:	2206      	movs	r2, #6
 8009c1e:	f7f6 faff 	bl	8000220 <memchr>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d03f      	beq.n	8009ca6 <_vfiprintf_r+0x20a>
 8009c26:	4b26      	ldr	r3, [pc, #152]	@ (8009cc0 <_vfiprintf_r+0x224>)
 8009c28:	bb1b      	cbnz	r3, 8009c72 <_vfiprintf_r+0x1d6>
 8009c2a:	9b03      	ldr	r3, [sp, #12]
 8009c2c:	3307      	adds	r3, #7
 8009c2e:	f023 0307 	bic.w	r3, r3, #7
 8009c32:	3308      	adds	r3, #8
 8009c34:	9303      	str	r3, [sp, #12]
 8009c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c38:	443b      	add	r3, r7
 8009c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c3c:	e76a      	b.n	8009b14 <_vfiprintf_r+0x78>
 8009c3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c42:	460c      	mov	r4, r1
 8009c44:	2001      	movs	r0, #1
 8009c46:	e7a8      	b.n	8009b9a <_vfiprintf_r+0xfe>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	3401      	adds	r4, #1
 8009c4c:	9305      	str	r3, [sp, #20]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	f04f 0c0a 	mov.w	ip, #10
 8009c54:	4620      	mov	r0, r4
 8009c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c5a:	3a30      	subs	r2, #48	@ 0x30
 8009c5c:	2a09      	cmp	r2, #9
 8009c5e:	d903      	bls.n	8009c68 <_vfiprintf_r+0x1cc>
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0c6      	beq.n	8009bf2 <_vfiprintf_r+0x156>
 8009c64:	9105      	str	r1, [sp, #20]
 8009c66:	e7c4      	b.n	8009bf2 <_vfiprintf_r+0x156>
 8009c68:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e7f0      	b.n	8009c54 <_vfiprintf_r+0x1b8>
 8009c72:	ab03      	add	r3, sp, #12
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	462a      	mov	r2, r5
 8009c78:	4b12      	ldr	r3, [pc, #72]	@ (8009cc4 <_vfiprintf_r+0x228>)
 8009c7a:	a904      	add	r1, sp, #16
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	f7fb feb9 	bl	80059f4 <_printf_float>
 8009c82:	4607      	mov	r7, r0
 8009c84:	1c78      	adds	r0, r7, #1
 8009c86:	d1d6      	bne.n	8009c36 <_vfiprintf_r+0x19a>
 8009c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c8a:	07d9      	lsls	r1, r3, #31
 8009c8c:	d405      	bmi.n	8009c9a <_vfiprintf_r+0x1fe>
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	059a      	lsls	r2, r3, #22
 8009c92:	d402      	bmi.n	8009c9a <_vfiprintf_r+0x1fe>
 8009c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c96:	f7fc fe1d 	bl	80068d4 <__retarget_lock_release_recursive>
 8009c9a:	89ab      	ldrh	r3, [r5, #12]
 8009c9c:	065b      	lsls	r3, r3, #25
 8009c9e:	f53f af1f 	bmi.w	8009ae0 <_vfiprintf_r+0x44>
 8009ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ca4:	e71e      	b.n	8009ae4 <_vfiprintf_r+0x48>
 8009ca6:	ab03      	add	r3, sp, #12
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	462a      	mov	r2, r5
 8009cac:	4b05      	ldr	r3, [pc, #20]	@ (8009cc4 <_vfiprintf_r+0x228>)
 8009cae:	a904      	add	r1, sp, #16
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f7fc f937 	bl	8005f24 <_printf_i>
 8009cb6:	e7e4      	b.n	8009c82 <_vfiprintf_r+0x1e6>
 8009cb8:	0800a361 	.word	0x0800a361
 8009cbc:	0800a36b 	.word	0x0800a36b
 8009cc0:	080059f5 	.word	0x080059f5
 8009cc4:	08009a79 	.word	0x08009a79
 8009cc8:	0800a367 	.word	0x0800a367

08009ccc <__swbuf_r>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	460e      	mov	r6, r1
 8009cd0:	4614      	mov	r4, r2
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	b118      	cbz	r0, 8009cde <__swbuf_r+0x12>
 8009cd6:	6a03      	ldr	r3, [r0, #32]
 8009cd8:	b90b      	cbnz	r3, 8009cde <__swbuf_r+0x12>
 8009cda:	f7fc fce3 	bl	80066a4 <__sinit>
 8009cde:	69a3      	ldr	r3, [r4, #24]
 8009ce0:	60a3      	str	r3, [r4, #8]
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	071a      	lsls	r2, r3, #28
 8009ce6:	d501      	bpl.n	8009cec <__swbuf_r+0x20>
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	b943      	cbnz	r3, 8009cfe <__swbuf_r+0x32>
 8009cec:	4621      	mov	r1, r4
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f000 f82a 	bl	8009d48 <__swsetup_r>
 8009cf4:	b118      	cbz	r0, 8009cfe <__swbuf_r+0x32>
 8009cf6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	6922      	ldr	r2, [r4, #16]
 8009d02:	1a98      	subs	r0, r3, r2
 8009d04:	6963      	ldr	r3, [r4, #20]
 8009d06:	b2f6      	uxtb	r6, r6
 8009d08:	4283      	cmp	r3, r0
 8009d0a:	4637      	mov	r7, r6
 8009d0c:	dc05      	bgt.n	8009d1a <__swbuf_r+0x4e>
 8009d0e:	4621      	mov	r1, r4
 8009d10:	4628      	mov	r0, r5
 8009d12:	f7ff fa47 	bl	80091a4 <_fflush_r>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d1ed      	bne.n	8009cf6 <__swbuf_r+0x2a>
 8009d1a:	68a3      	ldr	r3, [r4, #8]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	60a3      	str	r3, [r4, #8]
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	6022      	str	r2, [r4, #0]
 8009d26:	701e      	strb	r6, [r3, #0]
 8009d28:	6962      	ldr	r2, [r4, #20]
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d004      	beq.n	8009d3a <__swbuf_r+0x6e>
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	07db      	lsls	r3, r3, #31
 8009d34:	d5e1      	bpl.n	8009cfa <__swbuf_r+0x2e>
 8009d36:	2e0a      	cmp	r6, #10
 8009d38:	d1df      	bne.n	8009cfa <__swbuf_r+0x2e>
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	f7ff fa31 	bl	80091a4 <_fflush_r>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d0d9      	beq.n	8009cfa <__swbuf_r+0x2e>
 8009d46:	e7d6      	b.n	8009cf6 <__swbuf_r+0x2a>

08009d48 <__swsetup_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4b29      	ldr	r3, [pc, #164]	@ (8009df0 <__swsetup_r+0xa8>)
 8009d4c:	4605      	mov	r5, r0
 8009d4e:	6818      	ldr	r0, [r3, #0]
 8009d50:	460c      	mov	r4, r1
 8009d52:	b118      	cbz	r0, 8009d5c <__swsetup_r+0x14>
 8009d54:	6a03      	ldr	r3, [r0, #32]
 8009d56:	b90b      	cbnz	r3, 8009d5c <__swsetup_r+0x14>
 8009d58:	f7fc fca4 	bl	80066a4 <__sinit>
 8009d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d60:	0719      	lsls	r1, r3, #28
 8009d62:	d422      	bmi.n	8009daa <__swsetup_r+0x62>
 8009d64:	06da      	lsls	r2, r3, #27
 8009d66:	d407      	bmi.n	8009d78 <__swsetup_r+0x30>
 8009d68:	2209      	movs	r2, #9
 8009d6a:	602a      	str	r2, [r5, #0]
 8009d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d76:	e033      	b.n	8009de0 <__swsetup_r+0x98>
 8009d78:	0758      	lsls	r0, r3, #29
 8009d7a:	d512      	bpl.n	8009da2 <__swsetup_r+0x5a>
 8009d7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d7e:	b141      	cbz	r1, 8009d92 <__swsetup_r+0x4a>
 8009d80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d84:	4299      	cmp	r1, r3
 8009d86:	d002      	beq.n	8009d8e <__swsetup_r+0x46>
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f7fd fbf9 	bl	8007580 <_free_r>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d92:	89a3      	ldrh	r3, [r4, #12]
 8009d94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d98:	81a3      	strh	r3, [r4, #12]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6063      	str	r3, [r4, #4]
 8009d9e:	6923      	ldr	r3, [r4, #16]
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	f043 0308 	orr.w	r3, r3, #8
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	b94b      	cbnz	r3, 8009dc2 <__swsetup_r+0x7a>
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009db8:	d003      	beq.n	8009dc2 <__swsetup_r+0x7a>
 8009dba:	4621      	mov	r1, r4
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	f000 f883 	bl	8009ec8 <__smakebuf_r>
 8009dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc6:	f013 0201 	ands.w	r2, r3, #1
 8009dca:	d00a      	beq.n	8009de2 <__swsetup_r+0x9a>
 8009dcc:	2200      	movs	r2, #0
 8009dce:	60a2      	str	r2, [r4, #8]
 8009dd0:	6962      	ldr	r2, [r4, #20]
 8009dd2:	4252      	negs	r2, r2
 8009dd4:	61a2      	str	r2, [r4, #24]
 8009dd6:	6922      	ldr	r2, [r4, #16]
 8009dd8:	b942      	cbnz	r2, 8009dec <__swsetup_r+0xa4>
 8009dda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009dde:	d1c5      	bne.n	8009d6c <__swsetup_r+0x24>
 8009de0:	bd38      	pop	{r3, r4, r5, pc}
 8009de2:	0799      	lsls	r1, r3, #30
 8009de4:	bf58      	it	pl
 8009de6:	6962      	ldrpl	r2, [r4, #20]
 8009de8:	60a2      	str	r2, [r4, #8]
 8009dea:	e7f4      	b.n	8009dd6 <__swsetup_r+0x8e>
 8009dec:	2000      	movs	r0, #0
 8009dee:	e7f7      	b.n	8009de0 <__swsetup_r+0x98>
 8009df0:	20000018 	.word	0x20000018

08009df4 <_raise_r>:
 8009df4:	291f      	cmp	r1, #31
 8009df6:	b538      	push	{r3, r4, r5, lr}
 8009df8:	4605      	mov	r5, r0
 8009dfa:	460c      	mov	r4, r1
 8009dfc:	d904      	bls.n	8009e08 <_raise_r+0x14>
 8009dfe:	2316      	movs	r3, #22
 8009e00:	6003      	str	r3, [r0, #0]
 8009e02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e0a:	b112      	cbz	r2, 8009e12 <_raise_r+0x1e>
 8009e0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e10:	b94b      	cbnz	r3, 8009e26 <_raise_r+0x32>
 8009e12:	4628      	mov	r0, r5
 8009e14:	f000 f830 	bl	8009e78 <_getpid_r>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4601      	mov	r1, r0
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e22:	f000 b817 	b.w	8009e54 <_kill_r>
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d00a      	beq.n	8009e40 <_raise_r+0x4c>
 8009e2a:	1c59      	adds	r1, r3, #1
 8009e2c:	d103      	bne.n	8009e36 <_raise_r+0x42>
 8009e2e:	2316      	movs	r3, #22
 8009e30:	6003      	str	r3, [r0, #0]
 8009e32:	2001      	movs	r0, #1
 8009e34:	e7e7      	b.n	8009e06 <_raise_r+0x12>
 8009e36:	2100      	movs	r1, #0
 8009e38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	4798      	blx	r3
 8009e40:	2000      	movs	r0, #0
 8009e42:	e7e0      	b.n	8009e06 <_raise_r+0x12>

08009e44 <raise>:
 8009e44:	4b02      	ldr	r3, [pc, #8]	@ (8009e50 <raise+0xc>)
 8009e46:	4601      	mov	r1, r0
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	f7ff bfd3 	b.w	8009df4 <_raise_r>
 8009e4e:	bf00      	nop
 8009e50:	20000018 	.word	0x20000018

08009e54 <_kill_r>:
 8009e54:	b538      	push	{r3, r4, r5, lr}
 8009e56:	4d07      	ldr	r5, [pc, #28]	@ (8009e74 <_kill_r+0x20>)
 8009e58:	2300      	movs	r3, #0
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	4608      	mov	r0, r1
 8009e5e:	4611      	mov	r1, r2
 8009e60:	602b      	str	r3, [r5, #0]
 8009e62:	f7f7 fdeb 	bl	8001a3c <_kill>
 8009e66:	1c43      	adds	r3, r0, #1
 8009e68:	d102      	bne.n	8009e70 <_kill_r+0x1c>
 8009e6a:	682b      	ldr	r3, [r5, #0]
 8009e6c:	b103      	cbz	r3, 8009e70 <_kill_r+0x1c>
 8009e6e:	6023      	str	r3, [r4, #0]
 8009e70:	bd38      	pop	{r3, r4, r5, pc}
 8009e72:	bf00      	nop
 8009e74:	20000478 	.word	0x20000478

08009e78 <_getpid_r>:
 8009e78:	f7f7 bdd8 	b.w	8001a2c <_getpid>

08009e7c <__swhatbuf_r>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	460c      	mov	r4, r1
 8009e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e84:	2900      	cmp	r1, #0
 8009e86:	b096      	sub	sp, #88	@ 0x58
 8009e88:	4615      	mov	r5, r2
 8009e8a:	461e      	mov	r6, r3
 8009e8c:	da0d      	bge.n	8009eaa <__swhatbuf_r+0x2e>
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e94:	f04f 0100 	mov.w	r1, #0
 8009e98:	bf14      	ite	ne
 8009e9a:	2340      	movne	r3, #64	@ 0x40
 8009e9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	6031      	str	r1, [r6, #0]
 8009ea4:	602b      	str	r3, [r5, #0]
 8009ea6:	b016      	add	sp, #88	@ 0x58
 8009ea8:	bd70      	pop	{r4, r5, r6, pc}
 8009eaa:	466a      	mov	r2, sp
 8009eac:	f000 f848 	bl	8009f40 <_fstat_r>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	dbec      	blt.n	8009e8e <__swhatbuf_r+0x12>
 8009eb4:	9901      	ldr	r1, [sp, #4]
 8009eb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009eba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009ebe:	4259      	negs	r1, r3
 8009ec0:	4159      	adcs	r1, r3
 8009ec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ec6:	e7eb      	b.n	8009ea0 <__swhatbuf_r+0x24>

08009ec8 <__smakebuf_r>:
 8009ec8:	898b      	ldrh	r3, [r1, #12]
 8009eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ecc:	079d      	lsls	r5, r3, #30
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	d507      	bpl.n	8009ee4 <__smakebuf_r+0x1c>
 8009ed4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	6123      	str	r3, [r4, #16]
 8009edc:	2301      	movs	r3, #1
 8009ede:	6163      	str	r3, [r4, #20]
 8009ee0:	b003      	add	sp, #12
 8009ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ee4:	ab01      	add	r3, sp, #4
 8009ee6:	466a      	mov	r2, sp
 8009ee8:	f7ff ffc8 	bl	8009e7c <__swhatbuf_r>
 8009eec:	9f00      	ldr	r7, [sp, #0]
 8009eee:	4605      	mov	r5, r0
 8009ef0:	4639      	mov	r1, r7
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7fd fbb8 	bl	8007668 <_malloc_r>
 8009ef8:	b948      	cbnz	r0, 8009f0e <__smakebuf_r+0x46>
 8009efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009efe:	059a      	lsls	r2, r3, #22
 8009f00:	d4ee      	bmi.n	8009ee0 <__smakebuf_r+0x18>
 8009f02:	f023 0303 	bic.w	r3, r3, #3
 8009f06:	f043 0302 	orr.w	r3, r3, #2
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	e7e2      	b.n	8009ed4 <__smakebuf_r+0xc>
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	6020      	str	r0, [r4, #0]
 8009f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	9b01      	ldr	r3, [sp, #4]
 8009f1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f1e:	b15b      	cbz	r3, 8009f38 <__smakebuf_r+0x70>
 8009f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f24:	4630      	mov	r0, r6
 8009f26:	f000 f81d 	bl	8009f64 <_isatty_r>
 8009f2a:	b128      	cbz	r0, 8009f38 <__smakebuf_r+0x70>
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f023 0303 	bic.w	r3, r3, #3
 8009f32:	f043 0301 	orr.w	r3, r3, #1
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	431d      	orrs	r5, r3
 8009f3c:	81a5      	strh	r5, [r4, #12]
 8009f3e:	e7cf      	b.n	8009ee0 <__smakebuf_r+0x18>

08009f40 <_fstat_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4d07      	ldr	r5, [pc, #28]	@ (8009f60 <_fstat_r+0x20>)
 8009f44:	2300      	movs	r3, #0
 8009f46:	4604      	mov	r4, r0
 8009f48:	4608      	mov	r0, r1
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	602b      	str	r3, [r5, #0]
 8009f4e:	f7f7 fdd5 	bl	8001afc <_fstat>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	d102      	bne.n	8009f5c <_fstat_r+0x1c>
 8009f56:	682b      	ldr	r3, [r5, #0]
 8009f58:	b103      	cbz	r3, 8009f5c <_fstat_r+0x1c>
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	bd38      	pop	{r3, r4, r5, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000478 	.word	0x20000478

08009f64 <_isatty_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4d06      	ldr	r5, [pc, #24]	@ (8009f80 <_isatty_r+0x1c>)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	602b      	str	r3, [r5, #0]
 8009f70:	f7f7 fdd4 	bl	8001b1c <_isatty>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_isatty_r+0x1a>
 8009f78:	682b      	ldr	r3, [r5, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_isatty_r+0x1a>
 8009f7c:	6023      	str	r3, [r4, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	20000478 	.word	0x20000478

08009f84 <_init>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	bf00      	nop
 8009f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8a:	bc08      	pop	{r3}
 8009f8c:	469e      	mov	lr, r3
 8009f8e:	4770      	bx	lr

08009f90 <_fini>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	bf00      	nop
 8009f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f96:	bc08      	pop	{r3}
 8009f98:	469e      	mov	lr, r3
 8009f9a:	4770      	bx	lr


adc-dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006bc4  08006bc4  00007bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c4c  08006c4c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c4c  08006c4c  00007c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c54  08006c54  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c54  08006c54  00007c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c58  08006c58  00007c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006c5c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000005c  08006cb8  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08006cb8  00008374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f00  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002add  00000000  00000000  0001ef8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00021a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff8  00000000  00000000  00022ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fc54  00000000  00000000  00023ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163c6  00000000  00000000  00043b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d99ef  00000000  00000000  00059efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001338e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dd0  00000000  00000000  0013392c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001396fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006bac 	.word	0x08006bac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08006bac 	.word	0x08006bac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08e      	sub	sp, #56	@ 0x38
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fc48 	bl	8000e5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f833 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f9df 	bl	8000990 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d2:	f000 f9b3 	bl	800093c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d6:	f000 f8f1 	bl	80007bc <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80005da:	f000 f877 	bl	80006cc <MX_ADC1_Init>
  MX_TIM2_Init();
 80005de:	f000 f937 	bl	8000850 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start_DMA(&hadc1, &value1, 1);
 80005e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80005e6:	2201      	movs	r2, #1
 80005e8:	4619      	mov	r1, r3
 80005ea:	480f      	ldr	r0, [pc, #60]	@ (8000628 <main+0x68>)
 80005ec:	f001 f90e 	bl	800180c <HAL_ADC_Start_DMA>
	  sprintf(buf,"ADC value is %d\n\r",value1);
 80005f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005f2:	463b      	mov	r3, r7
 80005f4:	490d      	ldr	r1, [pc, #52]	@ (800062c <main+0x6c>)
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 fe38 	bl	800626c <siprintf>
	  HAL_UART_Transmit(&hlpuart1, buf, strlen(buf), 500);
 80005fc:	463b      	mov	r3, r7
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fe0e 	bl	8000220 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	4639      	mov	r1, r7
 800060a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800060e:	4808      	ldr	r0, [pc, #32]	@ (8000630 <main+0x70>)
 8000610:	f004 ffb0 	bl	8005574 <HAL_UART_Transmit>
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,value1);
	  HAL_Delay(2000);
 8000614:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000618:	f000 fc90 	bl	8000f3c <HAL_Delay>
	  HAL_ADC_Stop(&hadc1);
 800061c:	4802      	ldr	r0, [pc, #8]	@ (8000628 <main+0x68>)
 800061e:	f001 f8c1 	bl	80017a4 <HAL_ADC_Stop>
  {
 8000622:	bf00      	nop
 8000624:	e7dd      	b.n	80005e2 <main+0x22>
 8000626:	bf00      	nop
 8000628:	20000078 	.word	0x20000078
 800062c:	08006bc4 	.word	0x08006bc4
 8000630:	20000144 	.word	0x20000144

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	2238      	movs	r2, #56	@ 0x38
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fe32 	bl	80062ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000656:	2000      	movs	r0, #0
 8000658:	f002 fff4 	bl	8003644 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2340      	movs	r3, #64	@ 0x40
 8000668:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000672:	2304      	movs	r3, #4
 8000674:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000676:	2355      	movs	r3, #85	@ 0x55
 8000678:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f88e 	bl	80037ac <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000696:	f000 f9cd 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2303      	movs	r3, #3
 80006a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2104      	movs	r1, #4
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fb8c 	bl	8003dd0 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006be:	f000 f9b9 	bl	8000a34 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08c      	sub	sp, #48	@ 0x30
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2220      	movs	r2, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f005 fde1 	bl	80062ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ea:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 80006ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f2:	4b30      	ldr	r3, [pc, #192]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 80006f4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fa:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000706:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070c:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 8000714:	2204      	movs	r2, #4
 8000716:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 800071a:	2200      	movs	r2, #0
 800071c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 8000726:	2201      	movs	r2, #1
 8000728:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072a:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 8000734:	2200      	movs	r2, #0
 8000736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 800073a:	2200      	movs	r2, #0
 800073c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073e:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 8000748:	2200      	movs	r2, #0
 800074a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000754:	4817      	ldr	r0, [pc, #92]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 8000756:	f000 fea1 	bl	800149c <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000760:	f000 f968 	bl	8000a34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 8000770:	f002 f9c0 	bl	8002af4 <HAL_ADCEx_MultiModeConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800077a:	f000 f95b 	bl	8000a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_ADC1_Init+0xec>)
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000782:	2306      	movs	r3, #6
 8000784:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800078a:	237f      	movs	r3, #127	@ 0x7f
 800078c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800078e:	2304      	movs	r3, #4
 8000790:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <MX_ADC1_Init+0xe8>)
 800079c:	f001 fb2c 	bl	8001df8 <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007a6:	f000 f945 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3730      	adds	r7, #48	@ 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000078 	.word	0x20000078
 80007b8:	04300002 	.word	0x04300002

080007bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007c0:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007c2:	4a22      	ldr	r2, [pc, #136]	@ (800084c <MX_LPUART1_UART_Init+0x90>)
 80007c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007c6:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ec:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007fe:	4812      	ldr	r0, [pc, #72]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 8000800:	f004 fe68 	bl	80054d4 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f913 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	480d      	ldr	r0, [pc, #52]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 8000812:	f005 fc61 	bl	80060d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800081c:	f000 f90a 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4809      	ldr	r0, [pc, #36]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 8000824:	f005 fc96 	bl	8006154 <HAL_UARTEx_SetRxFifoThreshold>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800082e:	f000 f901 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_LPUART1_UART_Init+0x8c>)
 8000834:	f005 fc17 	bl	8006066 <HAL_UARTEx_DisableFifoMode>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800083e:	f000 f8f9 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000144 	.word	0x20000144
 800084c:	40008000 	.word	0x40008000

08000850 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	@ 0x38
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
 800087e:	615a      	str	r2, [r3, #20]
 8000880:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <MX_TIM2_Init+0xe8>)
 8000884:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000888:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800088a:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <MX_TIM2_Init+0xe8>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b29      	ldr	r3, [pc, #164]	@ (8000938 <MX_TIM2_Init+0xe8>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096;
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <MX_TIM2_Init+0xe8>)
 8000898:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800089c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008aa:	4823      	ldr	r0, [pc, #140]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008ac:	f003 fe9c 	bl	80045e8 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008b6:	f000 f8bd 	bl	8000a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c4:	4619      	mov	r1, r3
 80008c6:	481c      	ldr	r0, [pc, #112]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008c8:	f004 f85a 	bl	8004980 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008d2:	f000 f8af 	bl	8000a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008d6:	4818      	ldr	r0, [pc, #96]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008d8:	f003 fedd 	bl	8004696 <HAL_TIM_PWM_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008e2:	f000 f8a7 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4810      	ldr	r0, [pc, #64]	@ (8000938 <MX_TIM2_Init+0xe8>)
 80008f6:	f004 fd6b 	bl	80053d0 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000900:	f000 f898 	bl	8000a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000904:	2360      	movs	r3, #96	@ 0x60
 8000906:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	4619      	mov	r1, r3
 800091a:	4807      	ldr	r0, [pc, #28]	@ (8000938 <MX_TIM2_Init+0xe8>)
 800091c:	f003 ff1c 	bl	8004758 <HAL_TIM_PWM_ConfigChannel>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000926:	f000 f885 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800092a:	4803      	ldr	r0, [pc, #12]	@ (8000938 <MX_TIM2_Init+0xe8>)
 800092c:	f000 f9ac 	bl	8000c88 <HAL_TIM_MspPostInit>

}
 8000930:	bf00      	nop
 8000932:	3738      	adds	r7, #56	@ 0x38
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200001d8 	.word	0x200001d8

0800093c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000942:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_DMA_Init+0x50>)
 8000944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000946:	4a11      	ldr	r2, [pc, #68]	@ (800098c <MX_DMA_Init+0x50>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	6493      	str	r3, [r2, #72]	@ 0x48
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_DMA_Init+0x50>)
 8000950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_DMA_Init+0x50>)
 800095c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800095e:	4a0b      	ldr	r2, [pc, #44]	@ (800098c <MX_DMA_Init+0x50>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6493      	str	r3, [r2, #72]	@ 0x48
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_DMA_Init+0x50>)
 8000968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	200b      	movs	r0, #11
 8000978:	f002 fa3b 	bl	8002df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800097c:	200b      	movs	r0, #11
 800097e:	f002 fa52 	bl	8002e26 <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a20      	ldr	r2, [pc, #128]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	f003 0320 	and.w	r3, r3, #32
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e2:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_GPIO_Init+0x9c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_GPIO_Init+0xa0>)
 8000a1e:	f002 fc8f 	bl	8003340 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	@ 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000800 	.word	0x48000800

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <Error_Handler+0x8>

08000a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x44>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a76:	f002 fe89 	bl	800378c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09a      	sub	sp, #104	@ 0x68
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2244      	movs	r2, #68	@ 0x44
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 fbff 	bl	80062ac <memset>
  if(hadc->Instance==ADC1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ab6:	d167      	bne.n	8000b88 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ab8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000abc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000abe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f003 fb9d 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ad4:	f7ff ffae 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b90 <HAL_ADC_MspInit+0x108>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000adc:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <HAL_ADC_MspInit+0x108>)
 8000ade:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b90 <HAL_ADC_MspInit+0x108>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <HAL_ADC_MspInit+0x108>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a26      	ldr	r2, [pc, #152]	@ (8000b90 <HAL_ADC_MspInit+0x108>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afc:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <HAL_ADC_MspInit+0x108>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1e:	f002 fc0f 	bl	8003340 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b24:	4a1c      	ldr	r2, [pc, #112]	@ (8000b98 <HAL_ADC_MspInit+0x110>)
 8000b26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b2a:	2205      	movs	r2, #5
 8000b2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b48:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b50:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b56:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b5c:	480d      	ldr	r0, [pc, #52]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b5e:	f002 f97d 	bl	8002e5c <HAL_DMA_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000b68:	f7ff ff64 	bl	8000a34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a09      	ldr	r2, [pc, #36]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b70:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b72:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <HAL_ADC_MspInit+0x10c>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f002 f938 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b82:	2012      	movs	r0, #18
 8000b84:	f002 f94f 	bl	8002e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3768      	adds	r7, #104	@ 0x68
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40021000 	.word	0x40021000
 8000b94:	200000e4 	.word	0x200000e4
 8000b98:	40020008 	.word	0x40020008

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09a      	sub	sp, #104	@ 0x68
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	2244      	movs	r2, #68	@ 0x44
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f005 fb75 	bl	80062ac <memset>
  if(huart->Instance==LPUART1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c44 <HAL_UART_MspInit+0xa8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d136      	bne.n	8000c3a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fb15 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be4:	f7ff ff26 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000be8:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bec:	4a16      	ldr	r2, [pc, #88]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000bf4:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_UART_MspInit+0xac>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c30:	4619      	mov	r1, r3
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c36:	f002 fb83 	bl	8003340 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3768      	adds	r7, #104	@ 0x68
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40008000 	.word	0x40008000
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c5c:	d10b      	bne.n	8000c76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <HAL_TIM_Base_MspInit+0x38>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c62:	4a08      	ldr	r2, [pc, #32]	@ (8000c84 <HAL_TIM_Base_MspInit+0x38>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_TIM_Base_MspInit+0x38>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca8:	d11c      	bne.n	8000ce4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <HAL_TIM_MspPostInit+0x64>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	4a0f      	ldr	r2, [pc, #60]	@ (8000cec <HAL_TIM_MspPostInit+0x64>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <HAL_TIM_MspPostInit+0x64>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ce0:	f002 fb2e 	bl	8003340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40021000 	.word	0x40021000

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <MemManage_Handler+0x4>

08000d08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d46:	f000 f8db 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <DMA1_Channel1_IRQHandler+0x10>)
 8000d56:	f002 f9a4 	bl	80030a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000e4 	.word	0x200000e4

08000d64 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <ADC1_2_IRQHandler+0x10>)
 8000d6a:	f000 fe03 	bl	8001974 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000078 	.word	0x20000078

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f005 fa88 	bl	80062bc <__errno>
 8000dac:	4603      	mov	r3, r0
 8000dae:	220c      	movs	r2, #12
 8000db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20008000 	.word	0x20008000
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	20000224 	.word	0x20000224
 8000de0:	20000378 	.word	0x20000378

08000de4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <SystemInit+0x20>)
 8000dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <SystemInit+0x20>)
 8000df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e08:	480d      	ldr	r0, [pc, #52]	@ (8000e40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e0a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e0c:	f7ff ffea 	bl	8000de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e10:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e12:	490d      	ldr	r1, [pc, #52]	@ (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e14:	4a0d      	ldr	r2, [pc, #52]	@ (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e28:	4c0a      	ldr	r4, [pc, #40]	@ (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000e36:	f005 fa47 	bl	80062c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e3a:	f7ff fbc1 	bl	80005c0 <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
  ldr   r0, =_estack
 8000e40:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e4c:	08006c5c 	.word	0x08006c5c
  ldr r2, =_sbss
 8000e50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e54:	20000374 	.word	0x20000374

08000e58 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <COMP1_2_3_IRQHandler>

08000e5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f001 ffb9 	bl	8002ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f80e 	bl	8000e8c <HAL_InitTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	e001      	b.n	8000e80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e7c:	f7ff fde0 	bl	8000a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e80:	79fb      	ldrb	r3, [r7, #7]

}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <HAL_InitTick+0x68>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d022      	beq.n	8000ee6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_InitTick+0x6c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <HAL_InitTick+0x68>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 ffc4 	bl	8002e42 <HAL_SYSTICK_Config>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10f      	bne.n	8000ee0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b0f      	cmp	r3, #15
 8000ec4:	d809      	bhi.n	8000eda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ece:	f001 ff90 	bl	8002df2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_InitTick+0x70>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e007      	b.n	8000eea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e004      	b.n	8000eea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	e001      	b.n	8000eea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a03      	ldr	r2, [pc, #12]	@ (8000f1c <HAL_IncTick+0x1c>)
 8000f10:	6013      	str	r3, [r2, #0]
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	20000228 	.word	0x20000228
 8000f20:	20000008 	.word	0x20000008

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000228 	.word	0x20000228

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f54:	d004      	beq.n	8000f60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <HAL_Delay+0x40>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f60:	bf00      	nop
 8000f62:	f7ff ffdf 	bl	8000f24 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d8f7      	bhi.n	8000f62 <HAL_Delay+0x26>
  {
  }
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000008 	.word	0x20000008

08000f80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	609a      	str	r2, [r3, #8]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b087      	sub	sp, #28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3360      	adds	r3, #96	@ 0x60
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <LL_ADC_SetOffset+0x44>)
 800100a:	4013      	ands	r3, r2
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	4313      	orrs	r3, r2
 8001018:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001020:	bf00      	nop
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	03fff000 	.word	0x03fff000

08001030 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3360      	adds	r3, #96	@ 0x60
 800103e:	461a      	mov	r2, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3360      	adds	r3, #96	@ 0x60
 800106c:	461a      	mov	r2, r3
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	431a      	orrs	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001092:	b480      	push	{r7}
 8001094:	b087      	sub	sp, #28
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3360      	adds	r3, #96	@ 0x60
 80010a2:	461a      	mov	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80010bc:	bf00      	nop
 80010be:	371c      	adds	r7, #28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3360      	adds	r3, #96	@ 0x60
 80010d8:	461a      	mov	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	431a      	orrs	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80010f2:	bf00      	nop
 80010f4:	371c      	adds	r7, #28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	615a      	str	r2, [r3, #20]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800114a:	b480      	push	{r7}
 800114c:	b087      	sub	sp, #28
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3330      	adds	r3, #48	@ 0x30
 800115a:	461a      	mov	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	0a1b      	lsrs	r3, r3, #8
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	4413      	add	r3, r2
 8001168:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f003 031f 	and.w	r3, r3, #31
 8001174:	211f      	movs	r1, #31
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	401a      	ands	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	0e9b      	lsrs	r3, r3, #26
 8001182:	f003 011f 	and.w	r1, r3, #31
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f003 031f 	and.w	r3, r3, #31
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	431a      	orrs	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001196:	bf00      	nop
 8001198:	371c      	adds	r7, #28
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3314      	adds	r3, #20
 80011d8:	461a      	mov	r2, r3
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	0e5b      	lsrs	r3, r3, #25
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	4413      	add	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	0d1b      	lsrs	r3, r3, #20
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	2107      	movs	r1, #7
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	401a      	ands	r2, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	0d1b      	lsrs	r3, r3, #20
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001212:	bf00      	nop
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0318 	and.w	r3, r3, #24
 8001242:	4908      	ldr	r1, [pc, #32]	@ (8001264 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001244:	40d9      	lsrs	r1, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	400b      	ands	r3, r1
 800124a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800124e:	431a      	orrs	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	0007ffff 	.word	0x0007ffff

08001268 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 031f 	and.w	r3, r3, #31
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80012b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6093      	str	r3, [r2, #8]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012d8:	d101      	bne.n	80012de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80012fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001300:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001328:	d101      	bne.n	800132e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800134c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001350:	f043 0201 	orr.w	r2, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001374:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001378:	f043 0202 	orr.w	r2, r3, #2
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <LL_ADC_IsEnabled+0x18>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <LL_ADC_IsEnabled+0x1a>
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d101      	bne.n	80013ca <LL_ADC_IsDisableOngoing+0x18>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <LL_ADC_IsDisableOngoing+0x1a>
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80013e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013ec:	f043 0204 	orr.w	r2, r3, #4
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001410:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001414:	f043 0210 	orr.w	r2, r3, #16
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b04      	cmp	r3, #4
 800143a:	d101      	bne.n	8001440 <LL_ADC_REG_IsConversionOngoing+0x18>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800145e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001462:	f043 0220 	orr.w	r2, r3, #32
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b08      	cmp	r3, #8
 8001488:	d101      	bne.n	800148e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b089      	sub	sp, #36	@ 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e167      	b.n	8001786 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fadf 	bl	8000a88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fef1 	bl	80012c4 <LL_ADC_IsDeepPowerDownEnabled>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fed7 	bl	80012a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff0c 	bl	8001314 <LL_ADC_IsInternalRegulatorEnabled>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d115      	bne.n	800152e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fef0 	bl	80012ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800150c:	4ba0      	ldr	r3, [pc, #640]	@ (8001790 <HAL_ADC_Init+0x2f4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	099b      	lsrs	r3, r3, #6
 8001512:	4aa0      	ldr	r2, [pc, #640]	@ (8001794 <HAL_ADC_Init+0x2f8>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	099b      	lsrs	r3, r3, #6
 800151a:	3301      	adds	r3, #1
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001520:	e002      	b.n	8001528 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3b01      	subs	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f9      	bne.n	8001522 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff feee 	bl	8001314 <LL_ADC_IsInternalRegulatorEnabled>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10d      	bne.n	800155a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001542:	f043 0210 	orr.w	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff62 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 8001564:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 8100 	bne.w	8001774 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 80fc 	bne.w	8001774 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001580:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001584:	f043 0202 	orr.w	r2, r3, #2
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fefb 	bl	800138c <LL_ADC_IsEnabled>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d111      	bne.n	80015c0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800159c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80015a0:	f7ff fef4 	bl	800138c <LL_ADC_IsEnabled>
 80015a4:	4604      	mov	r4, r0
 80015a6:	487c      	ldr	r0, [pc, #496]	@ (8001798 <HAL_ADC_Init+0x2fc>)
 80015a8:	f7ff fef0 	bl	800138c <LL_ADC_IsEnabled>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4323      	orrs	r3, r4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4878      	ldr	r0, [pc, #480]	@ (800179c <HAL_ADC_Init+0x300>)
 80015bc:	f7ff fce0 	bl	8000f80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7f5b      	ldrb	r3, [r3, #29]
 80015c4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015ca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80015d0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80015d6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015de:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d106      	bne.n	80015fc <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	3b01      	subs	r3, #1
 80015f4:	045b      	lsls	r3, r3, #17
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001608:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001610:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	4b60      	ldr	r3, [pc, #384]	@ (80017a0 <HAL_ADC_Init+0x304>)
 8001620:	4013      	ands	r3, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	69b9      	ldr	r1, [r7, #24]
 8001628:	430b      	orrs	r3, r1
 800162a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff15 	bl	8001476 <LL_ADC_INJ_IsConversionOngoing>
 800164c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d16d      	bne.n	8001730 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d16a      	bne.n	8001730 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800165e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001666:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001676:	f023 0302 	bic.w	r3, r3, #2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	69b9      	ldr	r1, [r7, #24]
 8001680:	430b      	orrs	r3, r1
 8001682:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d017      	beq.n	80016bc <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800169a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6911      	ldr	r1, [r2, #16]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	430b      	orrs	r3, r1
 80016b6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80016ba:	e013      	b.n	80016e4 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	691a      	ldr	r2, [r3, #16]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80016ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016e0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d118      	bne.n	8001720 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80016f8:	f023 0304 	bic.w	r3, r3, #4
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800170a:	4311      	orrs	r1, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001710:	430a      	orrs	r2, r1
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0201 	orr.w	r2, r2, #1
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	e007      	b.n	8001730 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d10c      	bne.n	8001752 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f023 010f 	bic.w	r1, r3, #15
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	1e5a      	subs	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001750:	e007      	b.n	8001762 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 020f 	bic.w	r2, r2, #15
 8001760:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	f043 0201 	orr.w	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001772:	e007      	b.n	8001784 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001778:	f043 0210 	orr.w	r2, r3, #16
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001784:	7ffb      	ldrb	r3, [r7, #31]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop
 8001790:	20000000 	.word	0x20000000
 8001794:	053e2d63 	.word	0x053e2d63
 8001798:	50000100 	.word	0x50000100
 800179c:	50000300 	.word	0x50000300
 80017a0:	fff04007 	.word	0xfff04007

080017a4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_Stop+0x16>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e023      	b.n	8001802 <HAL_ADC_Stop+0x5e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80017c2:	2103      	movs	r1, #3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 ff07 	bl	80025d8 <ADC_ConversionStop>
 80017ca:	4603      	mov	r3, r0
 80017cc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d111      	bne.n	80017f8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f001 f841 	bl	800285c <ADC_Disable>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001818:	4851      	ldr	r0, [pc, #324]	@ (8001960 <HAL_ADC_Start_DMA+0x154>)
 800181a:	f7ff fd25 	bl	8001268 <LL_ADC_GetMultimode>
 800181e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fdff 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	f040 808f 	bne.w	8001950 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_ADC_Start_DMA+0x34>
 800183c:	2302      	movs	r3, #2
 800183e:	e08a      	b.n	8001956 <HAL_ADC_Start_DMA+0x14a>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d005      	beq.n	800185a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d002      	beq.n	800185a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2b09      	cmp	r3, #9
 8001858:	d173      	bne.n	8001942 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 ff78 	bl	8002750 <ADC_Enable>
 8001860:	4603      	mov	r3, r0
 8001862:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d166      	bne.n	8001938 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a38      	ldr	r2, [pc, #224]	@ (8001964 <HAL_ADC_Start_DMA+0x158>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d002      	beq.n	800188e <HAL_ADC_Start_DMA+0x82>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	e001      	b.n	8001892 <HAL_ADC_Start_DMA+0x86>
 800188e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	4293      	cmp	r3, r2
 8001898:	d002      	beq.n	80018a0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018bc:	f023 0206 	bic.w	r2, r3, #6
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	661a      	str	r2, [r3, #96]	@ 0x60
 80018c4:	e002      	b.n	80018cc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d0:	4a25      	ldr	r2, [pc, #148]	@ (8001968 <HAL_ADC_Start_DMA+0x15c>)
 80018d2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d8:	4a24      	ldr	r2, [pc, #144]	@ (800196c <HAL_ADC_Start_DMA+0x160>)
 80018da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e0:	4a23      	ldr	r2, [pc, #140]	@ (8001970 <HAL_ADC_Start_DMA+0x164>)
 80018e2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	221c      	movs	r2, #28
 80018ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0210 	orr.w	r2, r2, #16
 8001902:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3340      	adds	r3, #64	@ 0x40
 800191e:	4619      	mov	r1, r3
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f001 fb42 	bl	8002fac <HAL_DMA_Start_IT>
 8001928:	4603      	mov	r3, r0
 800192a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fd51 	bl	80013d8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001936:	e00d      	b.n	8001954 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001940:	e008      	b.n	8001954 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800194e:	e001      	b.n	8001954 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001950:	2302      	movs	r3, #2
 8001952:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001954:	7dfb      	ldrb	r3, [r7, #23]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	50000300 	.word	0x50000300
 8001964:	50000100 	.word	0x50000100
 8001968:	0800291b 	.word	0x0800291b
 800196c:	080029f3 	.word	0x080029f3
 8001970:	08002a0f 	.word	0x08002a0f

08001974 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001990:	4883      	ldr	r0, [pc, #524]	@ (8001ba0 <HAL_ADC_IRQHandler+0x22c>)
 8001992:	f7ff fc69 	bl	8001268 <LL_ADC_GetMultimode>
 8001996:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d017      	beq.n	80019d2 <HAL_ADC_IRQHandler+0x5e>
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d012      	beq.n	80019d2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019bc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f001 f88a 	bl	8002ade <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2202      	movs	r2, #2
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d004      	beq.n	80019e6 <HAL_ADC_IRQHandler+0x72>
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8085 	beq.w	8001afc <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d07f      	beq.n	8001afc <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fb83 	bl	8001124 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d064      	beq.n	8001aee <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a5e      	ldr	r2, [pc, #376]	@ (8001ba4 <HAL_ADC_IRQHandler+0x230>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d002      	beq.n	8001a34 <HAL_ADC_IRQHandler+0xc0>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	e001      	b.n	8001a38 <HAL_ADC_IRQHandler+0xc4>
 8001a34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d008      	beq.n	8001a52 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d002      	beq.n	8001a52 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2b09      	cmp	r3, #9
 8001a50:	d104      	bne.n	8001a5c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	e00d      	b.n	8001a78 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a50      	ldr	r2, [pc, #320]	@ (8001ba4 <HAL_ADC_IRQHandler+0x230>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d002      	beq.n	8001a6c <HAL_ADC_IRQHandler+0xf8>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	e001      	b.n	8001a70 <HAL_ADC_IRQHandler+0xfc>
 8001a6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a70:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d135      	bne.n	8001aee <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d12e      	bne.n	8001aee <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fcc7 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d11a      	bne.n	8001ad6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 020c 	bic.w	r2, r2, #12
 8001aae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d112      	bne.n	8001aee <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ad4:	e00b      	b.n	8001aee <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ada:	f043 0210 	orr.w	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae6:	f043 0201 	orr.w	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f95a 	bl	8001da8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	220c      	movs	r2, #12
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0320 	and.w	r3, r3, #32
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d004      	beq.n	8001b10 <HAL_ADC_IRQHandler+0x19c>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10b      	bne.n	8001b28 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 809e 	beq.w	8001c58 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8098 	beq.w	8001c58 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b38:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fb2c 	bl	80011a2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b4a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fae7 	bl	8001124 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b56:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ba4 <HAL_ADC_IRQHandler+0x230>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d002      	beq.n	8001b68 <HAL_ADC_IRQHandler+0x1f4>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	e001      	b.n	8001b6c <HAL_ADC_IRQHandler+0x1f8>
 8001b68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d008      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b06      	cmp	r3, #6
 8001b7e:	d002      	beq.n	8001b86 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b07      	cmp	r3, #7
 8001b84:	d104      	bne.n	8001b90 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	623b      	str	r3, [r7, #32]
 8001b8e:	e011      	b.n	8001bb4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a03      	ldr	r2, [pc, #12]	@ (8001ba4 <HAL_ADC_IRQHandler+0x230>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d006      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0x234>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	e005      	b.n	8001bac <HAL_ADC_IRQHandler+0x238>
 8001ba0:	50000300 	.word	0x50000300
 8001ba4:	50000100 	.word	0x50000100
 8001ba8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001bac:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d047      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d007      	beq.n	8001bd4 <HAL_ADC_IRQHandler+0x260>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d03f      	beq.n	8001c4a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d13a      	bne.n	8001c4a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bde:	2b40      	cmp	r3, #64	@ 0x40
 8001be0:	d133      	bne.n	8001c4a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d12e      	bne.n	8001c4a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fc40 	bl	8001476 <LL_ADC_INJ_IsConversionOngoing>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d11a      	bne.n	8001c32 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c0a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d112      	bne.n	8001c4a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c30:	e00b      	b.n	8001c4a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c36:	f043 0210 	orr.w	r2, r3, #16
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 ff1f 	bl	8002a8e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2260      	movs	r2, #96	@ 0x60
 8001c56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d011      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x312>
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00c      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8a9 	bl	8001dd0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2280      	movs	r2, #128	@ 0x80
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d012      	beq.n	8001cb6 <HAL_ADC_IRQHandler+0x342>
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00d      	beq.n	8001cb6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 ff05 	bl	8002ab6 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d012      	beq.n	8001ce6 <HAL_ADC_IRQHandler+0x372>
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fef7 	bl	8002aca <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d036      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x3ea>
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d031      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8001d02:	2301      	movs	r3, #1
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d06:	e014      	b.n	8001d32 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d008      	beq.n	8001d20 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d0e:	4825      	ldr	r0, [pc, #148]	@ (8001da4 <HAL_ADC_IRQHandler+0x430>)
 8001d10:	f7ff fab8 	bl	8001284 <LL_ADC_GetMultiDMATransfer>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1e:	e008      	b.n	8001d32 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d10e      	bne.n	8001d56 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d48:	f043 0202 	orr.w	r2, r3, #2
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f847 	bl	8001de4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d018      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x426>
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d013      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d76:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d82:	f043 0208 	orr.w	r2, r3, #8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d92:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fe84 	bl	8002aa2 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	@ 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	50000300 	.word	0x50000300

08001da8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b0b6      	sub	sp, #216	@ 0xd8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x22>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e3c8      	b.n	80025ac <HAL_ADC_ConfigChannel+0x7b4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fafe 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 83ad 	bne.w	800258e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	f7ff f982 	bl	800114a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff faec 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 8001e50:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fb0c 	bl	8001476 <LL_ADC_INJ_IsConversionOngoing>
 8001e5e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 81d9 	bne.w	800221e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f040 81d4 	bne.w	800221e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7ff f99c 	bl	80011c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff f930 	bl	80010fe <LL_ADC_SetSamplingTimeCommonConfig>
 8001e9e:	e00e      	b.n	8001ebe <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6819      	ldr	r1, [r3, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	461a      	mov	r2, r3
 8001eae:	f7ff f98b 	bl	80011c8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f920 	bl	80010fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	08db      	lsrs	r3, r3, #3
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d022      	beq.n	8001f26 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6919      	ldr	r1, [r3, #16]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ef0:	f7ff f87a 	bl	8000fe8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6919      	ldr	r1, [r3, #16]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	461a      	mov	r2, r3
 8001f02:	f7ff f8c6 	bl	8001092 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x124>
 8001f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1a:	e000      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x126>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f7ff f8d2 	bl	80010c8 <LL_ADC_SetOffsetSaturation>
 8001f24:	e17b      	b.n	800221e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff f87f 	bl	8001030 <LL_ADC_GetOffsetChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10a      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x15a>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f874 	bl	8001030 <LL_ADC_GetOffsetChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	0e9b      	lsrs	r3, r3, #26
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	e01e      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x198>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f869 	bl	8001030 <LL_ADC_GetOffsetChannel>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001f80:	2320      	movs	r3, #32
 8001f82:	e004      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1b0>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0e9b      	lsrs	r3, r3, #26
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	e018      	b.n	8001fda <HAL_ADC_ConfigChannel+0x1e2>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001fc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001fcc:	2320      	movs	r3, #32
 8001fce:	e004      	b.n	8001fda <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001fd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d106      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f838 	bl	800105c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f81c 	bl	8001030 <LL_ADC_GetOffsetChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10a      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x220>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2101      	movs	r1, #1
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff f811 	bl	8001030 <LL_ADC_GetOffsetChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	0e9b      	lsrs	r3, r3, #26
 8002012:	f003 021f 	and.w	r2, r3, #31
 8002016:	e01e      	b.n	8002056 <HAL_ADC_ConfigChannel+0x25e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2101      	movs	r1, #1
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff f806 	bl	8001030 <LL_ADC_GetOffsetChannel>
 8002024:	4603      	mov	r3, r0
 8002026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800203a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800203e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002046:	2320      	movs	r3, #32
 8002048:	e004      	b.n	8002054 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800204a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <HAL_ADC_ConfigChannel+0x276>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0e9b      	lsrs	r3, r3, #26
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	e018      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x2a8>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002082:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800208a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002092:	2320      	movs	r3, #32
 8002094:	e004      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002096:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d106      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	2101      	movs	r1, #1
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe ffd5 	bl	800105c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2102      	movs	r1, #2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe ffb9 	bl	8001030 <LL_ADC_GetOffsetChannel>
 80020be:	4603      	mov	r3, r0
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10a      	bne.n	80020de <HAL_ADC_ConfigChannel+0x2e6>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2102      	movs	r1, #2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe ffae 	bl	8001030 <LL_ADC_GetOffsetChannel>
 80020d4:	4603      	mov	r3, r0
 80020d6:	0e9b      	lsrs	r3, r3, #26
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	e01e      	b.n	800211c <HAL_ADC_ConfigChannel+0x324>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2102      	movs	r1, #2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe ffa3 	bl	8001030 <LL_ADC_GetOffsetChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80020fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002100:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800210c:	2320      	movs	r3, #32
 800210e:	e004      	b.n	800211a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002110:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x33c>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0e9b      	lsrs	r3, r3, #26
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	e016      	b.n	8002162 <HAL_ADC_ConfigChannel+0x36a>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002146:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800214c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e004      	b.n	8002162 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002158:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002162:	429a      	cmp	r2, r3
 8002164:	d106      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2200      	movs	r2, #0
 800216c:	2102      	movs	r1, #2
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe ff74 	bl	800105c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2103      	movs	r1, #3
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ff58 	bl	8001030 <LL_ADC_GetOffsetChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10a      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x3a8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2103      	movs	r1, #3
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe ff4d 	bl	8001030 <LL_ADC_GetOffsetChannel>
 8002196:	4603      	mov	r3, r0
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	f003 021f 	and.w	r2, r3, #31
 800219e:	e017      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x3d8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2103      	movs	r1, #3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe ff42 	bl	8001030 <LL_ADC_GetOffsetChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80021b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80021bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e003      	b.n	80021ce <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80021c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x3f0>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	f003 031f 	and.w	r3, r3, #31
 80021e6:	e011      	b.n	800220c <HAL_ADC_ConfigChannel+0x414>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80021f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80021fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002200:	2320      	movs	r3, #32
 8002202:	e003      	b.n	800220c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800220c:	429a      	cmp	r2, r3
 800220e:	d106      	bne.n	800221e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2200      	movs	r2, #0
 8002216:	2103      	movs	r1, #3
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe ff1f 	bl	800105c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f8b2 	bl	800138c <LL_ADC_IsEnabled>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 8140 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	461a      	mov	r2, r3
 800223e:	f7fe ffef 	bl	8001220 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4a8f      	ldr	r2, [pc, #572]	@ (8002484 <HAL_ADC_ConfigChannel+0x68c>)
 8002248:	4293      	cmp	r3, r2
 800224a:	f040 8131 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10b      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x47e>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0e9b      	lsrs	r3, r3, #26
 8002264:	3301      	adds	r3, #1
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2b09      	cmp	r3, #9
 800226c:	bf94      	ite	ls
 800226e:	2301      	movls	r3, #1
 8002270:	2300      	movhi	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	e019      	b.n	80022aa <HAL_ADC_ConfigChannel+0x4b2>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002284:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002286:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002288:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800228e:	2320      	movs	r3, #32
 8002290:	e003      	b.n	800229a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3301      	adds	r3, #1
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	bf94      	ite	ls
 80022a4:	2301      	movls	r3, #1
 80022a6:	2300      	movhi	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d079      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d107      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x4d2>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	0e9b      	lsrs	r3, r3, #26
 80022c0:	3301      	adds	r3, #1
 80022c2:	069b      	lsls	r3, r3, #26
 80022c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022c8:	e015      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x4fe>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80022d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80022dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e003      	b.n	80022ee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80022e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3301      	adds	r3, #1
 80022f0:	069b      	lsls	r3, r3, #26
 80022f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x51e>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	0e9b      	lsrs	r3, r3, #26
 8002308:	3301      	adds	r3, #1
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	2101      	movs	r1, #1
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	e017      	b.n	8002346 <HAL_ADC_ConfigChannel+0x54e>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002326:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800232e:	2320      	movs	r3, #32
 8002330:	e003      	b.n	800233a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	3301      	adds	r3, #1
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2101      	movs	r1, #1
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	ea42 0103 	orr.w	r1, r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <HAL_ADC_ConfigChannel+0x574>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0e9b      	lsrs	r3, r3, #26
 800235c:	3301      	adds	r3, #1
 800235e:	f003 021f 	and.w	r2, r3, #31
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	051b      	lsls	r3, r3, #20
 800236a:	e018      	b.n	800239e <HAL_ADC_ConfigChannel+0x5a6>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800237a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800237e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e003      	b.n	8002390 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f003 021f 	and.w	r2, r3, #31
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800239e:	430b      	orrs	r3, r1
 80023a0:	e081      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_ADC_ConfigChannel+0x5c6>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	3301      	adds	r3, #1
 80023b6:	069b      	lsls	r3, r3, #26
 80023b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023bc:	e015      	b.n	80023ea <HAL_ADC_ConfigChannel+0x5f2>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80023cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80023d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80023d6:	2320      	movs	r3, #32
 80023d8:	e003      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80023da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023dc:	fab3 f383 	clz	r3, r3
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	069b      	lsls	r3, r3, #26
 80023e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_ADC_ConfigChannel+0x612>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0e9b      	lsrs	r3, r3, #26
 80023fc:	3301      	adds	r3, #1
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	e017      	b.n	800243a <HAL_ADC_ConfigChannel+0x642>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	61fb      	str	r3, [r7, #28]
  return result;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e003      	b.n	800242e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	ea42 0103 	orr.w	r1, r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x66e>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	3301      	adds	r3, #1
 8002452:	f003 021f 	and.w	r2, r3, #31
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	3b1e      	subs	r3, #30
 800245e:	051b      	lsls	r3, r3, #20
 8002460:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002464:	e01e      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x6ac>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	613b      	str	r3, [r7, #16]
  return result;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800247e:	2320      	movs	r3, #32
 8002480:	e006      	b.n	8002490 <HAL_ADC_ConfigChannel+0x698>
 8002482:	bf00      	nop
 8002484:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	3b1e      	subs	r3, #30
 800249e:	051b      	lsls	r3, r3, #20
 80024a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe fe8c 	bl	80011c8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b3f      	ldr	r3, [pc, #252]	@ (80025b4 <HAL_ADC_ConfigChannel+0x7bc>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d071      	beq.n	80025a0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024bc:	483e      	ldr	r0, [pc, #248]	@ (80025b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80024be:	f7fe fd85 	bl	8000fcc <LL_ADC_GetCommonPathInternalCh>
 80024c2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a3c      	ldr	r2, [pc, #240]	@ (80025bc <HAL_ADC_ConfigChannel+0x7c4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d004      	beq.n	80024da <HAL_ADC_ConfigChannel+0x6e2>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3a      	ldr	r2, [pc, #232]	@ (80025c0 <HAL_ADC_ConfigChannel+0x7c8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d127      	bne.n	800252a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d121      	bne.n	800252a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ee:	d157      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024f8:	4619      	mov	r1, r3
 80024fa:	482f      	ldr	r0, [pc, #188]	@ (80025b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80024fc:	f7fe fd53 	bl	8000fa6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002500:	4b30      	ldr	r3, [pc, #192]	@ (80025c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	4a30      	ldr	r2, [pc, #192]	@ (80025c8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	099b      	lsrs	r3, r3, #6
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800251a:	e002      	b.n	8002522 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3b01      	subs	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f9      	bne.n	800251c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002528:	e03a      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a27      	ldr	r2, [pc, #156]	@ (80025cc <HAL_ADC_ConfigChannel+0x7d4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d113      	bne.n	800255c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002538:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10d      	bne.n	800255c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a22      	ldr	r2, [pc, #136]	@ (80025d0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d02a      	beq.n	80025a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800254a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800254e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002552:	4619      	mov	r1, r3
 8002554:	4818      	ldr	r0, [pc, #96]	@ (80025b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002556:	f7fe fd26 	bl	8000fa6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800255a:	e021      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a1c      	ldr	r2, [pc, #112]	@ (80025d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d11c      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800256a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a16      	ldr	r2, [pc, #88]	@ (80025d0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d011      	beq.n	80025a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800257c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002580:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002584:	4619      	mov	r1, r3
 8002586:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002588:	f7fe fd0d 	bl	8000fa6 <LL_ADC_SetCommonPathInternalCh>
 800258c:	e008      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002592:	f043 0220 	orr.w	r2, r3, #32
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80025a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	37d8      	adds	r7, #216	@ 0xd8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	80080000 	.word	0x80080000
 80025b8:	50000300 	.word	0x50000300
 80025bc:	c3210000 	.word	0xc3210000
 80025c0:	90c00010 	.word	0x90c00010
 80025c4:	20000000 	.word	0x20000000
 80025c8:	053e2d63 	.word	0x053e2d63
 80025cc:	c7520000 	.word	0xc7520000
 80025d0:	50000100 	.word	0x50000100
 80025d4:	cb840000 	.word	0xcb840000

080025d8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe ff1a 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 80025f4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe ff3b 	bl	8001476 <LL_ADC_INJ_IsConversionOngoing>
 8002600:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d103      	bne.n	8002610 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 8098 	beq.w	8002740 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02a      	beq.n	8002674 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7f5b      	ldrb	r3, [r3, #29]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d126      	bne.n	8002674 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7f1b      	ldrb	r3, [r3, #28]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d122      	bne.n	8002674 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800262e:	2301      	movs	r3, #1
 8002630:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002632:	e014      	b.n	800265e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4a45      	ldr	r2, [pc, #276]	@ (800274c <ADC_ConversionStop+0x174>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d90d      	bls.n	8002658 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	f043 0210 	orr.w	r2, r3, #16
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e074      	b.n	8002742 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002668:	2b40      	cmp	r3, #64	@ 0x40
 800266a:	d1e3      	bne.n	8002634 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2240      	movs	r2, #64	@ 0x40
 8002672:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d014      	beq.n	80026a4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fed2 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fe8f 	bl	80013b2 <LL_ADC_IsDisableOngoing>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d104      	bne.n	80026a4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe feae 	bl	8001400 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d014      	beq.n	80026d4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fee1 	bl	8001476 <LL_ADC_INJ_IsConversionOngoing>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00c      	beq.n	80026d4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fe77 	bl	80013b2 <LL_ADC_IsDisableOngoing>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe febd 	bl	800144e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d005      	beq.n	80026e6 <ADC_ConversionStop+0x10e>
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d105      	bne.n	80026ec <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80026e0:	230c      	movs	r3, #12
 80026e2:	617b      	str	r3, [r7, #20]
        break;
 80026e4:	e005      	b.n	80026f2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80026e6:	2308      	movs	r3, #8
 80026e8:	617b      	str	r3, [r7, #20]
        break;
 80026ea:	e002      	b.n	80026f2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80026ec:	2304      	movs	r3, #4
 80026ee:	617b      	str	r3, [r7, #20]
        break;
 80026f0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80026f2:	f7fe fc17 	bl	8000f24 <HAL_GetTick>
 80026f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80026f8:	e01b      	b.n	8002732 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80026fa:	f7fe fc13 	bl	8000f24 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b05      	cmp	r3, #5
 8002706:	d914      	bls.n	8002732 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00d      	beq.n	8002732 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271a:	f043 0210 	orr.w	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e007      	b.n	8002742 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1dc      	bne.n	80026fa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	a33fffff 	.word	0xa33fffff

08002750 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fe13 	bl	800138c <LL_ADC_IsEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d169      	bne.n	8002840 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	4b36      	ldr	r3, [pc, #216]	@ (800284c <ADC_Enable+0xfc>)
 8002774:	4013      	ands	r3, r2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00d      	beq.n	8002796 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	f043 0210 	orr.w	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e055      	b.n	8002842 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fdce 	bl	800133c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027a0:	482b      	ldr	r0, [pc, #172]	@ (8002850 <ADC_Enable+0x100>)
 80027a2:	f7fe fc13 	bl	8000fcc <LL_ADC_GetCommonPathInternalCh>
 80027a6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b0:	4b28      	ldr	r3, [pc, #160]	@ (8002854 <ADC_Enable+0x104>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	4a28      	ldr	r2, [pc, #160]	@ (8002858 <ADC_Enable+0x108>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027ca:	e002      	b.n	80027d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f9      	bne.n	80027cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027d8:	f7fe fba4 	bl	8000f24 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027de:	e028      	b.n	8002832 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe fdd1 	bl	800138c <LL_ADC_IsEnabled>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d104      	bne.n	80027fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fda1 	bl	800133c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027fa:	f7fe fb93 	bl	8000f24 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d914      	bls.n	8002832 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d00d      	beq.n	8002832 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281a:	f043 0210 	orr.w	r2, r3, #16
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e007      	b.n	8002842 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d1cf      	bne.n	80027e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	8000003f 	.word	0x8000003f
 8002850:	50000300 	.word	0x50000300
 8002854:	20000000 	.word	0x20000000
 8002858:	053e2d63 	.word	0x053e2d63

0800285c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fda2 	bl	80013b2 <LL_ADC_IsDisableOngoing>
 800286e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fd89 	bl	800138c <LL_ADC_IsEnabled>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d047      	beq.n	8002910 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d144      	bne.n	8002910 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 030d 	and.w	r3, r3, #13
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10c      	bne.n	80028ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fd63 	bl	8001364 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2203      	movs	r2, #3
 80028a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028a6:	f7fe fb3d 	bl	8000f24 <HAL_GetTick>
 80028aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028ac:	e029      	b.n	8002902 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	f043 0210 	orr.w	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e023      	b.n	8002912 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028ca:	f7fe fb2b 	bl	8000f24 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d914      	bls.n	8002902 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00d      	beq.n	8002902 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f6:	f043 0201 	orr.w	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e007      	b.n	8002912 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1dc      	bne.n	80028ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002930:	2b00      	cmp	r3, #0
 8002932:	d14b      	bne.n	80029cc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002938:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d021      	beq.n	8002992 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fbe6 	bl	8001124 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d032      	beq.n	80029c4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d12b      	bne.n	80029c4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d11f      	bne.n	80029c4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002988:	f043 0201 	orr.w	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002990:	e018      	b.n	80029c4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d111      	bne.n	80029c4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029bc:	f043 0201 	orr.w	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff f9ef 	bl	8001da8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029ca:	e00e      	b.n	80029ea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7ff fa03 	bl	8001de4 <HAL_ADC_ErrorCallback>
}
 80029de:	e004      	b.n	80029ea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff f9db 	bl	8001dbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a2c:	f043 0204 	orr.w	r2, r3, #4
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f7ff f9d5 	bl	8001de4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <LL_ADC_IsEnabled>:
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <LL_ADC_IsEnabled+0x18>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <LL_ADC_IsEnabled+0x1a>
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d101      	bne.n	8002a80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b0a1      	sub	sp, #132	@ 0x84
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e08b      	b.n	8002c2a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b2a:	d102      	bne.n	8002b32 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b2c:	4b41      	ldr	r3, [pc, #260]	@ (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	e001      	b.n	8002b36 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10b      	bne.n	8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e06a      	b.n	8002c2a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff86 	bl	8002a68 <LL_ADC_REG_IsConversionOngoing>
 8002b5c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff ff80 	bl	8002a68 <LL_ADC_REG_IsConversionOngoing>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d14c      	bne.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d149      	bne.n	8002c08 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b74:	4b30      	ldr	r3, [pc, #192]	@ (8002c38 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002b76:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d028      	beq.n	8002bd2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6859      	ldr	r1, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b92:	035b      	lsls	r3, r3, #13
 8002b94:	430b      	orrs	r3, r1
 8002b96:	431a      	orrs	r2, r3
 8002b98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b9a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b9c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ba0:	f7ff ff4f 	bl	8002a42 <LL_ADC_IsEnabled>
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	4823      	ldr	r0, [pc, #140]	@ (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ba8:	f7ff ff4b 	bl	8002a42 <LL_ADC_IsEnabled>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4323      	orrs	r3, r4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d133      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bbc:	f023 030f 	bic.w	r3, r3, #15
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	6811      	ldr	r1, [r2, #0]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	6892      	ldr	r2, [r2, #8]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bce:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bd0:	e024      	b.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bdc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bde:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002be2:	f7ff ff2e 	bl	8002a42 <LL_ADC_IsEnabled>
 8002be6:	4604      	mov	r4, r0
 8002be8:	4812      	ldr	r0, [pc, #72]	@ (8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002bea:	f7ff ff2a 	bl	8002a42 <LL_ADC_IsEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4323      	orrs	r3, r4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d112      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002bf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bfe:	f023 030f 	bic.w	r3, r3, #15
 8002c02:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002c04:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c06:	e009      	b.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002c1a:	e000      	b.n	8002c1e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3784      	adds	r7, #132	@ 0x84
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}
 8002c32:	bf00      	nop
 8002c34:	50000100 	.word	0x50000100
 8002c38:	50000300 	.word	0x50000300

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	@ (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db0b      	blt.n	8002cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4907      	ldr	r1, [pc, #28]	@ (8002cd8 <__NVIC_EnableIRQ+0x38>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000e100 	.word	0xe000e100

08002cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6039      	str	r1, [r7, #0]
 8002ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	db0a      	blt.n	8002d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	490c      	ldr	r1, [pc, #48]	@ (8002d28 <__NVIC_SetPriority+0x4c>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	0112      	lsls	r2, r2, #4
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d04:	e00a      	b.n	8002d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4908      	ldr	r1, [pc, #32]	@ (8002d2c <__NVIC_SetPriority+0x50>)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3b04      	subs	r3, #4
 8002d14:	0112      	lsls	r2, r2, #4
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	440b      	add	r3, r1
 8002d1a:	761a      	strb	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	@ 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f1c3 0307 	rsb	r3, r3, #7
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	bf28      	it	cs
 8002d4e:	2304      	movcs	r3, #4
 8002d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d902      	bls.n	8002d60 <NVIC_EncodePriority+0x30>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3b03      	subs	r3, #3
 8002d5e:	e000      	b.n	8002d62 <NVIC_EncodePriority+0x32>
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	401a      	ands	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43d9      	mvns	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	4313      	orrs	r3, r2
         );
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3724      	adds	r7, #36	@ 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002da8:	d301      	bcc.n	8002dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00f      	b.n	8002dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dae:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <SysTick_Config+0x40>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db6:	210f      	movs	r1, #15
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dbc:	f7ff ff8e 	bl	8002cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc0:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <SysTick_Config+0x40>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc6:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <SysTick_Config+0x40>)
 8002dc8:	2207      	movs	r2, #7
 8002dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	e000e010 	.word	0xe000e010

08002ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff29 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e00:	f7ff ff40 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	6978      	ldr	r0, [r7, #20]
 8002e0c:	f7ff ff90 	bl	8002d30 <NVIC_EncodePriority>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff5f 	bl	8002cdc <__NVIC_SetPriority>
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff33 	bl	8002ca0 <__NVIC_EnableIRQ>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ffa4 	bl	8002d98 <SysTick_Config>
 8002e50:	4603      	mov	r3, r0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e08d      	b.n	8002f8a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b47      	ldr	r3, [pc, #284]	@ (8002f94 <HAL_DMA_Init+0x138>)
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d80f      	bhi.n	8002e9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4b45      	ldr	r3, [pc, #276]	@ (8002f98 <HAL_DMA_Init+0x13c>)
 8002e82:	4413      	add	r3, r2
 8002e84:	4a45      	ldr	r2, [pc, #276]	@ (8002f9c <HAL_DMA_Init+0x140>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	009a      	lsls	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a42      	ldr	r2, [pc, #264]	@ (8002fa0 <HAL_DMA_Init+0x144>)
 8002e96:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e98:	e00e      	b.n	8002eb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b40      	ldr	r3, [pc, #256]	@ (8002fa4 <HAL_DMA_Init+0x148>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a3d      	ldr	r2, [pc, #244]	@ (8002f9c <HAL_DMA_Init+0x140>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8002fa8 <HAL_DMA_Init+0x14c>)
 8002eb6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ef4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f9b6 	bl	800327c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f18:	d102      	bne.n	8002f20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f34:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d010      	beq.n	8002f60 <HAL_DMA_Init+0x104>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d80c      	bhi.n	8002f60 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f9d6 	bl	80032f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	e008      	b.n	8002f72 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40020407 	.word	0x40020407
 8002f98:	bffdfff8 	.word	0xbffdfff8
 8002f9c:	cccccccd 	.word	0xcccccccd
 8002fa0:	40020000 	.word	0x40020000
 8002fa4:	bffdfbf8 	.word	0xbffdfbf8
 8002fa8:	40020400 	.word	0x40020400

08002fac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_DMA_Start_IT+0x20>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e066      	b.n	800309a <HAL_DMA_Start_IT+0xee>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d155      	bne.n	800308c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f8fb 	bl	8003200 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 020e 	orr.w	r2, r2, #14
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e00f      	b.n	8003044 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0204 	bic.w	r2, r2, #4
 8003032:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 020a 	orr.w	r2, r2, #10
 8003042:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003060:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003074:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003078:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e005      	b.n	8003098 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003094:	2302      	movs	r3, #2
 8003096:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003098:	7dfb      	ldrb	r3, [r7, #23]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2204      	movs	r2, #4
 80030c4:	409a      	lsls	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d026      	beq.n	800311c <HAL_DMA_IRQHandler+0x7a>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d021      	beq.n	800311c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d107      	bne.n	80030f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0204 	bic.w	r2, r2, #4
 80030f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f003 021f 	and.w	r2, r3, #31
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	2104      	movs	r1, #4
 8003104:	fa01 f202 	lsl.w	r2, r1, r2
 8003108:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	2b00      	cmp	r3, #0
 8003110:	d071      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800311a:	e06c      	b.n	80031f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2202      	movs	r2, #2
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d02e      	beq.n	800318e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d029      	beq.n	800318e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 020a 	bic.w	r2, r2, #10
 8003156:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	2102      	movs	r1, #2
 800316e:	fa01 f202 	lsl.w	r2, r1, r2
 8003172:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d038      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800318c:	e033      	b.n	80031f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2208      	movs	r2, #8
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02a      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d025      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 020e 	bic.w	r2, r2, #14
 80031ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f202 	lsl.w	r2, r1, r2
 80031ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80031f6:	bf00      	nop
 80031f8:	bf00      	nop
}
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003216:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003228:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	f003 021f 	and.w	r2, r3, #31
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f202 	lsl.w	r2, r1, r2
 800323c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b10      	cmp	r3, #16
 800324c:	d108      	bne.n	8003260 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800325e:	e007      	b.n	8003270 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	4b16      	ldr	r3, [pc, #88]	@ (80032e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800328c:	429a      	cmp	r2, r3
 800328e:	d802      	bhi.n	8003296 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003290:	4b15      	ldr	r3, [pc, #84]	@ (80032e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e001      	b.n	800329a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003296:	4b15      	ldr	r3, [pc, #84]	@ (80032ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003298:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3b08      	subs	r3, #8
 80032a6:	4a12      	ldr	r2, [pc, #72]	@ (80032f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	009a      	lsls	r2, r3, #2
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4413      	add	r3, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a0b      	ldr	r2, [pc, #44]	@ (80032f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2201      	movs	r2, #1
 80032d0:	409a      	lsls	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40020407 	.word	0x40020407
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40020820 	.word	0x40020820
 80032f0:	cccccccd 	.word	0xcccccccd
 80032f4:	40020880 	.word	0x40020880

080032f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	461a      	mov	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a08      	ldr	r2, [pc, #32]	@ (800333c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800331a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3b01      	subs	r3, #1
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	2201      	movs	r2, #1
 8003326:	409a      	lsls	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	1000823f 	.word	0x1000823f
 800333c:	40020940 	.word	0x40020940

08003340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800334e:	e15a      	b.n	8003606 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	2101      	movs	r1, #1
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 814c 	beq.w	8003600 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d005      	beq.n	8003380 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800337c:	2b02      	cmp	r3, #2
 800337e:	d130      	bne.n	80033e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	2203      	movs	r2, #3
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033b6:	2201      	movs	r2, #1
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	f003 0201 	and.w	r2, r3, #1
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d017      	beq.n	800341e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	2203      	movs	r2, #3
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d123      	bne.n	8003472 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	08da      	lsrs	r2, r3, #3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3208      	adds	r2, #8
 8003432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	220f      	movs	r2, #15
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4013      	ands	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	08da      	lsrs	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3208      	adds	r2, #8
 800346c:	6939      	ldr	r1, [r7, #16]
 800346e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0203 	and.w	r2, r3, #3
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80a6 	beq.w	8003600 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b4:	4b5b      	ldr	r3, [pc, #364]	@ (8003624 <HAL_GPIO_Init+0x2e4>)
 80034b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b8:	4a5a      	ldr	r2, [pc, #360]	@ (8003624 <HAL_GPIO_Init+0x2e4>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6613      	str	r3, [r2, #96]	@ 0x60
 80034c0:	4b58      	ldr	r3, [pc, #352]	@ (8003624 <HAL_GPIO_Init+0x2e4>)
 80034c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034cc:	4a56      	ldr	r2, [pc, #344]	@ (8003628 <HAL_GPIO_Init+0x2e8>)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	3302      	adds	r3, #2
 80034d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	220f      	movs	r2, #15
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034f6:	d01f      	beq.n	8003538 <HAL_GPIO_Init+0x1f8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a4c      	ldr	r2, [pc, #304]	@ (800362c <HAL_GPIO_Init+0x2ec>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d019      	beq.n	8003534 <HAL_GPIO_Init+0x1f4>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a4b      	ldr	r2, [pc, #300]	@ (8003630 <HAL_GPIO_Init+0x2f0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <HAL_GPIO_Init+0x1f0>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a4a      	ldr	r2, [pc, #296]	@ (8003634 <HAL_GPIO_Init+0x2f4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00d      	beq.n	800352c <HAL_GPIO_Init+0x1ec>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a49      	ldr	r2, [pc, #292]	@ (8003638 <HAL_GPIO_Init+0x2f8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <HAL_GPIO_Init+0x1e8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a48      	ldr	r2, [pc, #288]	@ (800363c <HAL_GPIO_Init+0x2fc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_GPIO_Init+0x1e4>
 8003520:	2305      	movs	r3, #5
 8003522:	e00a      	b.n	800353a <HAL_GPIO_Init+0x1fa>
 8003524:	2306      	movs	r3, #6
 8003526:	e008      	b.n	800353a <HAL_GPIO_Init+0x1fa>
 8003528:	2304      	movs	r3, #4
 800352a:	e006      	b.n	800353a <HAL_GPIO_Init+0x1fa>
 800352c:	2303      	movs	r3, #3
 800352e:	e004      	b.n	800353a <HAL_GPIO_Init+0x1fa>
 8003530:	2302      	movs	r3, #2
 8003532:	e002      	b.n	800353a <HAL_GPIO_Init+0x1fa>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <HAL_GPIO_Init+0x1fa>
 8003538:	2300      	movs	r3, #0
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	f002 0203 	and.w	r2, r2, #3
 8003540:	0092      	lsls	r2, r2, #2
 8003542:	4093      	lsls	r3, r2
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800354a:	4937      	ldr	r1, [pc, #220]	@ (8003628 <HAL_GPIO_Init+0x2e8>)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	3302      	adds	r3, #2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003558:	4b39      	ldr	r3, [pc, #228]	@ (8003640 <HAL_GPIO_Init+0x300>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	43db      	mvns	r3, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4013      	ands	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800357c:	4a30      	ldr	r2, [pc, #192]	@ (8003640 <HAL_GPIO_Init+0x300>)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003582:	4b2f      	ldr	r3, [pc, #188]	@ (8003640 <HAL_GPIO_Init+0x300>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	43db      	mvns	r3, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035a6:	4a26      	ldr	r2, [pc, #152]	@ (8003640 <HAL_GPIO_Init+0x300>)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035ac:	4b24      	ldr	r3, [pc, #144]	@ (8003640 <HAL_GPIO_Init+0x300>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003640 <HAL_GPIO_Init+0x300>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003640 <HAL_GPIO_Init+0x300>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035fa:	4a11      	ldr	r2, [pc, #68]	@ (8003640 <HAL_GPIO_Init+0x300>)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3301      	adds	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	f47f ae9d 	bne.w	8003350 <HAL_GPIO_Init+0x10>
  }
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40021000 	.word	0x40021000
 8003628:	40010000 	.word	0x40010000
 800362c:	48000400 	.word	0x48000400
 8003630:	48000800 	.word	0x48000800
 8003634:	48000c00 	.word	0x48000c00
 8003638:	48001000 	.word	0x48001000
 800363c:	48001400 	.word	0x48001400
 8003640:	40010400 	.word	0x40010400

08003644 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d141      	bne.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003652:	4b4b      	ldr	r3, [pc, #300]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800365a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800365e:	d131      	bne.n	80036c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003660:	4b47      	ldr	r3, [pc, #284]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003666:	4a46      	ldr	r2, [pc, #280]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800366c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003670:	4b43      	ldr	r3, [pc, #268]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003678:	4a41      	ldr	r2, [pc, #260]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800367e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003680:	4b40      	ldr	r3, [pc, #256]	@ (8003784 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2232      	movs	r2, #50	@ 0x32
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	4a3f      	ldr	r2, [pc, #252]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	0c9b      	lsrs	r3, r3, #18
 8003692:	3301      	adds	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003696:	e002      	b.n	800369e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	3b01      	subs	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369e:	4b38      	ldr	r3, [pc, #224]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036aa:	d102      	bne.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f2      	bne.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036b2:	4b33      	ldr	r3, [pc, #204]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036be:	d158      	bne.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e057      	b.n	8003774 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036d4:	e04d      	b.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036dc:	d141      	bne.n	8003762 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036de:	4b28      	ldr	r3, [pc, #160]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ea:	d131      	bne.n	8003750 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036ec:	4b24      	ldr	r3, [pc, #144]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036f2:	4a23      	ldr	r2, [pc, #140]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036fc:	4b20      	ldr	r3, [pc, #128]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003704:	4a1e      	ldr	r2, [pc, #120]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800370a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800370c:	4b1d      	ldr	r3, [pc, #116]	@ (8003784 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2232      	movs	r2, #50	@ 0x32
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	4a1c      	ldr	r2, [pc, #112]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	0c9b      	lsrs	r3, r3, #18
 800371e:	3301      	adds	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003722:	e002      	b.n	800372a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3b01      	subs	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800372a:	4b15      	ldr	r3, [pc, #84]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003736:	d102      	bne.n	800373e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f2      	bne.n	8003724 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800373e:	4b10      	ldr	r3, [pc, #64]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800374a:	d112      	bne.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e011      	b.n	8003774 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003756:	4a0a      	ldr	r2, [pc, #40]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800375c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003760:	e007      	b.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003762:	4b07      	ldr	r3, [pc, #28]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800376a:	4a05      	ldr	r2, [pc, #20]	@ (8003780 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003770:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40007000 	.word	0x40007000
 8003784:	20000000 	.word	0x20000000
 8003788:	431bde83 	.word	0x431bde83

0800378c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003790:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800379a:	6093      	str	r3, [r2, #8]
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40007000 	.word	0x40007000

080037ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e2fe      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d075      	beq.n	80038b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ca:	4b97      	ldr	r3, [pc, #604]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d4:	4b94      	ldr	r3, [pc, #592]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	d102      	bne.n	80037ea <HAL_RCC_OscConfig+0x3e>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d002      	beq.n	80037f0 <HAL_RCC_OscConfig+0x44>
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d10b      	bne.n	8003808 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	4b8d      	ldr	r3, [pc, #564]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d05b      	beq.n	80038b4 <HAL_RCC_OscConfig+0x108>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d157      	bne.n	80038b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e2d9      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003810:	d106      	bne.n	8003820 <HAL_RCC_OscConfig+0x74>
 8003812:	4b85      	ldr	r3, [pc, #532]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a84      	ldr	r2, [pc, #528]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e01d      	b.n	800385c <HAL_RCC_OscConfig+0xb0>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x98>
 800382a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b7c      	ldr	r3, [pc, #496]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e00b      	b.n	800385c <HAL_RCC_OscConfig+0xb0>
 8003844:	4b78      	ldr	r3, [pc, #480]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a77      	ldr	r2, [pc, #476]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 800384a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b75      	ldr	r3, [pc, #468]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a74      	ldr	r2, [pc, #464]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d013      	beq.n	800388c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd fb5e 	bl	8000f24 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800386c:	f7fd fb5a 	bl	8000f24 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	@ 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e29e      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0xc0>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fd fb4a 	bl	8000f24 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003894:	f7fd fb46 	bl	8000f24 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	@ 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e28a      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a6:	4b60      	ldr	r3, [pc, #384]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0xe8>
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d075      	beq.n	80039ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	4b59      	ldr	r3, [pc, #356]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038cc:	4b56      	ldr	r3, [pc, #344]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	d102      	bne.n	80038e2 <HAL_RCC_OscConfig+0x136>
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d002      	beq.n	80038e8 <HAL_RCC_OscConfig+0x13c>
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d11f      	bne.n	8003928 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_OscConfig+0x154>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e25d      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003900:	4b49      	ldr	r3, [pc, #292]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	4946      	ldr	r1, [pc, #280]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003914:	4b45      	ldr	r3, [pc, #276]	@ (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fab7 	bl	8000e8c <HAL_InitTick>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d043      	beq.n	80039ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e249      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d023      	beq.n	8003978 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003930:	4b3d      	ldr	r3, [pc, #244]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a3c      	ldr	r2, [pc, #240]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800393a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd faf2 	bl	8000f24 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003944:	f7fd faee 	bl	8000f24 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e232      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003956:	4b34      	ldr	r3, [pc, #208]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b31      	ldr	r3, [pc, #196]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	061b      	lsls	r3, r3, #24
 8003970:	492d      	ldr	r1, [pc, #180]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
 8003976:	e01a      	b.n	80039ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003978:	4b2b      	ldr	r3, [pc, #172]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2a      	ldr	r2, [pc, #168]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 800397e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fd face 	bl	8000f24 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398c:	f7fd faca 	bl	8000f24 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e20e      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800399e:	4b22      	ldr	r3, [pc, #136]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x1e0>
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d041      	beq.n	8003a3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01c      	beq.n	80039fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c2:	4b19      	ldr	r3, [pc, #100]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80039c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c8:	4a17      	ldr	r2, [pc, #92]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d2:	f7fd faa7 	bl	8000f24 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039da:	f7fd faa3 	bl	8000f24 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e1e7      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80039ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ef      	beq.n	80039da <HAL_RCC_OscConfig+0x22e>
 80039fa:	e020      	b.n	8003a3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80039fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a02:	4a09      	ldr	r2, [pc, #36]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fd fa8a 	bl	8000f24 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a12:	e00d      	b.n	8003a30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a14:	f7fd fa86 	bl	8000f24 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d906      	bls.n	8003a30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1ca      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a30:	4b8c      	ldr	r3, [pc, #560]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ea      	bne.n	8003a14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80a6 	beq.w	8003b98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a50:	4b84      	ldr	r3, [pc, #528]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_OscConfig+0x2b4>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x2b6>
 8003a60:	2300      	movs	r3, #0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	4b7f      	ldr	r3, [pc, #508]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a72:	4b7c      	ldr	r3, [pc, #496]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a82:	4b79      	ldr	r3, [pc, #484]	@ (8003c68 <HAL_RCC_OscConfig+0x4bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d118      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a8e:	4b76      	ldr	r3, [pc, #472]	@ (8003c68 <HAL_RCC_OscConfig+0x4bc>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	@ (8003c68 <HAL_RCC_OscConfig+0x4bc>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9a:	f7fd fa43 	bl	8000f24 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa2:	f7fd fa3f 	bl	8000f24 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e183      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c68 <HAL_RCC_OscConfig+0x4bc>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d108      	bne.n	8003ada <HAL_RCC_OscConfig+0x32e>
 8003ac8:	4b66      	ldr	r3, [pc, #408]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ace:	4a65      	ldr	r2, [pc, #404]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ad8:	e024      	b.n	8003b24 <HAL_RCC_OscConfig+0x378>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d110      	bne.n	8003b04 <HAL_RCC_OscConfig+0x358>
 8003ae2:	4b60      	ldr	r3, [pc, #384]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003af2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af8:	4a5a      	ldr	r2, [pc, #360]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003afa:	f043 0301 	orr.w	r3, r3, #1
 8003afe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b02:	e00f      	b.n	8003b24 <HAL_RCC_OscConfig+0x378>
 8003b04:	4b57      	ldr	r3, [pc, #348]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b0a:	4a56      	ldr	r2, [pc, #344]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b14:	4b53      	ldr	r3, [pc, #332]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1a:	4a52      	ldr	r2, [pc, #328]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003b1c:	f023 0304 	bic.w	r3, r3, #4
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d016      	beq.n	8003b5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2c:	f7fd f9fa 	bl	8000f24 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b34:	f7fd f9f6 	bl	8000f24 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e138      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b4a:	4b46      	ldr	r3, [pc, #280]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ed      	beq.n	8003b34 <HAL_RCC_OscConfig+0x388>
 8003b58:	e015      	b.n	8003b86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fd f9e3 	bl	8000f24 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fd f9df 	bl	8000f24 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e121      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b78:	4b3a      	ldr	r3, [pc, #232]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ed      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b86:	7ffb      	ldrb	r3, [r7, #31]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d105      	bne.n	8003b98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8c:	4b35      	ldr	r3, [pc, #212]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b90:	4a34      	ldr	r2, [pc, #208]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d03c      	beq.n	8003c1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01c      	beq.n	8003be6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bac:	4b2d      	ldr	r3, [pc, #180]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbc:	f7fd f9b2 	bl	8000f24 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bc4:	f7fd f9ae 	bl	8000f24 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e0f2      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bd6:	4b23      	ldr	r3, [pc, #140]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ef      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x418>
 8003be4:	e01b      	b.n	8003c1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003be6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bec:	4a1d      	ldr	r2, [pc, #116]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7fd f995 	bl	8000f24 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bfe:	f7fd f991 	bl	8000f24 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e0d5      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c10:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1ef      	bne.n	8003bfe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80c9 	beq.w	8003dba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c28:	4b0e      	ldr	r3, [pc, #56]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	f000 8083 	beq.w	8003d3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d15e      	bne.n	8003cfc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3e:	4b09      	ldr	r3, [pc, #36]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a08      	ldr	r2, [pc, #32]	@ (8003c64 <HAL_RCC_OscConfig+0x4b8>)
 8003c44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4a:	f7fd f96b 	bl	8000f24 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c50:	e00c      	b.n	8003c6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fd f967 	bl	8000f24 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d905      	bls.n	8003c6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e0ab      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c6c:	4b55      	ldr	r3, [pc, #340]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1ec      	bne.n	8003c52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c78:	4b52      	ldr	r3, [pc, #328]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	4b52      	ldr	r3, [pc, #328]	@ (8003dc8 <HAL_RCC_OscConfig+0x61c>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6a11      	ldr	r1, [r2, #32]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c88:	3a01      	subs	r2, #1
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	4311      	orrs	r1, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c92:	0212      	lsls	r2, r2, #8
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c9a:	0852      	lsrs	r2, r2, #1
 8003c9c:	3a01      	subs	r2, #1
 8003c9e:	0552      	lsls	r2, r2, #21
 8003ca0:	4311      	orrs	r1, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003ca6:	0852      	lsrs	r2, r2, #1
 8003ca8:	3a01      	subs	r2, #1
 8003caa:	0652      	lsls	r2, r2, #25
 8003cac:	4311      	orrs	r1, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cb2:	06d2      	lsls	r2, r2, #27
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	4943      	ldr	r1, [pc, #268]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b41      	ldr	r3, [pc, #260]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a40      	ldr	r2, [pc, #256]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a3d      	ldr	r2, [pc, #244]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003cce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd f926 	bl	8000f24 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd f922 	bl	8000f24 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e066      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cee:	4b35      	ldr	r3, [pc, #212]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x530>
 8003cfa:	e05e      	b.n	8003dba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfc:	4b31      	ldr	r3, [pc, #196]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a30      	ldr	r2, [pc, #192]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fd f90c 	bl	8000f24 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd f908 	bl	8000f24 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e04c      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d22:	4b28      	ldr	r3, [pc, #160]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d2e:	4b25      	ldr	r3, [pc, #148]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	4924      	ldr	r1, [pc, #144]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003d34:	4b25      	ldr	r3, [pc, #148]	@ (8003dcc <HAL_RCC_OscConfig+0x620>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	60cb      	str	r3, [r1, #12]
 8003d3a:	e03e      	b.n	8003dba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e039      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d48:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc4 <HAL_RCC_OscConfig+0x618>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 0203 	and.w	r2, r3, #3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d12c      	bne.n	8003db6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	3b01      	subs	r3, #1
 8003d68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d123      	bne.n	8003db6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d11b      	bne.n	8003db6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d113      	bne.n	8003db6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d109      	bne.n	8003db6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d001      	beq.n	8003dba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	019f800c 	.word	0x019f800c
 8003dcc:	feeefffc 	.word	0xfeeefffc

08003dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e11e      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b91      	ldr	r3, [pc, #580]	@ (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b8e      	ldr	r3, [pc, #568]	@ (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 020f 	bic.w	r2, r3, #15
 8003dfe:	498c      	ldr	r1, [pc, #560]	@ (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b8a      	ldr	r3, [pc, #552]	@ (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e106      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d073      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d129      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2c:	4b81      	ldr	r3, [pc, #516]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0f4      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e3c:	f000 f99e 	bl	800417c <RCC_GetSysClockFreqFromPLLSource>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4a7c      	ldr	r2, [pc, #496]	@ (8004038 <HAL_RCC_ClockConfig+0x268>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d93f      	bls.n	8003eca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d033      	beq.n	8003eca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d12f      	bne.n	8003eca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e6a:	4b72      	ldr	r3, [pc, #456]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e72:	4a70      	ldr	r2, [pc, #448]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e7a:	2380      	movs	r3, #128	@ 0x80
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	e024      	b.n	8003eca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e88:	4b6a      	ldr	r3, [pc, #424]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0c6      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e98:	4b66      	ldr	r3, [pc, #408]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0be      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ea8:	f000 f8ce 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4a61      	ldr	r2, [pc, #388]	@ (8004038 <HAL_RCC_ClockConfig+0x268>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d909      	bls.n	8003eca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ebe:	4a5d      	ldr	r2, [pc, #372]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ec6:	2380      	movs	r3, #128	@ 0x80
 8003ec8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eca:	4b5a      	ldr	r3, [pc, #360]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4957      	ldr	r1, [pc, #348]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fd f822 	bl	8000f24 <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee4:	f7fd f81e 	bl	8000f24 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e095      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	4b4e      	ldr	r3, [pc, #312]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 020c 	and.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d1eb      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d023      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f24:	4b43      	ldr	r3, [pc, #268]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4a42      	ldr	r2, [pc, #264]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f44:	4a3b      	ldr	r2, [pc, #236]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b39      	ldr	r3, [pc, #228]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4936      	ldr	r1, [pc, #216]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b80      	cmp	r3, #128	@ 0x80
 8003f64:	d105      	bne.n	8003f72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f66:	4b33      	ldr	r3, [pc, #204]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4a32      	ldr	r2, [pc, #200]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f72:	4b2f      	ldr	r3, [pc, #188]	@ (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d21d      	bcs.n	8003fbc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f80:	4b2b      	ldr	r3, [pc, #172]	@ (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 020f 	bic.w	r2, r3, #15
 8003f88:	4929      	ldr	r1, [pc, #164]	@ (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f90:	f7fc ffc8 	bl	8000f24 <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f98:	f7fc ffc4 	bl	8000f24 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e03b      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b20      	ldr	r3, [pc, #128]	@ (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d1ed      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4917      	ldr	r1, [pc, #92]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe6:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	490f      	ldr	r1, [pc, #60]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ffa:	f000 f825 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8003ffe:	4602      	mov	r2, r0
 8004000:	4b0c      	ldr	r3, [pc, #48]	@ (8004034 <HAL_RCC_ClockConfig+0x264>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	490c      	ldr	r1, [pc, #48]	@ (800403c <HAL_RCC_ClockConfig+0x26c>)
 800400c:	5ccb      	ldrb	r3, [r1, r3]
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	fa22 f303 	lsr.w	r3, r2, r3
 8004016:	4a0a      	ldr	r2, [pc, #40]	@ (8004040 <HAL_RCC_ClockConfig+0x270>)
 8004018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800401a:	4b0a      	ldr	r3, [pc, #40]	@ (8004044 <HAL_RCC_ClockConfig+0x274>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fc ff34 	bl	8000e8c <HAL_InitTick>
 8004024:	4603      	mov	r3, r0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40022000 	.word	0x40022000
 8004034:	40021000 	.word	0x40021000
 8004038:	04c4b400 	.word	0x04c4b400
 800403c:	08006bd8 	.word	0x08006bd8
 8004040:	20000000 	.word	0x20000000
 8004044:	20000004 	.word	0x20000004

08004048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800404e:	4b2c      	ldr	r3, [pc, #176]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b04      	cmp	r3, #4
 8004058:	d102      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800405a:	4b2a      	ldr	r3, [pc, #168]	@ (8004104 <HAL_RCC_GetSysClockFreq+0xbc>)
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e047      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004060:	4b27      	ldr	r3, [pc, #156]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b08      	cmp	r3, #8
 800406a:	d102      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800406c:	4b26      	ldr	r3, [pc, #152]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xc0>)
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	e03e      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004072:	4b23      	ldr	r3, [pc, #140]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d136      	bne.n	80040ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800407e:	4b20      	ldr	r3, [pc, #128]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004088:	4b1d      	ldr	r3, [pc, #116]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3301      	adds	r3, #1
 8004094:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d10c      	bne.n	80040b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800409c:	4a1a      	ldr	r2, [pc, #104]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xc0>)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	4a16      	ldr	r2, [pc, #88]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a6:	68d2      	ldr	r2, [r2, #12]
 80040a8:	0a12      	lsrs	r2, r2, #8
 80040aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	617b      	str	r3, [r7, #20]
      break;
 80040b4:	e00c      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b6:	4a13      	ldr	r2, [pc, #76]	@ (8004104 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	4a10      	ldr	r2, [pc, #64]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c0:	68d2      	ldr	r2, [r2, #12]
 80040c2:	0a12      	lsrs	r2, r2, #8
 80040c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
      break;
 80040ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	0e5b      	lsrs	r3, r3, #25
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e001      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040f0:	693b      	ldr	r3, [r7, #16]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	00f42400 	.word	0x00f42400
 8004108:	016e3600 	.word	0x016e3600

0800410c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000000 	.word	0x20000000

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4904      	ldr	r1, [pc, #16]	@ (800414c <HAL_RCC_GetPCLK1Freq+0x28>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	08006be8 	.word	0x08006be8

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004154:	f7ff ffda 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0adb      	lsrs	r3, r3, #11
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4904      	ldr	r1, [pc, #16]	@ (8004178 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	08006be8 	.word	0x08006be8

0800417c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004182:	4b1e      	ldr	r3, [pc, #120]	@ (80041fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800418c:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	3301      	adds	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d10c      	bne.n	80041ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041a0:	4a17      	ldr	r2, [pc, #92]	@ (8004200 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	4a14      	ldr	r2, [pc, #80]	@ (80041fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041aa:	68d2      	ldr	r2, [r2, #12]
 80041ac:	0a12      	lsrs	r2, r2, #8
 80041ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	617b      	str	r3, [r7, #20]
    break;
 80041b8:	e00c      	b.n	80041d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ba:	4a12      	ldr	r2, [pc, #72]	@ (8004204 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	4a0e      	ldr	r2, [pc, #56]	@ (80041fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041c4:	68d2      	ldr	r2, [r2, #12]
 80041c6:	0a12      	lsrs	r2, r2, #8
 80041c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	617b      	str	r3, [r7, #20]
    break;
 80041d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041d4:	4b09      	ldr	r3, [pc, #36]	@ (80041fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0e5b      	lsrs	r3, r3, #25
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	3301      	adds	r3, #1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041ee:	687b      	ldr	r3, [r7, #4]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	40021000 	.word	0x40021000
 8004200:	016e3600 	.word	0x016e3600
 8004204:	00f42400 	.word	0x00f42400

08004208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004210:	2300      	movs	r3, #0
 8004212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004214:	2300      	movs	r3, #0
 8004216:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8098 	beq.w	8004356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004226:	2300      	movs	r3, #0
 8004228:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b43      	ldr	r3, [pc, #268]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	4b40      	ldr	r3, [pc, #256]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	4a3f      	ldr	r2, [pc, #252]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004240:	6593      	str	r3, [r2, #88]	@ 0x58
 8004242:	4b3d      	ldr	r3, [pc, #244]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424e:	2301      	movs	r3, #1
 8004250:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004252:	4b3a      	ldr	r3, [pc, #232]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a39      	ldr	r2, [pc, #228]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800425c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425e:	f7fc fe61 	bl	8000f24 <HAL_GetTick>
 8004262:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004264:	e009      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004266:	f7fc fe5d 	bl	8000f24 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d902      	bls.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	74fb      	strb	r3, [r7, #19]
        break;
 8004278:	e005      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800427a:	4b30      	ldr	r3, [pc, #192]	@ (800433c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0ef      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d159      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800428c:	4b2a      	ldr	r3, [pc, #168]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004296:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01e      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d019      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a8:	4b23      	ldr	r3, [pc, #140]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b4:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042d4:	4a18      	ldr	r2, [pc, #96]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fc fe1d 	bl	8000f24 <HAL_GetTick>
 80042ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ec:	e00b      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fc fe19 	bl	8000f24 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d902      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	74fb      	strb	r3, [r7, #19]
            break;
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004306:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ec      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004314:	7cfb      	ldrb	r3, [r7, #19]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431a:	4b07      	ldr	r3, [pc, #28]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004320:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	4903      	ldr	r1, [pc, #12]	@ (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004330:	e008      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	74bb      	strb	r3, [r7, #18]
 8004336:	e005      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004338:	40021000 	.word	0x40021000
 800433c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004344:	7c7b      	ldrb	r3, [r7, #17]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d105      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434a:	4ba6      	ldr	r3, [pc, #664]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	4aa5      	ldr	r2, [pc, #660]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004350:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004354:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004362:	4ba0      	ldr	r3, [pc, #640]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004368:	f023 0203 	bic.w	r2, r3, #3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	499c      	ldr	r1, [pc, #624]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004384:	4b97      	ldr	r3, [pc, #604]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438a:	f023 020c 	bic.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	4994      	ldr	r1, [pc, #592]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043a6:	4b8f      	ldr	r3, [pc, #572]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	498b      	ldr	r1, [pc, #556]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043c8:	4b86      	ldr	r3, [pc, #536]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	4983      	ldr	r1, [pc, #524]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043ea:	4b7e      	ldr	r3, [pc, #504]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	497a      	ldr	r1, [pc, #488]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440c:	4b75      	ldr	r3, [pc, #468]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004412:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	4972      	ldr	r1, [pc, #456]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800442e:	4b6d      	ldr	r3, [pc, #436]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004434:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	4969      	ldr	r1, [pc, #420]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004450:	4b64      	ldr	r3, [pc, #400]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004456:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	4961      	ldr	r1, [pc, #388]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004472:	4b5c      	ldr	r3, [pc, #368]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004478:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	4958      	ldr	r1, [pc, #352]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004490:	2b00      	cmp	r3, #0
 8004492:	d015      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004494:	4b53      	ldr	r3, [pc, #332]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	4950      	ldr	r1, [pc, #320]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044b2:	d105      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b4:	4b4b      	ldr	r3, [pc, #300]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4a4a      	ldr	r2, [pc, #296]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d015      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044cc:	4b45      	ldr	r3, [pc, #276]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044da:	4942      	ldr	r1, [pc, #264]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ea:	d105      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ec:	4b3d      	ldr	r3, [pc, #244]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a3c      	ldr	r2, [pc, #240]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044f6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004504:	4b37      	ldr	r3, [pc, #220]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004512:	4934      	ldr	r1, [pc, #208]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004522:	d105      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004524:	4b2f      	ldr	r3, [pc, #188]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	4a2e      	ldr	r2, [pc, #184]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800452e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d015      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800453c:	4b29      	ldr	r3, [pc, #164]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004542:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454a:	4926      	ldr	r1, [pc, #152]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004556:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800455a:	d105      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800455c:	4b21      	ldr	r3, [pc, #132]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a20      	ldr	r2, [pc, #128]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004566:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d015      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004574:	4b1b      	ldr	r3, [pc, #108]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004582:	4918      	ldr	r1, [pc, #96]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004592:	d105      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004594:	4b13      	ldr	r3, [pc, #76]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4a12      	ldr	r2, [pc, #72]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800459a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800459e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d015      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045ac:	4b0d      	ldr	r3, [pc, #52]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ba:	490a      	ldr	r1, [pc, #40]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ca:	d105      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045cc:	4b05      	ldr	r3, [pc, #20]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a04      	ldr	r2, [pc, #16]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80045d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e049      	b.n	800468e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc fb1c 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 faa4 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e049      	b.n	800473c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f841 	bl	8004744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 fa4d 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004772:	2302      	movs	r3, #2
 8004774:	e0ff      	b.n	8004976 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b14      	cmp	r3, #20
 8004782:	f200 80f0 	bhi.w	8004966 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004786:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047e1 	.word	0x080047e1
 8004790:	08004967 	.word	0x08004967
 8004794:	08004967 	.word	0x08004967
 8004798:	08004967 	.word	0x08004967
 800479c:	08004821 	.word	0x08004821
 80047a0:	08004967 	.word	0x08004967
 80047a4:	08004967 	.word	0x08004967
 80047a8:	08004967 	.word	0x08004967
 80047ac:	08004863 	.word	0x08004863
 80047b0:	08004967 	.word	0x08004967
 80047b4:	08004967 	.word	0x08004967
 80047b8:	08004967 	.word	0x08004967
 80047bc:	080048a3 	.word	0x080048a3
 80047c0:	08004967 	.word	0x08004967
 80047c4:	08004967 	.word	0x08004967
 80047c8:	08004967 	.word	0x08004967
 80047cc:	080048e5 	.word	0x080048e5
 80047d0:	08004967 	.word	0x08004967
 80047d4:	08004967 	.word	0x08004967
 80047d8:	08004967 	.word	0x08004967
 80047dc:	08004925 	.word	0x08004925
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fa60 	bl	8004cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699a      	ldr	r2, [r3, #24]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699a      	ldr	r2, [r3, #24]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6999      	ldr	r1, [r3, #24]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	619a      	str	r2, [r3, #24]
      break;
 800481e:	e0a5      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fad0 	bl	8004dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800483a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800484a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6999      	ldr	r1, [r3, #24]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	619a      	str	r2, [r3, #24]
      break;
 8004860:	e084      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68b9      	ldr	r1, [r7, #8]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fb39 	bl	8004ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69da      	ldr	r2, [r3, #28]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0208 	orr.w	r2, r2, #8
 800487c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0204 	bic.w	r2, r2, #4
 800488c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69d9      	ldr	r1, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	61da      	str	r2, [r3, #28]
      break;
 80048a0:	e064      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fba1 	bl	8004ff0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69d9      	ldr	r1, [r3, #28]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	021a      	lsls	r2, r3, #8
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	61da      	str	r2, [r3, #28]
      break;
 80048e2:	e043      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fc0a 	bl	8005104 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0208 	orr.w	r2, r2, #8
 80048fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0204 	bic.w	r2, r2, #4
 800490e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004922:	e023      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fc4e 	bl	80051cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800493e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800494e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	021a      	lsls	r2, r3, #8
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004964:	e002      	b.n	800496c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	75fb      	strb	r3, [r7, #23]
      break;
 800496a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004974:	7dfb      	ldrb	r3, [r7, #23]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop

08004980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_TIM_ConfigClockSource+0x1c>
 8004998:	2302      	movs	r3, #2
 800499a:	e0de      	b.n	8004b5a <HAL_TIM_ConfigClockSource+0x1da>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80049ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a63      	ldr	r2, [pc, #396]	@ (8004b64 <HAL_TIM_ConfigClockSource+0x1e4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	f000 80a9 	beq.w	8004b2e <HAL_TIM_ConfigClockSource+0x1ae>
 80049dc:	4a61      	ldr	r2, [pc, #388]	@ (8004b64 <HAL_TIM_ConfigClockSource+0x1e4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	f200 80ae 	bhi.w	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 80049e4:	4a60      	ldr	r2, [pc, #384]	@ (8004b68 <HAL_TIM_ConfigClockSource+0x1e8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	f000 80a1 	beq.w	8004b2e <HAL_TIM_ConfigClockSource+0x1ae>
 80049ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004b68 <HAL_TIM_ConfigClockSource+0x1e8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f200 80a6 	bhi.w	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 80049f4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b6c <HAL_TIM_ConfigClockSource+0x1ec>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	f000 8099 	beq.w	8004b2e <HAL_TIM_ConfigClockSource+0x1ae>
 80049fc:	4a5b      	ldr	r2, [pc, #364]	@ (8004b6c <HAL_TIM_ConfigClockSource+0x1ec>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	f200 809e 	bhi.w	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a04:	4a5a      	ldr	r2, [pc, #360]	@ (8004b70 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	f000 8091 	beq.w	8004b2e <HAL_TIM_ConfigClockSource+0x1ae>
 8004a0c:	4a58      	ldr	r2, [pc, #352]	@ (8004b70 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	f200 8096 	bhi.w	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004a18:	f000 8089 	beq.w	8004b2e <HAL_TIM_ConfigClockSource+0x1ae>
 8004a1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004a20:	f200 808e 	bhi.w	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a28:	d03e      	beq.n	8004aa8 <HAL_TIM_ConfigClockSource+0x128>
 8004a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a2e:	f200 8087 	bhi.w	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a36:	f000 8086 	beq.w	8004b46 <HAL_TIM_ConfigClockSource+0x1c6>
 8004a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3e:	d87f      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a40:	2b70      	cmp	r3, #112	@ 0x70
 8004a42:	d01a      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0xfa>
 8004a44:	2b70      	cmp	r3, #112	@ 0x70
 8004a46:	d87b      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a48:	2b60      	cmp	r3, #96	@ 0x60
 8004a4a:	d050      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x16e>
 8004a4c:	2b60      	cmp	r3, #96	@ 0x60
 8004a4e:	d877      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a50:	2b50      	cmp	r3, #80	@ 0x50
 8004a52:	d03c      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x14e>
 8004a54:	2b50      	cmp	r3, #80	@ 0x50
 8004a56:	d873      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a58:	2b40      	cmp	r3, #64	@ 0x40
 8004a5a:	d058      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0x18e>
 8004a5c:	2b40      	cmp	r3, #64	@ 0x40
 8004a5e:	d86f      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a60:	2b30      	cmp	r3, #48	@ 0x30
 8004a62:	d064      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x1ae>
 8004a64:	2b30      	cmp	r3, #48	@ 0x30
 8004a66:	d86b      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d060      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x1ae>
 8004a6c:	2b20      	cmp	r3, #32
 8004a6e:	d867      	bhi.n	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d05c      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x1ae>
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d05a      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0x1ae>
 8004a78:	e062      	b.n	8004b40 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a8a:	f000 fc81 	bl	8005390 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	609a      	str	r2, [r3, #8]
      break;
 8004aa6:	e04f      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ab8:	f000 fc6a 	bl	8005390 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aca:	609a      	str	r2, [r3, #8]
      break;
 8004acc:	e03c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 fbdc 	bl	8005298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2150      	movs	r1, #80	@ 0x50
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fc35 	bl	8005356 <TIM_ITRx_SetConfig>
      break;
 8004aec:	e02c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004afa:	461a      	mov	r2, r3
 8004afc:	f000 fbfb 	bl	80052f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2160      	movs	r1, #96	@ 0x60
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fc25 	bl	8005356 <TIM_ITRx_SetConfig>
      break;
 8004b0c:	e01c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	f000 fbbc 	bl	8005298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2140      	movs	r1, #64	@ 0x40
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fc15 	bl	8005356 <TIM_ITRx_SetConfig>
      break;
 8004b2c:	e00c      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f000 fc0c 	bl	8005356 <TIM_ITRx_SetConfig>
      break;
 8004b3e:	e003      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
      break;
 8004b44:	e000      	b.n	8004b48 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004b46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	00100070 	.word	0x00100070
 8004b68:	00100040 	.word	0x00100040
 8004b6c:	00100030 	.word	0x00100030
 8004b70:	00100020 	.word	0x00100020

08004b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a42      	ldr	r2, [pc, #264]	@ (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00f      	beq.n	8004bac <TIM_Base_SetConfig+0x38>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b92:	d00b      	beq.n	8004bac <TIM_Base_SetConfig+0x38>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3f      	ldr	r2, [pc, #252]	@ (8004c94 <TIM_Base_SetConfig+0x120>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_Base_SetConfig+0x38>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c98 <TIM_Base_SetConfig+0x124>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_Base_SetConfig+0x38>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a3d      	ldr	r2, [pc, #244]	@ (8004c9c <TIM_Base_SetConfig+0x128>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d108      	bne.n	8004bbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a33      	ldr	r2, [pc, #204]	@ (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01b      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bcc:	d017      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a30      	ldr	r2, [pc, #192]	@ (8004c94 <TIM_Base_SetConfig+0x120>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8004c98 <TIM_Base_SetConfig+0x124>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00f      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2e      	ldr	r2, [pc, #184]	@ (8004c9c <TIM_Base_SetConfig+0x128>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca0 <TIM_Base_SetConfig+0x12c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d007      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca4 <TIM_Base_SetConfig+0x130>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_Base_SetConfig+0x8a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8004ca8 <TIM_Base_SetConfig+0x134>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d108      	bne.n	8004c10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a16      	ldr	r2, [pc, #88]	@ (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00f      	beq.n	8004c5c <TIM_Base_SetConfig+0xe8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a17      	ldr	r2, [pc, #92]	@ (8004c9c <TIM_Base_SetConfig+0x128>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <TIM_Base_SetConfig+0xe8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a16      	ldr	r2, [pc, #88]	@ (8004ca0 <TIM_Base_SetConfig+0x12c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_Base_SetConfig+0xe8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ca4 <TIM_Base_SetConfig+0x130>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_Base_SetConfig+0xe8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a14      	ldr	r2, [pc, #80]	@ (8004ca8 <TIM_Base_SetConfig+0x134>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d103      	bne.n	8004c64 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d105      	bne.n	8004c82 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	611a      	str	r2, [r3, #16]
  }
}
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40013400 	.word	0x40013400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800

08004cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f023 0201 	bic.w	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f023 0302 	bic.w	r3, r3, #2
 8004cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <TIM_OC1_SetConfig+0x10c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00f      	beq.n	8004d2c <TIM_OC1_SetConfig+0x80>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8004dbc <TIM_OC1_SetConfig+0x110>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00b      	beq.n	8004d2c <TIM_OC1_SetConfig+0x80>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc0 <TIM_OC1_SetConfig+0x114>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_OC1_SetConfig+0x80>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a29      	ldr	r2, [pc, #164]	@ (8004dc4 <TIM_OC1_SetConfig+0x118>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_OC1_SetConfig+0x80>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a28      	ldr	r2, [pc, #160]	@ (8004dc8 <TIM_OC1_SetConfig+0x11c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d10c      	bne.n	8004d46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0308 	bic.w	r3, r3, #8
 8004d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f023 0304 	bic.w	r3, r3, #4
 8004d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1b      	ldr	r2, [pc, #108]	@ (8004db8 <TIM_OC1_SetConfig+0x10c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00f      	beq.n	8004d6e <TIM_OC1_SetConfig+0xc2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1a      	ldr	r2, [pc, #104]	@ (8004dbc <TIM_OC1_SetConfig+0x110>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00b      	beq.n	8004d6e <TIM_OC1_SetConfig+0xc2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a19      	ldr	r2, [pc, #100]	@ (8004dc0 <TIM_OC1_SetConfig+0x114>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <TIM_OC1_SetConfig+0xc2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a18      	ldr	r2, [pc, #96]	@ (8004dc4 <TIM_OC1_SetConfig+0x118>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_OC1_SetConfig+0xc2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a17      	ldr	r2, [pc, #92]	@ (8004dc8 <TIM_OC1_SetConfig+0x11c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d111      	bne.n	8004d92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	621a      	str	r2, [r3, #32]
}
 8004dac:	bf00      	nop
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40013400 	.word	0x40013400
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40014400 	.word	0x40014400
 8004dc8:	40014800 	.word	0x40014800

08004dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f023 0210 	bic.w	r2, r3, #16
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0320 	bic.w	r3, r3, #32
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a28      	ldr	r2, [pc, #160]	@ (8004ecc <TIM_OC2_SetConfig+0x100>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_OC2_SetConfig+0x6c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a27      	ldr	r2, [pc, #156]	@ (8004ed0 <TIM_OC2_SetConfig+0x104>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d10d      	bne.n	8004e54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a1d      	ldr	r2, [pc, #116]	@ (8004ecc <TIM_OC2_SetConfig+0x100>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00f      	beq.n	8004e7c <TIM_OC2_SetConfig+0xb0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ed0 <TIM_OC2_SetConfig+0x104>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00b      	beq.n	8004e7c <TIM_OC2_SetConfig+0xb0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed4 <TIM_OC2_SetConfig+0x108>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d007      	beq.n	8004e7c <TIM_OC2_SetConfig+0xb0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed8 <TIM_OC2_SetConfig+0x10c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_OC2_SetConfig+0xb0>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a19      	ldr	r2, [pc, #100]	@ (8004edc <TIM_OC2_SetConfig+0x110>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d113      	bne.n	8004ea4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	695b      	ldr	r3, [r3, #20]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40013400 	.word	0x40013400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800

08004ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a27      	ldr	r2, [pc, #156]	@ (8004fdc <TIM_OC3_SetConfig+0xfc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_OC3_SetConfig+0x6a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a26      	ldr	r2, [pc, #152]	@ (8004fe0 <TIM_OC3_SetConfig+0x100>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10d      	bne.n	8004f66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <TIM_OC3_SetConfig+0xfc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00f      	beq.n	8004f8e <TIM_OC3_SetConfig+0xae>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe0 <TIM_OC3_SetConfig+0x100>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00b      	beq.n	8004f8e <TIM_OC3_SetConfig+0xae>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1a      	ldr	r2, [pc, #104]	@ (8004fe4 <TIM_OC3_SetConfig+0x104>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <TIM_OC3_SetConfig+0xae>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a19      	ldr	r2, [pc, #100]	@ (8004fe8 <TIM_OC3_SetConfig+0x108>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d003      	beq.n	8004f8e <TIM_OC3_SetConfig+0xae>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a18      	ldr	r2, [pc, #96]	@ (8004fec <TIM_OC3_SetConfig+0x10c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d113      	bne.n	8004fb6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40013400 	.word	0x40013400
 8004fe4:	40014000 	.word	0x40014000
 8004fe8:	40014400 	.word	0x40014400
 8004fec:	40014800 	.word	0x40014800

08004ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800503e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	031b      	lsls	r3, r3, #12
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a28      	ldr	r2, [pc, #160]	@ (80050f0 <TIM_OC4_SetConfig+0x100>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC4_SetConfig+0x6c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a27      	ldr	r2, [pc, #156]	@ (80050f4 <TIM_OC4_SetConfig+0x104>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d10d      	bne.n	8005078 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	031b      	lsls	r3, r3, #12
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a1d      	ldr	r2, [pc, #116]	@ (80050f0 <TIM_OC4_SetConfig+0x100>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00f      	beq.n	80050a0 <TIM_OC4_SetConfig+0xb0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a1c      	ldr	r2, [pc, #112]	@ (80050f4 <TIM_OC4_SetConfig+0x104>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00b      	beq.n	80050a0 <TIM_OC4_SetConfig+0xb0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a1b      	ldr	r2, [pc, #108]	@ (80050f8 <TIM_OC4_SetConfig+0x108>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_OC4_SetConfig+0xb0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a1a      	ldr	r2, [pc, #104]	@ (80050fc <TIM_OC4_SetConfig+0x10c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC4_SetConfig+0xb0>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a19      	ldr	r2, [pc, #100]	@ (8005100 <TIM_OC4_SetConfig+0x110>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d113      	bne.n	80050c8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	019b      	lsls	r3, r3, #6
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	019b      	lsls	r3, r3, #6
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40013400 	.word	0x40013400
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800

08005104 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005148:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	041b      	lsls	r3, r3, #16
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a17      	ldr	r2, [pc, #92]	@ (80051b8 <TIM_OC5_SetConfig+0xb4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <TIM_OC5_SetConfig+0x7a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a16      	ldr	r2, [pc, #88]	@ (80051bc <TIM_OC5_SetConfig+0xb8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_OC5_SetConfig+0x7a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a15      	ldr	r2, [pc, #84]	@ (80051c0 <TIM_OC5_SetConfig+0xbc>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_OC5_SetConfig+0x7a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a14      	ldr	r2, [pc, #80]	@ (80051c4 <TIM_OC5_SetConfig+0xc0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_OC5_SetConfig+0x7a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a13      	ldr	r2, [pc, #76]	@ (80051c8 <TIM_OC5_SetConfig+0xc4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d109      	bne.n	8005192 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005184:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	621a      	str	r2, [r3, #32]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40013400 	.word	0x40013400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800

080051cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	021b      	lsls	r3, r3, #8
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	051b      	lsls	r3, r3, #20
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a18      	ldr	r2, [pc, #96]	@ (8005284 <TIM_OC6_SetConfig+0xb8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00f      	beq.n	8005248 <TIM_OC6_SetConfig+0x7c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a17      	ldr	r2, [pc, #92]	@ (8005288 <TIM_OC6_SetConfig+0xbc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00b      	beq.n	8005248 <TIM_OC6_SetConfig+0x7c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a16      	ldr	r2, [pc, #88]	@ (800528c <TIM_OC6_SetConfig+0xc0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_OC6_SetConfig+0x7c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a15      	ldr	r2, [pc, #84]	@ (8005290 <TIM_OC6_SetConfig+0xc4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC6_SetConfig+0x7c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a14      	ldr	r2, [pc, #80]	@ (8005294 <TIM_OC6_SetConfig+0xc8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d109      	bne.n	800525c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40012c00 	.word	0x40012c00
 8005288:	40013400 	.word	0x40013400
 800528c:	40014000 	.word	0x40014000
 8005290:	40014400 	.word	0x40014400
 8005294:	40014800 	.word	0x40014800

08005298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f023 0201 	bic.w	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 030a 	bic.w	r3, r3, #10
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b087      	sub	sp, #28
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f023 0210 	bic.w	r2, r3, #16
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005332:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800536c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	f043 0307 	orr.w	r3, r3, #7
 800537c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	609a      	str	r2, [r3, #8]
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	021a      	lsls	r2, r3, #8
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e065      	b.n	80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a2c      	ldr	r2, [pc, #176]	@ (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d004      	beq.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a2b      	ldr	r2, [pc, #172]	@ (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d108      	bne.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005422:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005438:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1b      	ldr	r2, [pc, #108]	@ (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545e:	d013      	beq.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a18      	ldr	r2, [pc, #96]	@ (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a17      	ldr	r2, [pc, #92]	@ (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a12      	ldr	r2, [pc, #72]	@ (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a13      	ldr	r2, [pc, #76]	@ (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d10c      	bne.n	80054a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800548e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	4313      	orrs	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40013400 	.word	0x40013400
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	40014000 	.word	0x40014000

080054d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e042      	b.n	800556c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d106      	bne.n	80054fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7fb fb4f 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2224      	movs	r2, #36	@ 0x24
 8005502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fb82 	bl	8005c28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f8b3 	bl	8005690 <UART_SetConfig>
 800552a:	4603      	mov	r3, r0
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e01b      	b.n	800556c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fc01 	bl	8005d6c <UART_CheckIdleState>
 800556a:	4603      	mov	r3, r0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08a      	sub	sp, #40	@ 0x28
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558a:	2b20      	cmp	r3, #32
 800558c:	d17b      	bne.n	8005686 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_UART_Transmit+0x26>
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e074      	b.n	8005688 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2221      	movs	r2, #33	@ 0x21
 80055aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055ae:	f7fb fcb9 	bl	8000f24 <HAL_GetTick>
 80055b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055cc:	d108      	bne.n	80055e0 <HAL_UART_Transmit+0x6c>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d104      	bne.n	80055e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	e003      	b.n	80055e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055e8:	e030      	b.n	800564c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2200      	movs	r2, #0
 80055f2:	2180      	movs	r1, #128	@ 0x80
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fc63 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d005      	beq.n	800560c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e03d      	b.n	8005688 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10b      	bne.n	800562a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005620:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	3302      	adds	r3, #2
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	e007      	b.n	800563a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	3301      	adds	r3, #1
 8005638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1c8      	bne.n	80055ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2200      	movs	r2, #0
 8005660:	2140      	movs	r1, #64	@ 0x40
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fc2c 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e006      	b.n	8005688 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	e000      	b.n	8005688 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005686:	2302      	movs	r3, #2
  }
}
 8005688:	4618      	mov	r0, r3
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005694:	b08c      	sub	sp, #48	@ 0x30
 8005696:	af00      	add	r7, sp, #0
 8005698:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	431a      	orrs	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4bab      	ldr	r3, [pc, #684]	@ (800596c <UART_SetConfig+0x2dc>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	6812      	ldr	r2, [r2, #0]
 80056c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4aa0      	ldr	r2, [pc, #640]	@ (8005970 <UART_SetConfig+0x2e0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056f8:	4313      	orrs	r3, r2
 80056fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005706:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005710:	430b      	orrs	r3, r1
 8005712:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571a:	f023 010f 	bic.w	r1, r3, #15
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a91      	ldr	r2, [pc, #580]	@ (8005974 <UART_SetConfig+0x2e4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d125      	bne.n	8005780 <UART_SetConfig+0xf0>
 8005734:	4b90      	ldr	r3, [pc, #576]	@ (8005978 <UART_SetConfig+0x2e8>)
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b03      	cmp	r3, #3
 8005740:	d81a      	bhi.n	8005778 <UART_SetConfig+0xe8>
 8005742:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <UART_SetConfig+0xb8>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005759 	.word	0x08005759
 800574c:	08005769 	.word	0x08005769
 8005750:	08005761 	.word	0x08005761
 8005754:	08005771 	.word	0x08005771
 8005758:	2301      	movs	r3, #1
 800575a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575e:	e0d6      	b.n	800590e <UART_SetConfig+0x27e>
 8005760:	2302      	movs	r3, #2
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005766:	e0d2      	b.n	800590e <UART_SetConfig+0x27e>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576e:	e0ce      	b.n	800590e <UART_SetConfig+0x27e>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005776:	e0ca      	b.n	800590e <UART_SetConfig+0x27e>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577e:	e0c6      	b.n	800590e <UART_SetConfig+0x27e>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a7d      	ldr	r2, [pc, #500]	@ (800597c <UART_SetConfig+0x2ec>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d138      	bne.n	80057fc <UART_SetConfig+0x16c>
 800578a:	4b7b      	ldr	r3, [pc, #492]	@ (8005978 <UART_SetConfig+0x2e8>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005790:	f003 030c 	and.w	r3, r3, #12
 8005794:	2b0c      	cmp	r3, #12
 8005796:	d82d      	bhi.n	80057f4 <UART_SetConfig+0x164>
 8005798:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <UART_SetConfig+0x110>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057d5 	.word	0x080057d5
 80057a4:	080057f5 	.word	0x080057f5
 80057a8:	080057f5 	.word	0x080057f5
 80057ac:	080057f5 	.word	0x080057f5
 80057b0:	080057e5 	.word	0x080057e5
 80057b4:	080057f5 	.word	0x080057f5
 80057b8:	080057f5 	.word	0x080057f5
 80057bc:	080057f5 	.word	0x080057f5
 80057c0:	080057dd 	.word	0x080057dd
 80057c4:	080057f5 	.word	0x080057f5
 80057c8:	080057f5 	.word	0x080057f5
 80057cc:	080057f5 	.word	0x080057f5
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	2300      	movs	r3, #0
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057da:	e098      	b.n	800590e <UART_SetConfig+0x27e>
 80057dc:	2302      	movs	r3, #2
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e2:	e094      	b.n	800590e <UART_SetConfig+0x27e>
 80057e4:	2304      	movs	r3, #4
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ea:	e090      	b.n	800590e <UART_SetConfig+0x27e>
 80057ec:	2308      	movs	r3, #8
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f2:	e08c      	b.n	800590e <UART_SetConfig+0x27e>
 80057f4:	2310      	movs	r3, #16
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fa:	e088      	b.n	800590e <UART_SetConfig+0x27e>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a5f      	ldr	r2, [pc, #380]	@ (8005980 <UART_SetConfig+0x2f0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d125      	bne.n	8005852 <UART_SetConfig+0x1c2>
 8005806:	4b5c      	ldr	r3, [pc, #368]	@ (8005978 <UART_SetConfig+0x2e8>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005810:	2b30      	cmp	r3, #48	@ 0x30
 8005812:	d016      	beq.n	8005842 <UART_SetConfig+0x1b2>
 8005814:	2b30      	cmp	r3, #48	@ 0x30
 8005816:	d818      	bhi.n	800584a <UART_SetConfig+0x1ba>
 8005818:	2b20      	cmp	r3, #32
 800581a:	d00a      	beq.n	8005832 <UART_SetConfig+0x1a2>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d814      	bhi.n	800584a <UART_SetConfig+0x1ba>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <UART_SetConfig+0x19a>
 8005824:	2b10      	cmp	r3, #16
 8005826:	d008      	beq.n	800583a <UART_SetConfig+0x1aa>
 8005828:	e00f      	b.n	800584a <UART_SetConfig+0x1ba>
 800582a:	2300      	movs	r3, #0
 800582c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005830:	e06d      	b.n	800590e <UART_SetConfig+0x27e>
 8005832:	2302      	movs	r3, #2
 8005834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005838:	e069      	b.n	800590e <UART_SetConfig+0x27e>
 800583a:	2304      	movs	r3, #4
 800583c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005840:	e065      	b.n	800590e <UART_SetConfig+0x27e>
 8005842:	2308      	movs	r3, #8
 8005844:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005848:	e061      	b.n	800590e <UART_SetConfig+0x27e>
 800584a:	2310      	movs	r3, #16
 800584c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005850:	e05d      	b.n	800590e <UART_SetConfig+0x27e>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a4b      	ldr	r2, [pc, #300]	@ (8005984 <UART_SetConfig+0x2f4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d125      	bne.n	80058a8 <UART_SetConfig+0x218>
 800585c:	4b46      	ldr	r3, [pc, #280]	@ (8005978 <UART_SetConfig+0x2e8>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005862:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005866:	2bc0      	cmp	r3, #192	@ 0xc0
 8005868:	d016      	beq.n	8005898 <UART_SetConfig+0x208>
 800586a:	2bc0      	cmp	r3, #192	@ 0xc0
 800586c:	d818      	bhi.n	80058a0 <UART_SetConfig+0x210>
 800586e:	2b80      	cmp	r3, #128	@ 0x80
 8005870:	d00a      	beq.n	8005888 <UART_SetConfig+0x1f8>
 8005872:	2b80      	cmp	r3, #128	@ 0x80
 8005874:	d814      	bhi.n	80058a0 <UART_SetConfig+0x210>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <UART_SetConfig+0x1f0>
 800587a:	2b40      	cmp	r3, #64	@ 0x40
 800587c:	d008      	beq.n	8005890 <UART_SetConfig+0x200>
 800587e:	e00f      	b.n	80058a0 <UART_SetConfig+0x210>
 8005880:	2300      	movs	r3, #0
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005886:	e042      	b.n	800590e <UART_SetConfig+0x27e>
 8005888:	2302      	movs	r3, #2
 800588a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800588e:	e03e      	b.n	800590e <UART_SetConfig+0x27e>
 8005890:	2304      	movs	r3, #4
 8005892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005896:	e03a      	b.n	800590e <UART_SetConfig+0x27e>
 8005898:	2308      	movs	r3, #8
 800589a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800589e:	e036      	b.n	800590e <UART_SetConfig+0x27e>
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058a6:	e032      	b.n	800590e <UART_SetConfig+0x27e>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a30      	ldr	r2, [pc, #192]	@ (8005970 <UART_SetConfig+0x2e0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d12a      	bne.n	8005908 <UART_SetConfig+0x278>
 80058b2:	4b31      	ldr	r3, [pc, #196]	@ (8005978 <UART_SetConfig+0x2e8>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058c0:	d01a      	beq.n	80058f8 <UART_SetConfig+0x268>
 80058c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058c6:	d81b      	bhi.n	8005900 <UART_SetConfig+0x270>
 80058c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058cc:	d00c      	beq.n	80058e8 <UART_SetConfig+0x258>
 80058ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058d2:	d815      	bhi.n	8005900 <UART_SetConfig+0x270>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <UART_SetConfig+0x250>
 80058d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058dc:	d008      	beq.n	80058f0 <UART_SetConfig+0x260>
 80058de:	e00f      	b.n	8005900 <UART_SetConfig+0x270>
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058e6:	e012      	b.n	800590e <UART_SetConfig+0x27e>
 80058e8:	2302      	movs	r3, #2
 80058ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ee:	e00e      	b.n	800590e <UART_SetConfig+0x27e>
 80058f0:	2304      	movs	r3, #4
 80058f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058f6:	e00a      	b.n	800590e <UART_SetConfig+0x27e>
 80058f8:	2308      	movs	r3, #8
 80058fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058fe:	e006      	b.n	800590e <UART_SetConfig+0x27e>
 8005900:	2310      	movs	r3, #16
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005906:	e002      	b.n	800590e <UART_SetConfig+0x27e>
 8005908:	2310      	movs	r3, #16
 800590a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a17      	ldr	r2, [pc, #92]	@ (8005970 <UART_SetConfig+0x2e0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	f040 80a8 	bne.w	8005a6a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800591a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800591e:	2b08      	cmp	r3, #8
 8005920:	d834      	bhi.n	800598c <UART_SetConfig+0x2fc>
 8005922:	a201      	add	r2, pc, #4	@ (adr r2, 8005928 <UART_SetConfig+0x298>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	0800594d 	.word	0x0800594d
 800592c:	0800598d 	.word	0x0800598d
 8005930:	08005955 	.word	0x08005955
 8005934:	0800598d 	.word	0x0800598d
 8005938:	0800595b 	.word	0x0800595b
 800593c:	0800598d 	.word	0x0800598d
 8005940:	0800598d 	.word	0x0800598d
 8005944:	0800598d 	.word	0x0800598d
 8005948:	08005963 	.word	0x08005963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800594c:	f7fe fbea 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005952:	e021      	b.n	8005998 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005954:	4b0c      	ldr	r3, [pc, #48]	@ (8005988 <UART_SetConfig+0x2f8>)
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005958:	e01e      	b.n	8005998 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595a:	f7fe fb75 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 800595e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005960:	e01a      	b.n	8005998 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005968:	e016      	b.n	8005998 <UART_SetConfig+0x308>
 800596a:	bf00      	nop
 800596c:	cfff69f3 	.word	0xcfff69f3
 8005970:	40008000 	.word	0x40008000
 8005974:	40013800 	.word	0x40013800
 8005978:	40021000 	.word	0x40021000
 800597c:	40004400 	.word	0x40004400
 8005980:	40004800 	.word	0x40004800
 8005984:	40004c00 	.word	0x40004c00
 8005988:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005996:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 812a 	beq.w	8005bf4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	4a9e      	ldr	r2, [pc, #632]	@ (8005c20 <UART_SetConfig+0x590>)
 80059a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	4413      	add	r3, r2
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d305      	bcc.n	80059d0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d903      	bls.n	80059d8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059d6:	e10d      	b.n	8005bf4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	2200      	movs	r2, #0
 80059dc:	60bb      	str	r3, [r7, #8]
 80059de:	60fa      	str	r2, [r7, #12]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	4a8e      	ldr	r2, [pc, #568]	@ (8005c20 <UART_SetConfig+0x590>)
 80059e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2200      	movs	r2, #0
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059fa:	f7fa fc69 	bl	80002d0 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4610      	mov	r0, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	020b      	lsls	r3, r1, #8
 8005a10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a14:	0202      	lsls	r2, r0, #8
 8005a16:	6979      	ldr	r1, [r7, #20]
 8005a18:	6849      	ldr	r1, [r1, #4]
 8005a1a:	0849      	lsrs	r1, r1, #1
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	4605      	mov	r5, r0
 8005a22:	eb12 0804 	adds.w	r8, r2, r4
 8005a26:	eb43 0905 	adc.w	r9, r3, r5
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	469a      	mov	sl, r3
 8005a32:	4693      	mov	fp, r2
 8005a34:	4652      	mov	r2, sl
 8005a36:	465b      	mov	r3, fp
 8005a38:	4640      	mov	r0, r8
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	f7fa fc48 	bl	80002d0 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4613      	mov	r3, r2
 8005a46:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a4e:	d308      	bcc.n	8005a62 <UART_SetConfig+0x3d2>
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a56:	d204      	bcs.n	8005a62 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6a3a      	ldr	r2, [r7, #32]
 8005a5e:	60da      	str	r2, [r3, #12]
 8005a60:	e0c8      	b.n	8005bf4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a68:	e0c4      	b.n	8005bf4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a72:	d167      	bne.n	8005b44 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005a74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d828      	bhi.n	8005ace <UART_SetConfig+0x43e>
 8005a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a84 <UART_SetConfig+0x3f4>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005aa9 	.word	0x08005aa9
 8005a88:	08005ab1 	.word	0x08005ab1
 8005a8c:	08005ab9 	.word	0x08005ab9
 8005a90:	08005acf 	.word	0x08005acf
 8005a94:	08005abf 	.word	0x08005abf
 8005a98:	08005acf 	.word	0x08005acf
 8005a9c:	08005acf 	.word	0x08005acf
 8005aa0:	08005acf 	.word	0x08005acf
 8005aa4:	08005ac7 	.word	0x08005ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa8:	f7fe fb3c 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005aac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005aae:	e014      	b.n	8005ada <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ab0:	f7fe fb4e 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8005ab4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ab6:	e010      	b.n	8005ada <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8005c24 <UART_SetConfig+0x594>)
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005abc:	e00d      	b.n	8005ada <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005abe:	f7fe fac3 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8005ac2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ac4:	e009      	b.n	8005ada <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005acc:	e005      	b.n	8005ada <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8089 	beq.w	8005bf4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	4a4e      	ldr	r2, [pc, #312]	@ (8005c20 <UART_SetConfig+0x590>)
 8005ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aec:	461a      	mov	r2, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005af4:	005a      	lsls	r2, r3, #1
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	441a      	add	r2, r3
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	2b0f      	cmp	r3, #15
 8005b0c:	d916      	bls.n	8005b3c <UART_SetConfig+0x4ac>
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b14:	d212      	bcs.n	8005b3c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f023 030f 	bic.w	r3, r3, #15
 8005b1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	8bfb      	ldrh	r3, [r7, #30]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	8bfa      	ldrh	r2, [r7, #30]
 8005b38:	60da      	str	r2, [r3, #12]
 8005b3a:	e05b      	b.n	8005bf4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b42:	e057      	b.n	8005bf4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d828      	bhi.n	8005b9e <UART_SetConfig+0x50e>
 8005b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b54 <UART_SetConfig+0x4c4>)
 8005b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b52:	bf00      	nop
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b81 	.word	0x08005b81
 8005b5c:	08005b89 	.word	0x08005b89
 8005b60:	08005b9f 	.word	0x08005b9f
 8005b64:	08005b8f 	.word	0x08005b8f
 8005b68:	08005b9f 	.word	0x08005b9f
 8005b6c:	08005b9f 	.word	0x08005b9f
 8005b70:	08005b9f 	.word	0x08005b9f
 8005b74:	08005b97 	.word	0x08005b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b78:	f7fe fad4 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005b7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b7e:	e014      	b.n	8005baa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b80:	f7fe fae6 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8005b84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b86:	e010      	b.n	8005baa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b88:	4b26      	ldr	r3, [pc, #152]	@ (8005c24 <UART_SetConfig+0x594>)
 8005b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b8c:	e00d      	b.n	8005baa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b8e:	f7fe fa5b 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8005b92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b94:	e009      	b.n	8005baa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b9c:	e005      	b.n	8005baa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ba8:	bf00      	nop
    }

    if (pclk != 0U)
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d021      	beq.n	8005bf4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8005c20 <UART_SetConfig+0x590>)
 8005bb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	441a      	add	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d909      	bls.n	8005bee <UART_SetConfig+0x55e>
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be0:	d205      	bcs.n	8005bee <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60da      	str	r2, [r3, #12]
 8005bec:	e002      	b.n	8005bf4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	2200      	movs	r2, #0
 8005c08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3730      	adds	r7, #48	@ 0x30
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c1e:	bf00      	nop
 8005c20:	08006bf0 	.word	0x08006bf0
 8005c24:	00f42400 	.word	0x00f42400

08005c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00a      	beq.n	8005cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01a      	beq.n	8005d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d26:	d10a      	bne.n	8005d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b098      	sub	sp, #96	@ 0x60
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d7c:	f7fb f8d2 	bl	8000f24 <HAL_GetTick>
 8005d80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d12f      	bne.n	8005df0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f88e 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d022      	beq.n	8005df0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e6      	bne.n	8005daa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e063      	b.n	8005eb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d149      	bne.n	8005e92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e06:	2200      	movs	r2, #0
 8005e08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f857 	bl	8005ec0 <UART_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d03c      	beq.n	8005e92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	623b      	str	r3, [r7, #32]
   return(result);
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e6      	bne.n	8005e18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3308      	adds	r3, #8
 8005e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3308      	adds	r3, #8
 8005e68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e6a:	61fa      	str	r2, [r7, #28]
 8005e6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	69b9      	ldr	r1, [r7, #24]
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	617b      	str	r3, [r7, #20]
   return(result);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e5      	bne.n	8005e4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e012      	b.n	8005eb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3758      	adds	r7, #88	@ 0x58
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed0:	e04f      	b.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ed8:	d04b      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eda:	f7fb f823 	bl	8000f24 <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d302      	bcc.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e04e      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d037      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b80      	cmp	r3, #128	@ 0x80
 8005f06:	d034      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b40      	cmp	r3, #64	@ 0x40
 8005f0c:	d031      	beq.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d110      	bne.n	8005f3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2208      	movs	r2, #8
 8005f22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f838 	bl	8005f9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e029      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f4c:	d111      	bne.n	8005f72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f81e 	bl	8005f9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e00f      	b.n	8005f92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69da      	ldr	r2, [r3, #28]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	bf0c      	ite	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	2300      	movne	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d0a0      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b095      	sub	sp, #84	@ 0x54
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fc8:	e841 2300 	strex	r3, r2, [r1]
 8005fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1e6      	bne.n	8005fa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ff8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e3      	bne.n	8005fd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d118      	bne.n	8006046 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	60bb      	str	r3, [r7, #8]
   return(result);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f023 0310 	bic.w	r3, r3, #16
 8006028:	647b      	str	r3, [r7, #68]	@ 0x44
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6979      	ldr	r1, [r7, #20]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	613b      	str	r3, [r7, #16]
   return(result);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e6      	bne.n	8006014 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800605a:	bf00      	nop
 800605c:	3754      	adds	r7, #84	@ 0x54
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_UARTEx_DisableFifoMode+0x16>
 8006078:	2302      	movs	r3, #2
 800607a:	e027      	b.n	80060cc <HAL_UARTEx_DisableFifoMode+0x66>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2224      	movs	r2, #36	@ 0x24
 8006088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e02d      	b.n	800614c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2224      	movs	r2, #36	@ 0x24
 80060fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f022 0201 	bic.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f84f 	bl	80061d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006168:	2302      	movs	r3, #2
 800616a:	e02d      	b.n	80061c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2224      	movs	r2, #36	@ 0x24
 8006178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0201 	bic.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f811 	bl	80061d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d108      	bne.n	80061f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061f0:	e031      	b.n	8006256 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061f2:	2308      	movs	r3, #8
 80061f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061f6:	2308      	movs	r3, #8
 80061f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	0e5b      	lsrs	r3, r3, #25
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	0f5b      	lsrs	r3, r3, #29
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	7b3a      	ldrb	r2, [r7, #12]
 800621e:	4911      	ldr	r1, [pc, #68]	@ (8006264 <UARTEx_SetNbDataToProcess+0x94>)
 8006220:	5c8a      	ldrb	r2, [r1, r2]
 8006222:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006226:	7b3a      	ldrb	r2, [r7, #12]
 8006228:	490f      	ldr	r1, [pc, #60]	@ (8006268 <UARTEx_SetNbDataToProcess+0x98>)
 800622a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800622c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006230:	b29a      	uxth	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	7b7a      	ldrb	r2, [r7, #13]
 800623c:	4909      	ldr	r1, [pc, #36]	@ (8006264 <UARTEx_SetNbDataToProcess+0x94>)
 800623e:	5c8a      	ldrb	r2, [r1, r2]
 8006240:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006244:	7b7a      	ldrb	r2, [r7, #13]
 8006246:	4908      	ldr	r1, [pc, #32]	@ (8006268 <UARTEx_SetNbDataToProcess+0x98>)
 8006248:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624a:	fb93 f3f2 	sdiv	r3, r3, r2
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	08006c08 	.word	0x08006c08
 8006268:	08006c10 	.word	0x08006c10

0800626c <siprintf>:
 800626c:	b40e      	push	{r1, r2, r3}
 800626e:	b500      	push	{lr}
 8006270:	b09c      	sub	sp, #112	@ 0x70
 8006272:	ab1d      	add	r3, sp, #116	@ 0x74
 8006274:	9002      	str	r0, [sp, #8]
 8006276:	9006      	str	r0, [sp, #24]
 8006278:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800627c:	4809      	ldr	r0, [pc, #36]	@ (80062a4 <siprintf+0x38>)
 800627e:	9107      	str	r1, [sp, #28]
 8006280:	9104      	str	r1, [sp, #16]
 8006282:	4909      	ldr	r1, [pc, #36]	@ (80062a8 <siprintf+0x3c>)
 8006284:	f853 2b04 	ldr.w	r2, [r3], #4
 8006288:	9105      	str	r1, [sp, #20]
 800628a:	6800      	ldr	r0, [r0, #0]
 800628c:	9301      	str	r3, [sp, #4]
 800628e:	a902      	add	r1, sp, #8
 8006290:	f000 f994 	bl	80065bc <_svfiprintf_r>
 8006294:	9b02      	ldr	r3, [sp, #8]
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	b01c      	add	sp, #112	@ 0x70
 800629c:	f85d eb04 	ldr.w	lr, [sp], #4
 80062a0:	b003      	add	sp, #12
 80062a2:	4770      	bx	lr
 80062a4:	2000000c 	.word	0x2000000c
 80062a8:	ffff0208 	.word	0xffff0208

080062ac <memset>:
 80062ac:	4402      	add	r2, r0
 80062ae:	4603      	mov	r3, r0
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d100      	bne.n	80062b6 <memset+0xa>
 80062b4:	4770      	bx	lr
 80062b6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ba:	e7f9      	b.n	80062b0 <memset+0x4>

080062bc <__errno>:
 80062bc:	4b01      	ldr	r3, [pc, #4]	@ (80062c4 <__errno+0x8>)
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	2000000c 	.word	0x2000000c

080062c8 <__libc_init_array>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	4d0d      	ldr	r5, [pc, #52]	@ (8006300 <__libc_init_array+0x38>)
 80062cc:	4c0d      	ldr	r4, [pc, #52]	@ (8006304 <__libc_init_array+0x3c>)
 80062ce:	1b64      	subs	r4, r4, r5
 80062d0:	10a4      	asrs	r4, r4, #2
 80062d2:	2600      	movs	r6, #0
 80062d4:	42a6      	cmp	r6, r4
 80062d6:	d109      	bne.n	80062ec <__libc_init_array+0x24>
 80062d8:	4d0b      	ldr	r5, [pc, #44]	@ (8006308 <__libc_init_array+0x40>)
 80062da:	4c0c      	ldr	r4, [pc, #48]	@ (800630c <__libc_init_array+0x44>)
 80062dc:	f000 fc66 	bl	8006bac <_init>
 80062e0:	1b64      	subs	r4, r4, r5
 80062e2:	10a4      	asrs	r4, r4, #2
 80062e4:	2600      	movs	r6, #0
 80062e6:	42a6      	cmp	r6, r4
 80062e8:	d105      	bne.n	80062f6 <__libc_init_array+0x2e>
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f0:	4798      	blx	r3
 80062f2:	3601      	adds	r6, #1
 80062f4:	e7ee      	b.n	80062d4 <__libc_init_array+0xc>
 80062f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062fa:	4798      	blx	r3
 80062fc:	3601      	adds	r6, #1
 80062fe:	e7f2      	b.n	80062e6 <__libc_init_array+0x1e>
 8006300:	08006c54 	.word	0x08006c54
 8006304:	08006c54 	.word	0x08006c54
 8006308:	08006c54 	.word	0x08006c54
 800630c:	08006c58 	.word	0x08006c58

08006310 <__retarget_lock_acquire_recursive>:
 8006310:	4770      	bx	lr

08006312 <__retarget_lock_release_recursive>:
 8006312:	4770      	bx	lr

08006314 <_free_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4605      	mov	r5, r0
 8006318:	2900      	cmp	r1, #0
 800631a:	d041      	beq.n	80063a0 <_free_r+0x8c>
 800631c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006320:	1f0c      	subs	r4, r1, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	bfb8      	it	lt
 8006326:	18e4      	addlt	r4, r4, r3
 8006328:	f000 f8e0 	bl	80064ec <__malloc_lock>
 800632c:	4a1d      	ldr	r2, [pc, #116]	@ (80063a4 <_free_r+0x90>)
 800632e:	6813      	ldr	r3, [r2, #0]
 8006330:	b933      	cbnz	r3, 8006340 <_free_r+0x2c>
 8006332:	6063      	str	r3, [r4, #4]
 8006334:	6014      	str	r4, [r2, #0]
 8006336:	4628      	mov	r0, r5
 8006338:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800633c:	f000 b8dc 	b.w	80064f8 <__malloc_unlock>
 8006340:	42a3      	cmp	r3, r4
 8006342:	d908      	bls.n	8006356 <_free_r+0x42>
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	1821      	adds	r1, r4, r0
 8006348:	428b      	cmp	r3, r1
 800634a:	bf01      	itttt	eq
 800634c:	6819      	ldreq	r1, [r3, #0]
 800634e:	685b      	ldreq	r3, [r3, #4]
 8006350:	1809      	addeq	r1, r1, r0
 8006352:	6021      	streq	r1, [r4, #0]
 8006354:	e7ed      	b.n	8006332 <_free_r+0x1e>
 8006356:	461a      	mov	r2, r3
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	b10b      	cbz	r3, 8006360 <_free_r+0x4c>
 800635c:	42a3      	cmp	r3, r4
 800635e:	d9fa      	bls.n	8006356 <_free_r+0x42>
 8006360:	6811      	ldr	r1, [r2, #0]
 8006362:	1850      	adds	r0, r2, r1
 8006364:	42a0      	cmp	r0, r4
 8006366:	d10b      	bne.n	8006380 <_free_r+0x6c>
 8006368:	6820      	ldr	r0, [r4, #0]
 800636a:	4401      	add	r1, r0
 800636c:	1850      	adds	r0, r2, r1
 800636e:	4283      	cmp	r3, r0
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	d1e0      	bne.n	8006336 <_free_r+0x22>
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	6053      	str	r3, [r2, #4]
 800637a:	4408      	add	r0, r1
 800637c:	6010      	str	r0, [r2, #0]
 800637e:	e7da      	b.n	8006336 <_free_r+0x22>
 8006380:	d902      	bls.n	8006388 <_free_r+0x74>
 8006382:	230c      	movs	r3, #12
 8006384:	602b      	str	r3, [r5, #0]
 8006386:	e7d6      	b.n	8006336 <_free_r+0x22>
 8006388:	6820      	ldr	r0, [r4, #0]
 800638a:	1821      	adds	r1, r4, r0
 800638c:	428b      	cmp	r3, r1
 800638e:	bf04      	itt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	6063      	str	r3, [r4, #4]
 8006396:	bf04      	itt	eq
 8006398:	1809      	addeq	r1, r1, r0
 800639a:	6021      	streq	r1, [r4, #0]
 800639c:	6054      	str	r4, [r2, #4]
 800639e:	e7ca      	b.n	8006336 <_free_r+0x22>
 80063a0:	bd38      	pop	{r3, r4, r5, pc}
 80063a2:	bf00      	nop
 80063a4:	20000370 	.word	0x20000370

080063a8 <sbrk_aligned>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	4e0f      	ldr	r6, [pc, #60]	@ (80063e8 <sbrk_aligned+0x40>)
 80063ac:	460c      	mov	r4, r1
 80063ae:	6831      	ldr	r1, [r6, #0]
 80063b0:	4605      	mov	r5, r0
 80063b2:	b911      	cbnz	r1, 80063ba <sbrk_aligned+0x12>
 80063b4:	f000 fba6 	bl	8006b04 <_sbrk_r>
 80063b8:	6030      	str	r0, [r6, #0]
 80063ba:	4621      	mov	r1, r4
 80063bc:	4628      	mov	r0, r5
 80063be:	f000 fba1 	bl	8006b04 <_sbrk_r>
 80063c2:	1c43      	adds	r3, r0, #1
 80063c4:	d103      	bne.n	80063ce <sbrk_aligned+0x26>
 80063c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80063ca:	4620      	mov	r0, r4
 80063cc:	bd70      	pop	{r4, r5, r6, pc}
 80063ce:	1cc4      	adds	r4, r0, #3
 80063d0:	f024 0403 	bic.w	r4, r4, #3
 80063d4:	42a0      	cmp	r0, r4
 80063d6:	d0f8      	beq.n	80063ca <sbrk_aligned+0x22>
 80063d8:	1a21      	subs	r1, r4, r0
 80063da:	4628      	mov	r0, r5
 80063dc:	f000 fb92 	bl	8006b04 <_sbrk_r>
 80063e0:	3001      	adds	r0, #1
 80063e2:	d1f2      	bne.n	80063ca <sbrk_aligned+0x22>
 80063e4:	e7ef      	b.n	80063c6 <sbrk_aligned+0x1e>
 80063e6:	bf00      	nop
 80063e8:	2000036c 	.word	0x2000036c

080063ec <_malloc_r>:
 80063ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f0:	1ccd      	adds	r5, r1, #3
 80063f2:	f025 0503 	bic.w	r5, r5, #3
 80063f6:	3508      	adds	r5, #8
 80063f8:	2d0c      	cmp	r5, #12
 80063fa:	bf38      	it	cc
 80063fc:	250c      	movcc	r5, #12
 80063fe:	2d00      	cmp	r5, #0
 8006400:	4606      	mov	r6, r0
 8006402:	db01      	blt.n	8006408 <_malloc_r+0x1c>
 8006404:	42a9      	cmp	r1, r5
 8006406:	d904      	bls.n	8006412 <_malloc_r+0x26>
 8006408:	230c      	movs	r3, #12
 800640a:	6033      	str	r3, [r6, #0]
 800640c:	2000      	movs	r0, #0
 800640e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006412:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064e8 <_malloc_r+0xfc>
 8006416:	f000 f869 	bl	80064ec <__malloc_lock>
 800641a:	f8d8 3000 	ldr.w	r3, [r8]
 800641e:	461c      	mov	r4, r3
 8006420:	bb44      	cbnz	r4, 8006474 <_malloc_r+0x88>
 8006422:	4629      	mov	r1, r5
 8006424:	4630      	mov	r0, r6
 8006426:	f7ff ffbf 	bl	80063a8 <sbrk_aligned>
 800642a:	1c43      	adds	r3, r0, #1
 800642c:	4604      	mov	r4, r0
 800642e:	d158      	bne.n	80064e2 <_malloc_r+0xf6>
 8006430:	f8d8 4000 	ldr.w	r4, [r8]
 8006434:	4627      	mov	r7, r4
 8006436:	2f00      	cmp	r7, #0
 8006438:	d143      	bne.n	80064c2 <_malloc_r+0xd6>
 800643a:	2c00      	cmp	r4, #0
 800643c:	d04b      	beq.n	80064d6 <_malloc_r+0xea>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	4639      	mov	r1, r7
 8006442:	4630      	mov	r0, r6
 8006444:	eb04 0903 	add.w	r9, r4, r3
 8006448:	f000 fb5c 	bl	8006b04 <_sbrk_r>
 800644c:	4581      	cmp	r9, r0
 800644e:	d142      	bne.n	80064d6 <_malloc_r+0xea>
 8006450:	6821      	ldr	r1, [r4, #0]
 8006452:	1a6d      	subs	r5, r5, r1
 8006454:	4629      	mov	r1, r5
 8006456:	4630      	mov	r0, r6
 8006458:	f7ff ffa6 	bl	80063a8 <sbrk_aligned>
 800645c:	3001      	adds	r0, #1
 800645e:	d03a      	beq.n	80064d6 <_malloc_r+0xea>
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	442b      	add	r3, r5
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	f8d8 3000 	ldr.w	r3, [r8]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	bb62      	cbnz	r2, 80064c8 <_malloc_r+0xdc>
 800646e:	f8c8 7000 	str.w	r7, [r8]
 8006472:	e00f      	b.n	8006494 <_malloc_r+0xa8>
 8006474:	6822      	ldr	r2, [r4, #0]
 8006476:	1b52      	subs	r2, r2, r5
 8006478:	d420      	bmi.n	80064bc <_malloc_r+0xd0>
 800647a:	2a0b      	cmp	r2, #11
 800647c:	d917      	bls.n	80064ae <_malloc_r+0xc2>
 800647e:	1961      	adds	r1, r4, r5
 8006480:	42a3      	cmp	r3, r4
 8006482:	6025      	str	r5, [r4, #0]
 8006484:	bf18      	it	ne
 8006486:	6059      	strne	r1, [r3, #4]
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	bf08      	it	eq
 800648c:	f8c8 1000 	streq.w	r1, [r8]
 8006490:	5162      	str	r2, [r4, r5]
 8006492:	604b      	str	r3, [r1, #4]
 8006494:	4630      	mov	r0, r6
 8006496:	f000 f82f 	bl	80064f8 <__malloc_unlock>
 800649a:	f104 000b 	add.w	r0, r4, #11
 800649e:	1d23      	adds	r3, r4, #4
 80064a0:	f020 0007 	bic.w	r0, r0, #7
 80064a4:	1ac2      	subs	r2, r0, r3
 80064a6:	bf1c      	itt	ne
 80064a8:	1a1b      	subne	r3, r3, r0
 80064aa:	50a3      	strne	r3, [r4, r2]
 80064ac:	e7af      	b.n	800640e <_malloc_r+0x22>
 80064ae:	6862      	ldr	r2, [r4, #4]
 80064b0:	42a3      	cmp	r3, r4
 80064b2:	bf0c      	ite	eq
 80064b4:	f8c8 2000 	streq.w	r2, [r8]
 80064b8:	605a      	strne	r2, [r3, #4]
 80064ba:	e7eb      	b.n	8006494 <_malloc_r+0xa8>
 80064bc:	4623      	mov	r3, r4
 80064be:	6864      	ldr	r4, [r4, #4]
 80064c0:	e7ae      	b.n	8006420 <_malloc_r+0x34>
 80064c2:	463c      	mov	r4, r7
 80064c4:	687f      	ldr	r7, [r7, #4]
 80064c6:	e7b6      	b.n	8006436 <_malloc_r+0x4a>
 80064c8:	461a      	mov	r2, r3
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	42a3      	cmp	r3, r4
 80064ce:	d1fb      	bne.n	80064c8 <_malloc_r+0xdc>
 80064d0:	2300      	movs	r3, #0
 80064d2:	6053      	str	r3, [r2, #4]
 80064d4:	e7de      	b.n	8006494 <_malloc_r+0xa8>
 80064d6:	230c      	movs	r3, #12
 80064d8:	6033      	str	r3, [r6, #0]
 80064da:	4630      	mov	r0, r6
 80064dc:	f000 f80c 	bl	80064f8 <__malloc_unlock>
 80064e0:	e794      	b.n	800640c <_malloc_r+0x20>
 80064e2:	6005      	str	r5, [r0, #0]
 80064e4:	e7d6      	b.n	8006494 <_malloc_r+0xa8>
 80064e6:	bf00      	nop
 80064e8:	20000370 	.word	0x20000370

080064ec <__malloc_lock>:
 80064ec:	4801      	ldr	r0, [pc, #4]	@ (80064f4 <__malloc_lock+0x8>)
 80064ee:	f7ff bf0f 	b.w	8006310 <__retarget_lock_acquire_recursive>
 80064f2:	bf00      	nop
 80064f4:	20000368 	.word	0x20000368

080064f8 <__malloc_unlock>:
 80064f8:	4801      	ldr	r0, [pc, #4]	@ (8006500 <__malloc_unlock+0x8>)
 80064fa:	f7ff bf0a 	b.w	8006312 <__retarget_lock_release_recursive>
 80064fe:	bf00      	nop
 8006500:	20000368 	.word	0x20000368

08006504 <__ssputs_r>:
 8006504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006508:	688e      	ldr	r6, [r1, #8]
 800650a:	461f      	mov	r7, r3
 800650c:	42be      	cmp	r6, r7
 800650e:	680b      	ldr	r3, [r1, #0]
 8006510:	4682      	mov	sl, r0
 8006512:	460c      	mov	r4, r1
 8006514:	4690      	mov	r8, r2
 8006516:	d82d      	bhi.n	8006574 <__ssputs_r+0x70>
 8006518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800651c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006520:	d026      	beq.n	8006570 <__ssputs_r+0x6c>
 8006522:	6965      	ldr	r5, [r4, #20]
 8006524:	6909      	ldr	r1, [r1, #16]
 8006526:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800652a:	eba3 0901 	sub.w	r9, r3, r1
 800652e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006532:	1c7b      	adds	r3, r7, #1
 8006534:	444b      	add	r3, r9
 8006536:	106d      	asrs	r5, r5, #1
 8006538:	429d      	cmp	r5, r3
 800653a:	bf38      	it	cc
 800653c:	461d      	movcc	r5, r3
 800653e:	0553      	lsls	r3, r2, #21
 8006540:	d527      	bpl.n	8006592 <__ssputs_r+0x8e>
 8006542:	4629      	mov	r1, r5
 8006544:	f7ff ff52 	bl	80063ec <_malloc_r>
 8006548:	4606      	mov	r6, r0
 800654a:	b360      	cbz	r0, 80065a6 <__ssputs_r+0xa2>
 800654c:	6921      	ldr	r1, [r4, #16]
 800654e:	464a      	mov	r2, r9
 8006550:	f000 fae8 	bl	8006b24 <memcpy>
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800655a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800655e:	81a3      	strh	r3, [r4, #12]
 8006560:	6126      	str	r6, [r4, #16]
 8006562:	6165      	str	r5, [r4, #20]
 8006564:	444e      	add	r6, r9
 8006566:	eba5 0509 	sub.w	r5, r5, r9
 800656a:	6026      	str	r6, [r4, #0]
 800656c:	60a5      	str	r5, [r4, #8]
 800656e:	463e      	mov	r6, r7
 8006570:	42be      	cmp	r6, r7
 8006572:	d900      	bls.n	8006576 <__ssputs_r+0x72>
 8006574:	463e      	mov	r6, r7
 8006576:	6820      	ldr	r0, [r4, #0]
 8006578:	4632      	mov	r2, r6
 800657a:	4641      	mov	r1, r8
 800657c:	f000 faa8 	bl	8006ad0 <memmove>
 8006580:	68a3      	ldr	r3, [r4, #8]
 8006582:	1b9b      	subs	r3, r3, r6
 8006584:	60a3      	str	r3, [r4, #8]
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	4433      	add	r3, r6
 800658a:	6023      	str	r3, [r4, #0]
 800658c:	2000      	movs	r0, #0
 800658e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006592:	462a      	mov	r2, r5
 8006594:	f000 fad4 	bl	8006b40 <_realloc_r>
 8006598:	4606      	mov	r6, r0
 800659a:	2800      	cmp	r0, #0
 800659c:	d1e0      	bne.n	8006560 <__ssputs_r+0x5c>
 800659e:	6921      	ldr	r1, [r4, #16]
 80065a0:	4650      	mov	r0, sl
 80065a2:	f7ff feb7 	bl	8006314 <_free_r>
 80065a6:	230c      	movs	r3, #12
 80065a8:	f8ca 3000 	str.w	r3, [sl]
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b2:	81a3      	strh	r3, [r4, #12]
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065b8:	e7e9      	b.n	800658e <__ssputs_r+0x8a>
	...

080065bc <_svfiprintf_r>:
 80065bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c0:	4698      	mov	r8, r3
 80065c2:	898b      	ldrh	r3, [r1, #12]
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	b09d      	sub	sp, #116	@ 0x74
 80065c8:	4607      	mov	r7, r0
 80065ca:	460d      	mov	r5, r1
 80065cc:	4614      	mov	r4, r2
 80065ce:	d510      	bpl.n	80065f2 <_svfiprintf_r+0x36>
 80065d0:	690b      	ldr	r3, [r1, #16]
 80065d2:	b973      	cbnz	r3, 80065f2 <_svfiprintf_r+0x36>
 80065d4:	2140      	movs	r1, #64	@ 0x40
 80065d6:	f7ff ff09 	bl	80063ec <_malloc_r>
 80065da:	6028      	str	r0, [r5, #0]
 80065dc:	6128      	str	r0, [r5, #16]
 80065de:	b930      	cbnz	r0, 80065ee <_svfiprintf_r+0x32>
 80065e0:	230c      	movs	r3, #12
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065e8:	b01d      	add	sp, #116	@ 0x74
 80065ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ee:	2340      	movs	r3, #64	@ 0x40
 80065f0:	616b      	str	r3, [r5, #20]
 80065f2:	2300      	movs	r3, #0
 80065f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065f6:	2320      	movs	r3, #32
 80065f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006600:	2330      	movs	r3, #48	@ 0x30
 8006602:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067a0 <_svfiprintf_r+0x1e4>
 8006606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800660a:	f04f 0901 	mov.w	r9, #1
 800660e:	4623      	mov	r3, r4
 8006610:	469a      	mov	sl, r3
 8006612:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006616:	b10a      	cbz	r2, 800661c <_svfiprintf_r+0x60>
 8006618:	2a25      	cmp	r2, #37	@ 0x25
 800661a:	d1f9      	bne.n	8006610 <_svfiprintf_r+0x54>
 800661c:	ebba 0b04 	subs.w	fp, sl, r4
 8006620:	d00b      	beq.n	800663a <_svfiprintf_r+0x7e>
 8006622:	465b      	mov	r3, fp
 8006624:	4622      	mov	r2, r4
 8006626:	4629      	mov	r1, r5
 8006628:	4638      	mov	r0, r7
 800662a:	f7ff ff6b 	bl	8006504 <__ssputs_r>
 800662e:	3001      	adds	r0, #1
 8006630:	f000 80a7 	beq.w	8006782 <_svfiprintf_r+0x1c6>
 8006634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006636:	445a      	add	r2, fp
 8006638:	9209      	str	r2, [sp, #36]	@ 0x24
 800663a:	f89a 3000 	ldrb.w	r3, [sl]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 809f 	beq.w	8006782 <_svfiprintf_r+0x1c6>
 8006644:	2300      	movs	r3, #0
 8006646:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800664a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800664e:	f10a 0a01 	add.w	sl, sl, #1
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	9307      	str	r3, [sp, #28]
 8006656:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800665a:	931a      	str	r3, [sp, #104]	@ 0x68
 800665c:	4654      	mov	r4, sl
 800665e:	2205      	movs	r2, #5
 8006660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006664:	484e      	ldr	r0, [pc, #312]	@ (80067a0 <_svfiprintf_r+0x1e4>)
 8006666:	f7f9 fde3 	bl	8000230 <memchr>
 800666a:	9a04      	ldr	r2, [sp, #16]
 800666c:	b9d8      	cbnz	r0, 80066a6 <_svfiprintf_r+0xea>
 800666e:	06d0      	lsls	r0, r2, #27
 8006670:	bf44      	itt	mi
 8006672:	2320      	movmi	r3, #32
 8006674:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006678:	0711      	lsls	r1, r2, #28
 800667a:	bf44      	itt	mi
 800667c:	232b      	movmi	r3, #43	@ 0x2b
 800667e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006682:	f89a 3000 	ldrb.w	r3, [sl]
 8006686:	2b2a      	cmp	r3, #42	@ 0x2a
 8006688:	d015      	beq.n	80066b6 <_svfiprintf_r+0xfa>
 800668a:	9a07      	ldr	r2, [sp, #28]
 800668c:	4654      	mov	r4, sl
 800668e:	2000      	movs	r0, #0
 8006690:	f04f 0c0a 	mov.w	ip, #10
 8006694:	4621      	mov	r1, r4
 8006696:	f811 3b01 	ldrb.w	r3, [r1], #1
 800669a:	3b30      	subs	r3, #48	@ 0x30
 800669c:	2b09      	cmp	r3, #9
 800669e:	d94b      	bls.n	8006738 <_svfiprintf_r+0x17c>
 80066a0:	b1b0      	cbz	r0, 80066d0 <_svfiprintf_r+0x114>
 80066a2:	9207      	str	r2, [sp, #28]
 80066a4:	e014      	b.n	80066d0 <_svfiprintf_r+0x114>
 80066a6:	eba0 0308 	sub.w	r3, r0, r8
 80066aa:	fa09 f303 	lsl.w	r3, r9, r3
 80066ae:	4313      	orrs	r3, r2
 80066b0:	9304      	str	r3, [sp, #16]
 80066b2:	46a2      	mov	sl, r4
 80066b4:	e7d2      	b.n	800665c <_svfiprintf_r+0xa0>
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	1d19      	adds	r1, r3, #4
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	9103      	str	r1, [sp, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	bfbb      	ittet	lt
 80066c2:	425b      	neglt	r3, r3
 80066c4:	f042 0202 	orrlt.w	r2, r2, #2
 80066c8:	9307      	strge	r3, [sp, #28]
 80066ca:	9307      	strlt	r3, [sp, #28]
 80066cc:	bfb8      	it	lt
 80066ce:	9204      	strlt	r2, [sp, #16]
 80066d0:	7823      	ldrb	r3, [r4, #0]
 80066d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80066d4:	d10a      	bne.n	80066ec <_svfiprintf_r+0x130>
 80066d6:	7863      	ldrb	r3, [r4, #1]
 80066d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066da:	d132      	bne.n	8006742 <_svfiprintf_r+0x186>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	1d1a      	adds	r2, r3, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	9203      	str	r2, [sp, #12]
 80066e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066e8:	3402      	adds	r4, #2
 80066ea:	9305      	str	r3, [sp, #20]
 80066ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80067b0 <_svfiprintf_r+0x1f4>
 80066f0:	7821      	ldrb	r1, [r4, #0]
 80066f2:	2203      	movs	r2, #3
 80066f4:	4650      	mov	r0, sl
 80066f6:	f7f9 fd9b 	bl	8000230 <memchr>
 80066fa:	b138      	cbz	r0, 800670c <_svfiprintf_r+0x150>
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	eba0 000a 	sub.w	r0, r0, sl
 8006702:	2240      	movs	r2, #64	@ 0x40
 8006704:	4082      	lsls	r2, r0
 8006706:	4313      	orrs	r3, r2
 8006708:	3401      	adds	r4, #1
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006710:	4824      	ldr	r0, [pc, #144]	@ (80067a4 <_svfiprintf_r+0x1e8>)
 8006712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006716:	2206      	movs	r2, #6
 8006718:	f7f9 fd8a 	bl	8000230 <memchr>
 800671c:	2800      	cmp	r0, #0
 800671e:	d036      	beq.n	800678e <_svfiprintf_r+0x1d2>
 8006720:	4b21      	ldr	r3, [pc, #132]	@ (80067a8 <_svfiprintf_r+0x1ec>)
 8006722:	bb1b      	cbnz	r3, 800676c <_svfiprintf_r+0x1b0>
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	3307      	adds	r3, #7
 8006728:	f023 0307 	bic.w	r3, r3, #7
 800672c:	3308      	adds	r3, #8
 800672e:	9303      	str	r3, [sp, #12]
 8006730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006732:	4433      	add	r3, r6
 8006734:	9309      	str	r3, [sp, #36]	@ 0x24
 8006736:	e76a      	b.n	800660e <_svfiprintf_r+0x52>
 8006738:	fb0c 3202 	mla	r2, ip, r2, r3
 800673c:	460c      	mov	r4, r1
 800673e:	2001      	movs	r0, #1
 8006740:	e7a8      	b.n	8006694 <_svfiprintf_r+0xd8>
 8006742:	2300      	movs	r3, #0
 8006744:	3401      	adds	r4, #1
 8006746:	9305      	str	r3, [sp, #20]
 8006748:	4619      	mov	r1, r3
 800674a:	f04f 0c0a 	mov.w	ip, #10
 800674e:	4620      	mov	r0, r4
 8006750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006754:	3a30      	subs	r2, #48	@ 0x30
 8006756:	2a09      	cmp	r2, #9
 8006758:	d903      	bls.n	8006762 <_svfiprintf_r+0x1a6>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0c6      	beq.n	80066ec <_svfiprintf_r+0x130>
 800675e:	9105      	str	r1, [sp, #20]
 8006760:	e7c4      	b.n	80066ec <_svfiprintf_r+0x130>
 8006762:	fb0c 2101 	mla	r1, ip, r1, r2
 8006766:	4604      	mov	r4, r0
 8006768:	2301      	movs	r3, #1
 800676a:	e7f0      	b.n	800674e <_svfiprintf_r+0x192>
 800676c:	ab03      	add	r3, sp, #12
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	462a      	mov	r2, r5
 8006772:	4b0e      	ldr	r3, [pc, #56]	@ (80067ac <_svfiprintf_r+0x1f0>)
 8006774:	a904      	add	r1, sp, #16
 8006776:	4638      	mov	r0, r7
 8006778:	f3af 8000 	nop.w
 800677c:	1c42      	adds	r2, r0, #1
 800677e:	4606      	mov	r6, r0
 8006780:	d1d6      	bne.n	8006730 <_svfiprintf_r+0x174>
 8006782:	89ab      	ldrh	r3, [r5, #12]
 8006784:	065b      	lsls	r3, r3, #25
 8006786:	f53f af2d 	bmi.w	80065e4 <_svfiprintf_r+0x28>
 800678a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800678c:	e72c      	b.n	80065e8 <_svfiprintf_r+0x2c>
 800678e:	ab03      	add	r3, sp, #12
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	462a      	mov	r2, r5
 8006794:	4b05      	ldr	r3, [pc, #20]	@ (80067ac <_svfiprintf_r+0x1f0>)
 8006796:	a904      	add	r1, sp, #16
 8006798:	4638      	mov	r0, r7
 800679a:	f000 f879 	bl	8006890 <_printf_i>
 800679e:	e7ed      	b.n	800677c <_svfiprintf_r+0x1c0>
 80067a0:	08006c18 	.word	0x08006c18
 80067a4:	08006c22 	.word	0x08006c22
 80067a8:	00000000 	.word	0x00000000
 80067ac:	08006505 	.word	0x08006505
 80067b0:	08006c1e 	.word	0x08006c1e

080067b4 <_printf_common>:
 80067b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	4616      	mov	r6, r2
 80067ba:	4698      	mov	r8, r3
 80067bc:	688a      	ldr	r2, [r1, #8]
 80067be:	690b      	ldr	r3, [r1, #16]
 80067c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067c4:	4293      	cmp	r3, r2
 80067c6:	bfb8      	it	lt
 80067c8:	4613      	movlt	r3, r2
 80067ca:	6033      	str	r3, [r6, #0]
 80067cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067d0:	4607      	mov	r7, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	b10a      	cbz	r2, 80067da <_printf_common+0x26>
 80067d6:	3301      	adds	r3, #1
 80067d8:	6033      	str	r3, [r6, #0]
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	0699      	lsls	r1, r3, #26
 80067de:	bf42      	ittt	mi
 80067e0:	6833      	ldrmi	r3, [r6, #0]
 80067e2:	3302      	addmi	r3, #2
 80067e4:	6033      	strmi	r3, [r6, #0]
 80067e6:	6825      	ldr	r5, [r4, #0]
 80067e8:	f015 0506 	ands.w	r5, r5, #6
 80067ec:	d106      	bne.n	80067fc <_printf_common+0x48>
 80067ee:	f104 0a19 	add.w	sl, r4, #25
 80067f2:	68e3      	ldr	r3, [r4, #12]
 80067f4:	6832      	ldr	r2, [r6, #0]
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	42ab      	cmp	r3, r5
 80067fa:	dc26      	bgt.n	800684a <_printf_common+0x96>
 80067fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006800:	6822      	ldr	r2, [r4, #0]
 8006802:	3b00      	subs	r3, #0
 8006804:	bf18      	it	ne
 8006806:	2301      	movne	r3, #1
 8006808:	0692      	lsls	r2, r2, #26
 800680a:	d42b      	bmi.n	8006864 <_printf_common+0xb0>
 800680c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006810:	4641      	mov	r1, r8
 8006812:	4638      	mov	r0, r7
 8006814:	47c8      	blx	r9
 8006816:	3001      	adds	r0, #1
 8006818:	d01e      	beq.n	8006858 <_printf_common+0xa4>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	6922      	ldr	r2, [r4, #16]
 800681e:	f003 0306 	and.w	r3, r3, #6
 8006822:	2b04      	cmp	r3, #4
 8006824:	bf02      	ittt	eq
 8006826:	68e5      	ldreq	r5, [r4, #12]
 8006828:	6833      	ldreq	r3, [r6, #0]
 800682a:	1aed      	subeq	r5, r5, r3
 800682c:	68a3      	ldr	r3, [r4, #8]
 800682e:	bf0c      	ite	eq
 8006830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006834:	2500      	movne	r5, #0
 8006836:	4293      	cmp	r3, r2
 8006838:	bfc4      	itt	gt
 800683a:	1a9b      	subgt	r3, r3, r2
 800683c:	18ed      	addgt	r5, r5, r3
 800683e:	2600      	movs	r6, #0
 8006840:	341a      	adds	r4, #26
 8006842:	42b5      	cmp	r5, r6
 8006844:	d11a      	bne.n	800687c <_printf_common+0xc8>
 8006846:	2000      	movs	r0, #0
 8006848:	e008      	b.n	800685c <_printf_common+0xa8>
 800684a:	2301      	movs	r3, #1
 800684c:	4652      	mov	r2, sl
 800684e:	4641      	mov	r1, r8
 8006850:	4638      	mov	r0, r7
 8006852:	47c8      	blx	r9
 8006854:	3001      	adds	r0, #1
 8006856:	d103      	bne.n	8006860 <_printf_common+0xac>
 8006858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800685c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006860:	3501      	adds	r5, #1
 8006862:	e7c6      	b.n	80067f2 <_printf_common+0x3e>
 8006864:	18e1      	adds	r1, r4, r3
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	2030      	movs	r0, #48	@ 0x30
 800686a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800686e:	4422      	add	r2, r4
 8006870:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006874:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006878:	3302      	adds	r3, #2
 800687a:	e7c7      	b.n	800680c <_printf_common+0x58>
 800687c:	2301      	movs	r3, #1
 800687e:	4622      	mov	r2, r4
 8006880:	4641      	mov	r1, r8
 8006882:	4638      	mov	r0, r7
 8006884:	47c8      	blx	r9
 8006886:	3001      	adds	r0, #1
 8006888:	d0e6      	beq.n	8006858 <_printf_common+0xa4>
 800688a:	3601      	adds	r6, #1
 800688c:	e7d9      	b.n	8006842 <_printf_common+0x8e>
	...

08006890 <_printf_i>:
 8006890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	7e0f      	ldrb	r7, [r1, #24]
 8006896:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006898:	2f78      	cmp	r7, #120	@ 0x78
 800689a:	4691      	mov	r9, r2
 800689c:	4680      	mov	r8, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	469a      	mov	sl, r3
 80068a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068a6:	d807      	bhi.n	80068b8 <_printf_i+0x28>
 80068a8:	2f62      	cmp	r7, #98	@ 0x62
 80068aa:	d80a      	bhi.n	80068c2 <_printf_i+0x32>
 80068ac:	2f00      	cmp	r7, #0
 80068ae:	f000 80d2 	beq.w	8006a56 <_printf_i+0x1c6>
 80068b2:	2f58      	cmp	r7, #88	@ 0x58
 80068b4:	f000 80b9 	beq.w	8006a2a <_printf_i+0x19a>
 80068b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068c0:	e03a      	b.n	8006938 <_printf_i+0xa8>
 80068c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068c6:	2b15      	cmp	r3, #21
 80068c8:	d8f6      	bhi.n	80068b8 <_printf_i+0x28>
 80068ca:	a101      	add	r1, pc, #4	@ (adr r1, 80068d0 <_printf_i+0x40>)
 80068cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068d0:	08006929 	.word	0x08006929
 80068d4:	0800693d 	.word	0x0800693d
 80068d8:	080068b9 	.word	0x080068b9
 80068dc:	080068b9 	.word	0x080068b9
 80068e0:	080068b9 	.word	0x080068b9
 80068e4:	080068b9 	.word	0x080068b9
 80068e8:	0800693d 	.word	0x0800693d
 80068ec:	080068b9 	.word	0x080068b9
 80068f0:	080068b9 	.word	0x080068b9
 80068f4:	080068b9 	.word	0x080068b9
 80068f8:	080068b9 	.word	0x080068b9
 80068fc:	08006a3d 	.word	0x08006a3d
 8006900:	08006967 	.word	0x08006967
 8006904:	080069f7 	.word	0x080069f7
 8006908:	080068b9 	.word	0x080068b9
 800690c:	080068b9 	.word	0x080068b9
 8006910:	08006a5f 	.word	0x08006a5f
 8006914:	080068b9 	.word	0x080068b9
 8006918:	08006967 	.word	0x08006967
 800691c:	080068b9 	.word	0x080068b9
 8006920:	080068b9 	.word	0x080068b9
 8006924:	080069ff 	.word	0x080069ff
 8006928:	6833      	ldr	r3, [r6, #0]
 800692a:	1d1a      	adds	r2, r3, #4
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6032      	str	r2, [r6, #0]
 8006930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006938:	2301      	movs	r3, #1
 800693a:	e09d      	b.n	8006a78 <_printf_i+0x1e8>
 800693c:	6833      	ldr	r3, [r6, #0]
 800693e:	6820      	ldr	r0, [r4, #0]
 8006940:	1d19      	adds	r1, r3, #4
 8006942:	6031      	str	r1, [r6, #0]
 8006944:	0606      	lsls	r6, r0, #24
 8006946:	d501      	bpl.n	800694c <_printf_i+0xbc>
 8006948:	681d      	ldr	r5, [r3, #0]
 800694a:	e003      	b.n	8006954 <_printf_i+0xc4>
 800694c:	0645      	lsls	r5, r0, #25
 800694e:	d5fb      	bpl.n	8006948 <_printf_i+0xb8>
 8006950:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006954:	2d00      	cmp	r5, #0
 8006956:	da03      	bge.n	8006960 <_printf_i+0xd0>
 8006958:	232d      	movs	r3, #45	@ 0x2d
 800695a:	426d      	negs	r5, r5
 800695c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006960:	4859      	ldr	r0, [pc, #356]	@ (8006ac8 <_printf_i+0x238>)
 8006962:	230a      	movs	r3, #10
 8006964:	e011      	b.n	800698a <_printf_i+0xfa>
 8006966:	6821      	ldr	r1, [r4, #0]
 8006968:	6833      	ldr	r3, [r6, #0]
 800696a:	0608      	lsls	r0, r1, #24
 800696c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006970:	d402      	bmi.n	8006978 <_printf_i+0xe8>
 8006972:	0649      	lsls	r1, r1, #25
 8006974:	bf48      	it	mi
 8006976:	b2ad      	uxthmi	r5, r5
 8006978:	2f6f      	cmp	r7, #111	@ 0x6f
 800697a:	4853      	ldr	r0, [pc, #332]	@ (8006ac8 <_printf_i+0x238>)
 800697c:	6033      	str	r3, [r6, #0]
 800697e:	bf14      	ite	ne
 8006980:	230a      	movne	r3, #10
 8006982:	2308      	moveq	r3, #8
 8006984:	2100      	movs	r1, #0
 8006986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800698a:	6866      	ldr	r6, [r4, #4]
 800698c:	60a6      	str	r6, [r4, #8]
 800698e:	2e00      	cmp	r6, #0
 8006990:	bfa2      	ittt	ge
 8006992:	6821      	ldrge	r1, [r4, #0]
 8006994:	f021 0104 	bicge.w	r1, r1, #4
 8006998:	6021      	strge	r1, [r4, #0]
 800699a:	b90d      	cbnz	r5, 80069a0 <_printf_i+0x110>
 800699c:	2e00      	cmp	r6, #0
 800699e:	d04b      	beq.n	8006a38 <_printf_i+0x1a8>
 80069a0:	4616      	mov	r6, r2
 80069a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80069a6:	fb03 5711 	mls	r7, r3, r1, r5
 80069aa:	5dc7      	ldrb	r7, [r0, r7]
 80069ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069b0:	462f      	mov	r7, r5
 80069b2:	42bb      	cmp	r3, r7
 80069b4:	460d      	mov	r5, r1
 80069b6:	d9f4      	bls.n	80069a2 <_printf_i+0x112>
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d10b      	bne.n	80069d4 <_printf_i+0x144>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	07df      	lsls	r7, r3, #31
 80069c0:	d508      	bpl.n	80069d4 <_printf_i+0x144>
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	6861      	ldr	r1, [r4, #4]
 80069c6:	4299      	cmp	r1, r3
 80069c8:	bfde      	ittt	le
 80069ca:	2330      	movle	r3, #48	@ 0x30
 80069cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80069d4:	1b92      	subs	r2, r2, r6
 80069d6:	6122      	str	r2, [r4, #16]
 80069d8:	f8cd a000 	str.w	sl, [sp]
 80069dc:	464b      	mov	r3, r9
 80069de:	aa03      	add	r2, sp, #12
 80069e0:	4621      	mov	r1, r4
 80069e2:	4640      	mov	r0, r8
 80069e4:	f7ff fee6 	bl	80067b4 <_printf_common>
 80069e8:	3001      	adds	r0, #1
 80069ea:	d14a      	bne.n	8006a82 <_printf_i+0x1f2>
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069f0:	b004      	add	sp, #16
 80069f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	f043 0320 	orr.w	r3, r3, #32
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	4833      	ldr	r0, [pc, #204]	@ (8006acc <_printf_i+0x23c>)
 8006a00:	2778      	movs	r7, #120	@ 0x78
 8006a02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	6831      	ldr	r1, [r6, #0]
 8006a0a:	061f      	lsls	r7, r3, #24
 8006a0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a10:	d402      	bmi.n	8006a18 <_printf_i+0x188>
 8006a12:	065f      	lsls	r7, r3, #25
 8006a14:	bf48      	it	mi
 8006a16:	b2ad      	uxthmi	r5, r5
 8006a18:	6031      	str	r1, [r6, #0]
 8006a1a:	07d9      	lsls	r1, r3, #31
 8006a1c:	bf44      	itt	mi
 8006a1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006a22:	6023      	strmi	r3, [r4, #0]
 8006a24:	b11d      	cbz	r5, 8006a2e <_printf_i+0x19e>
 8006a26:	2310      	movs	r3, #16
 8006a28:	e7ac      	b.n	8006984 <_printf_i+0xf4>
 8006a2a:	4827      	ldr	r0, [pc, #156]	@ (8006ac8 <_printf_i+0x238>)
 8006a2c:	e7e9      	b.n	8006a02 <_printf_i+0x172>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	f023 0320 	bic.w	r3, r3, #32
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	e7f6      	b.n	8006a26 <_printf_i+0x196>
 8006a38:	4616      	mov	r6, r2
 8006a3a:	e7bd      	b.n	80069b8 <_printf_i+0x128>
 8006a3c:	6833      	ldr	r3, [r6, #0]
 8006a3e:	6825      	ldr	r5, [r4, #0]
 8006a40:	6961      	ldr	r1, [r4, #20]
 8006a42:	1d18      	adds	r0, r3, #4
 8006a44:	6030      	str	r0, [r6, #0]
 8006a46:	062e      	lsls	r6, r5, #24
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	d501      	bpl.n	8006a50 <_printf_i+0x1c0>
 8006a4c:	6019      	str	r1, [r3, #0]
 8006a4e:	e002      	b.n	8006a56 <_printf_i+0x1c6>
 8006a50:	0668      	lsls	r0, r5, #25
 8006a52:	d5fb      	bpl.n	8006a4c <_printf_i+0x1bc>
 8006a54:	8019      	strh	r1, [r3, #0]
 8006a56:	2300      	movs	r3, #0
 8006a58:	6123      	str	r3, [r4, #16]
 8006a5a:	4616      	mov	r6, r2
 8006a5c:	e7bc      	b.n	80069d8 <_printf_i+0x148>
 8006a5e:	6833      	ldr	r3, [r6, #0]
 8006a60:	1d1a      	adds	r2, r3, #4
 8006a62:	6032      	str	r2, [r6, #0]
 8006a64:	681e      	ldr	r6, [r3, #0]
 8006a66:	6862      	ldr	r2, [r4, #4]
 8006a68:	2100      	movs	r1, #0
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f7f9 fbe0 	bl	8000230 <memchr>
 8006a70:	b108      	cbz	r0, 8006a76 <_printf_i+0x1e6>
 8006a72:	1b80      	subs	r0, r0, r6
 8006a74:	6060      	str	r0, [r4, #4]
 8006a76:	6863      	ldr	r3, [r4, #4]
 8006a78:	6123      	str	r3, [r4, #16]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a80:	e7aa      	b.n	80069d8 <_printf_i+0x148>
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	4632      	mov	r2, r6
 8006a86:	4649      	mov	r1, r9
 8006a88:	4640      	mov	r0, r8
 8006a8a:	47d0      	blx	sl
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d0ad      	beq.n	80069ec <_printf_i+0x15c>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	079b      	lsls	r3, r3, #30
 8006a94:	d413      	bmi.n	8006abe <_printf_i+0x22e>
 8006a96:	68e0      	ldr	r0, [r4, #12]
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	4298      	cmp	r0, r3
 8006a9c:	bfb8      	it	lt
 8006a9e:	4618      	movlt	r0, r3
 8006aa0:	e7a6      	b.n	80069f0 <_printf_i+0x160>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	4632      	mov	r2, r6
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	47d0      	blx	sl
 8006aac:	3001      	adds	r0, #1
 8006aae:	d09d      	beq.n	80069ec <_printf_i+0x15c>
 8006ab0:	3501      	adds	r5, #1
 8006ab2:	68e3      	ldr	r3, [r4, #12]
 8006ab4:	9903      	ldr	r1, [sp, #12]
 8006ab6:	1a5b      	subs	r3, r3, r1
 8006ab8:	42ab      	cmp	r3, r5
 8006aba:	dcf2      	bgt.n	8006aa2 <_printf_i+0x212>
 8006abc:	e7eb      	b.n	8006a96 <_printf_i+0x206>
 8006abe:	2500      	movs	r5, #0
 8006ac0:	f104 0619 	add.w	r6, r4, #25
 8006ac4:	e7f5      	b.n	8006ab2 <_printf_i+0x222>
 8006ac6:	bf00      	nop
 8006ac8:	08006c29 	.word	0x08006c29
 8006acc:	08006c3a 	.word	0x08006c3a

08006ad0 <memmove>:
 8006ad0:	4288      	cmp	r0, r1
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	eb01 0402 	add.w	r4, r1, r2
 8006ad8:	d902      	bls.n	8006ae0 <memmove+0x10>
 8006ada:	4284      	cmp	r4, r0
 8006adc:	4623      	mov	r3, r4
 8006ade:	d807      	bhi.n	8006af0 <memmove+0x20>
 8006ae0:	1e43      	subs	r3, r0, #1
 8006ae2:	42a1      	cmp	r1, r4
 8006ae4:	d008      	beq.n	8006af8 <memmove+0x28>
 8006ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006aee:	e7f8      	b.n	8006ae2 <memmove+0x12>
 8006af0:	4402      	add	r2, r0
 8006af2:	4601      	mov	r1, r0
 8006af4:	428a      	cmp	r2, r1
 8006af6:	d100      	bne.n	8006afa <memmove+0x2a>
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b02:	e7f7      	b.n	8006af4 <memmove+0x24>

08006b04 <_sbrk_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4d06      	ldr	r5, [pc, #24]	@ (8006b20 <_sbrk_r+0x1c>)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	602b      	str	r3, [r5, #0]
 8006b10:	f7fa f932 	bl	8000d78 <_sbrk>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <_sbrk_r+0x1a>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	b103      	cbz	r3, 8006b1e <_sbrk_r+0x1a>
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	20000364 	.word	0x20000364

08006b24 <memcpy>:
 8006b24:	440a      	add	r2, r1
 8006b26:	4291      	cmp	r1, r2
 8006b28:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006b2c:	d100      	bne.n	8006b30 <memcpy+0xc>
 8006b2e:	4770      	bx	lr
 8006b30:	b510      	push	{r4, lr}
 8006b32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b3a:	4291      	cmp	r1, r2
 8006b3c:	d1f9      	bne.n	8006b32 <memcpy+0xe>
 8006b3e:	bd10      	pop	{r4, pc}

08006b40 <_realloc_r>:
 8006b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b44:	4680      	mov	r8, r0
 8006b46:	4615      	mov	r5, r2
 8006b48:	460c      	mov	r4, r1
 8006b4a:	b921      	cbnz	r1, 8006b56 <_realloc_r+0x16>
 8006b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b50:	4611      	mov	r1, r2
 8006b52:	f7ff bc4b 	b.w	80063ec <_malloc_r>
 8006b56:	b92a      	cbnz	r2, 8006b64 <_realloc_r+0x24>
 8006b58:	f7ff fbdc 	bl	8006314 <_free_r>
 8006b5c:	2400      	movs	r4, #0
 8006b5e:	4620      	mov	r0, r4
 8006b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b64:	f000 f81a 	bl	8006b9c <_malloc_usable_size_r>
 8006b68:	4285      	cmp	r5, r0
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	d802      	bhi.n	8006b74 <_realloc_r+0x34>
 8006b6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b72:	d8f4      	bhi.n	8006b5e <_realloc_r+0x1e>
 8006b74:	4629      	mov	r1, r5
 8006b76:	4640      	mov	r0, r8
 8006b78:	f7ff fc38 	bl	80063ec <_malloc_r>
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d0ec      	beq.n	8006b5c <_realloc_r+0x1c>
 8006b82:	42b5      	cmp	r5, r6
 8006b84:	462a      	mov	r2, r5
 8006b86:	4621      	mov	r1, r4
 8006b88:	bf28      	it	cs
 8006b8a:	4632      	movcs	r2, r6
 8006b8c:	f7ff ffca 	bl	8006b24 <memcpy>
 8006b90:	4621      	mov	r1, r4
 8006b92:	4640      	mov	r0, r8
 8006b94:	f7ff fbbe 	bl	8006314 <_free_r>
 8006b98:	463c      	mov	r4, r7
 8006b9a:	e7e0      	b.n	8006b5e <_realloc_r+0x1e>

08006b9c <_malloc_usable_size_r>:
 8006b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ba0:	1f18      	subs	r0, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bfbc      	itt	lt
 8006ba6:	580b      	ldrlt	r3, [r1, r0]
 8006ba8:	18c0      	addlt	r0, r0, r3
 8006baa:	4770      	bx	lr

08006bac <_init>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr

08006bb8 <_fini>:
 8006bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bba:	bf00      	nop
 8006bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bbe:	bc08      	pop	{r3}
 8006bc0:	469e      	mov	lr, r3
 8006bc2:	4770      	bx	lr

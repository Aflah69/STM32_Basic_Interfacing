
BMP_pressure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800a5e0  0800a5e0  0000b5e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aab8  0800aab8  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800aab8  0800aab8  0000bab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aac0  0800aac0  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aac0  0800aac0  0000bac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aac4  0800aac4  0000bac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800aac8  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001e8  0800acb0  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800acb0  0000c4f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101e1  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002396  00000000  00000000  0001c3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0001e790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a61  00000000  00000000  0001f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e68e  00000000  00000000  0001ff59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e0f  00000000  00000000  0003e5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbad4  00000000  00000000  0004f3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010aeca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb8  00000000  00000000  0010af10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a5c4 	.word	0x0800a5c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800a5c4 	.word	0x0800a5c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 800104c:	23aa      	movs	r3, #170	@ 0xaa
 800104e:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8001050:	8afa      	ldrh	r2, [r7, #22]
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2316      	movs	r3, #22
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	463b      	mov	r3, r7
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	21ee      	movs	r1, #238	@ 0xee
 8001064:	4836      	ldr	r0, [pc, #216]	@ (8001140 <read_calliberation_data+0x10c>)
 8001066:	f001 fcd3 	bl	8002a10 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 800106a:	783b      	ldrb	r3, [r7, #0]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21a      	sxth	r2, r3
 8001078:	4b32      	ldr	r3, [pc, #200]	@ (8001144 <read_calliberation_data+0x110>)
 800107a:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 800107c:	78bb      	ldrb	r3, [r7, #2]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b2f      	ldr	r3, [pc, #188]	@ (8001148 <read_calliberation_data+0x114>)
 800108c:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 800108e:	793b      	ldrb	r3, [r7, #4]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21a      	sxth	r2, r3
 8001094:	797b      	ldrb	r3, [r7, #5]
 8001096:	b21b      	sxth	r3, r3
 8001098:	4313      	orrs	r3, r2
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b2b      	ldr	r3, [pc, #172]	@ (800114c <read_calliberation_data+0x118>)
 800109e:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b27      	ldr	r3, [pc, #156]	@ (8001150 <read_calliberation_data+0x11c>)
 80010b2:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 80010b4:	7a3b      	ldrb	r3, [r7, #8]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	7a7b      	ldrb	r3, [r7, #9]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <read_calliberation_data+0x120>)
 80010c6:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 80010c8:	7abb      	ldrb	r3, [r7, #10]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <read_calliberation_data+0x124>)
 80010da:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7b7b      	ldrb	r3, [r7, #13]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <read_calliberation_data+0x128>)
 80010ec:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <read_calliberation_data+0x12c>)
 80010fe:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001100:	7c3b      	ldrb	r3, [r7, #16]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	7c7b      	ldrb	r3, [r7, #17]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <read_calliberation_data+0x130>)
 8001110:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001112:	7cbb      	ldrb	r3, [r7, #18]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7cfb      	ldrb	r3, [r7, #19]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
 8001120:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <read_calliberation_data+0x134>)
 8001122:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8001124:	7d3b      	ldrb	r3, [r7, #20]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	7d7b      	ldrb	r3, [r7, #21]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21a      	sxth	r2, r3
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <read_calliberation_data+0x138>)
 8001134:	801a      	strh	r2, [r3, #0]

}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000024c 	.word	0x2000024c
 8001144:	20000204 	.word	0x20000204
 8001148:	20000206 	.word	0x20000206
 800114c:	20000208 	.word	0x20000208
 8001150:	2000020a 	.word	0x2000020a
 8001154:	2000020c 	.word	0x2000020c
 8001158:	2000020e 	.word	0x2000020e
 800115c:	20000210 	.word	0x20000210
 8001160:	20000212 	.word	0x20000212
 8001164:	20000214 	.word	0x20000214
 8001168:	20000216 	.word	0x20000216
 800116c:	20000218 	.word	0x20000218

08001170 <Get_UTemp>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 8001176:	232e      	movs	r3, #46	@ 0x2e
 8001178:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 800117a:	2300      	movs	r3, #0
 800117c:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 800117e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	22f4      	movs	r2, #244	@ 0xf4
 8001190:	21ee      	movs	r1, #238	@ 0xee
 8001192:	480e      	ldr	r0, [pc, #56]	@ (80011cc <Get_UTemp+0x5c>)
 8001194:	f001 fb28 	bl	80027e8 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 8001198:	2005      	movs	r0, #5
 800119a:	f000 ffe9 	bl	8002170 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 800119e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2302      	movs	r3, #2
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	22f6      	movs	r2, #246	@ 0xf6
 80011b0:	21ee      	movs	r1, #238	@ 0xee
 80011b2:	4806      	ldr	r0, [pc, #24]	@ (80011cc <Get_UTemp+0x5c>)
 80011b4:	f001 fc2c 	bl	8002a10 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 80011b8:	793b      	ldrb	r3, [r7, #4]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b29b      	uxth	r3, r3
 80011be:	797a      	ldrb	r2, [r7, #5]
 80011c0:	4413      	add	r3, r2
 80011c2:	b29b      	uxth	r3, r3
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000024c 	.word	0x2000024c

080011d0 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 80011d4:	f7ff ffcc 	bl	8001170 <Get_UTemp>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4b3e      	ldr	r3, [pc, #248]	@ (80012d8 <BMP180_GetTemp+0x108>)
 80011de:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80011e0:	4b3d      	ldr	r3, [pc, #244]	@ (80012d8 <BMP180_GetTemp+0x108>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a3d      	ldr	r2, [pc, #244]	@ (80012dc <BMP180_GetTemp+0x10c>)
 80011e6:	8812      	ldrh	r2, [r2, #0]
 80011e8:	1a9b      	subs	r3, r3, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9c2 	bl	8000574 <__aeabi_i2d>
 80011f0:	4604      	mov	r4, r0
 80011f2:	460d      	mov	r5, r1
 80011f4:	4b3a      	ldr	r3, [pc, #232]	@ (80012e0 <BMP180_GetTemp+0x110>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f9bb 	bl	8000574 <__aeabi_i2d>
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	4b38      	ldr	r3, [pc, #224]	@ (80012e4 <BMP180_GetTemp+0x114>)
 8001204:	f7ff fb4a 	bl	800089c <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4620      	mov	r0, r4
 800120e:	4629      	mov	r1, r5
 8001210:	f7ff fa1a 	bl	8000648 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fcc4 	bl	8000ba8 <__aeabi_d2iz>
 8001220:	4603      	mov	r3, r0
 8001222:	4a31      	ldr	r2, [pc, #196]	@ (80012e8 <BMP180_GetTemp+0x118>)
 8001224:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001226:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <BMP180_GetTemp+0x11c>)
 8001228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f9a1 	bl	8000574 <__aeabi_i2d>
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <BMP180_GetTemp+0x120>)
 8001238:	f7ff fa06 	bl	8000648 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4614      	mov	r4, r2
 8001242:	461d      	mov	r5, r3
 8001244:	4b2b      	ldr	r3, [pc, #172]	@ (80012f4 <BMP180_GetTemp+0x124>)
 8001246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124a:	461a      	mov	r2, r3
 800124c:	4b26      	ldr	r3, [pc, #152]	@ (80012e8 <BMP180_GetTemp+0x118>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4413      	add	r3, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f98e 	bl	8000574 <__aeabi_i2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4620      	mov	r0, r4
 800125e:	4629      	mov	r1, r5
 8001260:	f7ff fb1c 	bl	800089c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fc9c 	bl	8000ba8 <__aeabi_d2iz>
 8001270:	4603      	mov	r3, r0
 8001272:	4a21      	ldr	r2, [pc, #132]	@ (80012f8 <BMP180_GetTemp+0x128>)
 8001274:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001276:	4b1c      	ldr	r3, [pc, #112]	@ (80012e8 <BMP180_GetTemp+0x118>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <BMP180_GetTemp+0x128>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a1e      	ldr	r2, [pc, #120]	@ (80012fc <BMP180_GetTemp+0x12c>)
 8001282:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <BMP180_GetTemp+0x12c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3308      	adds	r3, #8
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f972 	bl	8000574 <__aeabi_i2d>
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <BMP180_GetTemp+0x130>)
 8001296:	f7ff fb01 	bl	800089c <__aeabi_ddiv>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff fc81 	bl	8000ba8 <__aeabi_d2iz>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a16      	ldr	r2, [pc, #88]	@ (8001304 <BMP180_GetTemp+0x134>)
 80012aa:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <BMP180_GetTemp+0x134>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f95f 	bl	8000574 <__aeabi_i2d>
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <BMP180_GetTemp+0x138>)
 80012bc:	f7ff faee 	bl	800089c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fcb6 	bl	8000c38 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	ee07 3a90 	vmov	s15, r3
}
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	bdb0      	pop	{r4, r5, r7, pc}
 80012d8:	2000021c 	.word	0x2000021c
 80012dc:	2000020e 	.word	0x2000020e
 80012e0:	2000020c 	.word	0x2000020c
 80012e4:	40e00000 	.word	0x40e00000
 80012e8:	20000224 	.word	0x20000224
 80012ec:	20000216 	.word	0x20000216
 80012f0:	40a00000 	.word	0x40a00000
 80012f4:	20000218 	.word	0x20000218
 80012f8:	20000228 	.word	0x20000228
 80012fc:	20000234 	.word	0x20000234
 8001300:	40300000 	.word	0x40300000
 8001304:	20000248 	.word	0x20000248
 8001308:	40240000 	.word	0x40240000

0800130c <Get_UPress>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af04      	add	r7, sp, #16
 8001312:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	019b      	lsls	r3, r3, #6
 800131a:	b2db      	uxtb	r3, r3
 800131c:	3334      	adds	r3, #52	@ 0x34
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 8001322:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <Get_UPress+0xb4>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	81bb      	strh	r3, [r7, #12]
 8001328:	2300      	movs	r3, #0
 800132a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 800132c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030f 	add.w	r3, r7, #15
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	22f4      	movs	r2, #244	@ 0xf4
 8001340:	21ee      	movs	r1, #238	@ 0xee
 8001342:	4820      	ldr	r0, [pc, #128]	@ (80013c4 <Get_UPress+0xb8>)
 8001344:	f001 fa50 	bl	80027e8 <HAL_I2C_Mem_Write>
	switch (oss)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d81a      	bhi.n	8001384 <Get_UPress+0x78>
 800134e:	a201      	add	r2, pc, #4	@ (adr r2, 8001354 <Get_UPress+0x48>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001365 	.word	0x08001365
 8001358:	0800136d 	.word	0x0800136d
 800135c:	08001375 	.word	0x08001375
 8001360:	0800137d 	.word	0x0800137d
	{
		case (0):
			HAL_Delay (5);
 8001364:	2005      	movs	r0, #5
 8001366:	f000 ff03 	bl	8002170 <HAL_Delay>
			break;
 800136a:	e00b      	b.n	8001384 <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 800136c:	2008      	movs	r0, #8
 800136e:	f000 feff 	bl	8002170 <HAL_Delay>
			break;
 8001372:	e007      	b.n	8001384 <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 8001374:	200e      	movs	r0, #14
 8001376:	f000 fefb 	bl	8002170 <HAL_Delay>
			break;
 800137a:	e003      	b.n	8001384 <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 800137c:	201a      	movs	r0, #26
 800137e:	f000 fef7 	bl	8002170 <HAL_Delay>
			break;
 8001382:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001384:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	2303      	movs	r3, #3
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2301      	movs	r3, #1
 8001396:	22f6      	movs	r2, #246	@ 0xf6
 8001398:	21ee      	movs	r1, #238	@ 0xee
 800139a:	480a      	ldr	r0, [pc, #40]	@ (80013c4 <Get_UPress+0xb8>)
 800139c:	f001 fb38 	bl	8002a10 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80013a0:	7b3b      	ldrb	r3, [r7, #12]
 80013a2:	041a      	lsls	r2, r3, #16
 80013a4:	7b7b      	ldrb	r3, [r7, #13]
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	4413      	add	r3, r2
 80013aa:	7bba      	ldrb	r2, [r7, #14]
 80013ac:	441a      	add	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f1c3 0308 	rsb	r3, r3, #8
 80013b4:	fa42 f303 	asr.w	r3, r2, r3
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	0800a5e0 	.word	0x0800a5e0
 80013c4:	2000024c 	.word	0x2000024c

080013c8 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff9b 	bl	800130c <Get_UPress>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4ba8      	ldr	r3, [pc, #672]	@ (800167c <BMP180_GetPress+0x2b4>)
 80013dc:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80013de:	4ba8      	ldr	r3, [pc, #672]	@ (8001680 <BMP180_GetPress+0x2b8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4aa8      	ldr	r2, [pc, #672]	@ (8001684 <BMP180_GetPress+0x2bc>)
 80013e4:	8812      	ldrh	r2, [r2, #0]
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f8c3 	bl	8000574 <__aeabi_i2d>
 80013ee:	4604      	mov	r4, r0
 80013f0:	460d      	mov	r5, r1
 80013f2:	4ba5      	ldr	r3, [pc, #660]	@ (8001688 <BMP180_GetPress+0x2c0>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f8bc 	bl	8000574 <__aeabi_i2d>
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4ba2      	ldr	r3, [pc, #648]	@ (800168c <BMP180_GetPress+0x2c4>)
 8001402:	f7ff fa4b 	bl	800089c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7ff f91b 	bl	8000648 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fbc5 	bl	8000ba8 <__aeabi_d2iz>
 800141e:	4603      	mov	r3, r0
 8001420:	4a9b      	ldr	r2, [pc, #620]	@ (8001690 <BMP180_GetPress+0x2c8>)
 8001422:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001424:	4b9b      	ldr	r3, [pc, #620]	@ (8001694 <BMP180_GetPress+0x2cc>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f8a2 	bl	8000574 <__aeabi_i2d>
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	4b98      	ldr	r3, [pc, #608]	@ (8001698 <BMP180_GetPress+0x2d0>)
 8001436:	f7ff f907 	bl	8000648 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4614      	mov	r4, r2
 8001440:	461d      	mov	r5, r3
 8001442:	4b96      	ldr	r3, [pc, #600]	@ (800169c <BMP180_GetPress+0x2d4>)
 8001444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001448:	461a      	mov	r2, r3
 800144a:	4b91      	ldr	r3, [pc, #580]	@ (8001690 <BMP180_GetPress+0x2c8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f88f 	bl	8000574 <__aeabi_i2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4620      	mov	r0, r4
 800145c:	4629      	mov	r1, r5
 800145e:	f7ff fa1d 	bl	800089c <__aeabi_ddiv>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fb9d 	bl	8000ba8 <__aeabi_d2iz>
 800146e:	4603      	mov	r3, r0
 8001470:	4a8b      	ldr	r2, [pc, #556]	@ (80016a0 <BMP180_GetPress+0x2d8>)
 8001472:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001474:	4b86      	ldr	r3, [pc, #536]	@ (8001690 <BMP180_GetPress+0x2c8>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b89      	ldr	r3, [pc, #548]	@ (80016a0 <BMP180_GetPress+0x2d8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4413      	add	r3, r2
 800147e:	4a89      	ldr	r2, [pc, #548]	@ (80016a4 <BMP180_GetPress+0x2dc>)
 8001480:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001482:	4b88      	ldr	r3, [pc, #544]	@ (80016a4 <BMP180_GetPress+0x2dc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 800148a:	4a87      	ldr	r2, [pc, #540]	@ (80016a8 <BMP180_GetPress+0x2e0>)
 800148c:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800148e:	4b87      	ldr	r3, [pc, #540]	@ (80016ac <BMP180_GetPress+0x2e4>)
 8001490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f86d 	bl	8000574 <__aeabi_i2d>
 800149a:	4604      	mov	r4, r0
 800149c:	460d      	mov	r5, r1
 800149e:	4b82      	ldr	r3, [pc, #520]	@ (80016a8 <BMP180_GetPress+0x2e0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a81      	ldr	r2, [pc, #516]	@ (80016a8 <BMP180_GetPress+0x2e0>)
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f862 	bl	8000574 <__aeabi_i2d>
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b7e      	ldr	r3, [pc, #504]	@ (80016b0 <BMP180_GetPress+0x2e8>)
 80014b6:	f7ff f9f1 	bl	800089c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4620      	mov	r0, r4
 80014c0:	4629      	mov	r1, r5
 80014c2:	f7ff f8c1 	bl	8000648 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b71      	ldr	r3, [pc, #452]	@ (8001698 <BMP180_GetPress+0x2d0>)
 80014d4:	f7ff f9e2 	bl	800089c <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb62 	bl	8000ba8 <__aeabi_d2iz>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a6a      	ldr	r2, [pc, #424]	@ (8001690 <BMP180_GetPress+0x2c8>)
 80014e8:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80014ea:	4b72      	ldr	r3, [pc, #456]	@ (80016b4 <BMP180_GetPress+0x2ec>)
 80014ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b6d      	ldr	r3, [pc, #436]	@ (80016a8 <BMP180_GetPress+0x2e0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	fb02 f303 	mul.w	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f83a 	bl	8000574 <__aeabi_i2d>
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b64      	ldr	r3, [pc, #400]	@ (8001698 <BMP180_GetPress+0x2d0>)
 8001506:	f7ff f9c9 	bl	800089c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb49 	bl	8000ba8 <__aeabi_d2iz>
 8001516:	4603      	mov	r3, r0
 8001518:	4a61      	ldr	r2, [pc, #388]	@ (80016a0 <BMP180_GetPress+0x2d8>)
 800151a:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 800151c:	4b5c      	ldr	r3, [pc, #368]	@ (8001690 <BMP180_GetPress+0x2c8>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b5f      	ldr	r3, [pc, #380]	@ (80016a0 <BMP180_GetPress+0x2d8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4413      	add	r3, r2
 8001526:	4a64      	ldr	r2, [pc, #400]	@ (80016b8 <BMP180_GetPress+0x2f0>)
 8001528:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 800152a:	4b64      	ldr	r3, [pc, #400]	@ (80016bc <BMP180_GetPress+0x2f4>)
 800152c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001530:	009a      	lsls	r2, r3, #2
 8001532:	4b61      	ldr	r3, [pc, #388]	@ (80016b8 <BMP180_GetPress+0x2f0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	441a      	add	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	3302      	adds	r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	da00      	bge.n	8001546 <BMP180_GetPress+0x17e>
 8001544:	3303      	adds	r3, #3
 8001546:	109b      	asrs	r3, r3, #2
 8001548:	461a      	mov	r2, r3
 800154a:	4b5d      	ldr	r3, [pc, #372]	@ (80016c0 <BMP180_GetPress+0x2f8>)
 800154c:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 800154e:	4b5d      	ldr	r3, [pc, #372]	@ (80016c4 <BMP180_GetPress+0x2fc>)
 8001550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001554:	461a      	mov	r2, r3
 8001556:	4b54      	ldr	r3, [pc, #336]	@ (80016a8 <BMP180_GetPress+0x2e0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f808 	bl	8000574 <__aeabi_i2d>
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b57      	ldr	r3, [pc, #348]	@ (80016c8 <BMP180_GetPress+0x300>)
 800156a:	f7ff f997 	bl	800089c <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fb17 	bl	8000ba8 <__aeabi_d2iz>
 800157a:	4603      	mov	r3, r0
 800157c:	4a44      	ldr	r2, [pc, #272]	@ (8001690 <BMP180_GetPress+0x2c8>)
 800157e:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001580:	4b52      	ldr	r3, [pc, #328]	@ (80016cc <BMP180_GetPress+0x304>)
 8001582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff4 	bl	8000574 <__aeabi_i2d>
 800158c:	4604      	mov	r4, r0
 800158e:	460d      	mov	r5, r1
 8001590:	4b45      	ldr	r3, [pc, #276]	@ (80016a8 <BMP180_GetPress+0x2e0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a44      	ldr	r2, [pc, #272]	@ (80016a8 <BMP180_GetPress+0x2e0>)
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffe9 	bl	8000574 <__aeabi_i2d>
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	4b42      	ldr	r3, [pc, #264]	@ (80016b0 <BMP180_GetPress+0x2e8>)
 80015a8:	f7ff f978 	bl	800089c <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4620      	mov	r0, r4
 80015b2:	4629      	mov	r1, r5
 80015b4:	f7ff f848 	bl	8000648 <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	4b42      	ldr	r3, [pc, #264]	@ (80016d0 <BMP180_GetPress+0x308>)
 80015c6:	f7ff f969 	bl	800089c <__aeabi_ddiv>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fae9 	bl	8000ba8 <__aeabi_d2iz>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a31      	ldr	r2, [pc, #196]	@ (80016a0 <BMP180_GetPress+0x2d8>)
 80015da:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80015dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001690 <BMP180_GetPress+0x2c8>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b2f      	ldr	r3, [pc, #188]	@ (80016a0 <BMP180_GetPress+0x2d8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4413      	add	r3, r2
 80015e6:	3302      	adds	r3, #2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffc3 	bl	8000574 <__aeabi_i2d>
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b38      	ldr	r3, [pc, #224]	@ (80016d4 <BMP180_GetPress+0x30c>)
 80015f4:	f7ff f952 	bl	800089c <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fad2 	bl	8000ba8 <__aeabi_d2iz>
 8001604:	4603      	mov	r3, r0
 8001606:	4a2c      	ldr	r2, [pc, #176]	@ (80016b8 <BMP180_GetPress+0x2f0>)
 8001608:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 800160a:	4b33      	ldr	r3, [pc, #204]	@ (80016d8 <BMP180_GetPress+0x310>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	4b29      	ldr	r3, [pc, #164]	@ (80016b8 <BMP180_GetPress+0x2f0>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff99 	bl	8000554 <__aeabi_ui2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <BMP180_GetPress+0x2c4>)
 8001628:	f7ff f938 	bl	800089c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fae0 	bl	8000bf8 <__aeabi_d2uiz>
 8001638:	4603      	mov	r3, r0
 800163a:	4a28      	ldr	r2, [pc, #160]	@ (80016dc <BMP180_GetPress+0x314>)
 800163c:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <BMP180_GetPress+0x2b4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <BMP180_GetPress+0x2f8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	fa41 f202 	asr.w	r2, r1, r2
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	4a21      	ldr	r2, [pc, #132]	@ (80016e0 <BMP180_GetPress+0x318>)
 800165a:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 800165c:	4b20      	ldr	r3, [pc, #128]	@ (80016e0 <BMP180_GetPress+0x318>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db41      	blt.n	80016e8 <BMP180_GetPress+0x320>
 8001664:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <BMP180_GetPress+0x318>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	005a      	lsls	r2, r3, #1
 800166a:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <BMP180_GetPress+0x314>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	461a      	mov	r2, r3
 8001674:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <BMP180_GetPress+0x31c>)
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e040      	b.n	80016fc <BMP180_GetPress+0x334>
 800167a:	bf00      	nop
 800167c:	20000220 	.word	0x20000220
 8001680:	2000021c 	.word	0x2000021c
 8001684:	2000020e 	.word	0x2000020e
 8001688:	2000020c 	.word	0x2000020c
 800168c:	40e00000 	.word	0x40e00000
 8001690:	20000224 	.word	0x20000224
 8001694:	20000216 	.word	0x20000216
 8001698:	40a00000 	.word	0x40a00000
 800169c:	20000218 	.word	0x20000218
 80016a0:	20000228 	.word	0x20000228
 80016a4:	20000234 	.word	0x20000234
 80016a8:	2000023c 	.word	0x2000023c
 80016ac:	20000212 	.word	0x20000212
 80016b0:	40b00000 	.word	0x40b00000
 80016b4:	20000206 	.word	0x20000206
 80016b8:	2000022c 	.word	0x2000022c
 80016bc:	20000204 	.word	0x20000204
 80016c0:	20000230 	.word	0x20000230
 80016c4:	20000208 	.word	0x20000208
 80016c8:	40c00000 	.word	0x40c00000
 80016cc:	20000210 	.word	0x20000210
 80016d0:	40f00000 	.word	0x40f00000
 80016d4:	40100000 	.word	0x40100000
 80016d8:	2000020a 	.word	0x2000020a
 80016dc:	20000238 	.word	0x20000238
 80016e0:	20000240 	.word	0x20000240
 80016e4:	20000244 	.word	0x20000244
	else Press = (B7/B4)*2;
 80016e8:	4b46      	ldr	r3, [pc, #280]	@ (8001804 <BMP180_GetPress+0x43c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b46      	ldr	r3, [pc, #280]	@ (8001808 <BMP180_GetPress+0x440>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b44      	ldr	r3, [pc, #272]	@ (800180c <BMP180_GetPress+0x444>)
 80016fa:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016fc:	4b43      	ldr	r3, [pc, #268]	@ (800180c <BMP180_GetPress+0x444>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff37 	bl	8000574 <__aeabi_i2d>
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b41      	ldr	r3, [pc, #260]	@ (8001810 <BMP180_GetPress+0x448>)
 800170c:	f7ff f8c6 	bl	800089c <__aeabi_ddiv>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <BMP180_GetPress+0x444>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff29 	bl	8000574 <__aeabi_i2d>
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b3a      	ldr	r3, [pc, #232]	@ (8001810 <BMP180_GetPress+0x448>)
 8001728:	f7ff f8b8 	bl	800089c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4620      	mov	r0, r4
 8001732:	4629      	mov	r1, r5
 8001734:	f7fe ff88 	bl	8000648 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff fa32 	bl	8000ba8 <__aeabi_d2iz>
 8001744:	4603      	mov	r3, r0
 8001746:	4a33      	ldr	r2, [pc, #204]	@ (8001814 <BMP180_GetPress+0x44c>)
 8001748:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 800174a:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <BMP180_GetPress+0x44c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f640 32de 	movw	r2, #3038	@ 0xbde
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe ff0c 	bl	8000574 <__aeabi_i2d>
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <BMP180_GetPress+0x450>)
 8001762:	f7ff f89b 	bl	800089c <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fa1b 	bl	8000ba8 <__aeabi_d2iz>
 8001772:	4603      	mov	r3, r0
 8001774:	4a27      	ldr	r2, [pc, #156]	@ (8001814 <BMP180_GetPress+0x44c>)
 8001776:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001778:	4b24      	ldr	r3, [pc, #144]	@ (800180c <BMP180_GetPress+0x444>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a27      	ldr	r2, [pc, #156]	@ (800181c <BMP180_GetPress+0x454>)
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fef6 	bl	8000574 <__aeabi_i2d>
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b22      	ldr	r3, [pc, #136]	@ (8001818 <BMP180_GetPress+0x450>)
 800178e:	f7ff f885 	bl	800089c <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff fa05 	bl	8000ba8 <__aeabi_d2iz>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001820 <BMP180_GetPress+0x458>)
 80017a2:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80017a4:	4b19      	ldr	r3, [pc, #100]	@ (800180c <BMP180_GetPress+0x444>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fee3 	bl	8000574 <__aeabi_i2d>
 80017ae:	4604      	mov	r4, r0
 80017b0:	460d      	mov	r5, r1
 80017b2:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <BMP180_GetPress+0x44c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <BMP180_GetPress+0x458>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fed7 	bl	8000574 <__aeabi_i2d>
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <BMP180_GetPress+0x45c>)
 80017cc:	f7ff f866 	bl	800089c <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4620      	mov	r0, r4
 80017d6:	4629      	mov	r1, r5
 80017d8:	f7fe fd80 	bl	80002dc <__adddf3>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff f9e0 	bl	8000ba8 <__aeabi_d2iz>
 80017e8:	4603      	mov	r3, r0
 80017ea:	4a08      	ldr	r2, [pc, #32]	@ (800180c <BMP180_GetPress+0x444>)
 80017ec:	6013      	str	r3, [r2, #0]

	return Press;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <BMP180_GetPress+0x444>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bdb0      	pop	{r4, r5, r7, pc}
 8001804:	20000240 	.word	0x20000240
 8001808:	20000238 	.word	0x20000238
 800180c:	20000244 	.word	0x20000244
 8001810:	40700000 	.word	0x40700000
 8001814:	20000224 	.word	0x20000224
 8001818:	40f00000 	.word	0x40f00000
 800181c:	ffffe343 	.word	0xffffe343
 8001820:	20000228 	.word	0x20000228
 8001824:	40300000 	.word	0x40300000

08001828 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fdc9 	bl	80013c8 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 8001836:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <BMP180_GetAlt+0x88>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001842:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80018b4 <BMP180_GetAlt+0x8c>
 8001846:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800184a:	ee16 0a90 	vmov	r0, s13
 800184e:	f7fe fea3 	bl	8000598 <__aeabi_f2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 80018a0 <BMP180_GetAlt+0x78>
 800185a:	ec43 2b10 	vmov	d0, r2, r3
 800185e:	f007 ff51 	bl	8009704 <pow>
 8001862:	ec53 2b10 	vmov	r2, r3, d0
 8001866:	f04f 0000 	mov.w	r0, #0
 800186a:	4913      	ldr	r1, [pc, #76]	@ (80018b8 <BMP180_GetAlt+0x90>)
 800186c:	f7fe fd34 	bl	80002d8 <__aeabi_dsub>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	a30b      	add	r3, pc, #44	@ (adr r3, 80018a8 <BMP180_GetAlt+0x80>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fee3 	bl	8000648 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f9d5 	bl	8000c38 <__aeabi_d2f>
 800188e:	4603      	mov	r3, r0
 8001890:	ee07 3a90 	vmov	s15, r3
}
 8001894:	eeb0 0a67 	vmov.f32	s0, s15
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	ccd745e4 	.word	0xccd745e4
 80018a4:	3fc85b95 	.word	0x3fc85b95
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40e5a540 	.word	0x40e5a540
 80018b0:	20000244 	.word	0x20000244
 80018b4:	47c5e680 	.word	0x47c5e680
 80018b8:	3ff00000 	.word	0x3ff00000

080018bc <BMP180_Start>:

void BMP180_Start (void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80018c0:	f7ff fbb8 	bl	8001034 <read_calliberation_data>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018cc:	f000 fbdf 	bl	800208e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d0:	f000 f878 	bl	80019c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d4:	f000 f94c 	bl	8001b70 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80018d8:	f000 f900 	bl	8001adc <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80018dc:	f000 f8be 	bl	8001a5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  BMP180_Start();
 80018e0:	f7ff ffec 	bl	80018bc <BMP180_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Temperature = BMP180_GetTemp();
 80018e4:	f7ff fc74 	bl	80011d0 <BMP180_GetTemp>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <main+0xd4>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]

	 	  Pressure = BMP180_GetPress (0);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fd68 	bl	80013c8 <BMP180_GetPress>
 80018f8:	eef0 7a40 	vmov.f32	s15, s0
 80018fc:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <main+0xd8>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]

	 	  Altitude = BMP180_GetAlt(0);
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff ff90 	bl	8001828 <BMP180_GetAlt>
 8001908:	eef0 7a40 	vmov.f32	s15, s0
 800190c:	4b25      	ldr	r3, [pc, #148]	@ (80019a4 <main+0xdc>)
 800190e:	edc3 7a00 	vstr	s15, [r3]
	 	 sprintf(Temperature1, "temp: %.2f/r/n", Temperature);
 8001912:	4b22      	ldr	r3, [pc, #136]	@ (800199c <main+0xd4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fe3e 	bl	8000598 <__aeabi_f2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4921      	ldr	r1, [pc, #132]	@ (80019a8 <main+0xe0>)
 8001922:	4822      	ldr	r0, [pc, #136]	@ (80019ac <main+0xe4>)
 8001924:	f004 fab4 	bl	8005e90 <siprintf>
	 	 sprintf(Pressure1, "pressure : %.2f/r/n", Pressure);
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <main+0xd8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe33 	bl	8000598 <__aeabi_f2d>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	491e      	ldr	r1, [pc, #120]	@ (80019b0 <main+0xe8>)
 8001938:	481e      	ldr	r0, [pc, #120]	@ (80019b4 <main+0xec>)
 800193a:	f004 faa9 	bl	8005e90 <siprintf>
	 	sprintf(Altitude1, "Altitude : %.2f/r/n", Altitude);
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <main+0xdc>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fe28 	bl	8000598 <__aeabi_f2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	491a      	ldr	r1, [pc, #104]	@ (80019b8 <main+0xf0>)
 800194e:	481b      	ldr	r0, [pc, #108]	@ (80019bc <main+0xf4>)
 8001950:	f004 fa9e 	bl	8005e90 <siprintf>
	 	HAL_UART_Transmit(&hlpuart1, Temperature1, 30, 500);
 8001954:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001958:	221e      	movs	r2, #30
 800195a:	4914      	ldr	r1, [pc, #80]	@ (80019ac <main+0xe4>)
 800195c:	4818      	ldr	r0, [pc, #96]	@ (80019c0 <main+0xf8>)
 800195e:	f002 fced 	bl	800433c <HAL_UART_Transmit>
	 	HAL_Delay(5000);
 8001962:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001966:	f000 fc03 	bl	8002170 <HAL_Delay>
	 	HAL_UART_Transmit(&hlpuart1, Pressure1, 30, 500);
 800196a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800196e:	221e      	movs	r2, #30
 8001970:	4910      	ldr	r1, [pc, #64]	@ (80019b4 <main+0xec>)
 8001972:	4813      	ldr	r0, [pc, #76]	@ (80019c0 <main+0xf8>)
 8001974:	f002 fce2 	bl	800433c <HAL_UART_Transmit>
	 	HAL_Delay(5000);
 8001978:	f241 3088 	movw	r0, #5000	@ 0x1388
 800197c:	f000 fbf8 	bl	8002170 <HAL_Delay>
	 	HAL_UART_Transmit(&hlpuart1, Altitude1, 30, 500);
 8001980:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001984:	221e      	movs	r2, #30
 8001986:	490d      	ldr	r1, [pc, #52]	@ (80019bc <main+0xf4>)
 8001988:	480d      	ldr	r0, [pc, #52]	@ (80019c0 <main+0xf8>)
 800198a:	f002 fcd7 	bl	800433c <HAL_UART_Transmit>
	 	HAL_Delay(5000);
 800198e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001992:	f000 fbed 	bl	8002170 <HAL_Delay>
  {
 8001996:	bf00      	nop
 8001998:	e7a4      	b.n	80018e4 <main+0x1c>
 800199a:	bf00      	nop
 800199c:	20000334 	.word	0x20000334
 80019a0:	20000338 	.word	0x20000338
 80019a4:	2000033c 	.word	0x2000033c
 80019a8:	0800a5e4 	.word	0x0800a5e4
 80019ac:	20000340 	.word	0x20000340
 80019b0:	0800a5f4 	.word	0x0800a5f4
 80019b4:	20000360 	.word	0x20000360
 80019b8:	0800a608 	.word	0x0800a608
 80019bc:	20000380 	.word	0x20000380
 80019c0:	200002a0 	.word	0x200002a0

080019c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b094      	sub	sp, #80	@ 0x50
 80019c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ca:	f107 0318 	add.w	r3, r7, #24
 80019ce:	2238      	movs	r2, #56	@ 0x38
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 fabf 	bl	8005f56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019ea:	f001 fc85 	bl	80032f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f8:	2340      	movs	r3, #64	@ 0x40
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fc:	2302      	movs	r3, #2
 80019fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a00:	2302      	movs	r3, #2
 8001a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001a08:	2309      	movs	r3, #9
 8001a0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a18:	f107 0318 	add.w	r3, r7, #24
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 fd1f 	bl	8003460 <HAL_RCC_OscConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001a28:	f000 f908 	bl	8001c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a30:	2303      	movs	r3, #3
 8001a32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2102      	movs	r1, #2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 f81d 	bl	8003a84 <HAL_RCC_ClockConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a50:	f000 f8f4 	bl	8001c3c <Error_Handler>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3750      	adds	r7, #80	@ 0x50
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001a62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <MX_I2C1_Init+0x78>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001a68:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad8 <MX_I2C1_Init+0x7c>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a96:	480e      	ldr	r0, [pc, #56]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001a98:	f000 fe0a 	bl	80026b0 <HAL_I2C_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001aa2:	f000 f8cb 	bl	8001c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001aaa:	f001 fb8d 	bl	80031c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ab4:	f000 f8c2 	bl	8001c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4805      	ldr	r0, [pc, #20]	@ (8001ad0 <MX_I2C1_Init+0x74>)
 8001abc:	f001 fbcf 	bl	800325e <HAL_I2CEx_ConfigDigitalFilter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ac6:	f000 f8b9 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000024c 	.word	0x2000024c
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	10808dd3 	.word	0x10808dd3

08001adc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ae0:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001ae2:	4a22      	ldr	r2, [pc, #136]	@ (8001b6c <MX_LPUART1_UART_Init+0x90>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ae6:	4b20      	ldr	r3, [pc, #128]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001b1e:	4812      	ldr	r0, [pc, #72]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001b20:	f002 fbbc 	bl	800429c <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b2a:	f000 f887 	bl	8001c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b2e:	2100      	movs	r1, #0
 8001b30:	480d      	ldr	r0, [pc, #52]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001b32:	f003 f9b5 	bl	8004ea0 <HAL_UARTEx_SetTxFifoThreshold>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001b3c:	f000 f87e 	bl	8001c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b40:	2100      	movs	r1, #0
 8001b42:	4809      	ldr	r0, [pc, #36]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001b44:	f003 f9ea 	bl	8004f1c <HAL_UARTEx_SetRxFifoThreshold>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001b4e:	f000 f875 	bl	8001c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <MX_LPUART1_UART_Init+0x8c>)
 8001b54:	f003 f96b 	bl	8004e2e <HAL_UARTEx_DisableFifoMode>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001b5e:	f000 f86d 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200002a0 	.word	0x200002a0
 8001b6c:	40008000 	.word	0x40008000

08001b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	4b2b      	ldr	r3, [pc, #172]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b92:	4b28      	ldr	r3, [pc, #160]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b9e:	4b25      	ldr	r3, [pc, #148]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	4a24      	ldr	r2, [pc, #144]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001ba4:	f043 0320 	orr.w	r3, r3, #32
 8001ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001baa:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bba:	4a1e      	ldr	r2, [pc, #120]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bda:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <MX_GPIO_Init+0xc4>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2120      	movs	r1, #32
 8001bea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bee:	f000 fd47 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bf8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	480b      	ldr	r0, [pc, #44]	@ (8001c38 <MX_GPIO_Init+0xc8>)
 8001c0a:	f000 fbb7 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c0e:	2320      	movs	r3, #32
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c28:	f000 fba8 	bl	800237c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	@ 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48000800 	.word	0x48000800

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c40:	b672      	cpsid	i
}
 8001c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <Error_Handler+0x8>

08001c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c52:	4a0e      	ldr	r2, [pc, #56]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_MspInit+0x44>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c7e:	f001 fbdf 	bl	8003440 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b09c      	sub	sp, #112	@ 0x70
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca8:	f107 0318 	add.w	r3, r7, #24
 8001cac:	2244      	movs	r2, #68	@ 0x44
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 f950 	bl	8005f56 <memset>
  if(hi2c->Instance==I2C1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2d      	ldr	r2, [pc, #180]	@ (8001d70 <HAL_I2C_MspInit+0xe0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d153      	bne.n	8001d68 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cc0:	2340      	movs	r3, #64	@ 0x40
 8001cc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc8:	f107 0318 	add.w	r3, r7, #24
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 f8f5 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cd8:	f7ff ffb0 	bl	8001c3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cdc:	4b25      	ldr	r3, [pc, #148]	@ (8001d74 <HAL_I2C_MspInit+0xe4>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce0:	4a24      	ldr	r2, [pc, #144]	@ (8001d74 <HAL_I2C_MspInit+0xe4>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce8:	4b22      	ldr	r3, [pc, #136]	@ (8001d74 <HAL_I2C_MspInit+0xe4>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d74 <HAL_I2C_MspInit+0xe4>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d74 <HAL_I2C_MspInit+0xe4>)
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d00:	4b1c      	ldr	r3, [pc, #112]	@ (8001d74 <HAL_I2C_MspInit+0xe4>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d12:	2312      	movs	r3, #18
 8001d14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d26:	4619      	mov	r1, r3
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d2c:	f000 fb26 	bl	800237c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d34:	2312      	movs	r3, #18
 8001d36:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d40:	2304      	movs	r3, #4
 8001d42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <HAL_I2C_MspInit+0xe8>)
 8001d4c:	f000 fb16 	bl	800237c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <HAL_I2C_MspInit+0xe4>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	4a07      	ldr	r2, [pc, #28]	@ (8001d74 <HAL_I2C_MspInit+0xe4>)
 8001d56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <HAL_I2C_MspInit+0xe4>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d68:	bf00      	nop
 8001d6a:	3770      	adds	r7, #112	@ 0x70
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40005400 	.word	0x40005400
 8001d74:	40021000 	.word	0x40021000
 8001d78:	48000400 	.word	0x48000400

08001d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b09a      	sub	sp, #104	@ 0x68
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	2244      	movs	r2, #68	@ 0x44
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f004 f8da 	bl	8005f56 <memset>
  if(huart->Instance==LPUART1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e24 <HAL_UART_MspInit+0xa8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d136      	bne.n	8001e1a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001dac:	2320      	movs	r3, #32
 8001dae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db4:	f107 0310 	add.w	r3, r7, #16
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 f87f 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dc4:	f7ff ff3a 	bl	8001c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <HAL_UART_MspInit+0xac>)
 8001dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dcc:	4a16      	ldr	r2, [pc, #88]	@ (8001e28 <HAL_UART_MspInit+0xac>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001dd4:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <HAL_UART_MspInit+0xac>)
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_UART_MspInit+0xac>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de4:	4a10      	ldr	r2, [pc, #64]	@ (8001e28 <HAL_UART_MspInit+0xac>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dec:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_UART_MspInit+0xac>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001df8:	230c      	movs	r3, #12
 8001dfa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e08:	230c      	movs	r3, #12
 8001e0a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e16:	f000 fab1 	bl	800237c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3768      	adds	r7, #104	@ 0x68
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40008000 	.word	0x40008000
 8001e28:	40021000 	.word	0x40021000

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <NMI_Handler+0x4>

08001e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <MemManage_Handler+0x4>

08001e44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e82:	f000 f957 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  return 1;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_kill>:

int _kill(int pid, int sig)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea4:	f004 f8aa 	bl	8005ffc <__errno>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2216      	movs	r2, #22
 8001eac:	601a      	str	r2, [r3, #0]
  return -1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_exit>:

void _exit (int status)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffe7 	bl	8001e9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <_exit+0x12>

08001ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00a      	b.n	8001ef8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee2:	f3af 8000 	nop.w
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf0      	blt.n	8001ee2 <_read+0x12>
  }

  return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e009      	b.n	8001f30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf1      	blt.n	8001f1c <_write+0x12>
  }
  return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_close>:

int _close(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_isatty>:

int _isatty(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	@ (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f004 f80e 	bl	8005ffc <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <_sbrk+0x64>)
 8001ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20008000 	.word	0x20008000
 800200c:	00000400 	.word	0x00000400
 8002010:	200003a0 	.word	0x200003a0
 8002014:	200004f8 	.word	0x200004f8

08002018 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800203c:	480d      	ldr	r0, [pc, #52]	@ (8002074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800203e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002040:	f7ff ffea 	bl	8002018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002044:	480c      	ldr	r0, [pc, #48]	@ (8002078 <LoopForever+0x6>)
  ldr r1, =_edata
 8002046:	490d      	ldr	r1, [pc, #52]	@ (800207c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002048:	4a0d      	ldr	r2, [pc, #52]	@ (8002080 <LoopForever+0xe>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800204c:	e002      	b.n	8002054 <LoopCopyDataInit>

0800204e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002052:	3304      	adds	r3, #4

08002054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002058:	d3f9      	bcc.n	800204e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800205c:	4c0a      	ldr	r4, [pc, #40]	@ (8002088 <LoopForever+0x16>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002060:	e001      	b.n	8002066 <LoopFillZerobss>

08002062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002064:	3204      	adds	r2, #4

08002066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002068:	d3fb      	bcc.n	8002062 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800206a:	f003 ffcd 	bl	8006008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800206e:	f7ff fc2b 	bl	80018c8 <main>

08002072 <LoopForever>:

LoopForever:
    b LoopForever
 8002072:	e7fe      	b.n	8002072 <LoopForever>
  ldr   r0, =_estack
 8002074:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002080:	0800aac8 	.word	0x0800aac8
  ldr r2, =_sbss
 8002084:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002088:	200004f4 	.word	0x200004f4

0800208c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC1_2_IRQHandler>

0800208e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f000 f93d 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 f80e 	bl	80020c0 <HAL_InitTick>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	71fb      	strb	r3, [r7, #7]
 80020ae:	e001      	b.n	80020b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020b0:	f7ff fdca 	bl	8001c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020b4:	79fb      	ldrb	r3, [r7, #7]

}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020cc:	4b16      	ldr	r3, [pc, #88]	@ (8002128 <HAL_InitTick+0x68>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d022      	beq.n	800211a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020d4:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_InitTick+0x6c>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b13      	ldr	r3, [pc, #76]	@ (8002128 <HAL_InitTick+0x68>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80020e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f93a 	bl	8002362 <HAL_SYSTICK_Config>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10f      	bne.n	8002114 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	d809      	bhi.n	800210e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fa:	2200      	movs	r2, #0
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002102:	f000 f914 	bl	800232e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <HAL_InitTick+0x70>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e007      	b.n	800211e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e004      	b.n	800211e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	e001      	b.n	800211e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000008 	.word	0x20000008
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b05      	ldr	r3, [pc, #20]	@ (8002150 <HAL_IncTick+0x1c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <HAL_IncTick+0x20>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4413      	add	r3, r2
 8002142:	4a03      	ldr	r2, [pc, #12]	@ (8002150 <HAL_IncTick+0x1c>)
 8002144:	6013      	str	r3, [r2, #0]
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	200003a4 	.word	0x200003a4
 8002154:	20000008 	.word	0x20000008

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	200003a4 	.word	0x200003a4

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002188:	d004      	beq.n	8002194 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_Delay+0x40>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4413      	add	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002194:	bf00      	nop
 8002196:	f7ff ffdf 	bl	8002158 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d8f7      	bhi.n	8002196 <HAL_Delay+0x26>
  {
  }
}
 80021a6:	bf00      	nop
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000008 	.word	0x20000008

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	@ (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	@ (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022f8:	f7ff ff8e 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff47 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800233c:	f7ff ff5e 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f7ff ff90 	bl	800226c <NVIC_EncodePriority>
 800234c:	4602      	mov	r2, r0
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff5f 	bl	8002218 <__NVIC_SetPriority>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffb2 	bl	80022d4 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800238a:	e15a      	b.n	8002642 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 814c 	beq.w	800263c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d005      	beq.n	80023bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d130      	bne.n	800241e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	2203      	movs	r2, #3
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023f2:	2201      	movs	r2, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 0201 	and.w	r2, r3, #1
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b03      	cmp	r3, #3
 8002428:	d017      	beq.n	800245a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d123      	bne.n	80024ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	220f      	movs	r2, #15
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4013      	ands	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	691a      	ldr	r2, [r3, #16]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	6939      	ldr	r1, [r7, #16]
 80024aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2203      	movs	r2, #3
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0203 	and.w	r2, r3, #3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80a6 	beq.w	800263c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002660 <HAL_GPIO_Init+0x2e4>)
 80024f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002660 <HAL_GPIO_Init+0x2e4>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80024fc:	4b58      	ldr	r3, [pc, #352]	@ (8002660 <HAL_GPIO_Init+0x2e4>)
 80024fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002508:	4a56      	ldr	r2, [pc, #344]	@ (8002664 <HAL_GPIO_Init+0x2e8>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	220f      	movs	r2, #15
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002532:	d01f      	beq.n	8002574 <HAL_GPIO_Init+0x1f8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a4c      	ldr	r2, [pc, #304]	@ (8002668 <HAL_GPIO_Init+0x2ec>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d019      	beq.n	8002570 <HAL_GPIO_Init+0x1f4>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a4b      	ldr	r2, [pc, #300]	@ (800266c <HAL_GPIO_Init+0x2f0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_GPIO_Init+0x1f0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a4a      	ldr	r2, [pc, #296]	@ (8002670 <HAL_GPIO_Init+0x2f4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00d      	beq.n	8002568 <HAL_GPIO_Init+0x1ec>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a49      	ldr	r2, [pc, #292]	@ (8002674 <HAL_GPIO_Init+0x2f8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <HAL_GPIO_Init+0x1e8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a48      	ldr	r2, [pc, #288]	@ (8002678 <HAL_GPIO_Init+0x2fc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_GPIO_Init+0x1e4>
 800255c:	2305      	movs	r3, #5
 800255e:	e00a      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002560:	2306      	movs	r3, #6
 8002562:	e008      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002564:	2304      	movs	r3, #4
 8002566:	e006      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002568:	2303      	movs	r3, #3
 800256a:	e004      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 800256c:	2302      	movs	r3, #2
 800256e:	e002      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002570:	2301      	movs	r3, #1
 8002572:	e000      	b.n	8002576 <HAL_GPIO_Init+0x1fa>
 8002574:	2300      	movs	r3, #0
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	f002 0203 	and.w	r2, r2, #3
 800257c:	0092      	lsls	r2, r2, #2
 800257e:	4093      	lsls	r3, r2
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002586:	4937      	ldr	r1, [pc, #220]	@ (8002664 <HAL_GPIO_Init+0x2e8>)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002594:	4b39      	ldr	r3, [pc, #228]	@ (800267c <HAL_GPIO_Init+0x300>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b8:	4a30      	ldr	r2, [pc, #192]	@ (800267c <HAL_GPIO_Init+0x300>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025be:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <HAL_GPIO_Init+0x300>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025e2:	4a26      	ldr	r2, [pc, #152]	@ (800267c <HAL_GPIO_Init+0x300>)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80025e8:	4b24      	ldr	r3, [pc, #144]	@ (800267c <HAL_GPIO_Init+0x300>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800260c:	4a1b      	ldr	r2, [pc, #108]	@ (800267c <HAL_GPIO_Init+0x300>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002612:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <HAL_GPIO_Init+0x300>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002636:	4a11      	ldr	r2, [pc, #68]	@ (800267c <HAL_GPIO_Init+0x300>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f ae9d 	bne.w	800238c <HAL_GPIO_Init+0x10>
  }
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000
 8002668:	48000400 	.word	0x48000400
 800266c:	48000800 	.word	0x48000800
 8002670:	48000c00 	.word	0x48000c00
 8002674:	48001000 	.word	0x48001000
 8002678:	48001400 	.word	0x48001400
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800269c:	e002      	b.n	80026a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e08d      	b.n	80027de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fada 	bl	8001c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	@ 0x24
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002700:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002710:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e006      	b.n	8002738 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002736:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d108      	bne.n	8002752 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	e007      	b.n	8002762 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002760:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002774:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002784:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69d9      	ldr	r1, [r3, #28]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1a      	ldr	r2, [r3, #32]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b20      	cmp	r3, #32
 800280c:	f040 80f9 	bne.w	8002a02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_I2C_Mem_Write+0x34>
 8002816:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0ed      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Mem_Write+0x4e>
 8002832:	2302      	movs	r3, #2
 8002834:	e0e6      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800283e:	f7ff fc8b 	bl	8002158 <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2319      	movs	r3, #25
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fac3 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0d1      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2221      	movs	r2, #33	@ 0x21
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2240      	movs	r2, #64	@ 0x40
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a3a      	ldr	r2, [r7, #32]
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002880:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002888:	88f8      	ldrh	r0, [r7, #6]
 800288a:	893a      	ldrh	r2, [r7, #8]
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	4603      	mov	r3, r0
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f9d3 	bl	8002c44 <I2C_RequestMemoryWrite>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0a9      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2bff      	cmp	r3, #255	@ 0xff
 80028b8:	d90e      	bls.n	80028d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	22ff      	movs	r2, #255	@ 0xff
 80028be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fc47 	bl	8003164 <I2C_TransferConfig>
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	2300      	movs	r3, #0
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fc36 	bl	8003164 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fac6 	bl	8002e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e07b      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d034      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x1c8>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294a:	2b00      	cmp	r3, #0
 800294c:	d130      	bne.n	80029b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002954:	2200      	movs	r2, #0
 8002956:	2180      	movs	r1, #128	@ 0x80
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fa3f 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e04d      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2bff      	cmp	r3, #255	@ 0xff
 8002970:	d90e      	bls.n	8002990 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	22ff      	movs	r2, #255	@ 0xff
 8002976:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297c:	b2da      	uxtb	r2, r3
 800297e:	8979      	ldrh	r1, [r7, #10]
 8002980:	2300      	movs	r3, #0
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fbeb 	bl	8003164 <I2C_TransferConfig>
 800298e:	e00f      	b.n	80029b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	8979      	ldrh	r1, [r7, #10]
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fbda 	bl	8003164 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d19e      	bne.n	80028f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 faac 	bl	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e01a      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2220      	movs	r2, #32
 80029d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6859      	ldr	r1, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <HAL_I2C_Mem_Write+0x224>)
 80029e2:	400b      	ands	r3, r1
 80029e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	fe00e800 	.word	0xfe00e800

08002a10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	4608      	mov	r0, r1
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4603      	mov	r3, r0
 8002a20:	817b      	strh	r3, [r7, #10]
 8002a22:	460b      	mov	r3, r1
 8002a24:	813b      	strh	r3, [r7, #8]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	f040 80fd 	bne.w	8002c32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_I2C_Mem_Read+0x34>
 8002a3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d105      	bne.n	8002a50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0f1      	b.n	8002c34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_I2C_Mem_Read+0x4e>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e0ea      	b.n	8002c34 <HAL_I2C_Mem_Read+0x224>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a66:	f7ff fb77 	bl	8002158 <HAL_GetTick>
 8002a6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2319      	movs	r3, #25
 8002a72:	2201      	movs	r2, #1
 8002a74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f9af 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0d5      	b.n	8002c34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2222      	movs	r2, #34	@ 0x22
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2240      	movs	r2, #64	@ 0x40
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a3a      	ldr	r2, [r7, #32]
 8002aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ab0:	88f8      	ldrh	r0, [r7, #6]
 8002ab2:	893a      	ldrh	r2, [r7, #8]
 8002ab4:	8979      	ldrh	r1, [r7, #10]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4603      	mov	r3, r0
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f913 	bl	8002cec <I2C_RequestMemoryRead>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0ad      	b.n	8002c34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2bff      	cmp	r3, #255	@ 0xff
 8002ae0:	d90e      	bls.n	8002b00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	22ff      	movs	r2, #255	@ 0xff
 8002ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	8979      	ldrh	r1, [r7, #10]
 8002af0:	4b52      	ldr	r3, [pc, #328]	@ (8002c3c <HAL_I2C_Mem_Read+0x22c>)
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fb33 	bl	8003164 <I2C_TransferConfig>
 8002afe:	e00f      	b.n	8002b20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	8979      	ldrh	r1, [r7, #10]
 8002b12:	4b4a      	ldr	r3, [pc, #296]	@ (8002c3c <HAL_I2C_Mem_Read+0x22c>)
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fb22 	bl	8003164 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b26:	2200      	movs	r2, #0
 8002b28:	2104      	movs	r1, #4
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f956 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e07c      	b.n	8002c34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d034      	beq.n	8002be0 <HAL_I2C_Mem_Read+0x1d0>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d130      	bne.n	8002be0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b84:	2200      	movs	r2, #0
 8002b86:	2180      	movs	r1, #128	@ 0x80
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f927 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e04d      	b.n	8002c34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2bff      	cmp	r3, #255	@ 0xff
 8002ba0:	d90e      	bls.n	8002bc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	22ff      	movs	r2, #255	@ 0xff
 8002ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	8979      	ldrh	r1, [r7, #10]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 fad3 	bl	8003164 <I2C_TransferConfig>
 8002bbe:	e00f      	b.n	8002be0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	8979      	ldrh	r1, [r7, #10]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fac2 	bl	8003164 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d19a      	bne.n	8002b20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f994 	bl	8002f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e01a      	b.n	8002c34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2220      	movs	r2, #32
 8002c04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <HAL_I2C_Mem_Read+0x230>)
 8002c12:	400b      	ands	r3, r1
 8002c14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
  }
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	80002400 	.word	0x80002400
 8002c40:	fe00e800 	.word	0xfe00e800

08002c44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	817b      	strh	r3, [r7, #10]
 8002c56:	460b      	mov	r3, r1
 8002c58:	813b      	strh	r3, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c5e:	88fb      	ldrh	r3, [r7, #6]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	8979      	ldrh	r1, [r7, #10]
 8002c64:	4b20      	ldr	r3, [pc, #128]	@ (8002ce8 <I2C_RequestMemoryWrite+0xa4>)
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fa79 	bl	8003164 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	69b9      	ldr	r1, [r7, #24]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f909 	bl	8002e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e02c      	b.n	8002ce0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c8c:	893b      	ldrh	r3, [r7, #8]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c96:	e015      	b.n	8002cc4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c98:	893b      	ldrh	r3, [r7, #8]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	69b9      	ldr	r1, [r7, #24]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f8ef 	bl	8002e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e012      	b.n	8002ce0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cba:	893b      	ldrh	r3, [r7, #8]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f884 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	80002000 	.word	0x80002000

08002cec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	813b      	strh	r3, [r7, #8]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	8979      	ldrh	r1, [r7, #10]
 8002d0c:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <I2C_RequestMemoryRead+0xa4>)
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2300      	movs	r3, #0
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 fa26 	bl	8003164 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f8b6 	bl	8002e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e02c      	b.n	8002d86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d105      	bne.n	8002d3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d32:	893b      	ldrh	r3, [r7, #8]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d3c:	e015      	b.n	8002d6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d3e:	893b      	ldrh	r3, [r7, #8]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f89c 	bl	8002e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e012      	b.n	8002d86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2200      	movs	r2, #0
 8002d72:	2140      	movs	r1, #64	@ 0x40
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f831 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	80002000 	.word	0x80002000

08002d94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d103      	bne.n	8002db2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2200      	movs	r2, #0
 8002db0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d007      	beq.n	8002dd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699a      	ldr	r2, [r3, #24]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	619a      	str	r2, [r3, #24]
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dec:	e03b      	b.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	6839      	ldr	r1, [r7, #0]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f8d6 	bl	8002fa4 <I2C_IsErrorOccurred>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e041      	b.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e08:	d02d      	beq.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0a:	f7ff f9a5 	bl	8002158 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d302      	bcc.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d122      	bne.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d113      	bne.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	bf0c      	ite	eq
 8002e76:	2301      	moveq	r3, #1
 8002e78:	2300      	movne	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d0b4      	beq.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e9a:	e033      	b.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f87f 	bl	8002fa4 <I2C_IsErrorOccurred>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e031      	b.n	8002f14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eb6:	d025      	beq.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb8:	f7ff f94e 	bl	8002158 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d302      	bcc.n	8002ece <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d11a      	bne.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d013      	beq.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	f043 0220 	orr.w	r2, r3, #32
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e007      	b.n	8002f14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d1c4      	bne.n	8002e9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f28:	e02f      	b.n	8002f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f838 	bl	8002fa4 <I2C_IsErrorOccurred>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e02d      	b.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3e:	f7ff f90b 	bl	8002158 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d302      	bcc.n	8002f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11a      	bne.n	8002f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d013      	beq.n	8002f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	f043 0220 	orr.w	r2, r3, #32
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e007      	b.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d1c8      	bne.n	8002f2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	@ 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d068      	beq.n	80030a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fd8:	e049      	b.n	800306e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fe0:	d045      	beq.n	800306e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7ff f8b9 	bl	8002158 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_IsErrorOccurred+0x54>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d13a      	bne.n	800306e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003002:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800300a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800301a:	d121      	bne.n	8003060 <I2C_IsErrorOccurred+0xbc>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003022:	d01d      	beq.n	8003060 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	2b20      	cmp	r3, #32
 8003028:	d01a      	beq.n	8003060 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003038:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800303a:	f7ff f88d 	bl	8002158 <HAL_GetTick>
 800303e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003040:	e00e      	b.n	8003060 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003042:	f7ff f889 	bl	8002158 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b19      	cmp	r3, #25
 800304e:	d907      	bls.n	8003060 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f043 0320 	orr.w	r3, r3, #32
 8003056:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800305e:	e006      	b.n	800306e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b20      	cmp	r3, #32
 800306c:	d1e9      	bne.n	8003042 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b20      	cmp	r3, #32
 800307a:	d003      	beq.n	8003084 <I2C_IsErrorOccurred+0xe0>
 800307c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0aa      	beq.n	8002fda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2220      	movs	r2, #32
 8003092:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	f043 0302 	orr.w	r3, r3, #2
 80030fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003114:	2b00      	cmp	r3, #0
 8003116:	d01c      	beq.n	8003152 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff fe3b 	bl	8002d94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <I2C_IsErrorOccurred+0x1bc>)
 800312a:	400b      	ands	r3, r1
 800312c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003156:	4618      	mov	r0, r3
 8003158:	3728      	adds	r7, #40	@ 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	fe00e800 	.word	0xfe00e800

08003164 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	4613      	mov	r3, r2
 8003174:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003176:	897b      	ldrh	r3, [r7, #10]
 8003178:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800317c:	7a7b      	ldrb	r3, [r7, #9]
 800317e:	041b      	lsls	r3, r3, #16
 8003180:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003184:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	4313      	orrs	r3, r2
 800318e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003192:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	0d5b      	lsrs	r3, r3, #21
 800319e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80031a2:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <I2C_TransferConfig+0x60>)
 80031a4:	430b      	orrs	r3, r1
 80031a6:	43db      	mvns	r3, r3
 80031a8:	ea02 0103 	and.w	r1, r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	03ff63ff 	.word	0x03ff63ff

080031c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d138      	bne.n	8003250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e032      	b.n	8003252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	@ 0x24
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800321a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b20      	cmp	r3, #32
 8003272:	d139      	bne.n	80032e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800327e:	2302      	movs	r3, #2
 8003280:	e033      	b.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2224      	movs	r2, #36	@ 0x24
 800328e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	e000      	b.n	80032ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032e8:	2302      	movs	r3, #2
  }
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d141      	bne.n	800338a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003306:	4b4b      	ldr	r3, [pc, #300]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800330e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003312:	d131      	bne.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003314:	4b47      	ldr	r3, [pc, #284]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800331a:	4a46      	ldr	r2, [pc, #280]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800331c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003320:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003324:	4b43      	ldr	r3, [pc, #268]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800332c:	4a41      	ldr	r2, [pc, #260]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003332:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003334:	4b40      	ldr	r3, [pc, #256]	@ (8003438 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2232      	movs	r2, #50	@ 0x32
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	4a3f      	ldr	r2, [pc, #252]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	0c9b      	lsrs	r3, r3, #18
 8003346:	3301      	adds	r3, #1
 8003348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800334a:	e002      	b.n	8003352 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3b01      	subs	r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003352:	4b38      	ldr	r3, [pc, #224]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335e:	d102      	bne.n	8003366 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f2      	bne.n	800334c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003366:	4b33      	ldr	r3, [pc, #204]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003372:	d158      	bne.n	8003426 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e057      	b.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003378:	4b2e      	ldr	r3, [pc, #184]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800337e:	4a2d      	ldr	r2, [pc, #180]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003384:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003388:	e04d      	b.n	8003426 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003390:	d141      	bne.n	8003416 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003392:	4b28      	ldr	r3, [pc, #160]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339e:	d131      	bne.n	8003404 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033a0:	4b24      	ldr	r3, [pc, #144]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033a6:	4a23      	ldr	r2, [pc, #140]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b0:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003438 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2232      	movs	r2, #50	@ 0x32
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	0c9b      	lsrs	r3, r3, #18
 80033d2:	3301      	adds	r3, #1
 80033d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d6:	e002      	b.n	80033de <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3b01      	subs	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033de:	4b15      	ldr	r3, [pc, #84]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ea:	d102      	bne.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f2      	bne.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033f2:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fe:	d112      	bne.n	8003426 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e011      	b.n	8003428 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003404:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800340a:	4a0a      	ldr	r2, [pc, #40]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800340c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003410:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003414:	e007      	b.n	8003426 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003416:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800341e:	4a05      	ldr	r2, [pc, #20]	@ (8003434 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003420:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003424:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	40007000 	.word	0x40007000
 8003438:	20000000 	.word	0x20000000
 800343c:	431bde83 	.word	0x431bde83

08003440 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003444:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a04      	ldr	r2, [pc, #16]	@ (800345c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800344a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800344e:	6093      	str	r3, [r2, #8]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40007000 	.word	0x40007000

08003460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e2fe      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d075      	beq.n	800356a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347e:	4b97      	ldr	r3, [pc, #604]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003488:	4b94      	ldr	r3, [pc, #592]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d102      	bne.n	800349e <HAL_RCC_OscConfig+0x3e>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d002      	beq.n	80034a4 <HAL_RCC_OscConfig+0x44>
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d10b      	bne.n	80034bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a4:	4b8d      	ldr	r3, [pc, #564]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d05b      	beq.n	8003568 <HAL_RCC_OscConfig+0x108>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d157      	bne.n	8003568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e2d9      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c4:	d106      	bne.n	80034d4 <HAL_RCC_OscConfig+0x74>
 80034c6:	4b85      	ldr	r3, [pc, #532]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a84      	ldr	r2, [pc, #528]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e01d      	b.n	8003510 <HAL_RCC_OscConfig+0xb0>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x98>
 80034de:	4b7f      	ldr	r3, [pc, #508]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a7e      	ldr	r2, [pc, #504]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80034e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	4b7c      	ldr	r3, [pc, #496]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a7b      	ldr	r2, [pc, #492]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e00b      	b.n	8003510 <HAL_RCC_OscConfig+0xb0>
 80034f8:	4b78      	ldr	r3, [pc, #480]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a77      	ldr	r2, [pc, #476]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80034fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b75      	ldr	r3, [pc, #468]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a74      	ldr	r2, [pc, #464]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 800350a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800350e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d013      	beq.n	8003540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe fe1e 	bl	8002158 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe fe1a 	bl	8002158 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	@ 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e29e      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003532:	4b6a      	ldr	r3, [pc, #424]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0xc0>
 800353e:	e014      	b.n	800356a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe fe0a 	bl	8002158 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe fe06 	bl	8002158 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	@ 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e28a      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800355a:	4b60      	ldr	r3, [pc, #384]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0xe8>
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d075      	beq.n	8003662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003576:	4b59      	ldr	r3, [pc, #356]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003580:	4b56      	ldr	r3, [pc, #344]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d102      	bne.n	8003596 <HAL_RCC_OscConfig+0x136>
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d002      	beq.n	800359c <HAL_RCC_OscConfig+0x13c>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b04      	cmp	r3, #4
 800359a:	d11f      	bne.n	80035dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800359c:	4b4f      	ldr	r3, [pc, #316]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_OscConfig+0x154>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e25d      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b4:	4b49      	ldr	r3, [pc, #292]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	061b      	lsls	r3, r3, #24
 80035c2:	4946      	ldr	r1, [pc, #280]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035c8:	4b45      	ldr	r3, [pc, #276]	@ (80036e0 <HAL_RCC_OscConfig+0x280>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe fd77 	bl	80020c0 <HAL_InitTick>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d043      	beq.n	8003660 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e249      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d023      	beq.n	800362c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b3d      	ldr	r3, [pc, #244]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a3c      	ldr	r2, [pc, #240]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80035ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fdb2 	bl	8002158 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f8:	f7fe fdae 	bl	8002158 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e232      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	4b31      	ldr	r3, [pc, #196]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	061b      	lsls	r3, r3, #24
 8003624:	492d      	ldr	r1, [pc, #180]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]
 800362a:	e01a      	b.n	8003662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362c:	4b2b      	ldr	r3, [pc, #172]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2a      	ldr	r2, [pc, #168]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003632:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fd8e 	bl	8002158 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003640:	f7fe fd8a 	bl	8002158 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e20e      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003652:	4b22      	ldr	r3, [pc, #136]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x1e0>
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003660:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d041      	beq.n	80036f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01c      	beq.n	80036b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003676:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800367c:	4a17      	ldr	r2, [pc, #92]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe fd67 	bl	8002158 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368e:	f7fe fd63 	bl	8002158 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e1e7      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036a0:	4b0e      	ldr	r3, [pc, #56]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80036a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ef      	beq.n	800368e <HAL_RCC_OscConfig+0x22e>
 80036ae:	e020      	b.n	80036f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b0:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80036b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b6:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <HAL_RCC_OscConfig+0x27c>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe fd4a 	bl	8002158 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036c6:	e00d      	b.n	80036e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fe fd46 	bl	8002158 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d906      	bls.n	80036e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1ca      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80036e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ea      	bne.n	80036c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80a6 	beq.w	800384c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003700:	2300      	movs	r3, #0
 8003702:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003704:	4b84      	ldr	r3, [pc, #528]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_OscConfig+0x2b4>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_RCC_OscConfig+0x2b6>
 8003714:	2300      	movs	r3, #0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	4b7f      	ldr	r3, [pc, #508]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371e:	4a7e      	ldr	r2, [pc, #504]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 8003720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003724:	6593      	str	r3, [r2, #88]	@ 0x58
 8003726:	4b7c      	ldr	r3, [pc, #496]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003732:	2301      	movs	r3, #1
 8003734:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003736:	4b79      	ldr	r3, [pc, #484]	@ (800391c <HAL_RCC_OscConfig+0x4bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d118      	bne.n	8003774 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003742:	4b76      	ldr	r3, [pc, #472]	@ (800391c <HAL_RCC_OscConfig+0x4bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a75      	ldr	r2, [pc, #468]	@ (800391c <HAL_RCC_OscConfig+0x4bc>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374e:	f7fe fd03 	bl	8002158 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003756:	f7fe fcff 	bl	8002158 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e183      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003768:	4b6c      	ldr	r3, [pc, #432]	@ (800391c <HAL_RCC_OscConfig+0x4bc>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d108      	bne.n	800378e <HAL_RCC_OscConfig+0x32e>
 800377c:	4b66      	ldr	r3, [pc, #408]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003782:	4a65      	ldr	r2, [pc, #404]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800378c:	e024      	b.n	80037d8 <HAL_RCC_OscConfig+0x378>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b05      	cmp	r3, #5
 8003794:	d110      	bne.n	80037b8 <HAL_RCC_OscConfig+0x358>
 8003796:	4b60      	ldr	r3, [pc, #384]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379c:	4a5e      	ldr	r2, [pc, #376]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037b6:	e00f      	b.n	80037d8 <HAL_RCC_OscConfig+0x378>
 80037b8:	4b57      	ldr	r3, [pc, #348]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	4a56      	ldr	r2, [pc, #344]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037c8:	4b53      	ldr	r3, [pc, #332]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ce:	4a52      	ldr	r2, [pc, #328]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80037d0:	f023 0304 	bic.w	r3, r3, #4
 80037d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d016      	beq.n	800380e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fe fcba 	bl	8002158 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fe fcb6 	bl	8002158 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e138      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fe:	4b46      	ldr	r3, [pc, #280]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 8003800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ed      	beq.n	80037e8 <HAL_RCC_OscConfig+0x388>
 800380c:	e015      	b.n	800383a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fe fca3 	bl	8002158 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fe fc9f 	bl	8002158 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e121      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800382c:	4b3a      	ldr	r3, [pc, #232]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1ed      	bne.n	8003816 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800383a:	7ffb      	ldrb	r3, [r7, #31]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d105      	bne.n	800384c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003840:	4b35      	ldr	r3, [pc, #212]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 8003842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003844:	4a34      	ldr	r2, [pc, #208]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 8003846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800384a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d03c      	beq.n	80038d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01c      	beq.n	800389a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003860:	4b2d      	ldr	r3, [pc, #180]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 8003862:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003866:	4a2c      	ldr	r2, [pc, #176]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fe fc72 	bl	8002158 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003878:	f7fe fc6e 	bl	8002158 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0f2      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800388a:	4b23      	ldr	r3, [pc, #140]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 800388c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ef      	beq.n	8003878 <HAL_RCC_OscConfig+0x418>
 8003898:	e01b      	b.n	80038d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800389a:	4b1f      	ldr	r3, [pc, #124]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 800389c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fe fc55 	bl	8002158 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038b2:	f7fe fc51 	bl	8002158 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0d5      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80038c4:	4b14      	ldr	r3, [pc, #80]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80038c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1ef      	bne.n	80038b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80c9 	beq.w	8003a6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	f000 8083 	beq.w	80039f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d15e      	bne.n	80039b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a08      	ldr	r2, [pc, #32]	@ (8003918 <HAL_RCC_OscConfig+0x4b8>)
 80038f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe fc2b 	bl	8002158 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	e00c      	b.n	8003920 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003906:	f7fe fc27 	bl	8002158 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d905      	bls.n	8003920 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e0ab      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003920:	4b55      	ldr	r3, [pc, #340]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ec      	bne.n	8003906 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800392c:	4b52      	ldr	r3, [pc, #328]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	4b52      	ldr	r3, [pc, #328]	@ (8003a7c <HAL_RCC_OscConfig+0x61c>)
 8003932:	4013      	ands	r3, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6a11      	ldr	r1, [r2, #32]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800393c:	3a01      	subs	r2, #1
 800393e:	0112      	lsls	r2, r2, #4
 8003940:	4311      	orrs	r1, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003946:	0212      	lsls	r2, r2, #8
 8003948:	4311      	orrs	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800394e:	0852      	lsrs	r2, r2, #1
 8003950:	3a01      	subs	r2, #1
 8003952:	0552      	lsls	r2, r2, #21
 8003954:	4311      	orrs	r1, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800395a:	0852      	lsrs	r2, r2, #1
 800395c:	3a01      	subs	r2, #1
 800395e:	0652      	lsls	r2, r2, #25
 8003960:	4311      	orrs	r1, r2
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003966:	06d2      	lsls	r2, r2, #27
 8003968:	430a      	orrs	r2, r1
 800396a:	4943      	ldr	r1, [pc, #268]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 800396c:	4313      	orrs	r3, r2
 800396e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003970:	4b41      	ldr	r3, [pc, #260]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a40      	ldr	r2, [pc, #256]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 8003976:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800397a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800397c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4a3d      	ldr	r2, [pc, #244]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 8003982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003986:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe fbe6 	bl	8002158 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003990:	f7fe fbe2 	bl	8002158 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e066      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a2:	4b35      	ldr	r3, [pc, #212]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x530>
 80039ae:	e05e      	b.n	8003a6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b31      	ldr	r3, [pc, #196]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a30      	ldr	r2, [pc, #192]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 80039b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe fbcc 	bl	8002158 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fe fbc8 	bl	8002158 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e04c      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d6:	4b28      	ldr	r3, [pc, #160]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039e2:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	4924      	ldr	r1, [pc, #144]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 80039e8:	4b25      	ldr	r3, [pc, #148]	@ (8003a80 <HAL_RCC_OscConfig+0x620>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	60cb      	str	r3, [r1, #12]
 80039ee:	e03e      	b.n	8003a6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e039      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003a78 <HAL_RCC_OscConfig+0x618>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f003 0203 	and.w	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d12c      	bne.n	8003a6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d123      	bne.n	8003a6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d11b      	bne.n	8003a6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d113      	bne.n	8003a6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4c:	085b      	lsrs	r3, r3, #1
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	3b01      	subs	r3, #1
 8003a64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d001      	beq.n	8003a6e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	019f800c 	.word	0x019f800c
 8003a80:	feeefffc 	.word	0xfeeefffc

08003a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e11e      	b.n	8003cda <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b91      	ldr	r3, [pc, #580]	@ (8003ce4 <HAL_RCC_ClockConfig+0x260>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d910      	bls.n	8003acc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b8e      	ldr	r3, [pc, #568]	@ (8003ce4 <HAL_RCC_ClockConfig+0x260>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 020f 	bic.w	r2, r3, #15
 8003ab2:	498c      	ldr	r1, [pc, #560]	@ (8003ce4 <HAL_RCC_ClockConfig+0x260>)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b8a      	ldr	r3, [pc, #552]	@ (8003ce4 <HAL_RCC_ClockConfig+0x260>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e106      	b.n	8003cda <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d073      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d129      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae0:	4b81      	ldr	r3, [pc, #516]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0f4      	b.n	8003cda <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003af0:	f000 f99e 	bl	8003e30 <RCC_GetSysClockFreqFromPLLSource>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a7c      	ldr	r2, [pc, #496]	@ (8003cec <HAL_RCC_ClockConfig+0x268>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d93f      	bls.n	8003b7e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003afe:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d009      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d033      	beq.n	8003b7e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d12f      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b1e:	4b72      	ldr	r3, [pc, #456]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b26:	4a70      	ldr	r2, [pc, #448]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b2c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b2e:	2380      	movs	r3, #128	@ 0x80
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e024      	b.n	8003b7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0c6      	b.n	8003cda <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b4c:	4b66      	ldr	r3, [pc, #408]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0be      	b.n	8003cda <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b5c:	f000 f8ce 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4a61      	ldr	r2, [pc, #388]	@ (8003cec <HAL_RCC_ClockConfig+0x268>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d909      	bls.n	8003b7e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b72:	4a5d      	ldr	r2, [pc, #372]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b78:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b7a:	2380      	movs	r3, #128	@ 0x80
 8003b7c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b7e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f023 0203 	bic.w	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4957      	ldr	r1, [pc, #348]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b90:	f7fe fae2 	bl	8002158 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	e00a      	b.n	8003bae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b98:	f7fe fade 	bl	8002158 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e095      	b.n	8003cda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bae:	4b4e      	ldr	r3, [pc, #312]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 020c 	and.w	r2, r3, #12
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d1eb      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d023      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd8:	4b43      	ldr	r3, [pc, #268]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a42      	ldr	r2, [pc, #264]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003bde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003be2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bf8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003bfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b39      	ldr	r3, [pc, #228]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4936      	ldr	r1, [pc, #216]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b80      	cmp	r3, #128	@ 0x80
 8003c18:	d105      	bne.n	8003c26 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c1a:	4b33      	ldr	r3, [pc, #204]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4a32      	ldr	r2, [pc, #200]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003c20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c24:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c26:	4b2f      	ldr	r3, [pc, #188]	@ (8003ce4 <HAL_RCC_ClockConfig+0x260>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d21d      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce4 <HAL_RCC_ClockConfig+0x260>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 020f 	bic.w	r2, r3, #15
 8003c3c:	4929      	ldr	r1, [pc, #164]	@ (8003ce4 <HAL_RCC_ClockConfig+0x260>)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c44:	f7fe fa88 	bl	8002158 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fe fa84 	bl	8002158 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e03b      	b.n	8003cda <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b20      	ldr	r3, [pc, #128]	@ (8003ce4 <HAL_RCC_ClockConfig+0x260>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d1ed      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	4917      	ldr	r1, [pc, #92]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	490f      	ldr	r1, [pc, #60]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cae:	f000 f825 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce8 <HAL_RCC_ClockConfig+0x264>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	490c      	ldr	r1, [pc, #48]	@ (8003cf0 <HAL_RCC_ClockConfig+0x26c>)
 8003cc0:	5ccb      	ldrb	r3, [r1, r3]
 8003cc2:	f003 031f 	and.w	r3, r3, #31
 8003cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cca:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <HAL_RCC_ClockConfig+0x270>)
 8003ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <HAL_RCC_ClockConfig+0x274>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe f9f4 	bl	80020c0 <HAL_InitTick>
 8003cd8:	4603      	mov	r3, r0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40022000 	.word	0x40022000
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	04c4b400 	.word	0x04c4b400
 8003cf0:	0800a61c 	.word	0x0800a61c
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	20000004 	.word	0x20000004

08003cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d02:	4b2c      	ldr	r3, [pc, #176]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d102      	bne.n	8003d14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	e047      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d14:	4b27      	ldr	r3, [pc, #156]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d102      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d20:	4b26      	ldr	r3, [pc, #152]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	e03e      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d26:	4b23      	ldr	r3, [pc, #140]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d136      	bne.n	8003da0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d32:	4b20      	ldr	r3, [pc, #128]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	3301      	adds	r3, #1
 8003d48:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d10c      	bne.n	8003d6a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d50:	4a1a      	ldr	r2, [pc, #104]	@ (8003dbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	4a16      	ldr	r2, [pc, #88]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d5a:	68d2      	ldr	r2, [r2, #12]
 8003d5c:	0a12      	lsrs	r2, r2, #8
 8003d5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d62:	fb02 f303 	mul.w	r3, r2, r3
 8003d66:	617b      	str	r3, [r7, #20]
      break;
 8003d68:	e00c      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d6a:	4a13      	ldr	r2, [pc, #76]	@ (8003db8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	4a10      	ldr	r2, [pc, #64]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d74:	68d2      	ldr	r2, [r2, #12]
 8003d76:	0a12      	lsrs	r2, r2, #8
 8003d78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
      break;
 8003d82:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	0e5b      	lsrs	r3, r3, #25
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e001      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003da4:	693b      	ldr	r3, [r7, #16]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	00f42400 	.word	0x00f42400
 8003dbc:	016e3600 	.word	0x016e3600

08003dc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc4:	4b03      	ldr	r3, [pc, #12]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000000 	.word	0x20000000

08003dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ddc:	f7ff fff0 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4904      	ldr	r1, [pc, #16]	@ (8003e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	0800a62c 	.word	0x0800a62c

08003e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e08:	f7ff ffda 	bl	8003dc0 <HAL_RCC_GetHCLKFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	0adb      	lsrs	r3, r3, #11
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	4904      	ldr	r1, [pc, #16]	@ (8003e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	0800a62c 	.word	0x0800a62c

08003e30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e36:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e40:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d10c      	bne.n	8003e6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e54:	4a17      	ldr	r2, [pc, #92]	@ (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5c:	4a14      	ldr	r2, [pc, #80]	@ (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e5e:	68d2      	ldr	r2, [r2, #12]
 8003e60:	0a12      	lsrs	r2, r2, #8
 8003e62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	617b      	str	r3, [r7, #20]
    break;
 8003e6c:	e00c      	b.n	8003e88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e6e:	4a12      	ldr	r2, [pc, #72]	@ (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	0a12      	lsrs	r2, r2, #8
 8003e7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e80:	fb02 f303 	mul.w	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]
    break;
 8003e86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e88:	4b09      	ldr	r3, [pc, #36]	@ (8003eb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	0e5b      	lsrs	r3, r3, #25
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	3301      	adds	r3, #1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ea2:	687b      	ldr	r3, [r7, #4]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	016e3600 	.word	0x016e3600
 8003eb8:	00f42400 	.word	0x00f42400

08003ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 8098 	beq.w	800400a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eda:	2300      	movs	r3, #0
 8003edc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ede:	4b43      	ldr	r3, [pc, #268]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10d      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	4b40      	ldr	r3, [pc, #256]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eee:	4a3f      	ldr	r2, [pc, #252]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ef6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f02:	2301      	movs	r3, #1
 8003f04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f06:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a39      	ldr	r2, [pc, #228]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f12:	f7fe f921 	bl	8002158 <HAL_GetTick>
 8003f16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f18:	e009      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7fe f91d 	bl	8002158 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d902      	bls.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f2c:	e005      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f2e:	4b30      	ldr	r3, [pc, #192]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0ef      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f3a:	7cfb      	ldrb	r3, [r7, #19]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d159      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f40:	4b2a      	ldr	r3, [pc, #168]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d01e      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d019      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f5c:	4b23      	ldr	r3, [pc, #140]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f68:	4b20      	ldr	r3, [pc, #128]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f78:	4b1c      	ldr	r3, [pc, #112]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f88:	4a18      	ldr	r2, [pc, #96]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d016      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fe f8dd 	bl	8002158 <HAL_GetTick>
 8003f9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa0:	e00b      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa2:	f7fe f8d9 	bl	8002158 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d902      	bls.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	74fb      	strb	r3, [r7, #19]
            break;
 8003fb8:	e006      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fba:	4b0c      	ldr	r3, [pc, #48]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0ec      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fce:	4b07      	ldr	r3, [pc, #28]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fdc:	4903      	ldr	r1, [pc, #12]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	74bb      	strb	r3, [r7, #18]
 8003fea:	e005      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	7cfb      	ldrb	r3, [r7, #19]
 8003ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff8:	7c7b      	ldrb	r3, [r7, #17]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffe:	4ba6      	ldr	r3, [pc, #664]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004002:	4aa5      	ldr	r2, [pc, #660]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004008:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004016:	4ba0      	ldr	r3, [pc, #640]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401c:	f023 0203 	bic.w	r2, r3, #3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	499c      	ldr	r1, [pc, #624]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004038:	4b97      	ldr	r3, [pc, #604]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800403e:	f023 020c 	bic.w	r2, r3, #12
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	4994      	ldr	r1, [pc, #592]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800405a:	4b8f      	ldr	r3, [pc, #572]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004060:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	498b      	ldr	r1, [pc, #556]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800407c:	4b86      	ldr	r3, [pc, #536]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004082:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	4983      	ldr	r1, [pc, #524]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800409e:	4b7e      	ldr	r3, [pc, #504]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	497a      	ldr	r1, [pc, #488]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040c0:	4b75      	ldr	r3, [pc, #468]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	4972      	ldr	r1, [pc, #456]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	4969      	ldr	r1, [pc, #420]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004104:	4b64      	ldr	r3, [pc, #400]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4961      	ldr	r1, [pc, #388]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004126:	4b5c      	ldr	r3, [pc, #368]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	4958      	ldr	r1, [pc, #352]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004144:	2b00      	cmp	r3, #0
 8004146:	d015      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004148:	4b53      	ldr	r3, [pc, #332]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004156:	4950      	ldr	r1, [pc, #320]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004166:	d105      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004168:	4b4b      	ldr	r3, [pc, #300]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a4a      	ldr	r2, [pc, #296]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800416e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004172:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004180:	4b45      	ldr	r3, [pc, #276]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418e:	4942      	ldr	r1, [pc, #264]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800419e:	d105      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80041b8:	4b37      	ldr	r3, [pc, #220]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	4934      	ldr	r1, [pc, #208]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041f0:	4b29      	ldr	r3, [pc, #164]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fe:	4926      	ldr	r1, [pc, #152]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004210:	4b21      	ldr	r3, [pc, #132]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a20      	ldr	r2, [pc, #128]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800421a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d015      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004228:	4b1b      	ldr	r3, [pc, #108]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004236:	4918      	ldr	r1, [pc, #96]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004242:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004246:	d105      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b13      	ldr	r3, [pc, #76]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a12      	ldr	r2, [pc, #72]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004260:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004266:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800426e:	490a      	ldr	r1, [pc, #40]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800427e:	d105      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004280:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4a04      	ldr	r2, [pc, #16]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800428c:	7cbb      	ldrb	r3, [r7, #18]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000

0800429c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e042      	b.n	8004334 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fd fd5b 	bl	8001d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2224      	movs	r2, #36	@ 0x24
 80042ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fb82 	bl	80049f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f8b3 	bl	8004458 <UART_SetConfig>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e01b      	b.n	8004334 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800430a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800431a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fc01 	bl	8004b34 <UART_CheckIdleState>
 8004332:	4603      	mov	r3, r0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	@ 0x28
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004352:	2b20      	cmp	r3, #32
 8004354:	d17b      	bne.n	800444e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_UART_Transmit+0x26>
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e074      	b.n	8004450 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2221      	movs	r2, #33	@ 0x21
 8004372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004376:	f7fd feef 	bl	8002158 <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004394:	d108      	bne.n	80043a8 <HAL_UART_Transmit+0x6c>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d104      	bne.n	80043a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e003      	b.n	80043b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043b0:	e030      	b.n	8004414 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2180      	movs	r1, #128	@ 0x80
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fc63 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e03d      	b.n	8004450 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	3302      	adds	r3, #2
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	e007      	b.n	8004402 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	781a      	ldrb	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3301      	adds	r3, #1
 8004400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1c8      	bne.n	80043b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2200      	movs	r2, #0
 8004428:	2140      	movs	r1, #64	@ 0x40
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fc2c 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e006      	b.n	8004450 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800445c:	b08c      	sub	sp, #48	@ 0x30
 800445e:	af00      	add	r7, sp, #0
 8004460:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	431a      	orrs	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4313      	orrs	r3, r2
 800447e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4bab      	ldr	r3, [pc, #684]	@ (8004734 <UART_SetConfig+0x2dc>)
 8004488:	4013      	ands	r3, r2
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004490:	430b      	orrs	r3, r1
 8004492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4aa0      	ldr	r2, [pc, #640]	@ (8004738 <UART_SetConfig+0x2e0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c0:	4313      	orrs	r3, r2
 80044c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80044ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044d8:	430b      	orrs	r3, r1
 80044da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e2:	f023 010f 	bic.w	r1, r3, #15
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a91      	ldr	r2, [pc, #580]	@ (800473c <UART_SetConfig+0x2e4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d125      	bne.n	8004548 <UART_SetConfig+0xf0>
 80044fc:	4b90      	ldr	r3, [pc, #576]	@ (8004740 <UART_SetConfig+0x2e8>)
 80044fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b03      	cmp	r3, #3
 8004508:	d81a      	bhi.n	8004540 <UART_SetConfig+0xe8>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <UART_SetConfig+0xb8>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004521 	.word	0x08004521
 8004514:	08004531 	.word	0x08004531
 8004518:	08004529 	.word	0x08004529
 800451c:	08004539 	.word	0x08004539
 8004520:	2301      	movs	r3, #1
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004526:	e0d6      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004528:	2302      	movs	r3, #2
 800452a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800452e:	e0d2      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004530:	2304      	movs	r3, #4
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004536:	e0ce      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004538:	2308      	movs	r3, #8
 800453a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800453e:	e0ca      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004540:	2310      	movs	r3, #16
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004546:	e0c6      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a7d      	ldr	r2, [pc, #500]	@ (8004744 <UART_SetConfig+0x2ec>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d138      	bne.n	80045c4 <UART_SetConfig+0x16c>
 8004552:	4b7b      	ldr	r3, [pc, #492]	@ (8004740 <UART_SetConfig+0x2e8>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b0c      	cmp	r3, #12
 800455e:	d82d      	bhi.n	80045bc <UART_SetConfig+0x164>
 8004560:	a201      	add	r2, pc, #4	@ (adr r2, 8004568 <UART_SetConfig+0x110>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	0800459d 	.word	0x0800459d
 800456c:	080045bd 	.word	0x080045bd
 8004570:	080045bd 	.word	0x080045bd
 8004574:	080045bd 	.word	0x080045bd
 8004578:	080045ad 	.word	0x080045ad
 800457c:	080045bd 	.word	0x080045bd
 8004580:	080045bd 	.word	0x080045bd
 8004584:	080045bd 	.word	0x080045bd
 8004588:	080045a5 	.word	0x080045a5
 800458c:	080045bd 	.word	0x080045bd
 8004590:	080045bd 	.word	0x080045bd
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045b5 	.word	0x080045b5
 800459c:	2300      	movs	r3, #0
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a2:	e098      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045a4:	2302      	movs	r3, #2
 80045a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045aa:	e094      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045ac:	2304      	movs	r3, #4
 80045ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045b2:	e090      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045b4:	2308      	movs	r3, #8
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ba:	e08c      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045c2:	e088      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a5f      	ldr	r2, [pc, #380]	@ (8004748 <UART_SetConfig+0x2f0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d125      	bne.n	800461a <UART_SetConfig+0x1c2>
 80045ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004740 <UART_SetConfig+0x2e8>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045d8:	2b30      	cmp	r3, #48	@ 0x30
 80045da:	d016      	beq.n	800460a <UART_SetConfig+0x1b2>
 80045dc:	2b30      	cmp	r3, #48	@ 0x30
 80045de:	d818      	bhi.n	8004612 <UART_SetConfig+0x1ba>
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d00a      	beq.n	80045fa <UART_SetConfig+0x1a2>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d814      	bhi.n	8004612 <UART_SetConfig+0x1ba>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <UART_SetConfig+0x19a>
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d008      	beq.n	8004602 <UART_SetConfig+0x1aa>
 80045f0:	e00f      	b.n	8004612 <UART_SetConfig+0x1ba>
 80045f2:	2300      	movs	r3, #0
 80045f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045f8:	e06d      	b.n	80046d6 <UART_SetConfig+0x27e>
 80045fa:	2302      	movs	r3, #2
 80045fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004600:	e069      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004602:	2304      	movs	r3, #4
 8004604:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004608:	e065      	b.n	80046d6 <UART_SetConfig+0x27e>
 800460a:	2308      	movs	r3, #8
 800460c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004610:	e061      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004612:	2310      	movs	r3, #16
 8004614:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004618:	e05d      	b.n	80046d6 <UART_SetConfig+0x27e>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a4b      	ldr	r2, [pc, #300]	@ (800474c <UART_SetConfig+0x2f4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d125      	bne.n	8004670 <UART_SetConfig+0x218>
 8004624:	4b46      	ldr	r3, [pc, #280]	@ (8004740 <UART_SetConfig+0x2e8>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800462e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004630:	d016      	beq.n	8004660 <UART_SetConfig+0x208>
 8004632:	2bc0      	cmp	r3, #192	@ 0xc0
 8004634:	d818      	bhi.n	8004668 <UART_SetConfig+0x210>
 8004636:	2b80      	cmp	r3, #128	@ 0x80
 8004638:	d00a      	beq.n	8004650 <UART_SetConfig+0x1f8>
 800463a:	2b80      	cmp	r3, #128	@ 0x80
 800463c:	d814      	bhi.n	8004668 <UART_SetConfig+0x210>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <UART_SetConfig+0x1f0>
 8004642:	2b40      	cmp	r3, #64	@ 0x40
 8004644:	d008      	beq.n	8004658 <UART_SetConfig+0x200>
 8004646:	e00f      	b.n	8004668 <UART_SetConfig+0x210>
 8004648:	2300      	movs	r3, #0
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800464e:	e042      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004650:	2302      	movs	r3, #2
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004656:	e03e      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004658:	2304      	movs	r3, #4
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800465e:	e03a      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004660:	2308      	movs	r3, #8
 8004662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004666:	e036      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004668:	2310      	movs	r3, #16
 800466a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800466e:	e032      	b.n	80046d6 <UART_SetConfig+0x27e>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a30      	ldr	r2, [pc, #192]	@ (8004738 <UART_SetConfig+0x2e0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d12a      	bne.n	80046d0 <UART_SetConfig+0x278>
 800467a:	4b31      	ldr	r3, [pc, #196]	@ (8004740 <UART_SetConfig+0x2e8>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004684:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004688:	d01a      	beq.n	80046c0 <UART_SetConfig+0x268>
 800468a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800468e:	d81b      	bhi.n	80046c8 <UART_SetConfig+0x270>
 8004690:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004694:	d00c      	beq.n	80046b0 <UART_SetConfig+0x258>
 8004696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800469a:	d815      	bhi.n	80046c8 <UART_SetConfig+0x270>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <UART_SetConfig+0x250>
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a4:	d008      	beq.n	80046b8 <UART_SetConfig+0x260>
 80046a6:	e00f      	b.n	80046c8 <UART_SetConfig+0x270>
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ae:	e012      	b.n	80046d6 <UART_SetConfig+0x27e>
 80046b0:	2302      	movs	r3, #2
 80046b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046b6:	e00e      	b.n	80046d6 <UART_SetConfig+0x27e>
 80046b8:	2304      	movs	r3, #4
 80046ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046be:	e00a      	b.n	80046d6 <UART_SetConfig+0x27e>
 80046c0:	2308      	movs	r3, #8
 80046c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046c6:	e006      	b.n	80046d6 <UART_SetConfig+0x27e>
 80046c8:	2310      	movs	r3, #16
 80046ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ce:	e002      	b.n	80046d6 <UART_SetConfig+0x27e>
 80046d0:	2310      	movs	r3, #16
 80046d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <UART_SetConfig+0x2e0>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	f040 80a8 	bne.w	8004832 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d834      	bhi.n	8004754 <UART_SetConfig+0x2fc>
 80046ea:	a201      	add	r2, pc, #4	@ (adr r2, 80046f0 <UART_SetConfig+0x298>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004715 	.word	0x08004715
 80046f4:	08004755 	.word	0x08004755
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	08004755 	.word	0x08004755
 8004700:	08004723 	.word	0x08004723
 8004704:	08004755 	.word	0x08004755
 8004708:	08004755 	.word	0x08004755
 800470c:	08004755 	.word	0x08004755
 8004710:	0800472b 	.word	0x0800472b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004714:	f7ff fb60 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8004718:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800471a:	e021      	b.n	8004760 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800471c:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <UART_SetConfig+0x2f8>)
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004720:	e01e      	b.n	8004760 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004722:	f7ff faeb 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8004726:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004728:	e01a      	b.n	8004760 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004730:	e016      	b.n	8004760 <UART_SetConfig+0x308>
 8004732:	bf00      	nop
 8004734:	cfff69f3 	.word	0xcfff69f3
 8004738:	40008000 	.word	0x40008000
 800473c:	40013800 	.word	0x40013800
 8004740:	40021000 	.word	0x40021000
 8004744:	40004400 	.word	0x40004400
 8004748:	40004800 	.word	0x40004800
 800474c:	40004c00 	.word	0x40004c00
 8004750:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800475e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 812a 	beq.w	80049bc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	4a9e      	ldr	r2, [pc, #632]	@ (80049e8 <UART_SetConfig+0x590>)
 800476e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004772:	461a      	mov	r2, r3
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	fbb3 f3f2 	udiv	r3, r3, r2
 800477a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	4413      	add	r3, r2
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d305      	bcc.n	8004798 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	429a      	cmp	r2, r3
 8004796:	d903      	bls.n	80047a0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800479e:	e10d      	b.n	80049bc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	2200      	movs	r2, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	60fa      	str	r2, [r7, #12]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	4a8e      	ldr	r2, [pc, #568]	@ (80049e8 <UART_SetConfig+0x590>)
 80047ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	2200      	movs	r2, #0
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047c2:	f7fc fa89 	bl	8000cd8 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	020b      	lsls	r3, r1, #8
 80047d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047dc:	0202      	lsls	r2, r0, #8
 80047de:	6979      	ldr	r1, [r7, #20]
 80047e0:	6849      	ldr	r1, [r1, #4]
 80047e2:	0849      	lsrs	r1, r1, #1
 80047e4:	2000      	movs	r0, #0
 80047e6:	460c      	mov	r4, r1
 80047e8:	4605      	mov	r5, r0
 80047ea:	eb12 0804 	adds.w	r8, r2, r4
 80047ee:	eb43 0905 	adc.w	r9, r3, r5
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	469a      	mov	sl, r3
 80047fa:	4693      	mov	fp, r2
 80047fc:	4652      	mov	r2, sl
 80047fe:	465b      	mov	r3, fp
 8004800:	4640      	mov	r0, r8
 8004802:	4649      	mov	r1, r9
 8004804:	f7fc fa68 	bl	8000cd8 <__aeabi_uldivmod>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	4613      	mov	r3, r2
 800480e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004816:	d308      	bcc.n	800482a <UART_SetConfig+0x3d2>
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481e:	d204      	bcs.n	800482a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a3a      	ldr	r2, [r7, #32]
 8004826:	60da      	str	r2, [r3, #12]
 8004828:	e0c8      	b.n	80049bc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004830:	e0c4      	b.n	80049bc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800483a:	d167      	bne.n	800490c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800483c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004840:	2b08      	cmp	r3, #8
 8004842:	d828      	bhi.n	8004896 <UART_SetConfig+0x43e>
 8004844:	a201      	add	r2, pc, #4	@ (adr r2, 800484c <UART_SetConfig+0x3f4>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	08004871 	.word	0x08004871
 8004850:	08004879 	.word	0x08004879
 8004854:	08004881 	.word	0x08004881
 8004858:	08004897 	.word	0x08004897
 800485c:	08004887 	.word	0x08004887
 8004860:	08004897 	.word	0x08004897
 8004864:	08004897 	.word	0x08004897
 8004868:	08004897 	.word	0x08004897
 800486c:	0800488f 	.word	0x0800488f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004870:	f7ff fab2 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8004874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004876:	e014      	b.n	80048a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004878:	f7ff fac4 	bl	8003e04 <HAL_RCC_GetPCLK2Freq>
 800487c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800487e:	e010      	b.n	80048a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004880:	4b5a      	ldr	r3, [pc, #360]	@ (80049ec <UART_SetConfig+0x594>)
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004884:	e00d      	b.n	80048a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004886:	f7ff fa39 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 800488a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800488c:	e009      	b.n	80048a2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004894:	e005      	b.n	80048a2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8089 	beq.w	80049bc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	4a4e      	ldr	r2, [pc, #312]	@ (80049e8 <UART_SetConfig+0x590>)
 80048b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b4:	461a      	mov	r2, r3
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048bc:	005a      	lsls	r2, r3, #1
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	441a      	add	r2, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	2b0f      	cmp	r3, #15
 80048d4:	d916      	bls.n	8004904 <UART_SetConfig+0x4ac>
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048dc:	d212      	bcs.n	8004904 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f023 030f 	bic.w	r3, r3, #15
 80048e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	8bfb      	ldrh	r3, [r7, #30]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	8bfa      	ldrh	r2, [r7, #30]
 8004900:	60da      	str	r2, [r3, #12]
 8004902:	e05b      	b.n	80049bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800490a:	e057      	b.n	80049bc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800490c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004910:	2b08      	cmp	r3, #8
 8004912:	d828      	bhi.n	8004966 <UART_SetConfig+0x50e>
 8004914:	a201      	add	r2, pc, #4	@ (adr r2, 800491c <UART_SetConfig+0x4c4>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004941 	.word	0x08004941
 8004920:	08004949 	.word	0x08004949
 8004924:	08004951 	.word	0x08004951
 8004928:	08004967 	.word	0x08004967
 800492c:	08004957 	.word	0x08004957
 8004930:	08004967 	.word	0x08004967
 8004934:	08004967 	.word	0x08004967
 8004938:	08004967 	.word	0x08004967
 800493c:	0800495f 	.word	0x0800495f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004940:	f7ff fa4a 	bl	8003dd8 <HAL_RCC_GetPCLK1Freq>
 8004944:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004946:	e014      	b.n	8004972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004948:	f7ff fa5c 	bl	8003e04 <HAL_RCC_GetPCLK2Freq>
 800494c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800494e:	e010      	b.n	8004972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004950:	4b26      	ldr	r3, [pc, #152]	@ (80049ec <UART_SetConfig+0x594>)
 8004952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004954:	e00d      	b.n	8004972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004956:	f7ff f9d1 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 800495a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800495c:	e009      	b.n	8004972 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800495e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004964:	e005      	b.n	8004972 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004970:	bf00      	nop
    }

    if (pclk != 0U)
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	2b00      	cmp	r3, #0
 8004976:	d021      	beq.n	80049bc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	4a1a      	ldr	r2, [pc, #104]	@ (80049e8 <UART_SetConfig+0x590>)
 800497e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004982:	461a      	mov	r2, r3
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	fbb3 f2f2 	udiv	r2, r3, r2
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	441a      	add	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	2b0f      	cmp	r3, #15
 80049a0:	d909      	bls.n	80049b6 <UART_SetConfig+0x55e>
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a8:	d205      	bcs.n	80049b6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
 80049b4:	e002      	b.n	80049bc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2201      	movs	r2, #1
 80049c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2200      	movs	r2, #0
 80049d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80049d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3730      	adds	r7, #48	@ 0x30
 80049e0:	46bd      	mov	sp, r7
 80049e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e6:	bf00      	nop
 80049e8:	0800a634 	.word	0x0800a634
 80049ec:	00f42400 	.word	0x00f42400

080049f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01a      	beq.n	8004b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aee:	d10a      	bne.n	8004b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b098      	sub	sp, #96	@ 0x60
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b44:	f7fd fb08 	bl	8002158 <HAL_GetTick>
 8004b48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d12f      	bne.n	8004bb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b60:	2200      	movs	r2, #0
 8004b62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f88e 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d022      	beq.n	8004bb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e6      	bne.n	8004b72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e063      	b.n	8004c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d149      	bne.n	8004c5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f857 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d03c      	beq.n	8004c5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	623b      	str	r3, [r7, #32]
   return(result);
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e6      	bne.n	8004be0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3308      	adds	r3, #8
 8004c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c32:	61fa      	str	r2, [r7, #28]
 8004c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	69b9      	ldr	r1, [r7, #24]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e012      	b.n	8004c80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3758      	adds	r7, #88	@ 0x58
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c98:	e04f      	b.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ca0:	d04b      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fd fa59 	bl	8002158 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e04e      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d037      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b80      	cmp	r3, #128	@ 0x80
 8004cce:	d034      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b40      	cmp	r3, #64	@ 0x40
 8004cd4:	d031      	beq.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d110      	bne.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 f838 	bl	8004d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e029      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d14:	d111      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f81e 	bl	8004d62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e00f      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d0a0      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b095      	sub	sp, #84	@ 0x54
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d88:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	f023 0301 	bic.w	r3, r3, #1
 8004db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3308      	adds	r3, #8
 8004dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e3      	bne.n	8004d9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d118      	bne.n	8004e0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f023 0310 	bic.w	r3, r3, #16
 8004df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	e841 2300 	strex	r3, r2, [r1]
 8004e06:	613b      	str	r3, [r7, #16]
   return(result);
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1e6      	bne.n	8004ddc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004e22:	bf00      	nop
 8004e24:	3754      	adds	r7, #84	@ 0x54
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b085      	sub	sp, #20
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e027      	b.n	8004e94 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2224      	movs	r2, #36	@ 0x24
 8004e50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004e72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e02d      	b.n	8004f14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	@ 0x24
 8004ec4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0201 	bic.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f84f 	bl	8004f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f30:	2302      	movs	r3, #2
 8004f32:	e02d      	b.n	8004f90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2224      	movs	r2, #36	@ 0x24
 8004f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f811 	bl	8004f98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d108      	bne.n	8004fba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004fb8:	e031      	b.n	800501e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004fba:	2308      	movs	r3, #8
 8004fbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	0e5b      	lsrs	r3, r3, #25
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	0f5b      	lsrs	r3, r3, #29
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fe2:	7bbb      	ldrb	r3, [r7, #14]
 8004fe4:	7b3a      	ldrb	r2, [r7, #12]
 8004fe6:	4911      	ldr	r1, [pc, #68]	@ (800502c <UARTEx_SetNbDataToProcess+0x94>)
 8004fe8:	5c8a      	ldrb	r2, [r1, r2]
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fee:	7b3a      	ldrb	r2, [r7, #12]
 8004ff0:	490f      	ldr	r1, [pc, #60]	@ (8005030 <UARTEx_SetNbDataToProcess+0x98>)
 8004ff2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ff4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	7b7a      	ldrb	r2, [r7, #13]
 8005004:	4909      	ldr	r1, [pc, #36]	@ (800502c <UARTEx_SetNbDataToProcess+0x94>)
 8005006:	5c8a      	ldrb	r2, [r1, r2]
 8005008:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800500c:	7b7a      	ldrb	r2, [r7, #13]
 800500e:	4908      	ldr	r1, [pc, #32]	@ (8005030 <UARTEx_SetNbDataToProcess+0x98>)
 8005010:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005012:	fb93 f3f2 	sdiv	r3, r3, r2
 8005016:	b29a      	uxth	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	0800a64c 	.word	0x0800a64c
 8005030:	0800a654 	.word	0x0800a654

08005034 <__cvt>:
 8005034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005038:	ec57 6b10 	vmov	r6, r7, d0
 800503c:	2f00      	cmp	r7, #0
 800503e:	460c      	mov	r4, r1
 8005040:	4619      	mov	r1, r3
 8005042:	463b      	mov	r3, r7
 8005044:	bfbb      	ittet	lt
 8005046:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800504a:	461f      	movlt	r7, r3
 800504c:	2300      	movge	r3, #0
 800504e:	232d      	movlt	r3, #45	@ 0x2d
 8005050:	700b      	strb	r3, [r1, #0]
 8005052:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005054:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005058:	4691      	mov	r9, r2
 800505a:	f023 0820 	bic.w	r8, r3, #32
 800505e:	bfbc      	itt	lt
 8005060:	4632      	movlt	r2, r6
 8005062:	4616      	movlt	r6, r2
 8005064:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005068:	d005      	beq.n	8005076 <__cvt+0x42>
 800506a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800506e:	d100      	bne.n	8005072 <__cvt+0x3e>
 8005070:	3401      	adds	r4, #1
 8005072:	2102      	movs	r1, #2
 8005074:	e000      	b.n	8005078 <__cvt+0x44>
 8005076:	2103      	movs	r1, #3
 8005078:	ab03      	add	r3, sp, #12
 800507a:	9301      	str	r3, [sp, #4]
 800507c:	ab02      	add	r3, sp, #8
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	ec47 6b10 	vmov	d0, r6, r7
 8005084:	4653      	mov	r3, sl
 8005086:	4622      	mov	r2, r4
 8005088:	f001 f876 	bl	8006178 <_dtoa_r>
 800508c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005090:	4605      	mov	r5, r0
 8005092:	d119      	bne.n	80050c8 <__cvt+0x94>
 8005094:	f019 0f01 	tst.w	r9, #1
 8005098:	d00e      	beq.n	80050b8 <__cvt+0x84>
 800509a:	eb00 0904 	add.w	r9, r0, r4
 800509e:	2200      	movs	r2, #0
 80050a0:	2300      	movs	r3, #0
 80050a2:	4630      	mov	r0, r6
 80050a4:	4639      	mov	r1, r7
 80050a6:	f7fb fd37 	bl	8000b18 <__aeabi_dcmpeq>
 80050aa:	b108      	cbz	r0, 80050b0 <__cvt+0x7c>
 80050ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80050b0:	2230      	movs	r2, #48	@ 0x30
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	454b      	cmp	r3, r9
 80050b6:	d31e      	bcc.n	80050f6 <__cvt+0xc2>
 80050b8:	9b03      	ldr	r3, [sp, #12]
 80050ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050bc:	1b5b      	subs	r3, r3, r5
 80050be:	4628      	mov	r0, r5
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	b004      	add	sp, #16
 80050c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050cc:	eb00 0904 	add.w	r9, r0, r4
 80050d0:	d1e5      	bne.n	800509e <__cvt+0x6a>
 80050d2:	7803      	ldrb	r3, [r0, #0]
 80050d4:	2b30      	cmp	r3, #48	@ 0x30
 80050d6:	d10a      	bne.n	80050ee <__cvt+0xba>
 80050d8:	2200      	movs	r2, #0
 80050da:	2300      	movs	r3, #0
 80050dc:	4630      	mov	r0, r6
 80050de:	4639      	mov	r1, r7
 80050e0:	f7fb fd1a 	bl	8000b18 <__aeabi_dcmpeq>
 80050e4:	b918      	cbnz	r0, 80050ee <__cvt+0xba>
 80050e6:	f1c4 0401 	rsb	r4, r4, #1
 80050ea:	f8ca 4000 	str.w	r4, [sl]
 80050ee:	f8da 3000 	ldr.w	r3, [sl]
 80050f2:	4499      	add	r9, r3
 80050f4:	e7d3      	b.n	800509e <__cvt+0x6a>
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	9103      	str	r1, [sp, #12]
 80050fa:	701a      	strb	r2, [r3, #0]
 80050fc:	e7d9      	b.n	80050b2 <__cvt+0x7e>

080050fe <__exponent>:
 80050fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005100:	2900      	cmp	r1, #0
 8005102:	bfba      	itte	lt
 8005104:	4249      	neglt	r1, r1
 8005106:	232d      	movlt	r3, #45	@ 0x2d
 8005108:	232b      	movge	r3, #43	@ 0x2b
 800510a:	2909      	cmp	r1, #9
 800510c:	7002      	strb	r2, [r0, #0]
 800510e:	7043      	strb	r3, [r0, #1]
 8005110:	dd29      	ble.n	8005166 <__exponent+0x68>
 8005112:	f10d 0307 	add.w	r3, sp, #7
 8005116:	461d      	mov	r5, r3
 8005118:	270a      	movs	r7, #10
 800511a:	461a      	mov	r2, r3
 800511c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005120:	fb07 1416 	mls	r4, r7, r6, r1
 8005124:	3430      	adds	r4, #48	@ 0x30
 8005126:	f802 4c01 	strb.w	r4, [r2, #-1]
 800512a:	460c      	mov	r4, r1
 800512c:	2c63      	cmp	r4, #99	@ 0x63
 800512e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005132:	4631      	mov	r1, r6
 8005134:	dcf1      	bgt.n	800511a <__exponent+0x1c>
 8005136:	3130      	adds	r1, #48	@ 0x30
 8005138:	1e94      	subs	r4, r2, #2
 800513a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800513e:	1c41      	adds	r1, r0, #1
 8005140:	4623      	mov	r3, r4
 8005142:	42ab      	cmp	r3, r5
 8005144:	d30a      	bcc.n	800515c <__exponent+0x5e>
 8005146:	f10d 0309 	add.w	r3, sp, #9
 800514a:	1a9b      	subs	r3, r3, r2
 800514c:	42ac      	cmp	r4, r5
 800514e:	bf88      	it	hi
 8005150:	2300      	movhi	r3, #0
 8005152:	3302      	adds	r3, #2
 8005154:	4403      	add	r3, r0
 8005156:	1a18      	subs	r0, r3, r0
 8005158:	b003      	add	sp, #12
 800515a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800515c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005160:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005164:	e7ed      	b.n	8005142 <__exponent+0x44>
 8005166:	2330      	movs	r3, #48	@ 0x30
 8005168:	3130      	adds	r1, #48	@ 0x30
 800516a:	7083      	strb	r3, [r0, #2]
 800516c:	70c1      	strb	r1, [r0, #3]
 800516e:	1d03      	adds	r3, r0, #4
 8005170:	e7f1      	b.n	8005156 <__exponent+0x58>
	...

08005174 <_printf_float>:
 8005174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005178:	b08d      	sub	sp, #52	@ 0x34
 800517a:	460c      	mov	r4, r1
 800517c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005180:	4616      	mov	r6, r2
 8005182:	461f      	mov	r7, r3
 8005184:	4605      	mov	r5, r0
 8005186:	f000 feef 	bl	8005f68 <_localeconv_r>
 800518a:	6803      	ldr	r3, [r0, #0]
 800518c:	9304      	str	r3, [sp, #16]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fb f896 	bl	80002c0 <strlen>
 8005194:	2300      	movs	r3, #0
 8005196:	930a      	str	r3, [sp, #40]	@ 0x28
 8005198:	f8d8 3000 	ldr.w	r3, [r8]
 800519c:	9005      	str	r0, [sp, #20]
 800519e:	3307      	adds	r3, #7
 80051a0:	f023 0307 	bic.w	r3, r3, #7
 80051a4:	f103 0208 	add.w	r2, r3, #8
 80051a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80051ac:	f8d4 b000 	ldr.w	fp, [r4]
 80051b0:	f8c8 2000 	str.w	r2, [r8]
 80051b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80051bc:	9307      	str	r3, [sp, #28]
 80051be:	f8cd 8018 	str.w	r8, [sp, #24]
 80051c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80051c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051ca:	4b9c      	ldr	r3, [pc, #624]	@ (800543c <_printf_float+0x2c8>)
 80051cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051d0:	f7fb fcd4 	bl	8000b7c <__aeabi_dcmpun>
 80051d4:	bb70      	cbnz	r0, 8005234 <_printf_float+0xc0>
 80051d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051da:	4b98      	ldr	r3, [pc, #608]	@ (800543c <_printf_float+0x2c8>)
 80051dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051e0:	f7fb fcae 	bl	8000b40 <__aeabi_dcmple>
 80051e4:	bb30      	cbnz	r0, 8005234 <_printf_float+0xc0>
 80051e6:	2200      	movs	r2, #0
 80051e8:	2300      	movs	r3, #0
 80051ea:	4640      	mov	r0, r8
 80051ec:	4649      	mov	r1, r9
 80051ee:	f7fb fc9d 	bl	8000b2c <__aeabi_dcmplt>
 80051f2:	b110      	cbz	r0, 80051fa <_printf_float+0x86>
 80051f4:	232d      	movs	r3, #45	@ 0x2d
 80051f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051fa:	4a91      	ldr	r2, [pc, #580]	@ (8005440 <_printf_float+0x2cc>)
 80051fc:	4b91      	ldr	r3, [pc, #580]	@ (8005444 <_printf_float+0x2d0>)
 80051fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005202:	bf94      	ite	ls
 8005204:	4690      	movls	r8, r2
 8005206:	4698      	movhi	r8, r3
 8005208:	2303      	movs	r3, #3
 800520a:	6123      	str	r3, [r4, #16]
 800520c:	f02b 0304 	bic.w	r3, fp, #4
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	f04f 0900 	mov.w	r9, #0
 8005216:	9700      	str	r7, [sp, #0]
 8005218:	4633      	mov	r3, r6
 800521a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800521c:	4621      	mov	r1, r4
 800521e:	4628      	mov	r0, r5
 8005220:	f000 f9d2 	bl	80055c8 <_printf_common>
 8005224:	3001      	adds	r0, #1
 8005226:	f040 808d 	bne.w	8005344 <_printf_float+0x1d0>
 800522a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800522e:	b00d      	add	sp, #52	@ 0x34
 8005230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005234:	4642      	mov	r2, r8
 8005236:	464b      	mov	r3, r9
 8005238:	4640      	mov	r0, r8
 800523a:	4649      	mov	r1, r9
 800523c:	f7fb fc9e 	bl	8000b7c <__aeabi_dcmpun>
 8005240:	b140      	cbz	r0, 8005254 <_printf_float+0xe0>
 8005242:	464b      	mov	r3, r9
 8005244:	2b00      	cmp	r3, #0
 8005246:	bfbc      	itt	lt
 8005248:	232d      	movlt	r3, #45	@ 0x2d
 800524a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800524e:	4a7e      	ldr	r2, [pc, #504]	@ (8005448 <_printf_float+0x2d4>)
 8005250:	4b7e      	ldr	r3, [pc, #504]	@ (800544c <_printf_float+0x2d8>)
 8005252:	e7d4      	b.n	80051fe <_printf_float+0x8a>
 8005254:	6863      	ldr	r3, [r4, #4]
 8005256:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800525a:	9206      	str	r2, [sp, #24]
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	d13b      	bne.n	80052d8 <_printf_float+0x164>
 8005260:	2306      	movs	r3, #6
 8005262:	6063      	str	r3, [r4, #4]
 8005264:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005268:	2300      	movs	r3, #0
 800526a:	6022      	str	r2, [r4, #0]
 800526c:	9303      	str	r3, [sp, #12]
 800526e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005270:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005274:	ab09      	add	r3, sp, #36	@ 0x24
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	6861      	ldr	r1, [r4, #4]
 800527a:	ec49 8b10 	vmov	d0, r8, r9
 800527e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005282:	4628      	mov	r0, r5
 8005284:	f7ff fed6 	bl	8005034 <__cvt>
 8005288:	9b06      	ldr	r3, [sp, #24]
 800528a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800528c:	2b47      	cmp	r3, #71	@ 0x47
 800528e:	4680      	mov	r8, r0
 8005290:	d129      	bne.n	80052e6 <_printf_float+0x172>
 8005292:	1cc8      	adds	r0, r1, #3
 8005294:	db02      	blt.n	800529c <_printf_float+0x128>
 8005296:	6863      	ldr	r3, [r4, #4]
 8005298:	4299      	cmp	r1, r3
 800529a:	dd41      	ble.n	8005320 <_printf_float+0x1ac>
 800529c:	f1aa 0a02 	sub.w	sl, sl, #2
 80052a0:	fa5f fa8a 	uxtb.w	sl, sl
 80052a4:	3901      	subs	r1, #1
 80052a6:	4652      	mov	r2, sl
 80052a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80052ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80052ae:	f7ff ff26 	bl	80050fe <__exponent>
 80052b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052b4:	1813      	adds	r3, r2, r0
 80052b6:	2a01      	cmp	r2, #1
 80052b8:	4681      	mov	r9, r0
 80052ba:	6123      	str	r3, [r4, #16]
 80052bc:	dc02      	bgt.n	80052c4 <_printf_float+0x150>
 80052be:	6822      	ldr	r2, [r4, #0]
 80052c0:	07d2      	lsls	r2, r2, #31
 80052c2:	d501      	bpl.n	80052c8 <_printf_float+0x154>
 80052c4:	3301      	adds	r3, #1
 80052c6:	6123      	str	r3, [r4, #16]
 80052c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0a2      	beq.n	8005216 <_printf_float+0xa2>
 80052d0:	232d      	movs	r3, #45	@ 0x2d
 80052d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d6:	e79e      	b.n	8005216 <_printf_float+0xa2>
 80052d8:	9a06      	ldr	r2, [sp, #24]
 80052da:	2a47      	cmp	r2, #71	@ 0x47
 80052dc:	d1c2      	bne.n	8005264 <_printf_float+0xf0>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1c0      	bne.n	8005264 <_printf_float+0xf0>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e7bd      	b.n	8005262 <_printf_float+0xee>
 80052e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052ea:	d9db      	bls.n	80052a4 <_printf_float+0x130>
 80052ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052f0:	d118      	bne.n	8005324 <_printf_float+0x1b0>
 80052f2:	2900      	cmp	r1, #0
 80052f4:	6863      	ldr	r3, [r4, #4]
 80052f6:	dd0b      	ble.n	8005310 <_printf_float+0x19c>
 80052f8:	6121      	str	r1, [r4, #16]
 80052fa:	b913      	cbnz	r3, 8005302 <_printf_float+0x18e>
 80052fc:	6822      	ldr	r2, [r4, #0]
 80052fe:	07d0      	lsls	r0, r2, #31
 8005300:	d502      	bpl.n	8005308 <_printf_float+0x194>
 8005302:	3301      	adds	r3, #1
 8005304:	440b      	add	r3, r1
 8005306:	6123      	str	r3, [r4, #16]
 8005308:	65a1      	str	r1, [r4, #88]	@ 0x58
 800530a:	f04f 0900 	mov.w	r9, #0
 800530e:	e7db      	b.n	80052c8 <_printf_float+0x154>
 8005310:	b913      	cbnz	r3, 8005318 <_printf_float+0x1a4>
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	07d2      	lsls	r2, r2, #31
 8005316:	d501      	bpl.n	800531c <_printf_float+0x1a8>
 8005318:	3302      	adds	r3, #2
 800531a:	e7f4      	b.n	8005306 <_printf_float+0x192>
 800531c:	2301      	movs	r3, #1
 800531e:	e7f2      	b.n	8005306 <_printf_float+0x192>
 8005320:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005326:	4299      	cmp	r1, r3
 8005328:	db05      	blt.n	8005336 <_printf_float+0x1c2>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	6121      	str	r1, [r4, #16]
 800532e:	07d8      	lsls	r0, r3, #31
 8005330:	d5ea      	bpl.n	8005308 <_printf_float+0x194>
 8005332:	1c4b      	adds	r3, r1, #1
 8005334:	e7e7      	b.n	8005306 <_printf_float+0x192>
 8005336:	2900      	cmp	r1, #0
 8005338:	bfd4      	ite	le
 800533a:	f1c1 0202 	rsble	r2, r1, #2
 800533e:	2201      	movgt	r2, #1
 8005340:	4413      	add	r3, r2
 8005342:	e7e0      	b.n	8005306 <_printf_float+0x192>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	055a      	lsls	r2, r3, #21
 8005348:	d407      	bmi.n	800535a <_printf_float+0x1e6>
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	4642      	mov	r2, r8
 800534e:	4631      	mov	r1, r6
 8005350:	4628      	mov	r0, r5
 8005352:	47b8      	blx	r7
 8005354:	3001      	adds	r0, #1
 8005356:	d12b      	bne.n	80053b0 <_printf_float+0x23c>
 8005358:	e767      	b.n	800522a <_printf_float+0xb6>
 800535a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800535e:	f240 80dd 	bls.w	800551c <_printf_float+0x3a8>
 8005362:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005366:	2200      	movs	r2, #0
 8005368:	2300      	movs	r3, #0
 800536a:	f7fb fbd5 	bl	8000b18 <__aeabi_dcmpeq>
 800536e:	2800      	cmp	r0, #0
 8005370:	d033      	beq.n	80053da <_printf_float+0x266>
 8005372:	4a37      	ldr	r2, [pc, #220]	@ (8005450 <_printf_float+0x2dc>)
 8005374:	2301      	movs	r3, #1
 8005376:	4631      	mov	r1, r6
 8005378:	4628      	mov	r0, r5
 800537a:	47b8      	blx	r7
 800537c:	3001      	adds	r0, #1
 800537e:	f43f af54 	beq.w	800522a <_printf_float+0xb6>
 8005382:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005386:	4543      	cmp	r3, r8
 8005388:	db02      	blt.n	8005390 <_printf_float+0x21c>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	07d8      	lsls	r0, r3, #31
 800538e:	d50f      	bpl.n	80053b0 <_printf_float+0x23c>
 8005390:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005394:	4631      	mov	r1, r6
 8005396:	4628      	mov	r0, r5
 8005398:	47b8      	blx	r7
 800539a:	3001      	adds	r0, #1
 800539c:	f43f af45 	beq.w	800522a <_printf_float+0xb6>
 80053a0:	f04f 0900 	mov.w	r9, #0
 80053a4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80053a8:	f104 0a1a 	add.w	sl, r4, #26
 80053ac:	45c8      	cmp	r8, r9
 80053ae:	dc09      	bgt.n	80053c4 <_printf_float+0x250>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	079b      	lsls	r3, r3, #30
 80053b4:	f100 8103 	bmi.w	80055be <_printf_float+0x44a>
 80053b8:	68e0      	ldr	r0, [r4, #12]
 80053ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053bc:	4298      	cmp	r0, r3
 80053be:	bfb8      	it	lt
 80053c0:	4618      	movlt	r0, r3
 80053c2:	e734      	b.n	800522e <_printf_float+0xba>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4652      	mov	r2, sl
 80053c8:	4631      	mov	r1, r6
 80053ca:	4628      	mov	r0, r5
 80053cc:	47b8      	blx	r7
 80053ce:	3001      	adds	r0, #1
 80053d0:	f43f af2b 	beq.w	800522a <_printf_float+0xb6>
 80053d4:	f109 0901 	add.w	r9, r9, #1
 80053d8:	e7e8      	b.n	80053ac <_printf_float+0x238>
 80053da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053dc:	2b00      	cmp	r3, #0
 80053de:	dc39      	bgt.n	8005454 <_printf_float+0x2e0>
 80053e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005450 <_printf_float+0x2dc>)
 80053e2:	2301      	movs	r3, #1
 80053e4:	4631      	mov	r1, r6
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b8      	blx	r7
 80053ea:	3001      	adds	r0, #1
 80053ec:	f43f af1d 	beq.w	800522a <_printf_float+0xb6>
 80053f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80053f4:	ea59 0303 	orrs.w	r3, r9, r3
 80053f8:	d102      	bne.n	8005400 <_printf_float+0x28c>
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	07d9      	lsls	r1, r3, #31
 80053fe:	d5d7      	bpl.n	80053b0 <_printf_float+0x23c>
 8005400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005404:	4631      	mov	r1, r6
 8005406:	4628      	mov	r0, r5
 8005408:	47b8      	blx	r7
 800540a:	3001      	adds	r0, #1
 800540c:	f43f af0d 	beq.w	800522a <_printf_float+0xb6>
 8005410:	f04f 0a00 	mov.w	sl, #0
 8005414:	f104 0b1a 	add.w	fp, r4, #26
 8005418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800541a:	425b      	negs	r3, r3
 800541c:	4553      	cmp	r3, sl
 800541e:	dc01      	bgt.n	8005424 <_printf_float+0x2b0>
 8005420:	464b      	mov	r3, r9
 8005422:	e793      	b.n	800534c <_printf_float+0x1d8>
 8005424:	2301      	movs	r3, #1
 8005426:	465a      	mov	r2, fp
 8005428:	4631      	mov	r1, r6
 800542a:	4628      	mov	r0, r5
 800542c:	47b8      	blx	r7
 800542e:	3001      	adds	r0, #1
 8005430:	f43f aefb 	beq.w	800522a <_printf_float+0xb6>
 8005434:	f10a 0a01 	add.w	sl, sl, #1
 8005438:	e7ee      	b.n	8005418 <_printf_float+0x2a4>
 800543a:	bf00      	nop
 800543c:	7fefffff 	.word	0x7fefffff
 8005440:	0800a65c 	.word	0x0800a65c
 8005444:	0800a660 	.word	0x0800a660
 8005448:	0800a664 	.word	0x0800a664
 800544c:	0800a668 	.word	0x0800a668
 8005450:	0800a66c 	.word	0x0800a66c
 8005454:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005456:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800545a:	4553      	cmp	r3, sl
 800545c:	bfa8      	it	ge
 800545e:	4653      	movge	r3, sl
 8005460:	2b00      	cmp	r3, #0
 8005462:	4699      	mov	r9, r3
 8005464:	dc36      	bgt.n	80054d4 <_printf_float+0x360>
 8005466:	f04f 0b00 	mov.w	fp, #0
 800546a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800546e:	f104 021a 	add.w	r2, r4, #26
 8005472:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005474:	9306      	str	r3, [sp, #24]
 8005476:	eba3 0309 	sub.w	r3, r3, r9
 800547a:	455b      	cmp	r3, fp
 800547c:	dc31      	bgt.n	80054e2 <_printf_float+0x36e>
 800547e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005480:	459a      	cmp	sl, r3
 8005482:	dc3a      	bgt.n	80054fa <_printf_float+0x386>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	07da      	lsls	r2, r3, #31
 8005488:	d437      	bmi.n	80054fa <_printf_float+0x386>
 800548a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800548c:	ebaa 0903 	sub.w	r9, sl, r3
 8005490:	9b06      	ldr	r3, [sp, #24]
 8005492:	ebaa 0303 	sub.w	r3, sl, r3
 8005496:	4599      	cmp	r9, r3
 8005498:	bfa8      	it	ge
 800549a:	4699      	movge	r9, r3
 800549c:	f1b9 0f00 	cmp.w	r9, #0
 80054a0:	dc33      	bgt.n	800550a <_printf_float+0x396>
 80054a2:	f04f 0800 	mov.w	r8, #0
 80054a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054aa:	f104 0b1a 	add.w	fp, r4, #26
 80054ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054b0:	ebaa 0303 	sub.w	r3, sl, r3
 80054b4:	eba3 0309 	sub.w	r3, r3, r9
 80054b8:	4543      	cmp	r3, r8
 80054ba:	f77f af79 	ble.w	80053b0 <_printf_float+0x23c>
 80054be:	2301      	movs	r3, #1
 80054c0:	465a      	mov	r2, fp
 80054c2:	4631      	mov	r1, r6
 80054c4:	4628      	mov	r0, r5
 80054c6:	47b8      	blx	r7
 80054c8:	3001      	adds	r0, #1
 80054ca:	f43f aeae 	beq.w	800522a <_printf_float+0xb6>
 80054ce:	f108 0801 	add.w	r8, r8, #1
 80054d2:	e7ec      	b.n	80054ae <_printf_float+0x33a>
 80054d4:	4642      	mov	r2, r8
 80054d6:	4631      	mov	r1, r6
 80054d8:	4628      	mov	r0, r5
 80054da:	47b8      	blx	r7
 80054dc:	3001      	adds	r0, #1
 80054de:	d1c2      	bne.n	8005466 <_printf_float+0x2f2>
 80054e0:	e6a3      	b.n	800522a <_printf_float+0xb6>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4631      	mov	r1, r6
 80054e6:	4628      	mov	r0, r5
 80054e8:	9206      	str	r2, [sp, #24]
 80054ea:	47b8      	blx	r7
 80054ec:	3001      	adds	r0, #1
 80054ee:	f43f ae9c 	beq.w	800522a <_printf_float+0xb6>
 80054f2:	9a06      	ldr	r2, [sp, #24]
 80054f4:	f10b 0b01 	add.w	fp, fp, #1
 80054f8:	e7bb      	b.n	8005472 <_printf_float+0x2fe>
 80054fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054fe:	4631      	mov	r1, r6
 8005500:	4628      	mov	r0, r5
 8005502:	47b8      	blx	r7
 8005504:	3001      	adds	r0, #1
 8005506:	d1c0      	bne.n	800548a <_printf_float+0x316>
 8005508:	e68f      	b.n	800522a <_printf_float+0xb6>
 800550a:	9a06      	ldr	r2, [sp, #24]
 800550c:	464b      	mov	r3, r9
 800550e:	4442      	add	r2, r8
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	d1c3      	bne.n	80054a2 <_printf_float+0x32e>
 800551a:	e686      	b.n	800522a <_printf_float+0xb6>
 800551c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005520:	f1ba 0f01 	cmp.w	sl, #1
 8005524:	dc01      	bgt.n	800552a <_printf_float+0x3b6>
 8005526:	07db      	lsls	r3, r3, #31
 8005528:	d536      	bpl.n	8005598 <_printf_float+0x424>
 800552a:	2301      	movs	r3, #1
 800552c:	4642      	mov	r2, r8
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	47b8      	blx	r7
 8005534:	3001      	adds	r0, #1
 8005536:	f43f ae78 	beq.w	800522a <_printf_float+0xb6>
 800553a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800553e:	4631      	mov	r1, r6
 8005540:	4628      	mov	r0, r5
 8005542:	47b8      	blx	r7
 8005544:	3001      	adds	r0, #1
 8005546:	f43f ae70 	beq.w	800522a <_printf_float+0xb6>
 800554a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800554e:	2200      	movs	r2, #0
 8005550:	2300      	movs	r3, #0
 8005552:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005556:	f7fb fadf 	bl	8000b18 <__aeabi_dcmpeq>
 800555a:	b9c0      	cbnz	r0, 800558e <_printf_float+0x41a>
 800555c:	4653      	mov	r3, sl
 800555e:	f108 0201 	add.w	r2, r8, #1
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	d10c      	bne.n	8005586 <_printf_float+0x412>
 800556c:	e65d      	b.n	800522a <_printf_float+0xb6>
 800556e:	2301      	movs	r3, #1
 8005570:	465a      	mov	r2, fp
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	f43f ae56 	beq.w	800522a <_printf_float+0xb6>
 800557e:	f108 0801 	add.w	r8, r8, #1
 8005582:	45d0      	cmp	r8, sl
 8005584:	dbf3      	blt.n	800556e <_printf_float+0x3fa>
 8005586:	464b      	mov	r3, r9
 8005588:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800558c:	e6df      	b.n	800534e <_printf_float+0x1da>
 800558e:	f04f 0800 	mov.w	r8, #0
 8005592:	f104 0b1a 	add.w	fp, r4, #26
 8005596:	e7f4      	b.n	8005582 <_printf_float+0x40e>
 8005598:	2301      	movs	r3, #1
 800559a:	4642      	mov	r2, r8
 800559c:	e7e1      	b.n	8005562 <_printf_float+0x3ee>
 800559e:	2301      	movs	r3, #1
 80055a0:	464a      	mov	r2, r9
 80055a2:	4631      	mov	r1, r6
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b8      	blx	r7
 80055a8:	3001      	adds	r0, #1
 80055aa:	f43f ae3e 	beq.w	800522a <_printf_float+0xb6>
 80055ae:	f108 0801 	add.w	r8, r8, #1
 80055b2:	68e3      	ldr	r3, [r4, #12]
 80055b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80055b6:	1a5b      	subs	r3, r3, r1
 80055b8:	4543      	cmp	r3, r8
 80055ba:	dcf0      	bgt.n	800559e <_printf_float+0x42a>
 80055bc:	e6fc      	b.n	80053b8 <_printf_float+0x244>
 80055be:	f04f 0800 	mov.w	r8, #0
 80055c2:	f104 0919 	add.w	r9, r4, #25
 80055c6:	e7f4      	b.n	80055b2 <_printf_float+0x43e>

080055c8 <_printf_common>:
 80055c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	4616      	mov	r6, r2
 80055ce:	4698      	mov	r8, r3
 80055d0:	688a      	ldr	r2, [r1, #8]
 80055d2:	690b      	ldr	r3, [r1, #16]
 80055d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055d8:	4293      	cmp	r3, r2
 80055da:	bfb8      	it	lt
 80055dc:	4613      	movlt	r3, r2
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055e4:	4607      	mov	r7, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	b10a      	cbz	r2, 80055ee <_printf_common+0x26>
 80055ea:	3301      	adds	r3, #1
 80055ec:	6033      	str	r3, [r6, #0]
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	0699      	lsls	r1, r3, #26
 80055f2:	bf42      	ittt	mi
 80055f4:	6833      	ldrmi	r3, [r6, #0]
 80055f6:	3302      	addmi	r3, #2
 80055f8:	6033      	strmi	r3, [r6, #0]
 80055fa:	6825      	ldr	r5, [r4, #0]
 80055fc:	f015 0506 	ands.w	r5, r5, #6
 8005600:	d106      	bne.n	8005610 <_printf_common+0x48>
 8005602:	f104 0a19 	add.w	sl, r4, #25
 8005606:	68e3      	ldr	r3, [r4, #12]
 8005608:	6832      	ldr	r2, [r6, #0]
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	42ab      	cmp	r3, r5
 800560e:	dc26      	bgt.n	800565e <_printf_common+0x96>
 8005610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005614:	6822      	ldr	r2, [r4, #0]
 8005616:	3b00      	subs	r3, #0
 8005618:	bf18      	it	ne
 800561a:	2301      	movne	r3, #1
 800561c:	0692      	lsls	r2, r2, #26
 800561e:	d42b      	bmi.n	8005678 <_printf_common+0xb0>
 8005620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005624:	4641      	mov	r1, r8
 8005626:	4638      	mov	r0, r7
 8005628:	47c8      	blx	r9
 800562a:	3001      	adds	r0, #1
 800562c:	d01e      	beq.n	800566c <_printf_common+0xa4>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	6922      	ldr	r2, [r4, #16]
 8005632:	f003 0306 	and.w	r3, r3, #6
 8005636:	2b04      	cmp	r3, #4
 8005638:	bf02      	ittt	eq
 800563a:	68e5      	ldreq	r5, [r4, #12]
 800563c:	6833      	ldreq	r3, [r6, #0]
 800563e:	1aed      	subeq	r5, r5, r3
 8005640:	68a3      	ldr	r3, [r4, #8]
 8005642:	bf0c      	ite	eq
 8005644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005648:	2500      	movne	r5, #0
 800564a:	4293      	cmp	r3, r2
 800564c:	bfc4      	itt	gt
 800564e:	1a9b      	subgt	r3, r3, r2
 8005650:	18ed      	addgt	r5, r5, r3
 8005652:	2600      	movs	r6, #0
 8005654:	341a      	adds	r4, #26
 8005656:	42b5      	cmp	r5, r6
 8005658:	d11a      	bne.n	8005690 <_printf_common+0xc8>
 800565a:	2000      	movs	r0, #0
 800565c:	e008      	b.n	8005670 <_printf_common+0xa8>
 800565e:	2301      	movs	r3, #1
 8005660:	4652      	mov	r2, sl
 8005662:	4641      	mov	r1, r8
 8005664:	4638      	mov	r0, r7
 8005666:	47c8      	blx	r9
 8005668:	3001      	adds	r0, #1
 800566a:	d103      	bne.n	8005674 <_printf_common+0xac>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	3501      	adds	r5, #1
 8005676:	e7c6      	b.n	8005606 <_printf_common+0x3e>
 8005678:	18e1      	adds	r1, r4, r3
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	2030      	movs	r0, #48	@ 0x30
 800567e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005682:	4422      	add	r2, r4
 8005684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800568c:	3302      	adds	r3, #2
 800568e:	e7c7      	b.n	8005620 <_printf_common+0x58>
 8005690:	2301      	movs	r3, #1
 8005692:	4622      	mov	r2, r4
 8005694:	4641      	mov	r1, r8
 8005696:	4638      	mov	r0, r7
 8005698:	47c8      	blx	r9
 800569a:	3001      	adds	r0, #1
 800569c:	d0e6      	beq.n	800566c <_printf_common+0xa4>
 800569e:	3601      	adds	r6, #1
 80056a0:	e7d9      	b.n	8005656 <_printf_common+0x8e>
	...

080056a4 <_printf_i>:
 80056a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a8:	7e0f      	ldrb	r7, [r1, #24]
 80056aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056ac:	2f78      	cmp	r7, #120	@ 0x78
 80056ae:	4691      	mov	r9, r2
 80056b0:	4680      	mov	r8, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	469a      	mov	sl, r3
 80056b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056ba:	d807      	bhi.n	80056cc <_printf_i+0x28>
 80056bc:	2f62      	cmp	r7, #98	@ 0x62
 80056be:	d80a      	bhi.n	80056d6 <_printf_i+0x32>
 80056c0:	2f00      	cmp	r7, #0
 80056c2:	f000 80d2 	beq.w	800586a <_printf_i+0x1c6>
 80056c6:	2f58      	cmp	r7, #88	@ 0x58
 80056c8:	f000 80b9 	beq.w	800583e <_printf_i+0x19a>
 80056cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056d4:	e03a      	b.n	800574c <_printf_i+0xa8>
 80056d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056da:	2b15      	cmp	r3, #21
 80056dc:	d8f6      	bhi.n	80056cc <_printf_i+0x28>
 80056de:	a101      	add	r1, pc, #4	@ (adr r1, 80056e4 <_printf_i+0x40>)
 80056e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e4:	0800573d 	.word	0x0800573d
 80056e8:	08005751 	.word	0x08005751
 80056ec:	080056cd 	.word	0x080056cd
 80056f0:	080056cd 	.word	0x080056cd
 80056f4:	080056cd 	.word	0x080056cd
 80056f8:	080056cd 	.word	0x080056cd
 80056fc:	08005751 	.word	0x08005751
 8005700:	080056cd 	.word	0x080056cd
 8005704:	080056cd 	.word	0x080056cd
 8005708:	080056cd 	.word	0x080056cd
 800570c:	080056cd 	.word	0x080056cd
 8005710:	08005851 	.word	0x08005851
 8005714:	0800577b 	.word	0x0800577b
 8005718:	0800580b 	.word	0x0800580b
 800571c:	080056cd 	.word	0x080056cd
 8005720:	080056cd 	.word	0x080056cd
 8005724:	08005873 	.word	0x08005873
 8005728:	080056cd 	.word	0x080056cd
 800572c:	0800577b 	.word	0x0800577b
 8005730:	080056cd 	.word	0x080056cd
 8005734:	080056cd 	.word	0x080056cd
 8005738:	08005813 	.word	0x08005813
 800573c:	6833      	ldr	r3, [r6, #0]
 800573e:	1d1a      	adds	r2, r3, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6032      	str	r2, [r6, #0]
 8005744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800574c:	2301      	movs	r3, #1
 800574e:	e09d      	b.n	800588c <_printf_i+0x1e8>
 8005750:	6833      	ldr	r3, [r6, #0]
 8005752:	6820      	ldr	r0, [r4, #0]
 8005754:	1d19      	adds	r1, r3, #4
 8005756:	6031      	str	r1, [r6, #0]
 8005758:	0606      	lsls	r6, r0, #24
 800575a:	d501      	bpl.n	8005760 <_printf_i+0xbc>
 800575c:	681d      	ldr	r5, [r3, #0]
 800575e:	e003      	b.n	8005768 <_printf_i+0xc4>
 8005760:	0645      	lsls	r5, r0, #25
 8005762:	d5fb      	bpl.n	800575c <_printf_i+0xb8>
 8005764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005768:	2d00      	cmp	r5, #0
 800576a:	da03      	bge.n	8005774 <_printf_i+0xd0>
 800576c:	232d      	movs	r3, #45	@ 0x2d
 800576e:	426d      	negs	r5, r5
 8005770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005774:	4859      	ldr	r0, [pc, #356]	@ (80058dc <_printf_i+0x238>)
 8005776:	230a      	movs	r3, #10
 8005778:	e011      	b.n	800579e <_printf_i+0xfa>
 800577a:	6821      	ldr	r1, [r4, #0]
 800577c:	6833      	ldr	r3, [r6, #0]
 800577e:	0608      	lsls	r0, r1, #24
 8005780:	f853 5b04 	ldr.w	r5, [r3], #4
 8005784:	d402      	bmi.n	800578c <_printf_i+0xe8>
 8005786:	0649      	lsls	r1, r1, #25
 8005788:	bf48      	it	mi
 800578a:	b2ad      	uxthmi	r5, r5
 800578c:	2f6f      	cmp	r7, #111	@ 0x6f
 800578e:	4853      	ldr	r0, [pc, #332]	@ (80058dc <_printf_i+0x238>)
 8005790:	6033      	str	r3, [r6, #0]
 8005792:	bf14      	ite	ne
 8005794:	230a      	movne	r3, #10
 8005796:	2308      	moveq	r3, #8
 8005798:	2100      	movs	r1, #0
 800579a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800579e:	6866      	ldr	r6, [r4, #4]
 80057a0:	60a6      	str	r6, [r4, #8]
 80057a2:	2e00      	cmp	r6, #0
 80057a4:	bfa2      	ittt	ge
 80057a6:	6821      	ldrge	r1, [r4, #0]
 80057a8:	f021 0104 	bicge.w	r1, r1, #4
 80057ac:	6021      	strge	r1, [r4, #0]
 80057ae:	b90d      	cbnz	r5, 80057b4 <_printf_i+0x110>
 80057b0:	2e00      	cmp	r6, #0
 80057b2:	d04b      	beq.n	800584c <_printf_i+0x1a8>
 80057b4:	4616      	mov	r6, r2
 80057b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80057ba:	fb03 5711 	mls	r7, r3, r1, r5
 80057be:	5dc7      	ldrb	r7, [r0, r7]
 80057c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057c4:	462f      	mov	r7, r5
 80057c6:	42bb      	cmp	r3, r7
 80057c8:	460d      	mov	r5, r1
 80057ca:	d9f4      	bls.n	80057b6 <_printf_i+0x112>
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d10b      	bne.n	80057e8 <_printf_i+0x144>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	07df      	lsls	r7, r3, #31
 80057d4:	d508      	bpl.n	80057e8 <_printf_i+0x144>
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	6861      	ldr	r1, [r4, #4]
 80057da:	4299      	cmp	r1, r3
 80057dc:	bfde      	ittt	le
 80057de:	2330      	movle	r3, #48	@ 0x30
 80057e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057e4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80057e8:	1b92      	subs	r2, r2, r6
 80057ea:	6122      	str	r2, [r4, #16]
 80057ec:	f8cd a000 	str.w	sl, [sp]
 80057f0:	464b      	mov	r3, r9
 80057f2:	aa03      	add	r2, sp, #12
 80057f4:	4621      	mov	r1, r4
 80057f6:	4640      	mov	r0, r8
 80057f8:	f7ff fee6 	bl	80055c8 <_printf_common>
 80057fc:	3001      	adds	r0, #1
 80057fe:	d14a      	bne.n	8005896 <_printf_i+0x1f2>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005804:	b004      	add	sp, #16
 8005806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	f043 0320 	orr.w	r3, r3, #32
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	4833      	ldr	r0, [pc, #204]	@ (80058e0 <_printf_i+0x23c>)
 8005814:	2778      	movs	r7, #120	@ 0x78
 8005816:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	6831      	ldr	r1, [r6, #0]
 800581e:	061f      	lsls	r7, r3, #24
 8005820:	f851 5b04 	ldr.w	r5, [r1], #4
 8005824:	d402      	bmi.n	800582c <_printf_i+0x188>
 8005826:	065f      	lsls	r7, r3, #25
 8005828:	bf48      	it	mi
 800582a:	b2ad      	uxthmi	r5, r5
 800582c:	6031      	str	r1, [r6, #0]
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	bf44      	itt	mi
 8005832:	f043 0320 	orrmi.w	r3, r3, #32
 8005836:	6023      	strmi	r3, [r4, #0]
 8005838:	b11d      	cbz	r5, 8005842 <_printf_i+0x19e>
 800583a:	2310      	movs	r3, #16
 800583c:	e7ac      	b.n	8005798 <_printf_i+0xf4>
 800583e:	4827      	ldr	r0, [pc, #156]	@ (80058dc <_printf_i+0x238>)
 8005840:	e7e9      	b.n	8005816 <_printf_i+0x172>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	f023 0320 	bic.w	r3, r3, #32
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	e7f6      	b.n	800583a <_printf_i+0x196>
 800584c:	4616      	mov	r6, r2
 800584e:	e7bd      	b.n	80057cc <_printf_i+0x128>
 8005850:	6833      	ldr	r3, [r6, #0]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	6961      	ldr	r1, [r4, #20]
 8005856:	1d18      	adds	r0, r3, #4
 8005858:	6030      	str	r0, [r6, #0]
 800585a:	062e      	lsls	r6, r5, #24
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	d501      	bpl.n	8005864 <_printf_i+0x1c0>
 8005860:	6019      	str	r1, [r3, #0]
 8005862:	e002      	b.n	800586a <_printf_i+0x1c6>
 8005864:	0668      	lsls	r0, r5, #25
 8005866:	d5fb      	bpl.n	8005860 <_printf_i+0x1bc>
 8005868:	8019      	strh	r1, [r3, #0]
 800586a:	2300      	movs	r3, #0
 800586c:	6123      	str	r3, [r4, #16]
 800586e:	4616      	mov	r6, r2
 8005870:	e7bc      	b.n	80057ec <_printf_i+0x148>
 8005872:	6833      	ldr	r3, [r6, #0]
 8005874:	1d1a      	adds	r2, r3, #4
 8005876:	6032      	str	r2, [r6, #0]
 8005878:	681e      	ldr	r6, [r3, #0]
 800587a:	6862      	ldr	r2, [r4, #4]
 800587c:	2100      	movs	r1, #0
 800587e:	4630      	mov	r0, r6
 8005880:	f7fa fcce 	bl	8000220 <memchr>
 8005884:	b108      	cbz	r0, 800588a <_printf_i+0x1e6>
 8005886:	1b80      	subs	r0, r0, r6
 8005888:	6060      	str	r0, [r4, #4]
 800588a:	6863      	ldr	r3, [r4, #4]
 800588c:	6123      	str	r3, [r4, #16]
 800588e:	2300      	movs	r3, #0
 8005890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005894:	e7aa      	b.n	80057ec <_printf_i+0x148>
 8005896:	6923      	ldr	r3, [r4, #16]
 8005898:	4632      	mov	r2, r6
 800589a:	4649      	mov	r1, r9
 800589c:	4640      	mov	r0, r8
 800589e:	47d0      	blx	sl
 80058a0:	3001      	adds	r0, #1
 80058a2:	d0ad      	beq.n	8005800 <_printf_i+0x15c>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	079b      	lsls	r3, r3, #30
 80058a8:	d413      	bmi.n	80058d2 <_printf_i+0x22e>
 80058aa:	68e0      	ldr	r0, [r4, #12]
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	4298      	cmp	r0, r3
 80058b0:	bfb8      	it	lt
 80058b2:	4618      	movlt	r0, r3
 80058b4:	e7a6      	b.n	8005804 <_printf_i+0x160>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4632      	mov	r2, r6
 80058ba:	4649      	mov	r1, r9
 80058bc:	4640      	mov	r0, r8
 80058be:	47d0      	blx	sl
 80058c0:	3001      	adds	r0, #1
 80058c2:	d09d      	beq.n	8005800 <_printf_i+0x15c>
 80058c4:	3501      	adds	r5, #1
 80058c6:	68e3      	ldr	r3, [r4, #12]
 80058c8:	9903      	ldr	r1, [sp, #12]
 80058ca:	1a5b      	subs	r3, r3, r1
 80058cc:	42ab      	cmp	r3, r5
 80058ce:	dcf2      	bgt.n	80058b6 <_printf_i+0x212>
 80058d0:	e7eb      	b.n	80058aa <_printf_i+0x206>
 80058d2:	2500      	movs	r5, #0
 80058d4:	f104 0619 	add.w	r6, r4, #25
 80058d8:	e7f5      	b.n	80058c6 <_printf_i+0x222>
 80058da:	bf00      	nop
 80058dc:	0800a66e 	.word	0x0800a66e
 80058e0:	0800a67f 	.word	0x0800a67f

080058e4 <_scanf_float>:
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	b087      	sub	sp, #28
 80058ea:	4617      	mov	r7, r2
 80058ec:	9303      	str	r3, [sp, #12]
 80058ee:	688b      	ldr	r3, [r1, #8]
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80058f6:	bf81      	itttt	hi
 80058f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80058fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8005900:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005904:	608b      	strhi	r3, [r1, #8]
 8005906:	680b      	ldr	r3, [r1, #0]
 8005908:	460a      	mov	r2, r1
 800590a:	f04f 0500 	mov.w	r5, #0
 800590e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005912:	f842 3b1c 	str.w	r3, [r2], #28
 8005916:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800591a:	4680      	mov	r8, r0
 800591c:	460c      	mov	r4, r1
 800591e:	bf98      	it	ls
 8005920:	f04f 0b00 	movls.w	fp, #0
 8005924:	9201      	str	r2, [sp, #4]
 8005926:	4616      	mov	r6, r2
 8005928:	46aa      	mov	sl, r5
 800592a:	46a9      	mov	r9, r5
 800592c:	9502      	str	r5, [sp, #8]
 800592e:	68a2      	ldr	r2, [r4, #8]
 8005930:	b152      	cbz	r2, 8005948 <_scanf_float+0x64>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b4e      	cmp	r3, #78	@ 0x4e
 8005938:	d864      	bhi.n	8005a04 <_scanf_float+0x120>
 800593a:	2b40      	cmp	r3, #64	@ 0x40
 800593c:	d83c      	bhi.n	80059b8 <_scanf_float+0xd4>
 800593e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005942:	b2c8      	uxtb	r0, r1
 8005944:	280e      	cmp	r0, #14
 8005946:	d93a      	bls.n	80059be <_scanf_float+0xda>
 8005948:	f1b9 0f00 	cmp.w	r9, #0
 800594c:	d003      	beq.n	8005956 <_scanf_float+0x72>
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800595a:	f1ba 0f01 	cmp.w	sl, #1
 800595e:	f200 8117 	bhi.w	8005b90 <_scanf_float+0x2ac>
 8005962:	9b01      	ldr	r3, [sp, #4]
 8005964:	429e      	cmp	r6, r3
 8005966:	f200 8108 	bhi.w	8005b7a <_scanf_float+0x296>
 800596a:	2001      	movs	r0, #1
 800596c:	b007      	add	sp, #28
 800596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005972:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005976:	2a0d      	cmp	r2, #13
 8005978:	d8e6      	bhi.n	8005948 <_scanf_float+0x64>
 800597a:	a101      	add	r1, pc, #4	@ (adr r1, 8005980 <_scanf_float+0x9c>)
 800597c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005980:	08005ac7 	.word	0x08005ac7
 8005984:	08005949 	.word	0x08005949
 8005988:	08005949 	.word	0x08005949
 800598c:	08005949 	.word	0x08005949
 8005990:	08005b27 	.word	0x08005b27
 8005994:	08005aff 	.word	0x08005aff
 8005998:	08005949 	.word	0x08005949
 800599c:	08005949 	.word	0x08005949
 80059a0:	08005ad5 	.word	0x08005ad5
 80059a4:	08005949 	.word	0x08005949
 80059a8:	08005949 	.word	0x08005949
 80059ac:	08005949 	.word	0x08005949
 80059b0:	08005949 	.word	0x08005949
 80059b4:	08005a8d 	.word	0x08005a8d
 80059b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80059bc:	e7db      	b.n	8005976 <_scanf_float+0x92>
 80059be:	290e      	cmp	r1, #14
 80059c0:	d8c2      	bhi.n	8005948 <_scanf_float+0x64>
 80059c2:	a001      	add	r0, pc, #4	@ (adr r0, 80059c8 <_scanf_float+0xe4>)
 80059c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80059c8:	08005a7d 	.word	0x08005a7d
 80059cc:	08005949 	.word	0x08005949
 80059d0:	08005a7d 	.word	0x08005a7d
 80059d4:	08005b13 	.word	0x08005b13
 80059d8:	08005949 	.word	0x08005949
 80059dc:	08005a25 	.word	0x08005a25
 80059e0:	08005a63 	.word	0x08005a63
 80059e4:	08005a63 	.word	0x08005a63
 80059e8:	08005a63 	.word	0x08005a63
 80059ec:	08005a63 	.word	0x08005a63
 80059f0:	08005a63 	.word	0x08005a63
 80059f4:	08005a63 	.word	0x08005a63
 80059f8:	08005a63 	.word	0x08005a63
 80059fc:	08005a63 	.word	0x08005a63
 8005a00:	08005a63 	.word	0x08005a63
 8005a04:	2b6e      	cmp	r3, #110	@ 0x6e
 8005a06:	d809      	bhi.n	8005a1c <_scanf_float+0x138>
 8005a08:	2b60      	cmp	r3, #96	@ 0x60
 8005a0a:	d8b2      	bhi.n	8005972 <_scanf_float+0x8e>
 8005a0c:	2b54      	cmp	r3, #84	@ 0x54
 8005a0e:	d07b      	beq.n	8005b08 <_scanf_float+0x224>
 8005a10:	2b59      	cmp	r3, #89	@ 0x59
 8005a12:	d199      	bne.n	8005948 <_scanf_float+0x64>
 8005a14:	2d07      	cmp	r5, #7
 8005a16:	d197      	bne.n	8005948 <_scanf_float+0x64>
 8005a18:	2508      	movs	r5, #8
 8005a1a:	e02c      	b.n	8005a76 <_scanf_float+0x192>
 8005a1c:	2b74      	cmp	r3, #116	@ 0x74
 8005a1e:	d073      	beq.n	8005b08 <_scanf_float+0x224>
 8005a20:	2b79      	cmp	r3, #121	@ 0x79
 8005a22:	e7f6      	b.n	8005a12 <_scanf_float+0x12e>
 8005a24:	6821      	ldr	r1, [r4, #0]
 8005a26:	05c8      	lsls	r0, r1, #23
 8005a28:	d51b      	bpl.n	8005a62 <_scanf_float+0x17e>
 8005a2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005a2e:	6021      	str	r1, [r4, #0]
 8005a30:	f109 0901 	add.w	r9, r9, #1
 8005a34:	f1bb 0f00 	cmp.w	fp, #0
 8005a38:	d003      	beq.n	8005a42 <_scanf_float+0x15e>
 8005a3a:	3201      	adds	r2, #1
 8005a3c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005a40:	60a2      	str	r2, [r4, #8]
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	60a3      	str	r3, [r4, #8]
 8005a48:	6923      	ldr	r3, [r4, #16]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	6123      	str	r3, [r4, #16]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	607b      	str	r3, [r7, #4]
 8005a56:	f340 8087 	ble.w	8005b68 <_scanf_float+0x284>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	e765      	b.n	800592e <_scanf_float+0x4a>
 8005a62:	eb1a 0105 	adds.w	r1, sl, r5
 8005a66:	f47f af6f 	bne.w	8005948 <_scanf_float+0x64>
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005a70:	6022      	str	r2, [r4, #0]
 8005a72:	460d      	mov	r5, r1
 8005a74:	468a      	mov	sl, r1
 8005a76:	f806 3b01 	strb.w	r3, [r6], #1
 8005a7a:	e7e2      	b.n	8005a42 <_scanf_float+0x15e>
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	0610      	lsls	r0, r2, #24
 8005a80:	f57f af62 	bpl.w	8005948 <_scanf_float+0x64>
 8005a84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a88:	6022      	str	r2, [r4, #0]
 8005a8a:	e7f4      	b.n	8005a76 <_scanf_float+0x192>
 8005a8c:	f1ba 0f00 	cmp.w	sl, #0
 8005a90:	d10e      	bne.n	8005ab0 <_scanf_float+0x1cc>
 8005a92:	f1b9 0f00 	cmp.w	r9, #0
 8005a96:	d10e      	bne.n	8005ab6 <_scanf_float+0x1d2>
 8005a98:	6822      	ldr	r2, [r4, #0]
 8005a9a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005a9e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005aa2:	d108      	bne.n	8005ab6 <_scanf_float+0x1d2>
 8005aa4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005aa8:	6022      	str	r2, [r4, #0]
 8005aaa:	f04f 0a01 	mov.w	sl, #1
 8005aae:	e7e2      	b.n	8005a76 <_scanf_float+0x192>
 8005ab0:	f1ba 0f02 	cmp.w	sl, #2
 8005ab4:	d055      	beq.n	8005b62 <_scanf_float+0x27e>
 8005ab6:	2d01      	cmp	r5, #1
 8005ab8:	d002      	beq.n	8005ac0 <_scanf_float+0x1dc>
 8005aba:	2d04      	cmp	r5, #4
 8005abc:	f47f af44 	bne.w	8005948 <_scanf_float+0x64>
 8005ac0:	3501      	adds	r5, #1
 8005ac2:	b2ed      	uxtb	r5, r5
 8005ac4:	e7d7      	b.n	8005a76 <_scanf_float+0x192>
 8005ac6:	f1ba 0f01 	cmp.w	sl, #1
 8005aca:	f47f af3d 	bne.w	8005948 <_scanf_float+0x64>
 8005ace:	f04f 0a02 	mov.w	sl, #2
 8005ad2:	e7d0      	b.n	8005a76 <_scanf_float+0x192>
 8005ad4:	b97d      	cbnz	r5, 8005af6 <_scanf_float+0x212>
 8005ad6:	f1b9 0f00 	cmp.w	r9, #0
 8005ada:	f47f af38 	bne.w	800594e <_scanf_float+0x6a>
 8005ade:	6822      	ldr	r2, [r4, #0]
 8005ae0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005ae4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005ae8:	f040 8108 	bne.w	8005cfc <_scanf_float+0x418>
 8005aec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005af0:	6022      	str	r2, [r4, #0]
 8005af2:	2501      	movs	r5, #1
 8005af4:	e7bf      	b.n	8005a76 <_scanf_float+0x192>
 8005af6:	2d03      	cmp	r5, #3
 8005af8:	d0e2      	beq.n	8005ac0 <_scanf_float+0x1dc>
 8005afa:	2d05      	cmp	r5, #5
 8005afc:	e7de      	b.n	8005abc <_scanf_float+0x1d8>
 8005afe:	2d02      	cmp	r5, #2
 8005b00:	f47f af22 	bne.w	8005948 <_scanf_float+0x64>
 8005b04:	2503      	movs	r5, #3
 8005b06:	e7b6      	b.n	8005a76 <_scanf_float+0x192>
 8005b08:	2d06      	cmp	r5, #6
 8005b0a:	f47f af1d 	bne.w	8005948 <_scanf_float+0x64>
 8005b0e:	2507      	movs	r5, #7
 8005b10:	e7b1      	b.n	8005a76 <_scanf_float+0x192>
 8005b12:	6822      	ldr	r2, [r4, #0]
 8005b14:	0591      	lsls	r1, r2, #22
 8005b16:	f57f af17 	bpl.w	8005948 <_scanf_float+0x64>
 8005b1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005b1e:	6022      	str	r2, [r4, #0]
 8005b20:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b24:	e7a7      	b.n	8005a76 <_scanf_float+0x192>
 8005b26:	6822      	ldr	r2, [r4, #0]
 8005b28:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005b2c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005b30:	d006      	beq.n	8005b40 <_scanf_float+0x25c>
 8005b32:	0550      	lsls	r0, r2, #21
 8005b34:	f57f af08 	bpl.w	8005948 <_scanf_float+0x64>
 8005b38:	f1b9 0f00 	cmp.w	r9, #0
 8005b3c:	f000 80de 	beq.w	8005cfc <_scanf_float+0x418>
 8005b40:	0591      	lsls	r1, r2, #22
 8005b42:	bf58      	it	pl
 8005b44:	9902      	ldrpl	r1, [sp, #8]
 8005b46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b4a:	bf58      	it	pl
 8005b4c:	eba9 0101 	subpl.w	r1, r9, r1
 8005b50:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005b54:	bf58      	it	pl
 8005b56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b5a:	6022      	str	r2, [r4, #0]
 8005b5c:	f04f 0900 	mov.w	r9, #0
 8005b60:	e789      	b.n	8005a76 <_scanf_float+0x192>
 8005b62:	f04f 0a03 	mov.w	sl, #3
 8005b66:	e786      	b.n	8005a76 <_scanf_float+0x192>
 8005b68:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005b6c:	4639      	mov	r1, r7
 8005b6e:	4640      	mov	r0, r8
 8005b70:	4798      	blx	r3
 8005b72:	2800      	cmp	r0, #0
 8005b74:	f43f aedb 	beq.w	800592e <_scanf_float+0x4a>
 8005b78:	e6e6      	b.n	8005948 <_scanf_float+0x64>
 8005b7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b82:	463a      	mov	r2, r7
 8005b84:	4640      	mov	r0, r8
 8005b86:	4798      	blx	r3
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	e6e8      	b.n	8005962 <_scanf_float+0x7e>
 8005b90:	1e6b      	subs	r3, r5, #1
 8005b92:	2b06      	cmp	r3, #6
 8005b94:	d824      	bhi.n	8005be0 <_scanf_float+0x2fc>
 8005b96:	2d02      	cmp	r5, #2
 8005b98:	d836      	bhi.n	8005c08 <_scanf_float+0x324>
 8005b9a:	9b01      	ldr	r3, [sp, #4]
 8005b9c:	429e      	cmp	r6, r3
 8005b9e:	f67f aee4 	bls.w	800596a <_scanf_float+0x86>
 8005ba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ba6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005baa:	463a      	mov	r2, r7
 8005bac:	4640      	mov	r0, r8
 8005bae:	4798      	blx	r3
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	6123      	str	r3, [r4, #16]
 8005bb6:	e7f0      	b.n	8005b9a <_scanf_float+0x2b6>
 8005bb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bbc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005bc0:	463a      	mov	r2, r7
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4798      	blx	r3
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	6123      	str	r3, [r4, #16]
 8005bcc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005bd0:	fa5f fa8a 	uxtb.w	sl, sl
 8005bd4:	f1ba 0f02 	cmp.w	sl, #2
 8005bd8:	d1ee      	bne.n	8005bb8 <_scanf_float+0x2d4>
 8005bda:	3d03      	subs	r5, #3
 8005bdc:	b2ed      	uxtb	r5, r5
 8005bde:	1b76      	subs	r6, r6, r5
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	05da      	lsls	r2, r3, #23
 8005be4:	d530      	bpl.n	8005c48 <_scanf_float+0x364>
 8005be6:	055b      	lsls	r3, r3, #21
 8005be8:	d511      	bpl.n	8005c0e <_scanf_float+0x32a>
 8005bea:	9b01      	ldr	r3, [sp, #4]
 8005bec:	429e      	cmp	r6, r3
 8005bee:	f67f aebc 	bls.w	800596a <_scanf_float+0x86>
 8005bf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bf6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bfa:	463a      	mov	r2, r7
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	4798      	blx	r3
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	e7f0      	b.n	8005bea <_scanf_float+0x306>
 8005c08:	46aa      	mov	sl, r5
 8005c0a:	46b3      	mov	fp, r6
 8005c0c:	e7de      	b.n	8005bcc <_scanf_float+0x2e8>
 8005c0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	2965      	cmp	r1, #101	@ 0x65
 8005c16:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005c1a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8005c1e:	6123      	str	r3, [r4, #16]
 8005c20:	d00c      	beq.n	8005c3c <_scanf_float+0x358>
 8005c22:	2945      	cmp	r1, #69	@ 0x45
 8005c24:	d00a      	beq.n	8005c3c <_scanf_float+0x358>
 8005c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c2a:	463a      	mov	r2, r7
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	4798      	blx	r3
 8005c30:	6923      	ldr	r3, [r4, #16]
 8005c32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	1eb5      	subs	r5, r6, #2
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c40:	463a      	mov	r2, r7
 8005c42:	4640      	mov	r0, r8
 8005c44:	4798      	blx	r3
 8005c46:	462e      	mov	r6, r5
 8005c48:	6822      	ldr	r2, [r4, #0]
 8005c4a:	f012 0210 	ands.w	r2, r2, #16
 8005c4e:	d001      	beq.n	8005c54 <_scanf_float+0x370>
 8005c50:	2000      	movs	r0, #0
 8005c52:	e68b      	b.n	800596c <_scanf_float+0x88>
 8005c54:	7032      	strb	r2, [r6, #0]
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c60:	d11c      	bne.n	8005c9c <_scanf_float+0x3b8>
 8005c62:	9b02      	ldr	r3, [sp, #8]
 8005c64:	454b      	cmp	r3, r9
 8005c66:	eba3 0209 	sub.w	r2, r3, r9
 8005c6a:	d123      	bne.n	8005cb4 <_scanf_float+0x3d0>
 8005c6c:	9901      	ldr	r1, [sp, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4640      	mov	r0, r8
 8005c72:	f002 fbf9 	bl	8008468 <_strtod_r>
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	6821      	ldr	r1, [r4, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f011 0f02 	tst.w	r1, #2
 8005c80:	ec57 6b10 	vmov	r6, r7, d0
 8005c84:	f103 0204 	add.w	r2, r3, #4
 8005c88:	d01f      	beq.n	8005cca <_scanf_float+0x3e6>
 8005c8a:	9903      	ldr	r1, [sp, #12]
 8005c8c:	600a      	str	r2, [r1, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	e9c3 6700 	strd	r6, r7, [r3]
 8005c94:	68e3      	ldr	r3, [r4, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60e3      	str	r3, [r4, #12]
 8005c9a:	e7d9      	b.n	8005c50 <_scanf_float+0x36c>
 8005c9c:	9b04      	ldr	r3, [sp, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0e4      	beq.n	8005c6c <_scanf_float+0x388>
 8005ca2:	9905      	ldr	r1, [sp, #20]
 8005ca4:	230a      	movs	r3, #10
 8005ca6:	3101      	adds	r1, #1
 8005ca8:	4640      	mov	r0, r8
 8005caa:	f002 fc5d 	bl	8008568 <_strtol_r>
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	9e05      	ldr	r6, [sp, #20]
 8005cb2:	1ac2      	subs	r2, r0, r3
 8005cb4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005cb8:	429e      	cmp	r6, r3
 8005cba:	bf28      	it	cs
 8005cbc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005cc0:	4910      	ldr	r1, [pc, #64]	@ (8005d04 <_scanf_float+0x420>)
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f000 f8e4 	bl	8005e90 <siprintf>
 8005cc8:	e7d0      	b.n	8005c6c <_scanf_float+0x388>
 8005cca:	f011 0f04 	tst.w	r1, #4
 8005cce:	9903      	ldr	r1, [sp, #12]
 8005cd0:	600a      	str	r2, [r1, #0]
 8005cd2:	d1dc      	bne.n	8005c8e <_scanf_float+0x3aa>
 8005cd4:	681d      	ldr	r5, [r3, #0]
 8005cd6:	4632      	mov	r2, r6
 8005cd8:	463b      	mov	r3, r7
 8005cda:	4630      	mov	r0, r6
 8005cdc:	4639      	mov	r1, r7
 8005cde:	f7fa ff4d 	bl	8000b7c <__aeabi_dcmpun>
 8005ce2:	b128      	cbz	r0, 8005cf0 <_scanf_float+0x40c>
 8005ce4:	4808      	ldr	r0, [pc, #32]	@ (8005d08 <_scanf_float+0x424>)
 8005ce6:	f000 f9b7 	bl	8006058 <nanf>
 8005cea:	ed85 0a00 	vstr	s0, [r5]
 8005cee:	e7d1      	b.n	8005c94 <_scanf_float+0x3b0>
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	4639      	mov	r1, r7
 8005cf4:	f7fa ffa0 	bl	8000c38 <__aeabi_d2f>
 8005cf8:	6028      	str	r0, [r5, #0]
 8005cfa:	e7cb      	b.n	8005c94 <_scanf_float+0x3b0>
 8005cfc:	f04f 0900 	mov.w	r9, #0
 8005d00:	e629      	b.n	8005956 <_scanf_float+0x72>
 8005d02:	bf00      	nop
 8005d04:	0800a690 	.word	0x0800a690
 8005d08:	0800aa25 	.word	0x0800aa25

08005d0c <std>:
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	b510      	push	{r4, lr}
 8005d10:	4604      	mov	r4, r0
 8005d12:	e9c0 3300 	strd	r3, r3, [r0]
 8005d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d1a:	6083      	str	r3, [r0, #8]
 8005d1c:	8181      	strh	r1, [r0, #12]
 8005d1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d20:	81c2      	strh	r2, [r0, #14]
 8005d22:	6183      	str	r3, [r0, #24]
 8005d24:	4619      	mov	r1, r3
 8005d26:	2208      	movs	r2, #8
 8005d28:	305c      	adds	r0, #92	@ 0x5c
 8005d2a:	f000 f914 	bl	8005f56 <memset>
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d64 <std+0x58>)
 8005d30:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d32:	4b0d      	ldr	r3, [pc, #52]	@ (8005d68 <std+0x5c>)
 8005d34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <std+0x60>)
 8005d38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d70 <std+0x64>)
 8005d3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d74 <std+0x68>)
 8005d40:	6224      	str	r4, [r4, #32]
 8005d42:	429c      	cmp	r4, r3
 8005d44:	d006      	beq.n	8005d54 <std+0x48>
 8005d46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d4a:	4294      	cmp	r4, r2
 8005d4c:	d002      	beq.n	8005d54 <std+0x48>
 8005d4e:	33d0      	adds	r3, #208	@ 0xd0
 8005d50:	429c      	cmp	r4, r3
 8005d52:	d105      	bne.n	8005d60 <std+0x54>
 8005d54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d5c:	f000 b978 	b.w	8006050 <__retarget_lock_init_recursive>
 8005d60:	bd10      	pop	{r4, pc}
 8005d62:	bf00      	nop
 8005d64:	08005ed1 	.word	0x08005ed1
 8005d68:	08005ef3 	.word	0x08005ef3
 8005d6c:	08005f2b 	.word	0x08005f2b
 8005d70:	08005f4f 	.word	0x08005f4f
 8005d74:	200003a8 	.word	0x200003a8

08005d78 <stdio_exit_handler>:
 8005d78:	4a02      	ldr	r2, [pc, #8]	@ (8005d84 <stdio_exit_handler+0xc>)
 8005d7a:	4903      	ldr	r1, [pc, #12]	@ (8005d88 <stdio_exit_handler+0x10>)
 8005d7c:	4803      	ldr	r0, [pc, #12]	@ (8005d8c <stdio_exit_handler+0x14>)
 8005d7e:	f000 b869 	b.w	8005e54 <_fwalk_sglue>
 8005d82:	bf00      	nop
 8005d84:	2000000c 	.word	0x2000000c
 8005d88:	08008925 	.word	0x08008925
 8005d8c:	2000001c 	.word	0x2000001c

08005d90 <cleanup_stdio>:
 8005d90:	6841      	ldr	r1, [r0, #4]
 8005d92:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc4 <cleanup_stdio+0x34>)
 8005d94:	4299      	cmp	r1, r3
 8005d96:	b510      	push	{r4, lr}
 8005d98:	4604      	mov	r4, r0
 8005d9a:	d001      	beq.n	8005da0 <cleanup_stdio+0x10>
 8005d9c:	f002 fdc2 	bl	8008924 <_fflush_r>
 8005da0:	68a1      	ldr	r1, [r4, #8]
 8005da2:	4b09      	ldr	r3, [pc, #36]	@ (8005dc8 <cleanup_stdio+0x38>)
 8005da4:	4299      	cmp	r1, r3
 8005da6:	d002      	beq.n	8005dae <cleanup_stdio+0x1e>
 8005da8:	4620      	mov	r0, r4
 8005daa:	f002 fdbb 	bl	8008924 <_fflush_r>
 8005dae:	68e1      	ldr	r1, [r4, #12]
 8005db0:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <cleanup_stdio+0x3c>)
 8005db2:	4299      	cmp	r1, r3
 8005db4:	d004      	beq.n	8005dc0 <cleanup_stdio+0x30>
 8005db6:	4620      	mov	r0, r4
 8005db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dbc:	f002 bdb2 	b.w	8008924 <_fflush_r>
 8005dc0:	bd10      	pop	{r4, pc}
 8005dc2:	bf00      	nop
 8005dc4:	200003a8 	.word	0x200003a8
 8005dc8:	20000410 	.word	0x20000410
 8005dcc:	20000478 	.word	0x20000478

08005dd0 <global_stdio_init.part.0>:
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e00 <global_stdio_init.part.0+0x30>)
 8005dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8005e04 <global_stdio_init.part.0+0x34>)
 8005dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8005e08 <global_stdio_init.part.0+0x38>)
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	4620      	mov	r0, r4
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2104      	movs	r1, #4
 8005de0:	f7ff ff94 	bl	8005d0c <std>
 8005de4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005de8:	2201      	movs	r2, #1
 8005dea:	2109      	movs	r1, #9
 8005dec:	f7ff ff8e 	bl	8005d0c <std>
 8005df0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005df4:	2202      	movs	r2, #2
 8005df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dfa:	2112      	movs	r1, #18
 8005dfc:	f7ff bf86 	b.w	8005d0c <std>
 8005e00:	200004e0 	.word	0x200004e0
 8005e04:	200003a8 	.word	0x200003a8
 8005e08:	08005d79 	.word	0x08005d79

08005e0c <__sfp_lock_acquire>:
 8005e0c:	4801      	ldr	r0, [pc, #4]	@ (8005e14 <__sfp_lock_acquire+0x8>)
 8005e0e:	f000 b920 	b.w	8006052 <__retarget_lock_acquire_recursive>
 8005e12:	bf00      	nop
 8005e14:	200004e9 	.word	0x200004e9

08005e18 <__sfp_lock_release>:
 8005e18:	4801      	ldr	r0, [pc, #4]	@ (8005e20 <__sfp_lock_release+0x8>)
 8005e1a:	f000 b91b 	b.w	8006054 <__retarget_lock_release_recursive>
 8005e1e:	bf00      	nop
 8005e20:	200004e9 	.word	0x200004e9

08005e24 <__sinit>:
 8005e24:	b510      	push	{r4, lr}
 8005e26:	4604      	mov	r4, r0
 8005e28:	f7ff fff0 	bl	8005e0c <__sfp_lock_acquire>
 8005e2c:	6a23      	ldr	r3, [r4, #32]
 8005e2e:	b11b      	cbz	r3, 8005e38 <__sinit+0x14>
 8005e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e34:	f7ff bff0 	b.w	8005e18 <__sfp_lock_release>
 8005e38:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <__sinit+0x28>)
 8005e3a:	6223      	str	r3, [r4, #32]
 8005e3c:	4b04      	ldr	r3, [pc, #16]	@ (8005e50 <__sinit+0x2c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1f5      	bne.n	8005e30 <__sinit+0xc>
 8005e44:	f7ff ffc4 	bl	8005dd0 <global_stdio_init.part.0>
 8005e48:	e7f2      	b.n	8005e30 <__sinit+0xc>
 8005e4a:	bf00      	nop
 8005e4c:	08005d91 	.word	0x08005d91
 8005e50:	200004e0 	.word	0x200004e0

08005e54 <_fwalk_sglue>:
 8005e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e58:	4607      	mov	r7, r0
 8005e5a:	4688      	mov	r8, r1
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	2600      	movs	r6, #0
 8005e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e64:	f1b9 0901 	subs.w	r9, r9, #1
 8005e68:	d505      	bpl.n	8005e76 <_fwalk_sglue+0x22>
 8005e6a:	6824      	ldr	r4, [r4, #0]
 8005e6c:	2c00      	cmp	r4, #0
 8005e6e:	d1f7      	bne.n	8005e60 <_fwalk_sglue+0xc>
 8005e70:	4630      	mov	r0, r6
 8005e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e76:	89ab      	ldrh	r3, [r5, #12]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d907      	bls.n	8005e8c <_fwalk_sglue+0x38>
 8005e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e80:	3301      	adds	r3, #1
 8005e82:	d003      	beq.n	8005e8c <_fwalk_sglue+0x38>
 8005e84:	4629      	mov	r1, r5
 8005e86:	4638      	mov	r0, r7
 8005e88:	47c0      	blx	r8
 8005e8a:	4306      	orrs	r6, r0
 8005e8c:	3568      	adds	r5, #104	@ 0x68
 8005e8e:	e7e9      	b.n	8005e64 <_fwalk_sglue+0x10>

08005e90 <siprintf>:
 8005e90:	b40e      	push	{r1, r2, r3}
 8005e92:	b500      	push	{lr}
 8005e94:	b09c      	sub	sp, #112	@ 0x70
 8005e96:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e98:	9002      	str	r0, [sp, #8]
 8005e9a:	9006      	str	r0, [sp, #24]
 8005e9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ea0:	4809      	ldr	r0, [pc, #36]	@ (8005ec8 <siprintf+0x38>)
 8005ea2:	9107      	str	r1, [sp, #28]
 8005ea4:	9104      	str	r1, [sp, #16]
 8005ea6:	4909      	ldr	r1, [pc, #36]	@ (8005ecc <siprintf+0x3c>)
 8005ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eac:	9105      	str	r1, [sp, #20]
 8005eae:	6800      	ldr	r0, [r0, #0]
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	a902      	add	r1, sp, #8
 8005eb4:	f002 fbb6 	bl	8008624 <_svfiprintf_r>
 8005eb8:	9b02      	ldr	r3, [sp, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	b01c      	add	sp, #112	@ 0x70
 8005ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ec4:	b003      	add	sp, #12
 8005ec6:	4770      	bx	lr
 8005ec8:	20000018 	.word	0x20000018
 8005ecc:	ffff0208 	.word	0xffff0208

08005ed0 <__sread>:
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed8:	f000 f86c 	bl	8005fb4 <_read_r>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	bfab      	itete	ge
 8005ee0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ee4:	181b      	addge	r3, r3, r0
 8005ee6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005eea:	bfac      	ite	ge
 8005eec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005eee:	81a3      	strhlt	r3, [r4, #12]
 8005ef0:	bd10      	pop	{r4, pc}

08005ef2 <__swrite>:
 8005ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef6:	461f      	mov	r7, r3
 8005ef8:	898b      	ldrh	r3, [r1, #12]
 8005efa:	05db      	lsls	r3, r3, #23
 8005efc:	4605      	mov	r5, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	4616      	mov	r6, r2
 8005f02:	d505      	bpl.n	8005f10 <__swrite+0x1e>
 8005f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f08:	2302      	movs	r3, #2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f000 f840 	bl	8005f90 <_lseek_r>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	4628      	mov	r0, r5
 8005f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f26:	f000 b857 	b.w	8005fd8 <_write_r>

08005f2a <__sseek>:
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f32:	f000 f82d 	bl	8005f90 <_lseek_r>
 8005f36:	1c43      	adds	r3, r0, #1
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	bf15      	itete	ne
 8005f3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f46:	81a3      	strheq	r3, [r4, #12]
 8005f48:	bf18      	it	ne
 8005f4a:	81a3      	strhne	r3, [r4, #12]
 8005f4c:	bd10      	pop	{r4, pc}

08005f4e <__sclose>:
 8005f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f52:	f000 b80d 	b.w	8005f70 <_close_r>

08005f56 <memset>:
 8005f56:	4402      	add	r2, r0
 8005f58:	4603      	mov	r3, r0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d100      	bne.n	8005f60 <memset+0xa>
 8005f5e:	4770      	bx	lr
 8005f60:	f803 1b01 	strb.w	r1, [r3], #1
 8005f64:	e7f9      	b.n	8005f5a <memset+0x4>
	...

08005f68 <_localeconv_r>:
 8005f68:	4800      	ldr	r0, [pc, #0]	@ (8005f6c <_localeconv_r+0x4>)
 8005f6a:	4770      	bx	lr
 8005f6c:	20000158 	.word	0x20000158

08005f70 <_close_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4d06      	ldr	r5, [pc, #24]	@ (8005f8c <_close_r+0x1c>)
 8005f74:	2300      	movs	r3, #0
 8005f76:	4604      	mov	r4, r0
 8005f78:	4608      	mov	r0, r1
 8005f7a:	602b      	str	r3, [r5, #0]
 8005f7c:	f7fb ffe1 	bl	8001f42 <_close>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d102      	bne.n	8005f8a <_close_r+0x1a>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	b103      	cbz	r3, 8005f8a <_close_r+0x1a>
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	200004e4 	.word	0x200004e4

08005f90 <_lseek_r>:
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4d07      	ldr	r5, [pc, #28]	@ (8005fb0 <_lseek_r+0x20>)
 8005f94:	4604      	mov	r4, r0
 8005f96:	4608      	mov	r0, r1
 8005f98:	4611      	mov	r1, r2
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	602a      	str	r2, [r5, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f7fb fff6 	bl	8001f90 <_lseek>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d102      	bne.n	8005fae <_lseek_r+0x1e>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	b103      	cbz	r3, 8005fae <_lseek_r+0x1e>
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	bd38      	pop	{r3, r4, r5, pc}
 8005fb0:	200004e4 	.word	0x200004e4

08005fb4 <_read_r>:
 8005fb4:	b538      	push	{r3, r4, r5, lr}
 8005fb6:	4d07      	ldr	r5, [pc, #28]	@ (8005fd4 <_read_r+0x20>)
 8005fb8:	4604      	mov	r4, r0
 8005fba:	4608      	mov	r0, r1
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	602a      	str	r2, [r5, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	f7fb ff84 	bl	8001ed0 <_read>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d102      	bne.n	8005fd2 <_read_r+0x1e>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	b103      	cbz	r3, 8005fd2 <_read_r+0x1e>
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	200004e4 	.word	0x200004e4

08005fd8 <_write_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4d07      	ldr	r5, [pc, #28]	@ (8005ff8 <_write_r+0x20>)
 8005fdc:	4604      	mov	r4, r0
 8005fde:	4608      	mov	r0, r1
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	602a      	str	r2, [r5, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f7fb ff8f 	bl	8001f0a <_write>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_write_r+0x1e>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_write_r+0x1e>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	200004e4 	.word	0x200004e4

08005ffc <__errno>:
 8005ffc:	4b01      	ldr	r3, [pc, #4]	@ (8006004 <__errno+0x8>)
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000018 	.word	0x20000018

08006008 <__libc_init_array>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	4d0d      	ldr	r5, [pc, #52]	@ (8006040 <__libc_init_array+0x38>)
 800600c:	4c0d      	ldr	r4, [pc, #52]	@ (8006044 <__libc_init_array+0x3c>)
 800600e:	1b64      	subs	r4, r4, r5
 8006010:	10a4      	asrs	r4, r4, #2
 8006012:	2600      	movs	r6, #0
 8006014:	42a6      	cmp	r6, r4
 8006016:	d109      	bne.n	800602c <__libc_init_array+0x24>
 8006018:	4d0b      	ldr	r5, [pc, #44]	@ (8006048 <__libc_init_array+0x40>)
 800601a:	4c0c      	ldr	r4, [pc, #48]	@ (800604c <__libc_init_array+0x44>)
 800601c:	f004 fad2 	bl	800a5c4 <_init>
 8006020:	1b64      	subs	r4, r4, r5
 8006022:	10a4      	asrs	r4, r4, #2
 8006024:	2600      	movs	r6, #0
 8006026:	42a6      	cmp	r6, r4
 8006028:	d105      	bne.n	8006036 <__libc_init_array+0x2e>
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006030:	4798      	blx	r3
 8006032:	3601      	adds	r6, #1
 8006034:	e7ee      	b.n	8006014 <__libc_init_array+0xc>
 8006036:	f855 3b04 	ldr.w	r3, [r5], #4
 800603a:	4798      	blx	r3
 800603c:	3601      	adds	r6, #1
 800603e:	e7f2      	b.n	8006026 <__libc_init_array+0x1e>
 8006040:	0800aac0 	.word	0x0800aac0
 8006044:	0800aac0 	.word	0x0800aac0
 8006048:	0800aac0 	.word	0x0800aac0
 800604c:	0800aac4 	.word	0x0800aac4

08006050 <__retarget_lock_init_recursive>:
 8006050:	4770      	bx	lr

08006052 <__retarget_lock_acquire_recursive>:
 8006052:	4770      	bx	lr

08006054 <__retarget_lock_release_recursive>:
 8006054:	4770      	bx	lr
	...

08006058 <nanf>:
 8006058:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006060 <nanf+0x8>
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	7fc00000 	.word	0x7fc00000

08006064 <quorem>:
 8006064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006068:	6903      	ldr	r3, [r0, #16]
 800606a:	690c      	ldr	r4, [r1, #16]
 800606c:	42a3      	cmp	r3, r4
 800606e:	4607      	mov	r7, r0
 8006070:	db7e      	blt.n	8006170 <quorem+0x10c>
 8006072:	3c01      	subs	r4, #1
 8006074:	f101 0814 	add.w	r8, r1, #20
 8006078:	00a3      	lsls	r3, r4, #2
 800607a:	f100 0514 	add.w	r5, r0, #20
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800608a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800608e:	3301      	adds	r3, #1
 8006090:	429a      	cmp	r2, r3
 8006092:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006096:	fbb2 f6f3 	udiv	r6, r2, r3
 800609a:	d32e      	bcc.n	80060fa <quorem+0x96>
 800609c:	f04f 0a00 	mov.w	sl, #0
 80060a0:	46c4      	mov	ip, r8
 80060a2:	46ae      	mov	lr, r5
 80060a4:	46d3      	mov	fp, sl
 80060a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060aa:	b298      	uxth	r0, r3
 80060ac:	fb06 a000 	mla	r0, r6, r0, sl
 80060b0:	0c02      	lsrs	r2, r0, #16
 80060b2:	0c1b      	lsrs	r3, r3, #16
 80060b4:	fb06 2303 	mla	r3, r6, r3, r2
 80060b8:	f8de 2000 	ldr.w	r2, [lr]
 80060bc:	b280      	uxth	r0, r0
 80060be:	b292      	uxth	r2, r2
 80060c0:	1a12      	subs	r2, r2, r0
 80060c2:	445a      	add	r2, fp
 80060c4:	f8de 0000 	ldr.w	r0, [lr]
 80060c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060d6:	b292      	uxth	r2, r2
 80060d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060dc:	45e1      	cmp	r9, ip
 80060de:	f84e 2b04 	str.w	r2, [lr], #4
 80060e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060e6:	d2de      	bcs.n	80060a6 <quorem+0x42>
 80060e8:	9b00      	ldr	r3, [sp, #0]
 80060ea:	58eb      	ldr	r3, [r5, r3]
 80060ec:	b92b      	cbnz	r3, 80060fa <quorem+0x96>
 80060ee:	9b01      	ldr	r3, [sp, #4]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	429d      	cmp	r5, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	d32f      	bcc.n	8006158 <quorem+0xf4>
 80060f8:	613c      	str	r4, [r7, #16]
 80060fa:	4638      	mov	r0, r7
 80060fc:	f001 f9c4 	bl	8007488 <__mcmp>
 8006100:	2800      	cmp	r0, #0
 8006102:	db25      	blt.n	8006150 <quorem+0xec>
 8006104:	4629      	mov	r1, r5
 8006106:	2000      	movs	r0, #0
 8006108:	f858 2b04 	ldr.w	r2, [r8], #4
 800610c:	f8d1 c000 	ldr.w	ip, [r1]
 8006110:	fa1f fe82 	uxth.w	lr, r2
 8006114:	fa1f f38c 	uxth.w	r3, ip
 8006118:	eba3 030e 	sub.w	r3, r3, lr
 800611c:	4403      	add	r3, r0
 800611e:	0c12      	lsrs	r2, r2, #16
 8006120:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006124:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800612e:	45c1      	cmp	r9, r8
 8006130:	f841 3b04 	str.w	r3, [r1], #4
 8006134:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006138:	d2e6      	bcs.n	8006108 <quorem+0xa4>
 800613a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800613e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006142:	b922      	cbnz	r2, 800614e <quorem+0xea>
 8006144:	3b04      	subs	r3, #4
 8006146:	429d      	cmp	r5, r3
 8006148:	461a      	mov	r2, r3
 800614a:	d30b      	bcc.n	8006164 <quorem+0x100>
 800614c:	613c      	str	r4, [r7, #16]
 800614e:	3601      	adds	r6, #1
 8006150:	4630      	mov	r0, r6
 8006152:	b003      	add	sp, #12
 8006154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	3b04      	subs	r3, #4
 800615c:	2a00      	cmp	r2, #0
 800615e:	d1cb      	bne.n	80060f8 <quorem+0x94>
 8006160:	3c01      	subs	r4, #1
 8006162:	e7c6      	b.n	80060f2 <quorem+0x8e>
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	3b04      	subs	r3, #4
 8006168:	2a00      	cmp	r2, #0
 800616a:	d1ef      	bne.n	800614c <quorem+0xe8>
 800616c:	3c01      	subs	r4, #1
 800616e:	e7ea      	b.n	8006146 <quorem+0xe2>
 8006170:	2000      	movs	r0, #0
 8006172:	e7ee      	b.n	8006152 <quorem+0xee>
 8006174:	0000      	movs	r0, r0
	...

08006178 <_dtoa_r>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	69c7      	ldr	r7, [r0, #28]
 800617e:	b099      	sub	sp, #100	@ 0x64
 8006180:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006184:	ec55 4b10 	vmov	r4, r5, d0
 8006188:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800618a:	9109      	str	r1, [sp, #36]	@ 0x24
 800618c:	4683      	mov	fp, r0
 800618e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006190:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006192:	b97f      	cbnz	r7, 80061b4 <_dtoa_r+0x3c>
 8006194:	2010      	movs	r0, #16
 8006196:	f000 fdfd 	bl	8006d94 <malloc>
 800619a:	4602      	mov	r2, r0
 800619c:	f8cb 001c 	str.w	r0, [fp, #28]
 80061a0:	b920      	cbnz	r0, 80061ac <_dtoa_r+0x34>
 80061a2:	4ba7      	ldr	r3, [pc, #668]	@ (8006440 <_dtoa_r+0x2c8>)
 80061a4:	21ef      	movs	r1, #239	@ 0xef
 80061a6:	48a7      	ldr	r0, [pc, #668]	@ (8006444 <_dtoa_r+0x2cc>)
 80061a8:	f002 fc36 	bl	8008a18 <__assert_func>
 80061ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061b0:	6007      	str	r7, [r0, #0]
 80061b2:	60c7      	str	r7, [r0, #12]
 80061b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061b8:	6819      	ldr	r1, [r3, #0]
 80061ba:	b159      	cbz	r1, 80061d4 <_dtoa_r+0x5c>
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	604a      	str	r2, [r1, #4]
 80061c0:	2301      	movs	r3, #1
 80061c2:	4093      	lsls	r3, r2
 80061c4:	608b      	str	r3, [r1, #8]
 80061c6:	4658      	mov	r0, fp
 80061c8:	f000 feda 	bl	8006f80 <_Bfree>
 80061cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	1e2b      	subs	r3, r5, #0
 80061d6:	bfb9      	ittee	lt
 80061d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80061dc:	9303      	strlt	r3, [sp, #12]
 80061de:	2300      	movge	r3, #0
 80061e0:	6033      	strge	r3, [r6, #0]
 80061e2:	9f03      	ldr	r7, [sp, #12]
 80061e4:	4b98      	ldr	r3, [pc, #608]	@ (8006448 <_dtoa_r+0x2d0>)
 80061e6:	bfbc      	itt	lt
 80061e8:	2201      	movlt	r2, #1
 80061ea:	6032      	strlt	r2, [r6, #0]
 80061ec:	43bb      	bics	r3, r7
 80061ee:	d112      	bne.n	8006216 <_dtoa_r+0x9e>
 80061f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80061f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80061fc:	4323      	orrs	r3, r4
 80061fe:	f000 854d 	beq.w	8006c9c <_dtoa_r+0xb24>
 8006202:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006204:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800645c <_dtoa_r+0x2e4>
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 854f 	beq.w	8006cac <_dtoa_r+0xb34>
 800620e:	f10a 0303 	add.w	r3, sl, #3
 8006212:	f000 bd49 	b.w	8006ca8 <_dtoa_r+0xb30>
 8006216:	ed9d 7b02 	vldr	d7, [sp, #8]
 800621a:	2200      	movs	r2, #0
 800621c:	ec51 0b17 	vmov	r0, r1, d7
 8006220:	2300      	movs	r3, #0
 8006222:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006226:	f7fa fc77 	bl	8000b18 <__aeabi_dcmpeq>
 800622a:	4680      	mov	r8, r0
 800622c:	b158      	cbz	r0, 8006246 <_dtoa_r+0xce>
 800622e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006230:	2301      	movs	r3, #1
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006236:	b113      	cbz	r3, 800623e <_dtoa_r+0xc6>
 8006238:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800623a:	4b84      	ldr	r3, [pc, #528]	@ (800644c <_dtoa_r+0x2d4>)
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006460 <_dtoa_r+0x2e8>
 8006242:	f000 bd33 	b.w	8006cac <_dtoa_r+0xb34>
 8006246:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800624a:	aa16      	add	r2, sp, #88	@ 0x58
 800624c:	a917      	add	r1, sp, #92	@ 0x5c
 800624e:	4658      	mov	r0, fp
 8006250:	f001 fa3a 	bl	80076c8 <__d2b>
 8006254:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006258:	4681      	mov	r9, r0
 800625a:	2e00      	cmp	r6, #0
 800625c:	d077      	beq.n	800634e <_dtoa_r+0x1d6>
 800625e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006260:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006268:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800626c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006270:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006274:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006278:	4619      	mov	r1, r3
 800627a:	2200      	movs	r2, #0
 800627c:	4b74      	ldr	r3, [pc, #464]	@ (8006450 <_dtoa_r+0x2d8>)
 800627e:	f7fa f82b 	bl	80002d8 <__aeabi_dsub>
 8006282:	a369      	add	r3, pc, #420	@ (adr r3, 8006428 <_dtoa_r+0x2b0>)
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f7fa f9de 	bl	8000648 <__aeabi_dmul>
 800628c:	a368      	add	r3, pc, #416	@ (adr r3, 8006430 <_dtoa_r+0x2b8>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7fa f823 	bl	80002dc <__adddf3>
 8006296:	4604      	mov	r4, r0
 8006298:	4630      	mov	r0, r6
 800629a:	460d      	mov	r5, r1
 800629c:	f7fa f96a 	bl	8000574 <__aeabi_i2d>
 80062a0:	a365      	add	r3, pc, #404	@ (adr r3, 8006438 <_dtoa_r+0x2c0>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7fa f9cf 	bl	8000648 <__aeabi_dmul>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4620      	mov	r0, r4
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7fa f813 	bl	80002dc <__adddf3>
 80062b6:	4604      	mov	r4, r0
 80062b8:	460d      	mov	r5, r1
 80062ba:	f7fa fc75 	bl	8000ba8 <__aeabi_d2iz>
 80062be:	2200      	movs	r2, #0
 80062c0:	4607      	mov	r7, r0
 80062c2:	2300      	movs	r3, #0
 80062c4:	4620      	mov	r0, r4
 80062c6:	4629      	mov	r1, r5
 80062c8:	f7fa fc30 	bl	8000b2c <__aeabi_dcmplt>
 80062cc:	b140      	cbz	r0, 80062e0 <_dtoa_r+0x168>
 80062ce:	4638      	mov	r0, r7
 80062d0:	f7fa f950 	bl	8000574 <__aeabi_i2d>
 80062d4:	4622      	mov	r2, r4
 80062d6:	462b      	mov	r3, r5
 80062d8:	f7fa fc1e 	bl	8000b18 <__aeabi_dcmpeq>
 80062dc:	b900      	cbnz	r0, 80062e0 <_dtoa_r+0x168>
 80062de:	3f01      	subs	r7, #1
 80062e0:	2f16      	cmp	r7, #22
 80062e2:	d851      	bhi.n	8006388 <_dtoa_r+0x210>
 80062e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006454 <_dtoa_r+0x2dc>)
 80062e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062f2:	f7fa fc1b 	bl	8000b2c <__aeabi_dcmplt>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d048      	beq.n	800638c <_dtoa_r+0x214>
 80062fa:	3f01      	subs	r7, #1
 80062fc:	2300      	movs	r3, #0
 80062fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8006300:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006302:	1b9b      	subs	r3, r3, r6
 8006304:	1e5a      	subs	r2, r3, #1
 8006306:	bf44      	itt	mi
 8006308:	f1c3 0801 	rsbmi	r8, r3, #1
 800630c:	2300      	movmi	r3, #0
 800630e:	9208      	str	r2, [sp, #32]
 8006310:	bf54      	ite	pl
 8006312:	f04f 0800 	movpl.w	r8, #0
 8006316:	9308      	strmi	r3, [sp, #32]
 8006318:	2f00      	cmp	r7, #0
 800631a:	db39      	blt.n	8006390 <_dtoa_r+0x218>
 800631c:	9b08      	ldr	r3, [sp, #32]
 800631e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006320:	443b      	add	r3, r7
 8006322:	9308      	str	r3, [sp, #32]
 8006324:	2300      	movs	r3, #0
 8006326:	930a      	str	r3, [sp, #40]	@ 0x28
 8006328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632a:	2b09      	cmp	r3, #9
 800632c:	d864      	bhi.n	80063f8 <_dtoa_r+0x280>
 800632e:	2b05      	cmp	r3, #5
 8006330:	bfc4      	itt	gt
 8006332:	3b04      	subgt	r3, #4
 8006334:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006338:	f1a3 0302 	sub.w	r3, r3, #2
 800633c:	bfcc      	ite	gt
 800633e:	2400      	movgt	r4, #0
 8006340:	2401      	movle	r4, #1
 8006342:	2b03      	cmp	r3, #3
 8006344:	d863      	bhi.n	800640e <_dtoa_r+0x296>
 8006346:	e8df f003 	tbb	[pc, r3]
 800634a:	372a      	.short	0x372a
 800634c:	5535      	.short	0x5535
 800634e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006352:	441e      	add	r6, r3
 8006354:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006358:	2b20      	cmp	r3, #32
 800635a:	bfc1      	itttt	gt
 800635c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006360:	409f      	lslgt	r7, r3
 8006362:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006366:	fa24 f303 	lsrgt.w	r3, r4, r3
 800636a:	bfd6      	itet	le
 800636c:	f1c3 0320 	rsble	r3, r3, #32
 8006370:	ea47 0003 	orrgt.w	r0, r7, r3
 8006374:	fa04 f003 	lslle.w	r0, r4, r3
 8006378:	f7fa f8ec 	bl	8000554 <__aeabi_ui2d>
 800637c:	2201      	movs	r2, #1
 800637e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006382:	3e01      	subs	r6, #1
 8006384:	9214      	str	r2, [sp, #80]	@ 0x50
 8006386:	e777      	b.n	8006278 <_dtoa_r+0x100>
 8006388:	2301      	movs	r3, #1
 800638a:	e7b8      	b.n	80062fe <_dtoa_r+0x186>
 800638c:	9012      	str	r0, [sp, #72]	@ 0x48
 800638e:	e7b7      	b.n	8006300 <_dtoa_r+0x188>
 8006390:	427b      	negs	r3, r7
 8006392:	930a      	str	r3, [sp, #40]	@ 0x28
 8006394:	2300      	movs	r3, #0
 8006396:	eba8 0807 	sub.w	r8, r8, r7
 800639a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800639c:	e7c4      	b.n	8006328 <_dtoa_r+0x1b0>
 800639e:	2300      	movs	r3, #0
 80063a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dc35      	bgt.n	8006414 <_dtoa_r+0x29c>
 80063a8:	2301      	movs	r3, #1
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	9307      	str	r3, [sp, #28]
 80063ae:	461a      	mov	r2, r3
 80063b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80063b2:	e00b      	b.n	80063cc <_dtoa_r+0x254>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e7f3      	b.n	80063a0 <_dtoa_r+0x228>
 80063b8:	2300      	movs	r3, #0
 80063ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063be:	18fb      	adds	r3, r7, r3
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	3301      	adds	r3, #1
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	9307      	str	r3, [sp, #28]
 80063c8:	bfb8      	it	lt
 80063ca:	2301      	movlt	r3, #1
 80063cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80063d0:	2100      	movs	r1, #0
 80063d2:	2204      	movs	r2, #4
 80063d4:	f102 0514 	add.w	r5, r2, #20
 80063d8:	429d      	cmp	r5, r3
 80063da:	d91f      	bls.n	800641c <_dtoa_r+0x2a4>
 80063dc:	6041      	str	r1, [r0, #4]
 80063de:	4658      	mov	r0, fp
 80063e0:	f000 fd8e 	bl	8006f00 <_Balloc>
 80063e4:	4682      	mov	sl, r0
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d13c      	bne.n	8006464 <_dtoa_r+0x2ec>
 80063ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006458 <_dtoa_r+0x2e0>)
 80063ec:	4602      	mov	r2, r0
 80063ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80063f2:	e6d8      	b.n	80061a6 <_dtoa_r+0x2e>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e7e0      	b.n	80063ba <_dtoa_r+0x242>
 80063f8:	2401      	movs	r4, #1
 80063fa:	2300      	movs	r3, #0
 80063fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	9307      	str	r3, [sp, #28]
 8006408:	2200      	movs	r2, #0
 800640a:	2312      	movs	r3, #18
 800640c:	e7d0      	b.n	80063b0 <_dtoa_r+0x238>
 800640e:	2301      	movs	r3, #1
 8006410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006412:	e7f5      	b.n	8006400 <_dtoa_r+0x288>
 8006414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	9307      	str	r3, [sp, #28]
 800641a:	e7d7      	b.n	80063cc <_dtoa_r+0x254>
 800641c:	3101      	adds	r1, #1
 800641e:	0052      	lsls	r2, r2, #1
 8006420:	e7d8      	b.n	80063d4 <_dtoa_r+0x25c>
 8006422:	bf00      	nop
 8006424:	f3af 8000 	nop.w
 8006428:	636f4361 	.word	0x636f4361
 800642c:	3fd287a7 	.word	0x3fd287a7
 8006430:	8b60c8b3 	.word	0x8b60c8b3
 8006434:	3fc68a28 	.word	0x3fc68a28
 8006438:	509f79fb 	.word	0x509f79fb
 800643c:	3fd34413 	.word	0x3fd34413
 8006440:	0800a6a2 	.word	0x0800a6a2
 8006444:	0800a6b9 	.word	0x0800a6b9
 8006448:	7ff00000 	.word	0x7ff00000
 800644c:	0800a66d 	.word	0x0800a66d
 8006450:	3ff80000 	.word	0x3ff80000
 8006454:	0800a7b0 	.word	0x0800a7b0
 8006458:	0800a711 	.word	0x0800a711
 800645c:	0800a69e 	.word	0x0800a69e
 8006460:	0800a66c 	.word	0x0800a66c
 8006464:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006468:	6018      	str	r0, [r3, #0]
 800646a:	9b07      	ldr	r3, [sp, #28]
 800646c:	2b0e      	cmp	r3, #14
 800646e:	f200 80a4 	bhi.w	80065ba <_dtoa_r+0x442>
 8006472:	2c00      	cmp	r4, #0
 8006474:	f000 80a1 	beq.w	80065ba <_dtoa_r+0x442>
 8006478:	2f00      	cmp	r7, #0
 800647a:	dd33      	ble.n	80064e4 <_dtoa_r+0x36c>
 800647c:	4bad      	ldr	r3, [pc, #692]	@ (8006734 <_dtoa_r+0x5bc>)
 800647e:	f007 020f 	and.w	r2, r7, #15
 8006482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006486:	ed93 7b00 	vldr	d7, [r3]
 800648a:	05f8      	lsls	r0, r7, #23
 800648c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006490:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006494:	d516      	bpl.n	80064c4 <_dtoa_r+0x34c>
 8006496:	4ba8      	ldr	r3, [pc, #672]	@ (8006738 <_dtoa_r+0x5c0>)
 8006498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800649c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064a0:	f7fa f9fc 	bl	800089c <__aeabi_ddiv>
 80064a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a8:	f004 040f 	and.w	r4, r4, #15
 80064ac:	2603      	movs	r6, #3
 80064ae:	4da2      	ldr	r5, [pc, #648]	@ (8006738 <_dtoa_r+0x5c0>)
 80064b0:	b954      	cbnz	r4, 80064c8 <_dtoa_r+0x350>
 80064b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ba:	f7fa f9ef 	bl	800089c <__aeabi_ddiv>
 80064be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064c2:	e028      	b.n	8006516 <_dtoa_r+0x39e>
 80064c4:	2602      	movs	r6, #2
 80064c6:	e7f2      	b.n	80064ae <_dtoa_r+0x336>
 80064c8:	07e1      	lsls	r1, r4, #31
 80064ca:	d508      	bpl.n	80064de <_dtoa_r+0x366>
 80064cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064d4:	f7fa f8b8 	bl	8000648 <__aeabi_dmul>
 80064d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064dc:	3601      	adds	r6, #1
 80064de:	1064      	asrs	r4, r4, #1
 80064e0:	3508      	adds	r5, #8
 80064e2:	e7e5      	b.n	80064b0 <_dtoa_r+0x338>
 80064e4:	f000 80d2 	beq.w	800668c <_dtoa_r+0x514>
 80064e8:	427c      	negs	r4, r7
 80064ea:	4b92      	ldr	r3, [pc, #584]	@ (8006734 <_dtoa_r+0x5bc>)
 80064ec:	4d92      	ldr	r5, [pc, #584]	@ (8006738 <_dtoa_r+0x5c0>)
 80064ee:	f004 020f 	and.w	r2, r4, #15
 80064f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064fe:	f7fa f8a3 	bl	8000648 <__aeabi_dmul>
 8006502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006506:	1124      	asrs	r4, r4, #4
 8006508:	2300      	movs	r3, #0
 800650a:	2602      	movs	r6, #2
 800650c:	2c00      	cmp	r4, #0
 800650e:	f040 80b2 	bne.w	8006676 <_dtoa_r+0x4fe>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1d3      	bne.n	80064be <_dtoa_r+0x346>
 8006516:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006518:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 80b7 	beq.w	8006690 <_dtoa_r+0x518>
 8006522:	4b86      	ldr	r3, [pc, #536]	@ (800673c <_dtoa_r+0x5c4>)
 8006524:	2200      	movs	r2, #0
 8006526:	4620      	mov	r0, r4
 8006528:	4629      	mov	r1, r5
 800652a:	f7fa faff 	bl	8000b2c <__aeabi_dcmplt>
 800652e:	2800      	cmp	r0, #0
 8006530:	f000 80ae 	beq.w	8006690 <_dtoa_r+0x518>
 8006534:	9b07      	ldr	r3, [sp, #28]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 80aa 	beq.w	8006690 <_dtoa_r+0x518>
 800653c:	9b00      	ldr	r3, [sp, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	dd37      	ble.n	80065b2 <_dtoa_r+0x43a>
 8006542:	1e7b      	subs	r3, r7, #1
 8006544:	9304      	str	r3, [sp, #16]
 8006546:	4620      	mov	r0, r4
 8006548:	4b7d      	ldr	r3, [pc, #500]	@ (8006740 <_dtoa_r+0x5c8>)
 800654a:	2200      	movs	r2, #0
 800654c:	4629      	mov	r1, r5
 800654e:	f7fa f87b 	bl	8000648 <__aeabi_dmul>
 8006552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006556:	9c00      	ldr	r4, [sp, #0]
 8006558:	3601      	adds	r6, #1
 800655a:	4630      	mov	r0, r6
 800655c:	f7fa f80a 	bl	8000574 <__aeabi_i2d>
 8006560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006564:	f7fa f870 	bl	8000648 <__aeabi_dmul>
 8006568:	4b76      	ldr	r3, [pc, #472]	@ (8006744 <_dtoa_r+0x5cc>)
 800656a:	2200      	movs	r2, #0
 800656c:	f7f9 feb6 	bl	80002dc <__adddf3>
 8006570:	4605      	mov	r5, r0
 8006572:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006576:	2c00      	cmp	r4, #0
 8006578:	f040 808d 	bne.w	8006696 <_dtoa_r+0x51e>
 800657c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006580:	4b71      	ldr	r3, [pc, #452]	@ (8006748 <_dtoa_r+0x5d0>)
 8006582:	2200      	movs	r2, #0
 8006584:	f7f9 fea8 	bl	80002d8 <__aeabi_dsub>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006590:	462a      	mov	r2, r5
 8006592:	4633      	mov	r3, r6
 8006594:	f7fa fae8 	bl	8000b68 <__aeabi_dcmpgt>
 8006598:	2800      	cmp	r0, #0
 800659a:	f040 828b 	bne.w	8006ab4 <_dtoa_r+0x93c>
 800659e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065a2:	462a      	mov	r2, r5
 80065a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065a8:	f7fa fac0 	bl	8000b2c <__aeabi_dcmplt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f040 8128 	bne.w	8006802 <_dtoa_r+0x68a>
 80065b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80065b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80065ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f2c0 815a 	blt.w	8006876 <_dtoa_r+0x6fe>
 80065c2:	2f0e      	cmp	r7, #14
 80065c4:	f300 8157 	bgt.w	8006876 <_dtoa_r+0x6fe>
 80065c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006734 <_dtoa_r+0x5bc>)
 80065ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065ce:	ed93 7b00 	vldr	d7, [r3]
 80065d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	ed8d 7b00 	vstr	d7, [sp]
 80065da:	da03      	bge.n	80065e4 <_dtoa_r+0x46c>
 80065dc:	9b07      	ldr	r3, [sp, #28]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f340 8101 	ble.w	80067e6 <_dtoa_r+0x66e>
 80065e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80065e8:	4656      	mov	r6, sl
 80065ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ee:	4620      	mov	r0, r4
 80065f0:	4629      	mov	r1, r5
 80065f2:	f7fa f953 	bl	800089c <__aeabi_ddiv>
 80065f6:	f7fa fad7 	bl	8000ba8 <__aeabi_d2iz>
 80065fa:	4680      	mov	r8, r0
 80065fc:	f7f9 ffba 	bl	8000574 <__aeabi_i2d>
 8006600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006604:	f7fa f820 	bl	8000648 <__aeabi_dmul>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4620      	mov	r0, r4
 800660e:	4629      	mov	r1, r5
 8006610:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006614:	f7f9 fe60 	bl	80002d8 <__aeabi_dsub>
 8006618:	f806 4b01 	strb.w	r4, [r6], #1
 800661c:	9d07      	ldr	r5, [sp, #28]
 800661e:	eba6 040a 	sub.w	r4, r6, sl
 8006622:	42a5      	cmp	r5, r4
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	f040 8117 	bne.w	800685a <_dtoa_r+0x6e2>
 800662c:	f7f9 fe56 	bl	80002dc <__adddf3>
 8006630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006634:	4604      	mov	r4, r0
 8006636:	460d      	mov	r5, r1
 8006638:	f7fa fa96 	bl	8000b68 <__aeabi_dcmpgt>
 800663c:	2800      	cmp	r0, #0
 800663e:	f040 80f9 	bne.w	8006834 <_dtoa_r+0x6bc>
 8006642:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	f7fa fa65 	bl	8000b18 <__aeabi_dcmpeq>
 800664e:	b118      	cbz	r0, 8006658 <_dtoa_r+0x4e0>
 8006650:	f018 0f01 	tst.w	r8, #1
 8006654:	f040 80ee 	bne.w	8006834 <_dtoa_r+0x6bc>
 8006658:	4649      	mov	r1, r9
 800665a:	4658      	mov	r0, fp
 800665c:	f000 fc90 	bl	8006f80 <_Bfree>
 8006660:	2300      	movs	r3, #0
 8006662:	7033      	strb	r3, [r6, #0]
 8006664:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006666:	3701      	adds	r7, #1
 8006668:	601f      	str	r7, [r3, #0]
 800666a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 831d 	beq.w	8006cac <_dtoa_r+0xb34>
 8006672:	601e      	str	r6, [r3, #0]
 8006674:	e31a      	b.n	8006cac <_dtoa_r+0xb34>
 8006676:	07e2      	lsls	r2, r4, #31
 8006678:	d505      	bpl.n	8006686 <_dtoa_r+0x50e>
 800667a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800667e:	f7f9 ffe3 	bl	8000648 <__aeabi_dmul>
 8006682:	3601      	adds	r6, #1
 8006684:	2301      	movs	r3, #1
 8006686:	1064      	asrs	r4, r4, #1
 8006688:	3508      	adds	r5, #8
 800668a:	e73f      	b.n	800650c <_dtoa_r+0x394>
 800668c:	2602      	movs	r6, #2
 800668e:	e742      	b.n	8006516 <_dtoa_r+0x39e>
 8006690:	9c07      	ldr	r4, [sp, #28]
 8006692:	9704      	str	r7, [sp, #16]
 8006694:	e761      	b.n	800655a <_dtoa_r+0x3e2>
 8006696:	4b27      	ldr	r3, [pc, #156]	@ (8006734 <_dtoa_r+0x5bc>)
 8006698:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800669a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800669e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066a2:	4454      	add	r4, sl
 80066a4:	2900      	cmp	r1, #0
 80066a6:	d053      	beq.n	8006750 <_dtoa_r+0x5d8>
 80066a8:	4928      	ldr	r1, [pc, #160]	@ (800674c <_dtoa_r+0x5d4>)
 80066aa:	2000      	movs	r0, #0
 80066ac:	f7fa f8f6 	bl	800089c <__aeabi_ddiv>
 80066b0:	4633      	mov	r3, r6
 80066b2:	462a      	mov	r2, r5
 80066b4:	f7f9 fe10 	bl	80002d8 <__aeabi_dsub>
 80066b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066bc:	4656      	mov	r6, sl
 80066be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066c2:	f7fa fa71 	bl	8000ba8 <__aeabi_d2iz>
 80066c6:	4605      	mov	r5, r0
 80066c8:	f7f9 ff54 	bl	8000574 <__aeabi_i2d>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066d4:	f7f9 fe00 	bl	80002d8 <__aeabi_dsub>
 80066d8:	3530      	adds	r5, #48	@ 0x30
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066e2:	f806 5b01 	strb.w	r5, [r6], #1
 80066e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066ea:	f7fa fa1f 	bl	8000b2c <__aeabi_dcmplt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d171      	bne.n	80067d6 <_dtoa_r+0x65e>
 80066f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066f6:	4911      	ldr	r1, [pc, #68]	@ (800673c <_dtoa_r+0x5c4>)
 80066f8:	2000      	movs	r0, #0
 80066fa:	f7f9 fded 	bl	80002d8 <__aeabi_dsub>
 80066fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006702:	f7fa fa13 	bl	8000b2c <__aeabi_dcmplt>
 8006706:	2800      	cmp	r0, #0
 8006708:	f040 8095 	bne.w	8006836 <_dtoa_r+0x6be>
 800670c:	42a6      	cmp	r6, r4
 800670e:	f43f af50 	beq.w	80065b2 <_dtoa_r+0x43a>
 8006712:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006716:	4b0a      	ldr	r3, [pc, #40]	@ (8006740 <_dtoa_r+0x5c8>)
 8006718:	2200      	movs	r2, #0
 800671a:	f7f9 ff95 	bl	8000648 <__aeabi_dmul>
 800671e:	4b08      	ldr	r3, [pc, #32]	@ (8006740 <_dtoa_r+0x5c8>)
 8006720:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006724:	2200      	movs	r2, #0
 8006726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800672a:	f7f9 ff8d 	bl	8000648 <__aeabi_dmul>
 800672e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006732:	e7c4      	b.n	80066be <_dtoa_r+0x546>
 8006734:	0800a7b0 	.word	0x0800a7b0
 8006738:	0800a788 	.word	0x0800a788
 800673c:	3ff00000 	.word	0x3ff00000
 8006740:	40240000 	.word	0x40240000
 8006744:	401c0000 	.word	0x401c0000
 8006748:	40140000 	.word	0x40140000
 800674c:	3fe00000 	.word	0x3fe00000
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	f7f9 ff78 	bl	8000648 <__aeabi_dmul>
 8006758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800675c:	9415      	str	r4, [sp, #84]	@ 0x54
 800675e:	4656      	mov	r6, sl
 8006760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006764:	f7fa fa20 	bl	8000ba8 <__aeabi_d2iz>
 8006768:	4605      	mov	r5, r0
 800676a:	f7f9 ff03 	bl	8000574 <__aeabi_i2d>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006776:	f7f9 fdaf 	bl	80002d8 <__aeabi_dsub>
 800677a:	3530      	adds	r5, #48	@ 0x30
 800677c:	f806 5b01 	strb.w	r5, [r6], #1
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	42a6      	cmp	r6, r4
 8006786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	d124      	bne.n	80067da <_dtoa_r+0x662>
 8006790:	4bac      	ldr	r3, [pc, #688]	@ (8006a44 <_dtoa_r+0x8cc>)
 8006792:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006796:	f7f9 fda1 	bl	80002dc <__adddf3>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a2:	f7fa f9e1 	bl	8000b68 <__aeabi_dcmpgt>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d145      	bne.n	8006836 <_dtoa_r+0x6be>
 80067aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067ae:	49a5      	ldr	r1, [pc, #660]	@ (8006a44 <_dtoa_r+0x8cc>)
 80067b0:	2000      	movs	r0, #0
 80067b2:	f7f9 fd91 	bl	80002d8 <__aeabi_dsub>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067be:	f7fa f9b5 	bl	8000b2c <__aeabi_dcmplt>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f43f aef5 	beq.w	80065b2 <_dtoa_r+0x43a>
 80067c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80067ca:	1e73      	subs	r3, r6, #1
 80067cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80067ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067d2:	2b30      	cmp	r3, #48	@ 0x30
 80067d4:	d0f8      	beq.n	80067c8 <_dtoa_r+0x650>
 80067d6:	9f04      	ldr	r7, [sp, #16]
 80067d8:	e73e      	b.n	8006658 <_dtoa_r+0x4e0>
 80067da:	4b9b      	ldr	r3, [pc, #620]	@ (8006a48 <_dtoa_r+0x8d0>)
 80067dc:	f7f9 ff34 	bl	8000648 <__aeabi_dmul>
 80067e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067e4:	e7bc      	b.n	8006760 <_dtoa_r+0x5e8>
 80067e6:	d10c      	bne.n	8006802 <_dtoa_r+0x68a>
 80067e8:	4b98      	ldr	r3, [pc, #608]	@ (8006a4c <_dtoa_r+0x8d4>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067f0:	f7f9 ff2a 	bl	8000648 <__aeabi_dmul>
 80067f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067f8:	f7fa f9ac 	bl	8000b54 <__aeabi_dcmpge>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f000 8157 	beq.w	8006ab0 <_dtoa_r+0x938>
 8006802:	2400      	movs	r4, #0
 8006804:	4625      	mov	r5, r4
 8006806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006808:	43db      	mvns	r3, r3
 800680a:	9304      	str	r3, [sp, #16]
 800680c:	4656      	mov	r6, sl
 800680e:	2700      	movs	r7, #0
 8006810:	4621      	mov	r1, r4
 8006812:	4658      	mov	r0, fp
 8006814:	f000 fbb4 	bl	8006f80 <_Bfree>
 8006818:	2d00      	cmp	r5, #0
 800681a:	d0dc      	beq.n	80067d6 <_dtoa_r+0x65e>
 800681c:	b12f      	cbz	r7, 800682a <_dtoa_r+0x6b2>
 800681e:	42af      	cmp	r7, r5
 8006820:	d003      	beq.n	800682a <_dtoa_r+0x6b2>
 8006822:	4639      	mov	r1, r7
 8006824:	4658      	mov	r0, fp
 8006826:	f000 fbab 	bl	8006f80 <_Bfree>
 800682a:	4629      	mov	r1, r5
 800682c:	4658      	mov	r0, fp
 800682e:	f000 fba7 	bl	8006f80 <_Bfree>
 8006832:	e7d0      	b.n	80067d6 <_dtoa_r+0x65e>
 8006834:	9704      	str	r7, [sp, #16]
 8006836:	4633      	mov	r3, r6
 8006838:	461e      	mov	r6, r3
 800683a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800683e:	2a39      	cmp	r2, #57	@ 0x39
 8006840:	d107      	bne.n	8006852 <_dtoa_r+0x6da>
 8006842:	459a      	cmp	sl, r3
 8006844:	d1f8      	bne.n	8006838 <_dtoa_r+0x6c0>
 8006846:	9a04      	ldr	r2, [sp, #16]
 8006848:	3201      	adds	r2, #1
 800684a:	9204      	str	r2, [sp, #16]
 800684c:	2230      	movs	r2, #48	@ 0x30
 800684e:	f88a 2000 	strb.w	r2, [sl]
 8006852:	781a      	ldrb	r2, [r3, #0]
 8006854:	3201      	adds	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e7bd      	b.n	80067d6 <_dtoa_r+0x65e>
 800685a:	4b7b      	ldr	r3, [pc, #492]	@ (8006a48 <_dtoa_r+0x8d0>)
 800685c:	2200      	movs	r2, #0
 800685e:	f7f9 fef3 	bl	8000648 <__aeabi_dmul>
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	4604      	mov	r4, r0
 8006868:	460d      	mov	r5, r1
 800686a:	f7fa f955 	bl	8000b18 <__aeabi_dcmpeq>
 800686e:	2800      	cmp	r0, #0
 8006870:	f43f aebb 	beq.w	80065ea <_dtoa_r+0x472>
 8006874:	e6f0      	b.n	8006658 <_dtoa_r+0x4e0>
 8006876:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006878:	2a00      	cmp	r2, #0
 800687a:	f000 80db 	beq.w	8006a34 <_dtoa_r+0x8bc>
 800687e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006880:	2a01      	cmp	r2, #1
 8006882:	f300 80bf 	bgt.w	8006a04 <_dtoa_r+0x88c>
 8006886:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006888:	2a00      	cmp	r2, #0
 800688a:	f000 80b7 	beq.w	80069fc <_dtoa_r+0x884>
 800688e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006892:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006894:	4646      	mov	r6, r8
 8006896:	9a08      	ldr	r2, [sp, #32]
 8006898:	2101      	movs	r1, #1
 800689a:	441a      	add	r2, r3
 800689c:	4658      	mov	r0, fp
 800689e:	4498      	add	r8, r3
 80068a0:	9208      	str	r2, [sp, #32]
 80068a2:	f000 fc6b 	bl	800717c <__i2b>
 80068a6:	4605      	mov	r5, r0
 80068a8:	b15e      	cbz	r6, 80068c2 <_dtoa_r+0x74a>
 80068aa:	9b08      	ldr	r3, [sp, #32]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	dd08      	ble.n	80068c2 <_dtoa_r+0x74a>
 80068b0:	42b3      	cmp	r3, r6
 80068b2:	9a08      	ldr	r2, [sp, #32]
 80068b4:	bfa8      	it	ge
 80068b6:	4633      	movge	r3, r6
 80068b8:	eba8 0803 	sub.w	r8, r8, r3
 80068bc:	1af6      	subs	r6, r6, r3
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	9308      	str	r3, [sp, #32]
 80068c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068c4:	b1f3      	cbz	r3, 8006904 <_dtoa_r+0x78c>
 80068c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 80b7 	beq.w	8006a3c <_dtoa_r+0x8c4>
 80068ce:	b18c      	cbz	r4, 80068f4 <_dtoa_r+0x77c>
 80068d0:	4629      	mov	r1, r5
 80068d2:	4622      	mov	r2, r4
 80068d4:	4658      	mov	r0, fp
 80068d6:	f000 fd11 	bl	80072fc <__pow5mult>
 80068da:	464a      	mov	r2, r9
 80068dc:	4601      	mov	r1, r0
 80068de:	4605      	mov	r5, r0
 80068e0:	4658      	mov	r0, fp
 80068e2:	f000 fc61 	bl	80071a8 <__multiply>
 80068e6:	4649      	mov	r1, r9
 80068e8:	9004      	str	r0, [sp, #16]
 80068ea:	4658      	mov	r0, fp
 80068ec:	f000 fb48 	bl	8006f80 <_Bfree>
 80068f0:	9b04      	ldr	r3, [sp, #16]
 80068f2:	4699      	mov	r9, r3
 80068f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068f6:	1b1a      	subs	r2, r3, r4
 80068f8:	d004      	beq.n	8006904 <_dtoa_r+0x78c>
 80068fa:	4649      	mov	r1, r9
 80068fc:	4658      	mov	r0, fp
 80068fe:	f000 fcfd 	bl	80072fc <__pow5mult>
 8006902:	4681      	mov	r9, r0
 8006904:	2101      	movs	r1, #1
 8006906:	4658      	mov	r0, fp
 8006908:	f000 fc38 	bl	800717c <__i2b>
 800690c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800690e:	4604      	mov	r4, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 81cf 	beq.w	8006cb4 <_dtoa_r+0xb3c>
 8006916:	461a      	mov	r2, r3
 8006918:	4601      	mov	r1, r0
 800691a:	4658      	mov	r0, fp
 800691c:	f000 fcee 	bl	80072fc <__pow5mult>
 8006920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006922:	2b01      	cmp	r3, #1
 8006924:	4604      	mov	r4, r0
 8006926:	f300 8095 	bgt.w	8006a54 <_dtoa_r+0x8dc>
 800692a:	9b02      	ldr	r3, [sp, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f040 8087 	bne.w	8006a40 <_dtoa_r+0x8c8>
 8006932:	9b03      	ldr	r3, [sp, #12]
 8006934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006938:	2b00      	cmp	r3, #0
 800693a:	f040 8089 	bne.w	8006a50 <_dtoa_r+0x8d8>
 800693e:	9b03      	ldr	r3, [sp, #12]
 8006940:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006944:	0d1b      	lsrs	r3, r3, #20
 8006946:	051b      	lsls	r3, r3, #20
 8006948:	b12b      	cbz	r3, 8006956 <_dtoa_r+0x7de>
 800694a:	9b08      	ldr	r3, [sp, #32]
 800694c:	3301      	adds	r3, #1
 800694e:	9308      	str	r3, [sp, #32]
 8006950:	f108 0801 	add.w	r8, r8, #1
 8006954:	2301      	movs	r3, #1
 8006956:	930a      	str	r3, [sp, #40]	@ 0x28
 8006958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 81b0 	beq.w	8006cc0 <_dtoa_r+0xb48>
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006966:	6918      	ldr	r0, [r3, #16]
 8006968:	f000 fbbc 	bl	80070e4 <__hi0bits>
 800696c:	f1c0 0020 	rsb	r0, r0, #32
 8006970:	9b08      	ldr	r3, [sp, #32]
 8006972:	4418      	add	r0, r3
 8006974:	f010 001f 	ands.w	r0, r0, #31
 8006978:	d077      	beq.n	8006a6a <_dtoa_r+0x8f2>
 800697a:	f1c0 0320 	rsb	r3, r0, #32
 800697e:	2b04      	cmp	r3, #4
 8006980:	dd6b      	ble.n	8006a5a <_dtoa_r+0x8e2>
 8006982:	9b08      	ldr	r3, [sp, #32]
 8006984:	f1c0 001c 	rsb	r0, r0, #28
 8006988:	4403      	add	r3, r0
 800698a:	4480      	add	r8, r0
 800698c:	4406      	add	r6, r0
 800698e:	9308      	str	r3, [sp, #32]
 8006990:	f1b8 0f00 	cmp.w	r8, #0
 8006994:	dd05      	ble.n	80069a2 <_dtoa_r+0x82a>
 8006996:	4649      	mov	r1, r9
 8006998:	4642      	mov	r2, r8
 800699a:	4658      	mov	r0, fp
 800699c:	f000 fd08 	bl	80073b0 <__lshift>
 80069a0:	4681      	mov	r9, r0
 80069a2:	9b08      	ldr	r3, [sp, #32]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	dd05      	ble.n	80069b4 <_dtoa_r+0x83c>
 80069a8:	4621      	mov	r1, r4
 80069aa:	461a      	mov	r2, r3
 80069ac:	4658      	mov	r0, fp
 80069ae:	f000 fcff 	bl	80073b0 <__lshift>
 80069b2:	4604      	mov	r4, r0
 80069b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d059      	beq.n	8006a6e <_dtoa_r+0x8f6>
 80069ba:	4621      	mov	r1, r4
 80069bc:	4648      	mov	r0, r9
 80069be:	f000 fd63 	bl	8007488 <__mcmp>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	da53      	bge.n	8006a6e <_dtoa_r+0x8f6>
 80069c6:	1e7b      	subs	r3, r7, #1
 80069c8:	9304      	str	r3, [sp, #16]
 80069ca:	4649      	mov	r1, r9
 80069cc:	2300      	movs	r3, #0
 80069ce:	220a      	movs	r2, #10
 80069d0:	4658      	mov	r0, fp
 80069d2:	f000 faf7 	bl	8006fc4 <__multadd>
 80069d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069d8:	4681      	mov	r9, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8172 	beq.w	8006cc4 <_dtoa_r+0xb4c>
 80069e0:	2300      	movs	r3, #0
 80069e2:	4629      	mov	r1, r5
 80069e4:	220a      	movs	r2, #10
 80069e6:	4658      	mov	r0, fp
 80069e8:	f000 faec 	bl	8006fc4 <__multadd>
 80069ec:	9b00      	ldr	r3, [sp, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	4605      	mov	r5, r0
 80069f2:	dc67      	bgt.n	8006ac4 <_dtoa_r+0x94c>
 80069f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	dc41      	bgt.n	8006a7e <_dtoa_r+0x906>
 80069fa:	e063      	b.n	8006ac4 <_dtoa_r+0x94c>
 80069fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80069fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a02:	e746      	b.n	8006892 <_dtoa_r+0x71a>
 8006a04:	9b07      	ldr	r3, [sp, #28]
 8006a06:	1e5c      	subs	r4, r3, #1
 8006a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a0a:	42a3      	cmp	r3, r4
 8006a0c:	bfbf      	itttt	lt
 8006a0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006a12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a14:	1ae3      	sublt	r3, r4, r3
 8006a16:	bfb4      	ite	lt
 8006a18:	18d2      	addlt	r2, r2, r3
 8006a1a:	1b1c      	subge	r4, r3, r4
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	bfbc      	itt	lt
 8006a20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006a22:	2400      	movlt	r4, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	bfb5      	itete	lt
 8006a28:	eba8 0603 	sublt.w	r6, r8, r3
 8006a2c:	9b07      	ldrge	r3, [sp, #28]
 8006a2e:	2300      	movlt	r3, #0
 8006a30:	4646      	movge	r6, r8
 8006a32:	e730      	b.n	8006896 <_dtoa_r+0x71e>
 8006a34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a38:	4646      	mov	r6, r8
 8006a3a:	e735      	b.n	80068a8 <_dtoa_r+0x730>
 8006a3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a3e:	e75c      	b.n	80068fa <_dtoa_r+0x782>
 8006a40:	2300      	movs	r3, #0
 8006a42:	e788      	b.n	8006956 <_dtoa_r+0x7de>
 8006a44:	3fe00000 	.word	0x3fe00000
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	40140000 	.word	0x40140000
 8006a50:	9b02      	ldr	r3, [sp, #8]
 8006a52:	e780      	b.n	8006956 <_dtoa_r+0x7de>
 8006a54:	2300      	movs	r3, #0
 8006a56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a58:	e782      	b.n	8006960 <_dtoa_r+0x7e8>
 8006a5a:	d099      	beq.n	8006990 <_dtoa_r+0x818>
 8006a5c:	9a08      	ldr	r2, [sp, #32]
 8006a5e:	331c      	adds	r3, #28
 8006a60:	441a      	add	r2, r3
 8006a62:	4498      	add	r8, r3
 8006a64:	441e      	add	r6, r3
 8006a66:	9208      	str	r2, [sp, #32]
 8006a68:	e792      	b.n	8006990 <_dtoa_r+0x818>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	e7f6      	b.n	8006a5c <_dtoa_r+0x8e4>
 8006a6e:	9b07      	ldr	r3, [sp, #28]
 8006a70:	9704      	str	r7, [sp, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dc20      	bgt.n	8006ab8 <_dtoa_r+0x940>
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	dd1e      	ble.n	8006abc <_dtoa_r+0x944>
 8006a7e:	9b00      	ldr	r3, [sp, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f47f aec0 	bne.w	8006806 <_dtoa_r+0x68e>
 8006a86:	4621      	mov	r1, r4
 8006a88:	2205      	movs	r2, #5
 8006a8a:	4658      	mov	r0, fp
 8006a8c:	f000 fa9a 	bl	8006fc4 <__multadd>
 8006a90:	4601      	mov	r1, r0
 8006a92:	4604      	mov	r4, r0
 8006a94:	4648      	mov	r0, r9
 8006a96:	f000 fcf7 	bl	8007488 <__mcmp>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	f77f aeb3 	ble.w	8006806 <_dtoa_r+0x68e>
 8006aa0:	4656      	mov	r6, sl
 8006aa2:	2331      	movs	r3, #49	@ 0x31
 8006aa4:	f806 3b01 	strb.w	r3, [r6], #1
 8006aa8:	9b04      	ldr	r3, [sp, #16]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	9304      	str	r3, [sp, #16]
 8006aae:	e6ae      	b.n	800680e <_dtoa_r+0x696>
 8006ab0:	9c07      	ldr	r4, [sp, #28]
 8006ab2:	9704      	str	r7, [sp, #16]
 8006ab4:	4625      	mov	r5, r4
 8006ab6:	e7f3      	b.n	8006aa0 <_dtoa_r+0x928>
 8006ab8:	9b07      	ldr	r3, [sp, #28]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 8104 	beq.w	8006ccc <_dtoa_r+0xb54>
 8006ac4:	2e00      	cmp	r6, #0
 8006ac6:	dd05      	ble.n	8006ad4 <_dtoa_r+0x95c>
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4632      	mov	r2, r6
 8006acc:	4658      	mov	r0, fp
 8006ace:	f000 fc6f 	bl	80073b0 <__lshift>
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d05a      	beq.n	8006b90 <_dtoa_r+0xa18>
 8006ada:	6869      	ldr	r1, [r5, #4]
 8006adc:	4658      	mov	r0, fp
 8006ade:	f000 fa0f 	bl	8006f00 <_Balloc>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	b928      	cbnz	r0, 8006af2 <_dtoa_r+0x97a>
 8006ae6:	4b84      	ldr	r3, [pc, #528]	@ (8006cf8 <_dtoa_r+0xb80>)
 8006ae8:	4602      	mov	r2, r0
 8006aea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006aee:	f7ff bb5a 	b.w	80061a6 <_dtoa_r+0x2e>
 8006af2:	692a      	ldr	r2, [r5, #16]
 8006af4:	3202      	adds	r2, #2
 8006af6:	0092      	lsls	r2, r2, #2
 8006af8:	f105 010c 	add.w	r1, r5, #12
 8006afc:	300c      	adds	r0, #12
 8006afe:	f001 ff75 	bl	80089ec <memcpy>
 8006b02:	2201      	movs	r2, #1
 8006b04:	4631      	mov	r1, r6
 8006b06:	4658      	mov	r0, fp
 8006b08:	f000 fc52 	bl	80073b0 <__lshift>
 8006b0c:	f10a 0301 	add.w	r3, sl, #1
 8006b10:	9307      	str	r3, [sp, #28]
 8006b12:	9b00      	ldr	r3, [sp, #0]
 8006b14:	4453      	add	r3, sl
 8006b16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b18:	9b02      	ldr	r3, [sp, #8]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	462f      	mov	r7, r5
 8006b20:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b22:	4605      	mov	r5, r0
 8006b24:	9b07      	ldr	r3, [sp, #28]
 8006b26:	4621      	mov	r1, r4
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	4648      	mov	r0, r9
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	f7ff fa99 	bl	8006064 <quorem>
 8006b32:	4639      	mov	r1, r7
 8006b34:	9002      	str	r0, [sp, #8]
 8006b36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b3a:	4648      	mov	r0, r9
 8006b3c:	f000 fca4 	bl	8007488 <__mcmp>
 8006b40:	462a      	mov	r2, r5
 8006b42:	9008      	str	r0, [sp, #32]
 8006b44:	4621      	mov	r1, r4
 8006b46:	4658      	mov	r0, fp
 8006b48:	f000 fcba 	bl	80074c0 <__mdiff>
 8006b4c:	68c2      	ldr	r2, [r0, #12]
 8006b4e:	4606      	mov	r6, r0
 8006b50:	bb02      	cbnz	r2, 8006b94 <_dtoa_r+0xa1c>
 8006b52:	4601      	mov	r1, r0
 8006b54:	4648      	mov	r0, r9
 8006b56:	f000 fc97 	bl	8007488 <__mcmp>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4658      	mov	r0, fp
 8006b60:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b62:	f000 fa0d 	bl	8006f80 <_Bfree>
 8006b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b6a:	9e07      	ldr	r6, [sp, #28]
 8006b6c:	ea43 0102 	orr.w	r1, r3, r2
 8006b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b72:	4319      	orrs	r1, r3
 8006b74:	d110      	bne.n	8006b98 <_dtoa_r+0xa20>
 8006b76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b7a:	d029      	beq.n	8006bd0 <_dtoa_r+0xa58>
 8006b7c:	9b08      	ldr	r3, [sp, #32]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	dd02      	ble.n	8006b88 <_dtoa_r+0xa10>
 8006b82:	9b02      	ldr	r3, [sp, #8]
 8006b84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b88:	9b00      	ldr	r3, [sp, #0]
 8006b8a:	f883 8000 	strb.w	r8, [r3]
 8006b8e:	e63f      	b.n	8006810 <_dtoa_r+0x698>
 8006b90:	4628      	mov	r0, r5
 8006b92:	e7bb      	b.n	8006b0c <_dtoa_r+0x994>
 8006b94:	2201      	movs	r2, #1
 8006b96:	e7e1      	b.n	8006b5c <_dtoa_r+0x9e4>
 8006b98:	9b08      	ldr	r3, [sp, #32]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	db04      	blt.n	8006ba8 <_dtoa_r+0xa30>
 8006b9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	d120      	bne.n	8006bea <_dtoa_r+0xa72>
 8006ba8:	2a00      	cmp	r2, #0
 8006baa:	dded      	ble.n	8006b88 <_dtoa_r+0xa10>
 8006bac:	4649      	mov	r1, r9
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4658      	mov	r0, fp
 8006bb2:	f000 fbfd 	bl	80073b0 <__lshift>
 8006bb6:	4621      	mov	r1, r4
 8006bb8:	4681      	mov	r9, r0
 8006bba:	f000 fc65 	bl	8007488 <__mcmp>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	dc03      	bgt.n	8006bca <_dtoa_r+0xa52>
 8006bc2:	d1e1      	bne.n	8006b88 <_dtoa_r+0xa10>
 8006bc4:	f018 0f01 	tst.w	r8, #1
 8006bc8:	d0de      	beq.n	8006b88 <_dtoa_r+0xa10>
 8006bca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bce:	d1d8      	bne.n	8006b82 <_dtoa_r+0xa0a>
 8006bd0:	9a00      	ldr	r2, [sp, #0]
 8006bd2:	2339      	movs	r3, #57	@ 0x39
 8006bd4:	7013      	strb	r3, [r2, #0]
 8006bd6:	4633      	mov	r3, r6
 8006bd8:	461e      	mov	r6, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006be0:	2a39      	cmp	r2, #57	@ 0x39
 8006be2:	d052      	beq.n	8006c8a <_dtoa_r+0xb12>
 8006be4:	3201      	adds	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	e612      	b.n	8006810 <_dtoa_r+0x698>
 8006bea:	2a00      	cmp	r2, #0
 8006bec:	dd07      	ble.n	8006bfe <_dtoa_r+0xa86>
 8006bee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bf2:	d0ed      	beq.n	8006bd0 <_dtoa_r+0xa58>
 8006bf4:	9a00      	ldr	r2, [sp, #0]
 8006bf6:	f108 0301 	add.w	r3, r8, #1
 8006bfa:	7013      	strb	r3, [r2, #0]
 8006bfc:	e608      	b.n	8006810 <_dtoa_r+0x698>
 8006bfe:	9b07      	ldr	r3, [sp, #28]
 8006c00:	9a07      	ldr	r2, [sp, #28]
 8006c02:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d028      	beq.n	8006c5e <_dtoa_r+0xae6>
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	2300      	movs	r3, #0
 8006c10:	220a      	movs	r2, #10
 8006c12:	4658      	mov	r0, fp
 8006c14:	f000 f9d6 	bl	8006fc4 <__multadd>
 8006c18:	42af      	cmp	r7, r5
 8006c1a:	4681      	mov	r9, r0
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	f04f 020a 	mov.w	r2, #10
 8006c24:	4639      	mov	r1, r7
 8006c26:	4658      	mov	r0, fp
 8006c28:	d107      	bne.n	8006c3a <_dtoa_r+0xac2>
 8006c2a:	f000 f9cb 	bl	8006fc4 <__multadd>
 8006c2e:	4607      	mov	r7, r0
 8006c30:	4605      	mov	r5, r0
 8006c32:	9b07      	ldr	r3, [sp, #28]
 8006c34:	3301      	adds	r3, #1
 8006c36:	9307      	str	r3, [sp, #28]
 8006c38:	e774      	b.n	8006b24 <_dtoa_r+0x9ac>
 8006c3a:	f000 f9c3 	bl	8006fc4 <__multadd>
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4607      	mov	r7, r0
 8006c42:	2300      	movs	r3, #0
 8006c44:	220a      	movs	r2, #10
 8006c46:	4658      	mov	r0, fp
 8006c48:	f000 f9bc 	bl	8006fc4 <__multadd>
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	e7f0      	b.n	8006c32 <_dtoa_r+0xaba>
 8006c50:	9b00      	ldr	r3, [sp, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	bfcc      	ite	gt
 8006c56:	461e      	movgt	r6, r3
 8006c58:	2601      	movle	r6, #1
 8006c5a:	4456      	add	r6, sl
 8006c5c:	2700      	movs	r7, #0
 8006c5e:	4649      	mov	r1, r9
 8006c60:	2201      	movs	r2, #1
 8006c62:	4658      	mov	r0, fp
 8006c64:	f000 fba4 	bl	80073b0 <__lshift>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4681      	mov	r9, r0
 8006c6c:	f000 fc0c 	bl	8007488 <__mcmp>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	dcb0      	bgt.n	8006bd6 <_dtoa_r+0xa5e>
 8006c74:	d102      	bne.n	8006c7c <_dtoa_r+0xb04>
 8006c76:	f018 0f01 	tst.w	r8, #1
 8006c7a:	d1ac      	bne.n	8006bd6 <_dtoa_r+0xa5e>
 8006c7c:	4633      	mov	r3, r6
 8006c7e:	461e      	mov	r6, r3
 8006c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c84:	2a30      	cmp	r2, #48	@ 0x30
 8006c86:	d0fa      	beq.n	8006c7e <_dtoa_r+0xb06>
 8006c88:	e5c2      	b.n	8006810 <_dtoa_r+0x698>
 8006c8a:	459a      	cmp	sl, r3
 8006c8c:	d1a4      	bne.n	8006bd8 <_dtoa_r+0xa60>
 8006c8e:	9b04      	ldr	r3, [sp, #16]
 8006c90:	3301      	adds	r3, #1
 8006c92:	9304      	str	r3, [sp, #16]
 8006c94:	2331      	movs	r3, #49	@ 0x31
 8006c96:	f88a 3000 	strb.w	r3, [sl]
 8006c9a:	e5b9      	b.n	8006810 <_dtoa_r+0x698>
 8006c9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006cfc <_dtoa_r+0xb84>
 8006ca2:	b11b      	cbz	r3, 8006cac <_dtoa_r+0xb34>
 8006ca4:	f10a 0308 	add.w	r3, sl, #8
 8006ca8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	4650      	mov	r0, sl
 8006cae:	b019      	add	sp, #100	@ 0x64
 8006cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	f77f ae37 	ble.w	800692a <_dtoa_r+0x7b2>
 8006cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	e655      	b.n	8006970 <_dtoa_r+0x7f8>
 8006cc4:	9b00      	ldr	r3, [sp, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f77f aed6 	ble.w	8006a78 <_dtoa_r+0x900>
 8006ccc:	4656      	mov	r6, sl
 8006cce:	4621      	mov	r1, r4
 8006cd0:	4648      	mov	r0, r9
 8006cd2:	f7ff f9c7 	bl	8006064 <quorem>
 8006cd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006cda:	f806 8b01 	strb.w	r8, [r6], #1
 8006cde:	9b00      	ldr	r3, [sp, #0]
 8006ce0:	eba6 020a 	sub.w	r2, r6, sl
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	ddb3      	ble.n	8006c50 <_dtoa_r+0xad8>
 8006ce8:	4649      	mov	r1, r9
 8006cea:	2300      	movs	r3, #0
 8006cec:	220a      	movs	r2, #10
 8006cee:	4658      	mov	r0, fp
 8006cf0:	f000 f968 	bl	8006fc4 <__multadd>
 8006cf4:	4681      	mov	r9, r0
 8006cf6:	e7ea      	b.n	8006cce <_dtoa_r+0xb56>
 8006cf8:	0800a711 	.word	0x0800a711
 8006cfc:	0800a695 	.word	0x0800a695

08006d00 <_free_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4605      	mov	r5, r0
 8006d04:	2900      	cmp	r1, #0
 8006d06:	d041      	beq.n	8006d8c <_free_r+0x8c>
 8006d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d0c:	1f0c      	subs	r4, r1, #4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bfb8      	it	lt
 8006d12:	18e4      	addlt	r4, r4, r3
 8006d14:	f000 f8e8 	bl	8006ee8 <__malloc_lock>
 8006d18:	4a1d      	ldr	r2, [pc, #116]	@ (8006d90 <_free_r+0x90>)
 8006d1a:	6813      	ldr	r3, [r2, #0]
 8006d1c:	b933      	cbnz	r3, 8006d2c <_free_r+0x2c>
 8006d1e:	6063      	str	r3, [r4, #4]
 8006d20:	6014      	str	r4, [r2, #0]
 8006d22:	4628      	mov	r0, r5
 8006d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d28:	f000 b8e4 	b.w	8006ef4 <__malloc_unlock>
 8006d2c:	42a3      	cmp	r3, r4
 8006d2e:	d908      	bls.n	8006d42 <_free_r+0x42>
 8006d30:	6820      	ldr	r0, [r4, #0]
 8006d32:	1821      	adds	r1, r4, r0
 8006d34:	428b      	cmp	r3, r1
 8006d36:	bf01      	itttt	eq
 8006d38:	6819      	ldreq	r1, [r3, #0]
 8006d3a:	685b      	ldreq	r3, [r3, #4]
 8006d3c:	1809      	addeq	r1, r1, r0
 8006d3e:	6021      	streq	r1, [r4, #0]
 8006d40:	e7ed      	b.n	8006d1e <_free_r+0x1e>
 8006d42:	461a      	mov	r2, r3
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	b10b      	cbz	r3, 8006d4c <_free_r+0x4c>
 8006d48:	42a3      	cmp	r3, r4
 8006d4a:	d9fa      	bls.n	8006d42 <_free_r+0x42>
 8006d4c:	6811      	ldr	r1, [r2, #0]
 8006d4e:	1850      	adds	r0, r2, r1
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d10b      	bne.n	8006d6c <_free_r+0x6c>
 8006d54:	6820      	ldr	r0, [r4, #0]
 8006d56:	4401      	add	r1, r0
 8006d58:	1850      	adds	r0, r2, r1
 8006d5a:	4283      	cmp	r3, r0
 8006d5c:	6011      	str	r1, [r2, #0]
 8006d5e:	d1e0      	bne.n	8006d22 <_free_r+0x22>
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	6053      	str	r3, [r2, #4]
 8006d66:	4408      	add	r0, r1
 8006d68:	6010      	str	r0, [r2, #0]
 8006d6a:	e7da      	b.n	8006d22 <_free_r+0x22>
 8006d6c:	d902      	bls.n	8006d74 <_free_r+0x74>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	e7d6      	b.n	8006d22 <_free_r+0x22>
 8006d74:	6820      	ldr	r0, [r4, #0]
 8006d76:	1821      	adds	r1, r4, r0
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	bf04      	itt	eq
 8006d7c:	6819      	ldreq	r1, [r3, #0]
 8006d7e:	685b      	ldreq	r3, [r3, #4]
 8006d80:	6063      	str	r3, [r4, #4]
 8006d82:	bf04      	itt	eq
 8006d84:	1809      	addeq	r1, r1, r0
 8006d86:	6021      	streq	r1, [r4, #0]
 8006d88:	6054      	str	r4, [r2, #4]
 8006d8a:	e7ca      	b.n	8006d22 <_free_r+0x22>
 8006d8c:	bd38      	pop	{r3, r4, r5, pc}
 8006d8e:	bf00      	nop
 8006d90:	200004f0 	.word	0x200004f0

08006d94 <malloc>:
 8006d94:	4b02      	ldr	r3, [pc, #8]	@ (8006da0 <malloc+0xc>)
 8006d96:	4601      	mov	r1, r0
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	f000 b825 	b.w	8006de8 <_malloc_r>
 8006d9e:	bf00      	nop
 8006da0:	20000018 	.word	0x20000018

08006da4 <sbrk_aligned>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	4e0f      	ldr	r6, [pc, #60]	@ (8006de4 <sbrk_aligned+0x40>)
 8006da8:	460c      	mov	r4, r1
 8006daa:	6831      	ldr	r1, [r6, #0]
 8006dac:	4605      	mov	r5, r0
 8006dae:	b911      	cbnz	r1, 8006db6 <sbrk_aligned+0x12>
 8006db0:	f001 fe0c 	bl	80089cc <_sbrk_r>
 8006db4:	6030      	str	r0, [r6, #0]
 8006db6:	4621      	mov	r1, r4
 8006db8:	4628      	mov	r0, r5
 8006dba:	f001 fe07 	bl	80089cc <_sbrk_r>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	d103      	bne.n	8006dca <sbrk_aligned+0x26>
 8006dc2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	bd70      	pop	{r4, r5, r6, pc}
 8006dca:	1cc4      	adds	r4, r0, #3
 8006dcc:	f024 0403 	bic.w	r4, r4, #3
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d0f8      	beq.n	8006dc6 <sbrk_aligned+0x22>
 8006dd4:	1a21      	subs	r1, r4, r0
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	f001 fdf8 	bl	80089cc <_sbrk_r>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d1f2      	bne.n	8006dc6 <sbrk_aligned+0x22>
 8006de0:	e7ef      	b.n	8006dc2 <sbrk_aligned+0x1e>
 8006de2:	bf00      	nop
 8006de4:	200004ec 	.word	0x200004ec

08006de8 <_malloc_r>:
 8006de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dec:	1ccd      	adds	r5, r1, #3
 8006dee:	f025 0503 	bic.w	r5, r5, #3
 8006df2:	3508      	adds	r5, #8
 8006df4:	2d0c      	cmp	r5, #12
 8006df6:	bf38      	it	cc
 8006df8:	250c      	movcc	r5, #12
 8006dfa:	2d00      	cmp	r5, #0
 8006dfc:	4606      	mov	r6, r0
 8006dfe:	db01      	blt.n	8006e04 <_malloc_r+0x1c>
 8006e00:	42a9      	cmp	r1, r5
 8006e02:	d904      	bls.n	8006e0e <_malloc_r+0x26>
 8006e04:	230c      	movs	r3, #12
 8006e06:	6033      	str	r3, [r6, #0]
 8006e08:	2000      	movs	r0, #0
 8006e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ee4 <_malloc_r+0xfc>
 8006e12:	f000 f869 	bl	8006ee8 <__malloc_lock>
 8006e16:	f8d8 3000 	ldr.w	r3, [r8]
 8006e1a:	461c      	mov	r4, r3
 8006e1c:	bb44      	cbnz	r4, 8006e70 <_malloc_r+0x88>
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4630      	mov	r0, r6
 8006e22:	f7ff ffbf 	bl	8006da4 <sbrk_aligned>
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	4604      	mov	r4, r0
 8006e2a:	d158      	bne.n	8006ede <_malloc_r+0xf6>
 8006e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8006e30:	4627      	mov	r7, r4
 8006e32:	2f00      	cmp	r7, #0
 8006e34:	d143      	bne.n	8006ebe <_malloc_r+0xd6>
 8006e36:	2c00      	cmp	r4, #0
 8006e38:	d04b      	beq.n	8006ed2 <_malloc_r+0xea>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	4630      	mov	r0, r6
 8006e40:	eb04 0903 	add.w	r9, r4, r3
 8006e44:	f001 fdc2 	bl	80089cc <_sbrk_r>
 8006e48:	4581      	cmp	r9, r0
 8006e4a:	d142      	bne.n	8006ed2 <_malloc_r+0xea>
 8006e4c:	6821      	ldr	r1, [r4, #0]
 8006e4e:	1a6d      	subs	r5, r5, r1
 8006e50:	4629      	mov	r1, r5
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7ff ffa6 	bl	8006da4 <sbrk_aligned>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d03a      	beq.n	8006ed2 <_malloc_r+0xea>
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	442b      	add	r3, r5
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	f8d8 3000 	ldr.w	r3, [r8]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	bb62      	cbnz	r2, 8006ec4 <_malloc_r+0xdc>
 8006e6a:	f8c8 7000 	str.w	r7, [r8]
 8006e6e:	e00f      	b.n	8006e90 <_malloc_r+0xa8>
 8006e70:	6822      	ldr	r2, [r4, #0]
 8006e72:	1b52      	subs	r2, r2, r5
 8006e74:	d420      	bmi.n	8006eb8 <_malloc_r+0xd0>
 8006e76:	2a0b      	cmp	r2, #11
 8006e78:	d917      	bls.n	8006eaa <_malloc_r+0xc2>
 8006e7a:	1961      	adds	r1, r4, r5
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	6025      	str	r5, [r4, #0]
 8006e80:	bf18      	it	ne
 8006e82:	6059      	strne	r1, [r3, #4]
 8006e84:	6863      	ldr	r3, [r4, #4]
 8006e86:	bf08      	it	eq
 8006e88:	f8c8 1000 	streq.w	r1, [r8]
 8006e8c:	5162      	str	r2, [r4, r5]
 8006e8e:	604b      	str	r3, [r1, #4]
 8006e90:	4630      	mov	r0, r6
 8006e92:	f000 f82f 	bl	8006ef4 <__malloc_unlock>
 8006e96:	f104 000b 	add.w	r0, r4, #11
 8006e9a:	1d23      	adds	r3, r4, #4
 8006e9c:	f020 0007 	bic.w	r0, r0, #7
 8006ea0:	1ac2      	subs	r2, r0, r3
 8006ea2:	bf1c      	itt	ne
 8006ea4:	1a1b      	subne	r3, r3, r0
 8006ea6:	50a3      	strne	r3, [r4, r2]
 8006ea8:	e7af      	b.n	8006e0a <_malloc_r+0x22>
 8006eaa:	6862      	ldr	r2, [r4, #4]
 8006eac:	42a3      	cmp	r3, r4
 8006eae:	bf0c      	ite	eq
 8006eb0:	f8c8 2000 	streq.w	r2, [r8]
 8006eb4:	605a      	strne	r2, [r3, #4]
 8006eb6:	e7eb      	b.n	8006e90 <_malloc_r+0xa8>
 8006eb8:	4623      	mov	r3, r4
 8006eba:	6864      	ldr	r4, [r4, #4]
 8006ebc:	e7ae      	b.n	8006e1c <_malloc_r+0x34>
 8006ebe:	463c      	mov	r4, r7
 8006ec0:	687f      	ldr	r7, [r7, #4]
 8006ec2:	e7b6      	b.n	8006e32 <_malloc_r+0x4a>
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	d1fb      	bne.n	8006ec4 <_malloc_r+0xdc>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	6053      	str	r3, [r2, #4]
 8006ed0:	e7de      	b.n	8006e90 <_malloc_r+0xa8>
 8006ed2:	230c      	movs	r3, #12
 8006ed4:	6033      	str	r3, [r6, #0]
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f000 f80c 	bl	8006ef4 <__malloc_unlock>
 8006edc:	e794      	b.n	8006e08 <_malloc_r+0x20>
 8006ede:	6005      	str	r5, [r0, #0]
 8006ee0:	e7d6      	b.n	8006e90 <_malloc_r+0xa8>
 8006ee2:	bf00      	nop
 8006ee4:	200004f0 	.word	0x200004f0

08006ee8 <__malloc_lock>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	@ (8006ef0 <__malloc_lock+0x8>)
 8006eea:	f7ff b8b2 	b.w	8006052 <__retarget_lock_acquire_recursive>
 8006eee:	bf00      	nop
 8006ef0:	200004e8 	.word	0x200004e8

08006ef4 <__malloc_unlock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	@ (8006efc <__malloc_unlock+0x8>)
 8006ef6:	f7ff b8ad 	b.w	8006054 <__retarget_lock_release_recursive>
 8006efa:	bf00      	nop
 8006efc:	200004e8 	.word	0x200004e8

08006f00 <_Balloc>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	69c6      	ldr	r6, [r0, #28]
 8006f04:	4604      	mov	r4, r0
 8006f06:	460d      	mov	r5, r1
 8006f08:	b976      	cbnz	r6, 8006f28 <_Balloc+0x28>
 8006f0a:	2010      	movs	r0, #16
 8006f0c:	f7ff ff42 	bl	8006d94 <malloc>
 8006f10:	4602      	mov	r2, r0
 8006f12:	61e0      	str	r0, [r4, #28]
 8006f14:	b920      	cbnz	r0, 8006f20 <_Balloc+0x20>
 8006f16:	4b18      	ldr	r3, [pc, #96]	@ (8006f78 <_Balloc+0x78>)
 8006f18:	4818      	ldr	r0, [pc, #96]	@ (8006f7c <_Balloc+0x7c>)
 8006f1a:	216b      	movs	r1, #107	@ 0x6b
 8006f1c:	f001 fd7c 	bl	8008a18 <__assert_func>
 8006f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f24:	6006      	str	r6, [r0, #0]
 8006f26:	60c6      	str	r6, [r0, #12]
 8006f28:	69e6      	ldr	r6, [r4, #28]
 8006f2a:	68f3      	ldr	r3, [r6, #12]
 8006f2c:	b183      	cbz	r3, 8006f50 <_Balloc+0x50>
 8006f2e:	69e3      	ldr	r3, [r4, #28]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f36:	b9b8      	cbnz	r0, 8006f68 <_Balloc+0x68>
 8006f38:	2101      	movs	r1, #1
 8006f3a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f3e:	1d72      	adds	r2, r6, #5
 8006f40:	0092      	lsls	r2, r2, #2
 8006f42:	4620      	mov	r0, r4
 8006f44:	f001 fd86 	bl	8008a54 <_calloc_r>
 8006f48:	b160      	cbz	r0, 8006f64 <_Balloc+0x64>
 8006f4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f4e:	e00e      	b.n	8006f6e <_Balloc+0x6e>
 8006f50:	2221      	movs	r2, #33	@ 0x21
 8006f52:	2104      	movs	r1, #4
 8006f54:	4620      	mov	r0, r4
 8006f56:	f001 fd7d 	bl	8008a54 <_calloc_r>
 8006f5a:	69e3      	ldr	r3, [r4, #28]
 8006f5c:	60f0      	str	r0, [r6, #12]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e4      	bne.n	8006f2e <_Balloc+0x2e>
 8006f64:	2000      	movs	r0, #0
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	6802      	ldr	r2, [r0, #0]
 8006f6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f74:	e7f7      	b.n	8006f66 <_Balloc+0x66>
 8006f76:	bf00      	nop
 8006f78:	0800a6a2 	.word	0x0800a6a2
 8006f7c:	0800a722 	.word	0x0800a722

08006f80 <_Bfree>:
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	69c6      	ldr	r6, [r0, #28]
 8006f84:	4605      	mov	r5, r0
 8006f86:	460c      	mov	r4, r1
 8006f88:	b976      	cbnz	r6, 8006fa8 <_Bfree+0x28>
 8006f8a:	2010      	movs	r0, #16
 8006f8c:	f7ff ff02 	bl	8006d94 <malloc>
 8006f90:	4602      	mov	r2, r0
 8006f92:	61e8      	str	r0, [r5, #28]
 8006f94:	b920      	cbnz	r0, 8006fa0 <_Bfree+0x20>
 8006f96:	4b09      	ldr	r3, [pc, #36]	@ (8006fbc <_Bfree+0x3c>)
 8006f98:	4809      	ldr	r0, [pc, #36]	@ (8006fc0 <_Bfree+0x40>)
 8006f9a:	218f      	movs	r1, #143	@ 0x8f
 8006f9c:	f001 fd3c 	bl	8008a18 <__assert_func>
 8006fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fa4:	6006      	str	r6, [r0, #0]
 8006fa6:	60c6      	str	r6, [r0, #12]
 8006fa8:	b13c      	cbz	r4, 8006fba <_Bfree+0x3a>
 8006faa:	69eb      	ldr	r3, [r5, #28]
 8006fac:	6862      	ldr	r2, [r4, #4]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fb4:	6021      	str	r1, [r4, #0]
 8006fb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	0800a6a2 	.word	0x0800a6a2
 8006fc0:	0800a722 	.word	0x0800a722

08006fc4 <__multadd>:
 8006fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fc8:	690d      	ldr	r5, [r1, #16]
 8006fca:	4607      	mov	r7, r0
 8006fcc:	460c      	mov	r4, r1
 8006fce:	461e      	mov	r6, r3
 8006fd0:	f101 0c14 	add.w	ip, r1, #20
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f8dc 3000 	ldr.w	r3, [ip]
 8006fda:	b299      	uxth	r1, r3
 8006fdc:	fb02 6101 	mla	r1, r2, r1, r6
 8006fe0:	0c1e      	lsrs	r6, r3, #16
 8006fe2:	0c0b      	lsrs	r3, r1, #16
 8006fe4:	fb02 3306 	mla	r3, r2, r6, r3
 8006fe8:	b289      	uxth	r1, r1
 8006fea:	3001      	adds	r0, #1
 8006fec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ff0:	4285      	cmp	r5, r0
 8006ff2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ff6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ffa:	dcec      	bgt.n	8006fd6 <__multadd+0x12>
 8006ffc:	b30e      	cbz	r6, 8007042 <__multadd+0x7e>
 8006ffe:	68a3      	ldr	r3, [r4, #8]
 8007000:	42ab      	cmp	r3, r5
 8007002:	dc19      	bgt.n	8007038 <__multadd+0x74>
 8007004:	6861      	ldr	r1, [r4, #4]
 8007006:	4638      	mov	r0, r7
 8007008:	3101      	adds	r1, #1
 800700a:	f7ff ff79 	bl	8006f00 <_Balloc>
 800700e:	4680      	mov	r8, r0
 8007010:	b928      	cbnz	r0, 800701e <__multadd+0x5a>
 8007012:	4602      	mov	r2, r0
 8007014:	4b0c      	ldr	r3, [pc, #48]	@ (8007048 <__multadd+0x84>)
 8007016:	480d      	ldr	r0, [pc, #52]	@ (800704c <__multadd+0x88>)
 8007018:	21ba      	movs	r1, #186	@ 0xba
 800701a:	f001 fcfd 	bl	8008a18 <__assert_func>
 800701e:	6922      	ldr	r2, [r4, #16]
 8007020:	3202      	adds	r2, #2
 8007022:	f104 010c 	add.w	r1, r4, #12
 8007026:	0092      	lsls	r2, r2, #2
 8007028:	300c      	adds	r0, #12
 800702a:	f001 fcdf 	bl	80089ec <memcpy>
 800702e:	4621      	mov	r1, r4
 8007030:	4638      	mov	r0, r7
 8007032:	f7ff ffa5 	bl	8006f80 <_Bfree>
 8007036:	4644      	mov	r4, r8
 8007038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800703c:	3501      	adds	r5, #1
 800703e:	615e      	str	r6, [r3, #20]
 8007040:	6125      	str	r5, [r4, #16]
 8007042:	4620      	mov	r0, r4
 8007044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007048:	0800a711 	.word	0x0800a711
 800704c:	0800a722 	.word	0x0800a722

08007050 <__s2b>:
 8007050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007054:	460c      	mov	r4, r1
 8007056:	4615      	mov	r5, r2
 8007058:	461f      	mov	r7, r3
 800705a:	2209      	movs	r2, #9
 800705c:	3308      	adds	r3, #8
 800705e:	4606      	mov	r6, r0
 8007060:	fb93 f3f2 	sdiv	r3, r3, r2
 8007064:	2100      	movs	r1, #0
 8007066:	2201      	movs	r2, #1
 8007068:	429a      	cmp	r2, r3
 800706a:	db09      	blt.n	8007080 <__s2b+0x30>
 800706c:	4630      	mov	r0, r6
 800706e:	f7ff ff47 	bl	8006f00 <_Balloc>
 8007072:	b940      	cbnz	r0, 8007086 <__s2b+0x36>
 8007074:	4602      	mov	r2, r0
 8007076:	4b19      	ldr	r3, [pc, #100]	@ (80070dc <__s2b+0x8c>)
 8007078:	4819      	ldr	r0, [pc, #100]	@ (80070e0 <__s2b+0x90>)
 800707a:	21d3      	movs	r1, #211	@ 0xd3
 800707c:	f001 fccc 	bl	8008a18 <__assert_func>
 8007080:	0052      	lsls	r2, r2, #1
 8007082:	3101      	adds	r1, #1
 8007084:	e7f0      	b.n	8007068 <__s2b+0x18>
 8007086:	9b08      	ldr	r3, [sp, #32]
 8007088:	6143      	str	r3, [r0, #20]
 800708a:	2d09      	cmp	r5, #9
 800708c:	f04f 0301 	mov.w	r3, #1
 8007090:	6103      	str	r3, [r0, #16]
 8007092:	dd16      	ble.n	80070c2 <__s2b+0x72>
 8007094:	f104 0909 	add.w	r9, r4, #9
 8007098:	46c8      	mov	r8, r9
 800709a:	442c      	add	r4, r5
 800709c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80070a0:	4601      	mov	r1, r0
 80070a2:	3b30      	subs	r3, #48	@ 0x30
 80070a4:	220a      	movs	r2, #10
 80070a6:	4630      	mov	r0, r6
 80070a8:	f7ff ff8c 	bl	8006fc4 <__multadd>
 80070ac:	45a0      	cmp	r8, r4
 80070ae:	d1f5      	bne.n	800709c <__s2b+0x4c>
 80070b0:	f1a5 0408 	sub.w	r4, r5, #8
 80070b4:	444c      	add	r4, r9
 80070b6:	1b2d      	subs	r5, r5, r4
 80070b8:	1963      	adds	r3, r4, r5
 80070ba:	42bb      	cmp	r3, r7
 80070bc:	db04      	blt.n	80070c8 <__s2b+0x78>
 80070be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c2:	340a      	adds	r4, #10
 80070c4:	2509      	movs	r5, #9
 80070c6:	e7f6      	b.n	80070b6 <__s2b+0x66>
 80070c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80070cc:	4601      	mov	r1, r0
 80070ce:	3b30      	subs	r3, #48	@ 0x30
 80070d0:	220a      	movs	r2, #10
 80070d2:	4630      	mov	r0, r6
 80070d4:	f7ff ff76 	bl	8006fc4 <__multadd>
 80070d8:	e7ee      	b.n	80070b8 <__s2b+0x68>
 80070da:	bf00      	nop
 80070dc:	0800a711 	.word	0x0800a711
 80070e0:	0800a722 	.word	0x0800a722

080070e4 <__hi0bits>:
 80070e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070e8:	4603      	mov	r3, r0
 80070ea:	bf36      	itet	cc
 80070ec:	0403      	lslcc	r3, r0, #16
 80070ee:	2000      	movcs	r0, #0
 80070f0:	2010      	movcc	r0, #16
 80070f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070f6:	bf3c      	itt	cc
 80070f8:	021b      	lslcc	r3, r3, #8
 80070fa:	3008      	addcc	r0, #8
 80070fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007100:	bf3c      	itt	cc
 8007102:	011b      	lslcc	r3, r3, #4
 8007104:	3004      	addcc	r0, #4
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710a:	bf3c      	itt	cc
 800710c:	009b      	lslcc	r3, r3, #2
 800710e:	3002      	addcc	r0, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	db05      	blt.n	8007120 <__hi0bits+0x3c>
 8007114:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007118:	f100 0001 	add.w	r0, r0, #1
 800711c:	bf08      	it	eq
 800711e:	2020      	moveq	r0, #32
 8007120:	4770      	bx	lr

08007122 <__lo0bits>:
 8007122:	6803      	ldr	r3, [r0, #0]
 8007124:	4602      	mov	r2, r0
 8007126:	f013 0007 	ands.w	r0, r3, #7
 800712a:	d00b      	beq.n	8007144 <__lo0bits+0x22>
 800712c:	07d9      	lsls	r1, r3, #31
 800712e:	d421      	bmi.n	8007174 <__lo0bits+0x52>
 8007130:	0798      	lsls	r0, r3, #30
 8007132:	bf49      	itett	mi
 8007134:	085b      	lsrmi	r3, r3, #1
 8007136:	089b      	lsrpl	r3, r3, #2
 8007138:	2001      	movmi	r0, #1
 800713a:	6013      	strmi	r3, [r2, #0]
 800713c:	bf5c      	itt	pl
 800713e:	6013      	strpl	r3, [r2, #0]
 8007140:	2002      	movpl	r0, #2
 8007142:	4770      	bx	lr
 8007144:	b299      	uxth	r1, r3
 8007146:	b909      	cbnz	r1, 800714c <__lo0bits+0x2a>
 8007148:	0c1b      	lsrs	r3, r3, #16
 800714a:	2010      	movs	r0, #16
 800714c:	b2d9      	uxtb	r1, r3
 800714e:	b909      	cbnz	r1, 8007154 <__lo0bits+0x32>
 8007150:	3008      	adds	r0, #8
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	0719      	lsls	r1, r3, #28
 8007156:	bf04      	itt	eq
 8007158:	091b      	lsreq	r3, r3, #4
 800715a:	3004      	addeq	r0, #4
 800715c:	0799      	lsls	r1, r3, #30
 800715e:	bf04      	itt	eq
 8007160:	089b      	lsreq	r3, r3, #2
 8007162:	3002      	addeq	r0, #2
 8007164:	07d9      	lsls	r1, r3, #31
 8007166:	d403      	bmi.n	8007170 <__lo0bits+0x4e>
 8007168:	085b      	lsrs	r3, r3, #1
 800716a:	f100 0001 	add.w	r0, r0, #1
 800716e:	d003      	beq.n	8007178 <__lo0bits+0x56>
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	4770      	bx	lr
 8007174:	2000      	movs	r0, #0
 8007176:	4770      	bx	lr
 8007178:	2020      	movs	r0, #32
 800717a:	4770      	bx	lr

0800717c <__i2b>:
 800717c:	b510      	push	{r4, lr}
 800717e:	460c      	mov	r4, r1
 8007180:	2101      	movs	r1, #1
 8007182:	f7ff febd 	bl	8006f00 <_Balloc>
 8007186:	4602      	mov	r2, r0
 8007188:	b928      	cbnz	r0, 8007196 <__i2b+0x1a>
 800718a:	4b05      	ldr	r3, [pc, #20]	@ (80071a0 <__i2b+0x24>)
 800718c:	4805      	ldr	r0, [pc, #20]	@ (80071a4 <__i2b+0x28>)
 800718e:	f240 1145 	movw	r1, #325	@ 0x145
 8007192:	f001 fc41 	bl	8008a18 <__assert_func>
 8007196:	2301      	movs	r3, #1
 8007198:	6144      	str	r4, [r0, #20]
 800719a:	6103      	str	r3, [r0, #16]
 800719c:	bd10      	pop	{r4, pc}
 800719e:	bf00      	nop
 80071a0:	0800a711 	.word	0x0800a711
 80071a4:	0800a722 	.word	0x0800a722

080071a8 <__multiply>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	4614      	mov	r4, r2
 80071ae:	690a      	ldr	r2, [r1, #16]
 80071b0:	6923      	ldr	r3, [r4, #16]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	bfa8      	it	ge
 80071b6:	4623      	movge	r3, r4
 80071b8:	460f      	mov	r7, r1
 80071ba:	bfa4      	itt	ge
 80071bc:	460c      	movge	r4, r1
 80071be:	461f      	movge	r7, r3
 80071c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80071c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80071c8:	68a3      	ldr	r3, [r4, #8]
 80071ca:	6861      	ldr	r1, [r4, #4]
 80071cc:	eb0a 0609 	add.w	r6, sl, r9
 80071d0:	42b3      	cmp	r3, r6
 80071d2:	b085      	sub	sp, #20
 80071d4:	bfb8      	it	lt
 80071d6:	3101      	addlt	r1, #1
 80071d8:	f7ff fe92 	bl	8006f00 <_Balloc>
 80071dc:	b930      	cbnz	r0, 80071ec <__multiply+0x44>
 80071de:	4602      	mov	r2, r0
 80071e0:	4b44      	ldr	r3, [pc, #272]	@ (80072f4 <__multiply+0x14c>)
 80071e2:	4845      	ldr	r0, [pc, #276]	@ (80072f8 <__multiply+0x150>)
 80071e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071e8:	f001 fc16 	bl	8008a18 <__assert_func>
 80071ec:	f100 0514 	add.w	r5, r0, #20
 80071f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071f4:	462b      	mov	r3, r5
 80071f6:	2200      	movs	r2, #0
 80071f8:	4543      	cmp	r3, r8
 80071fa:	d321      	bcc.n	8007240 <__multiply+0x98>
 80071fc:	f107 0114 	add.w	r1, r7, #20
 8007200:	f104 0214 	add.w	r2, r4, #20
 8007204:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007208:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800720c:	9302      	str	r3, [sp, #8]
 800720e:	1b13      	subs	r3, r2, r4
 8007210:	3b15      	subs	r3, #21
 8007212:	f023 0303 	bic.w	r3, r3, #3
 8007216:	3304      	adds	r3, #4
 8007218:	f104 0715 	add.w	r7, r4, #21
 800721c:	42ba      	cmp	r2, r7
 800721e:	bf38      	it	cc
 8007220:	2304      	movcc	r3, #4
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	9b02      	ldr	r3, [sp, #8]
 8007226:	9103      	str	r1, [sp, #12]
 8007228:	428b      	cmp	r3, r1
 800722a:	d80c      	bhi.n	8007246 <__multiply+0x9e>
 800722c:	2e00      	cmp	r6, #0
 800722e:	dd03      	ble.n	8007238 <__multiply+0x90>
 8007230:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007234:	2b00      	cmp	r3, #0
 8007236:	d05b      	beq.n	80072f0 <__multiply+0x148>
 8007238:	6106      	str	r6, [r0, #16]
 800723a:	b005      	add	sp, #20
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	f843 2b04 	str.w	r2, [r3], #4
 8007244:	e7d8      	b.n	80071f8 <__multiply+0x50>
 8007246:	f8b1 a000 	ldrh.w	sl, [r1]
 800724a:	f1ba 0f00 	cmp.w	sl, #0
 800724e:	d024      	beq.n	800729a <__multiply+0xf2>
 8007250:	f104 0e14 	add.w	lr, r4, #20
 8007254:	46a9      	mov	r9, r5
 8007256:	f04f 0c00 	mov.w	ip, #0
 800725a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800725e:	f8d9 3000 	ldr.w	r3, [r9]
 8007262:	fa1f fb87 	uxth.w	fp, r7
 8007266:	b29b      	uxth	r3, r3
 8007268:	fb0a 330b 	mla	r3, sl, fp, r3
 800726c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007270:	f8d9 7000 	ldr.w	r7, [r9]
 8007274:	4463      	add	r3, ip
 8007276:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800727a:	fb0a c70b 	mla	r7, sl, fp, ip
 800727e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007282:	b29b      	uxth	r3, r3
 8007284:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007288:	4572      	cmp	r2, lr
 800728a:	f849 3b04 	str.w	r3, [r9], #4
 800728e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007292:	d8e2      	bhi.n	800725a <__multiply+0xb2>
 8007294:	9b01      	ldr	r3, [sp, #4]
 8007296:	f845 c003 	str.w	ip, [r5, r3]
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80072a0:	3104      	adds	r1, #4
 80072a2:	f1b9 0f00 	cmp.w	r9, #0
 80072a6:	d021      	beq.n	80072ec <__multiply+0x144>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	f104 0c14 	add.w	ip, r4, #20
 80072ae:	46ae      	mov	lr, r5
 80072b0:	f04f 0a00 	mov.w	sl, #0
 80072b4:	f8bc b000 	ldrh.w	fp, [ip]
 80072b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80072bc:	fb09 770b 	mla	r7, r9, fp, r7
 80072c0:	4457      	add	r7, sl
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80072c8:	f84e 3b04 	str.w	r3, [lr], #4
 80072cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072d4:	f8be 3000 	ldrh.w	r3, [lr]
 80072d8:	fb09 330a 	mla	r3, r9, sl, r3
 80072dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80072e0:	4562      	cmp	r2, ip
 80072e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072e6:	d8e5      	bhi.n	80072b4 <__multiply+0x10c>
 80072e8:	9f01      	ldr	r7, [sp, #4]
 80072ea:	51eb      	str	r3, [r5, r7]
 80072ec:	3504      	adds	r5, #4
 80072ee:	e799      	b.n	8007224 <__multiply+0x7c>
 80072f0:	3e01      	subs	r6, #1
 80072f2:	e79b      	b.n	800722c <__multiply+0x84>
 80072f4:	0800a711 	.word	0x0800a711
 80072f8:	0800a722 	.word	0x0800a722

080072fc <__pow5mult>:
 80072fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007300:	4615      	mov	r5, r2
 8007302:	f012 0203 	ands.w	r2, r2, #3
 8007306:	4607      	mov	r7, r0
 8007308:	460e      	mov	r6, r1
 800730a:	d007      	beq.n	800731c <__pow5mult+0x20>
 800730c:	4c25      	ldr	r4, [pc, #148]	@ (80073a4 <__pow5mult+0xa8>)
 800730e:	3a01      	subs	r2, #1
 8007310:	2300      	movs	r3, #0
 8007312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007316:	f7ff fe55 	bl	8006fc4 <__multadd>
 800731a:	4606      	mov	r6, r0
 800731c:	10ad      	asrs	r5, r5, #2
 800731e:	d03d      	beq.n	800739c <__pow5mult+0xa0>
 8007320:	69fc      	ldr	r4, [r7, #28]
 8007322:	b97c      	cbnz	r4, 8007344 <__pow5mult+0x48>
 8007324:	2010      	movs	r0, #16
 8007326:	f7ff fd35 	bl	8006d94 <malloc>
 800732a:	4602      	mov	r2, r0
 800732c:	61f8      	str	r0, [r7, #28]
 800732e:	b928      	cbnz	r0, 800733c <__pow5mult+0x40>
 8007330:	4b1d      	ldr	r3, [pc, #116]	@ (80073a8 <__pow5mult+0xac>)
 8007332:	481e      	ldr	r0, [pc, #120]	@ (80073ac <__pow5mult+0xb0>)
 8007334:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007338:	f001 fb6e 	bl	8008a18 <__assert_func>
 800733c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007340:	6004      	str	r4, [r0, #0]
 8007342:	60c4      	str	r4, [r0, #12]
 8007344:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800734c:	b94c      	cbnz	r4, 8007362 <__pow5mult+0x66>
 800734e:	f240 2171 	movw	r1, #625	@ 0x271
 8007352:	4638      	mov	r0, r7
 8007354:	f7ff ff12 	bl	800717c <__i2b>
 8007358:	2300      	movs	r3, #0
 800735a:	f8c8 0008 	str.w	r0, [r8, #8]
 800735e:	4604      	mov	r4, r0
 8007360:	6003      	str	r3, [r0, #0]
 8007362:	f04f 0900 	mov.w	r9, #0
 8007366:	07eb      	lsls	r3, r5, #31
 8007368:	d50a      	bpl.n	8007380 <__pow5mult+0x84>
 800736a:	4631      	mov	r1, r6
 800736c:	4622      	mov	r2, r4
 800736e:	4638      	mov	r0, r7
 8007370:	f7ff ff1a 	bl	80071a8 <__multiply>
 8007374:	4631      	mov	r1, r6
 8007376:	4680      	mov	r8, r0
 8007378:	4638      	mov	r0, r7
 800737a:	f7ff fe01 	bl	8006f80 <_Bfree>
 800737e:	4646      	mov	r6, r8
 8007380:	106d      	asrs	r5, r5, #1
 8007382:	d00b      	beq.n	800739c <__pow5mult+0xa0>
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	b938      	cbnz	r0, 8007398 <__pow5mult+0x9c>
 8007388:	4622      	mov	r2, r4
 800738a:	4621      	mov	r1, r4
 800738c:	4638      	mov	r0, r7
 800738e:	f7ff ff0b 	bl	80071a8 <__multiply>
 8007392:	6020      	str	r0, [r4, #0]
 8007394:	f8c0 9000 	str.w	r9, [r0]
 8007398:	4604      	mov	r4, r0
 800739a:	e7e4      	b.n	8007366 <__pow5mult+0x6a>
 800739c:	4630      	mov	r0, r6
 800739e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a2:	bf00      	nop
 80073a4:	0800a77c 	.word	0x0800a77c
 80073a8:	0800a6a2 	.word	0x0800a6a2
 80073ac:	0800a722 	.word	0x0800a722

080073b0 <__lshift>:
 80073b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b4:	460c      	mov	r4, r1
 80073b6:	6849      	ldr	r1, [r1, #4]
 80073b8:	6923      	ldr	r3, [r4, #16]
 80073ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	4607      	mov	r7, r0
 80073c2:	4691      	mov	r9, r2
 80073c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073c8:	f108 0601 	add.w	r6, r8, #1
 80073cc:	42b3      	cmp	r3, r6
 80073ce:	db0b      	blt.n	80073e8 <__lshift+0x38>
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7ff fd95 	bl	8006f00 <_Balloc>
 80073d6:	4605      	mov	r5, r0
 80073d8:	b948      	cbnz	r0, 80073ee <__lshift+0x3e>
 80073da:	4602      	mov	r2, r0
 80073dc:	4b28      	ldr	r3, [pc, #160]	@ (8007480 <__lshift+0xd0>)
 80073de:	4829      	ldr	r0, [pc, #164]	@ (8007484 <__lshift+0xd4>)
 80073e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073e4:	f001 fb18 	bl	8008a18 <__assert_func>
 80073e8:	3101      	adds	r1, #1
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	e7ee      	b.n	80073cc <__lshift+0x1c>
 80073ee:	2300      	movs	r3, #0
 80073f0:	f100 0114 	add.w	r1, r0, #20
 80073f4:	f100 0210 	add.w	r2, r0, #16
 80073f8:	4618      	mov	r0, r3
 80073fa:	4553      	cmp	r3, sl
 80073fc:	db33      	blt.n	8007466 <__lshift+0xb6>
 80073fe:	6920      	ldr	r0, [r4, #16]
 8007400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007404:	f104 0314 	add.w	r3, r4, #20
 8007408:	f019 091f 	ands.w	r9, r9, #31
 800740c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007410:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007414:	d02b      	beq.n	800746e <__lshift+0xbe>
 8007416:	f1c9 0e20 	rsb	lr, r9, #32
 800741a:	468a      	mov	sl, r1
 800741c:	2200      	movs	r2, #0
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	fa00 f009 	lsl.w	r0, r0, r9
 8007424:	4310      	orrs	r0, r2
 8007426:	f84a 0b04 	str.w	r0, [sl], #4
 800742a:	f853 2b04 	ldr.w	r2, [r3], #4
 800742e:	459c      	cmp	ip, r3
 8007430:	fa22 f20e 	lsr.w	r2, r2, lr
 8007434:	d8f3      	bhi.n	800741e <__lshift+0x6e>
 8007436:	ebac 0304 	sub.w	r3, ip, r4
 800743a:	3b15      	subs	r3, #21
 800743c:	f023 0303 	bic.w	r3, r3, #3
 8007440:	3304      	adds	r3, #4
 8007442:	f104 0015 	add.w	r0, r4, #21
 8007446:	4584      	cmp	ip, r0
 8007448:	bf38      	it	cc
 800744a:	2304      	movcc	r3, #4
 800744c:	50ca      	str	r2, [r1, r3]
 800744e:	b10a      	cbz	r2, 8007454 <__lshift+0xa4>
 8007450:	f108 0602 	add.w	r6, r8, #2
 8007454:	3e01      	subs	r6, #1
 8007456:	4638      	mov	r0, r7
 8007458:	612e      	str	r6, [r5, #16]
 800745a:	4621      	mov	r1, r4
 800745c:	f7ff fd90 	bl	8006f80 <_Bfree>
 8007460:	4628      	mov	r0, r5
 8007462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007466:	f842 0f04 	str.w	r0, [r2, #4]!
 800746a:	3301      	adds	r3, #1
 800746c:	e7c5      	b.n	80073fa <__lshift+0x4a>
 800746e:	3904      	subs	r1, #4
 8007470:	f853 2b04 	ldr.w	r2, [r3], #4
 8007474:	f841 2f04 	str.w	r2, [r1, #4]!
 8007478:	459c      	cmp	ip, r3
 800747a:	d8f9      	bhi.n	8007470 <__lshift+0xc0>
 800747c:	e7ea      	b.n	8007454 <__lshift+0xa4>
 800747e:	bf00      	nop
 8007480:	0800a711 	.word	0x0800a711
 8007484:	0800a722 	.word	0x0800a722

08007488 <__mcmp>:
 8007488:	690a      	ldr	r2, [r1, #16]
 800748a:	4603      	mov	r3, r0
 800748c:	6900      	ldr	r0, [r0, #16]
 800748e:	1a80      	subs	r0, r0, r2
 8007490:	b530      	push	{r4, r5, lr}
 8007492:	d10e      	bne.n	80074b2 <__mcmp+0x2a>
 8007494:	3314      	adds	r3, #20
 8007496:	3114      	adds	r1, #20
 8007498:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800749c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074a8:	4295      	cmp	r5, r2
 80074aa:	d003      	beq.n	80074b4 <__mcmp+0x2c>
 80074ac:	d205      	bcs.n	80074ba <__mcmp+0x32>
 80074ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074b2:	bd30      	pop	{r4, r5, pc}
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	d3f3      	bcc.n	80074a0 <__mcmp+0x18>
 80074b8:	e7fb      	b.n	80074b2 <__mcmp+0x2a>
 80074ba:	2001      	movs	r0, #1
 80074bc:	e7f9      	b.n	80074b2 <__mcmp+0x2a>
	...

080074c0 <__mdiff>:
 80074c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c4:	4689      	mov	r9, r1
 80074c6:	4606      	mov	r6, r0
 80074c8:	4611      	mov	r1, r2
 80074ca:	4648      	mov	r0, r9
 80074cc:	4614      	mov	r4, r2
 80074ce:	f7ff ffdb 	bl	8007488 <__mcmp>
 80074d2:	1e05      	subs	r5, r0, #0
 80074d4:	d112      	bne.n	80074fc <__mdiff+0x3c>
 80074d6:	4629      	mov	r1, r5
 80074d8:	4630      	mov	r0, r6
 80074da:	f7ff fd11 	bl	8006f00 <_Balloc>
 80074de:	4602      	mov	r2, r0
 80074e0:	b928      	cbnz	r0, 80074ee <__mdiff+0x2e>
 80074e2:	4b3f      	ldr	r3, [pc, #252]	@ (80075e0 <__mdiff+0x120>)
 80074e4:	f240 2137 	movw	r1, #567	@ 0x237
 80074e8:	483e      	ldr	r0, [pc, #248]	@ (80075e4 <__mdiff+0x124>)
 80074ea:	f001 fa95 	bl	8008a18 <__assert_func>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074f4:	4610      	mov	r0, r2
 80074f6:	b003      	add	sp, #12
 80074f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fc:	bfbc      	itt	lt
 80074fe:	464b      	movlt	r3, r9
 8007500:	46a1      	movlt	r9, r4
 8007502:	4630      	mov	r0, r6
 8007504:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007508:	bfba      	itte	lt
 800750a:	461c      	movlt	r4, r3
 800750c:	2501      	movlt	r5, #1
 800750e:	2500      	movge	r5, #0
 8007510:	f7ff fcf6 	bl	8006f00 <_Balloc>
 8007514:	4602      	mov	r2, r0
 8007516:	b918      	cbnz	r0, 8007520 <__mdiff+0x60>
 8007518:	4b31      	ldr	r3, [pc, #196]	@ (80075e0 <__mdiff+0x120>)
 800751a:	f240 2145 	movw	r1, #581	@ 0x245
 800751e:	e7e3      	b.n	80074e8 <__mdiff+0x28>
 8007520:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007524:	6926      	ldr	r6, [r4, #16]
 8007526:	60c5      	str	r5, [r0, #12]
 8007528:	f109 0310 	add.w	r3, r9, #16
 800752c:	f109 0514 	add.w	r5, r9, #20
 8007530:	f104 0e14 	add.w	lr, r4, #20
 8007534:	f100 0b14 	add.w	fp, r0, #20
 8007538:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800753c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	46d9      	mov	r9, fp
 8007544:	f04f 0c00 	mov.w	ip, #0
 8007548:	9b01      	ldr	r3, [sp, #4]
 800754a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800754e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	fa1f f38a 	uxth.w	r3, sl
 8007558:	4619      	mov	r1, r3
 800755a:	b283      	uxth	r3, r0
 800755c:	1acb      	subs	r3, r1, r3
 800755e:	0c00      	lsrs	r0, r0, #16
 8007560:	4463      	add	r3, ip
 8007562:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007566:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800756a:	b29b      	uxth	r3, r3
 800756c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007570:	4576      	cmp	r6, lr
 8007572:	f849 3b04 	str.w	r3, [r9], #4
 8007576:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800757a:	d8e5      	bhi.n	8007548 <__mdiff+0x88>
 800757c:	1b33      	subs	r3, r6, r4
 800757e:	3b15      	subs	r3, #21
 8007580:	f023 0303 	bic.w	r3, r3, #3
 8007584:	3415      	adds	r4, #21
 8007586:	3304      	adds	r3, #4
 8007588:	42a6      	cmp	r6, r4
 800758a:	bf38      	it	cc
 800758c:	2304      	movcc	r3, #4
 800758e:	441d      	add	r5, r3
 8007590:	445b      	add	r3, fp
 8007592:	461e      	mov	r6, r3
 8007594:	462c      	mov	r4, r5
 8007596:	4544      	cmp	r4, r8
 8007598:	d30e      	bcc.n	80075b8 <__mdiff+0xf8>
 800759a:	f108 0103 	add.w	r1, r8, #3
 800759e:	1b49      	subs	r1, r1, r5
 80075a0:	f021 0103 	bic.w	r1, r1, #3
 80075a4:	3d03      	subs	r5, #3
 80075a6:	45a8      	cmp	r8, r5
 80075a8:	bf38      	it	cc
 80075aa:	2100      	movcc	r1, #0
 80075ac:	440b      	add	r3, r1
 80075ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075b2:	b191      	cbz	r1, 80075da <__mdiff+0x11a>
 80075b4:	6117      	str	r7, [r2, #16]
 80075b6:	e79d      	b.n	80074f4 <__mdiff+0x34>
 80075b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80075bc:	46e6      	mov	lr, ip
 80075be:	0c08      	lsrs	r0, r1, #16
 80075c0:	fa1c fc81 	uxtah	ip, ip, r1
 80075c4:	4471      	add	r1, lr
 80075c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80075ca:	b289      	uxth	r1, r1
 80075cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80075d0:	f846 1b04 	str.w	r1, [r6], #4
 80075d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075d8:	e7dd      	b.n	8007596 <__mdiff+0xd6>
 80075da:	3f01      	subs	r7, #1
 80075dc:	e7e7      	b.n	80075ae <__mdiff+0xee>
 80075de:	bf00      	nop
 80075e0:	0800a711 	.word	0x0800a711
 80075e4:	0800a722 	.word	0x0800a722

080075e8 <__ulp>:
 80075e8:	b082      	sub	sp, #8
 80075ea:	ed8d 0b00 	vstr	d0, [sp]
 80075ee:	9a01      	ldr	r2, [sp, #4]
 80075f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007630 <__ulp+0x48>)
 80075f2:	4013      	ands	r3, r2
 80075f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	dc08      	bgt.n	800760e <__ulp+0x26>
 80075fc:	425b      	negs	r3, r3
 80075fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007602:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007606:	da04      	bge.n	8007612 <__ulp+0x2a>
 8007608:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800760c:	4113      	asrs	r3, r2
 800760e:	2200      	movs	r2, #0
 8007610:	e008      	b.n	8007624 <__ulp+0x3c>
 8007612:	f1a2 0314 	sub.w	r3, r2, #20
 8007616:	2b1e      	cmp	r3, #30
 8007618:	bfda      	itte	le
 800761a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800761e:	40da      	lsrle	r2, r3
 8007620:	2201      	movgt	r2, #1
 8007622:	2300      	movs	r3, #0
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	ec41 0b10 	vmov	d0, r0, r1
 800762c:	b002      	add	sp, #8
 800762e:	4770      	bx	lr
 8007630:	7ff00000 	.word	0x7ff00000

08007634 <__b2d>:
 8007634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007638:	6906      	ldr	r6, [r0, #16]
 800763a:	f100 0814 	add.w	r8, r0, #20
 800763e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007642:	1f37      	subs	r7, r6, #4
 8007644:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007648:	4610      	mov	r0, r2
 800764a:	f7ff fd4b 	bl	80070e4 <__hi0bits>
 800764e:	f1c0 0320 	rsb	r3, r0, #32
 8007652:	280a      	cmp	r0, #10
 8007654:	600b      	str	r3, [r1, #0]
 8007656:	491b      	ldr	r1, [pc, #108]	@ (80076c4 <__b2d+0x90>)
 8007658:	dc15      	bgt.n	8007686 <__b2d+0x52>
 800765a:	f1c0 0c0b 	rsb	ip, r0, #11
 800765e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007662:	45b8      	cmp	r8, r7
 8007664:	ea43 0501 	orr.w	r5, r3, r1
 8007668:	bf34      	ite	cc
 800766a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800766e:	2300      	movcs	r3, #0
 8007670:	3015      	adds	r0, #21
 8007672:	fa02 f000 	lsl.w	r0, r2, r0
 8007676:	fa23 f30c 	lsr.w	r3, r3, ip
 800767a:	4303      	orrs	r3, r0
 800767c:	461c      	mov	r4, r3
 800767e:	ec45 4b10 	vmov	d0, r4, r5
 8007682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007686:	45b8      	cmp	r8, r7
 8007688:	bf3a      	itte	cc
 800768a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800768e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007692:	2300      	movcs	r3, #0
 8007694:	380b      	subs	r0, #11
 8007696:	d012      	beq.n	80076be <__b2d+0x8a>
 8007698:	f1c0 0120 	rsb	r1, r0, #32
 800769c:	fa23 f401 	lsr.w	r4, r3, r1
 80076a0:	4082      	lsls	r2, r0
 80076a2:	4322      	orrs	r2, r4
 80076a4:	4547      	cmp	r7, r8
 80076a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80076aa:	bf8c      	ite	hi
 80076ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80076b0:	2200      	movls	r2, #0
 80076b2:	4083      	lsls	r3, r0
 80076b4:	40ca      	lsrs	r2, r1
 80076b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80076ba:	4313      	orrs	r3, r2
 80076bc:	e7de      	b.n	800767c <__b2d+0x48>
 80076be:	ea42 0501 	orr.w	r5, r2, r1
 80076c2:	e7db      	b.n	800767c <__b2d+0x48>
 80076c4:	3ff00000 	.word	0x3ff00000

080076c8 <__d2b>:
 80076c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076cc:	460f      	mov	r7, r1
 80076ce:	2101      	movs	r1, #1
 80076d0:	ec59 8b10 	vmov	r8, r9, d0
 80076d4:	4616      	mov	r6, r2
 80076d6:	f7ff fc13 	bl	8006f00 <_Balloc>
 80076da:	4604      	mov	r4, r0
 80076dc:	b930      	cbnz	r0, 80076ec <__d2b+0x24>
 80076de:	4602      	mov	r2, r0
 80076e0:	4b23      	ldr	r3, [pc, #140]	@ (8007770 <__d2b+0xa8>)
 80076e2:	4824      	ldr	r0, [pc, #144]	@ (8007774 <__d2b+0xac>)
 80076e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80076e8:	f001 f996 	bl	8008a18 <__assert_func>
 80076ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076f4:	b10d      	cbz	r5, 80076fa <__d2b+0x32>
 80076f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076fa:	9301      	str	r3, [sp, #4]
 80076fc:	f1b8 0300 	subs.w	r3, r8, #0
 8007700:	d023      	beq.n	800774a <__d2b+0x82>
 8007702:	4668      	mov	r0, sp
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	f7ff fd0c 	bl	8007122 <__lo0bits>
 800770a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800770e:	b1d0      	cbz	r0, 8007746 <__d2b+0x7e>
 8007710:	f1c0 0320 	rsb	r3, r0, #32
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	430b      	orrs	r3, r1
 800771a:	40c2      	lsrs	r2, r0
 800771c:	6163      	str	r3, [r4, #20]
 800771e:	9201      	str	r2, [sp, #4]
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	61a3      	str	r3, [r4, #24]
 8007724:	2b00      	cmp	r3, #0
 8007726:	bf0c      	ite	eq
 8007728:	2201      	moveq	r2, #1
 800772a:	2202      	movne	r2, #2
 800772c:	6122      	str	r2, [r4, #16]
 800772e:	b1a5      	cbz	r5, 800775a <__d2b+0x92>
 8007730:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007734:	4405      	add	r5, r0
 8007736:	603d      	str	r5, [r7, #0]
 8007738:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800773c:	6030      	str	r0, [r6, #0]
 800773e:	4620      	mov	r0, r4
 8007740:	b003      	add	sp, #12
 8007742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007746:	6161      	str	r1, [r4, #20]
 8007748:	e7ea      	b.n	8007720 <__d2b+0x58>
 800774a:	a801      	add	r0, sp, #4
 800774c:	f7ff fce9 	bl	8007122 <__lo0bits>
 8007750:	9b01      	ldr	r3, [sp, #4]
 8007752:	6163      	str	r3, [r4, #20]
 8007754:	3020      	adds	r0, #32
 8007756:	2201      	movs	r2, #1
 8007758:	e7e8      	b.n	800772c <__d2b+0x64>
 800775a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800775e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007762:	6038      	str	r0, [r7, #0]
 8007764:	6918      	ldr	r0, [r3, #16]
 8007766:	f7ff fcbd 	bl	80070e4 <__hi0bits>
 800776a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800776e:	e7e5      	b.n	800773c <__d2b+0x74>
 8007770:	0800a711 	.word	0x0800a711
 8007774:	0800a722 	.word	0x0800a722

08007778 <__ratio>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	b085      	sub	sp, #20
 800777e:	e9cd 1000 	strd	r1, r0, [sp]
 8007782:	a902      	add	r1, sp, #8
 8007784:	f7ff ff56 	bl	8007634 <__b2d>
 8007788:	9800      	ldr	r0, [sp, #0]
 800778a:	a903      	add	r1, sp, #12
 800778c:	ec55 4b10 	vmov	r4, r5, d0
 8007790:	f7ff ff50 	bl	8007634 <__b2d>
 8007794:	9b01      	ldr	r3, [sp, #4]
 8007796:	6919      	ldr	r1, [r3, #16]
 8007798:	9b00      	ldr	r3, [sp, #0]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	1ac9      	subs	r1, r1, r3
 800779e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	ec5b ab10 	vmov	sl, fp, d0
 80077a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bfce      	itee	gt
 80077b0:	462a      	movgt	r2, r5
 80077b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80077b6:	465a      	movle	r2, fp
 80077b8:	462f      	mov	r7, r5
 80077ba:	46d9      	mov	r9, fp
 80077bc:	bfcc      	ite	gt
 80077be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80077c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80077c6:	464b      	mov	r3, r9
 80077c8:	4652      	mov	r2, sl
 80077ca:	4620      	mov	r0, r4
 80077cc:	4639      	mov	r1, r7
 80077ce:	f7f9 f865 	bl	800089c <__aeabi_ddiv>
 80077d2:	ec41 0b10 	vmov	d0, r0, r1
 80077d6:	b005      	add	sp, #20
 80077d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077dc <__copybits>:
 80077dc:	3901      	subs	r1, #1
 80077de:	b570      	push	{r4, r5, r6, lr}
 80077e0:	1149      	asrs	r1, r1, #5
 80077e2:	6914      	ldr	r4, [r2, #16]
 80077e4:	3101      	adds	r1, #1
 80077e6:	f102 0314 	add.w	r3, r2, #20
 80077ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80077ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80077f2:	1f05      	subs	r5, r0, #4
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	d30c      	bcc.n	8007812 <__copybits+0x36>
 80077f8:	1aa3      	subs	r3, r4, r2
 80077fa:	3b11      	subs	r3, #17
 80077fc:	f023 0303 	bic.w	r3, r3, #3
 8007800:	3211      	adds	r2, #17
 8007802:	42a2      	cmp	r2, r4
 8007804:	bf88      	it	hi
 8007806:	2300      	movhi	r3, #0
 8007808:	4418      	add	r0, r3
 800780a:	2300      	movs	r3, #0
 800780c:	4288      	cmp	r0, r1
 800780e:	d305      	bcc.n	800781c <__copybits+0x40>
 8007810:	bd70      	pop	{r4, r5, r6, pc}
 8007812:	f853 6b04 	ldr.w	r6, [r3], #4
 8007816:	f845 6f04 	str.w	r6, [r5, #4]!
 800781a:	e7eb      	b.n	80077f4 <__copybits+0x18>
 800781c:	f840 3b04 	str.w	r3, [r0], #4
 8007820:	e7f4      	b.n	800780c <__copybits+0x30>

08007822 <__any_on>:
 8007822:	f100 0214 	add.w	r2, r0, #20
 8007826:	6900      	ldr	r0, [r0, #16]
 8007828:	114b      	asrs	r3, r1, #5
 800782a:	4298      	cmp	r0, r3
 800782c:	b510      	push	{r4, lr}
 800782e:	db11      	blt.n	8007854 <__any_on+0x32>
 8007830:	dd0a      	ble.n	8007848 <__any_on+0x26>
 8007832:	f011 011f 	ands.w	r1, r1, #31
 8007836:	d007      	beq.n	8007848 <__any_on+0x26>
 8007838:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800783c:	fa24 f001 	lsr.w	r0, r4, r1
 8007840:	fa00 f101 	lsl.w	r1, r0, r1
 8007844:	428c      	cmp	r4, r1
 8007846:	d10b      	bne.n	8007860 <__any_on+0x3e>
 8007848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800784c:	4293      	cmp	r3, r2
 800784e:	d803      	bhi.n	8007858 <__any_on+0x36>
 8007850:	2000      	movs	r0, #0
 8007852:	bd10      	pop	{r4, pc}
 8007854:	4603      	mov	r3, r0
 8007856:	e7f7      	b.n	8007848 <__any_on+0x26>
 8007858:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800785c:	2900      	cmp	r1, #0
 800785e:	d0f5      	beq.n	800784c <__any_on+0x2a>
 8007860:	2001      	movs	r0, #1
 8007862:	e7f6      	b.n	8007852 <__any_on+0x30>

08007864 <sulp>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	4604      	mov	r4, r0
 8007868:	460d      	mov	r5, r1
 800786a:	ec45 4b10 	vmov	d0, r4, r5
 800786e:	4616      	mov	r6, r2
 8007870:	f7ff feba 	bl	80075e8 <__ulp>
 8007874:	ec51 0b10 	vmov	r0, r1, d0
 8007878:	b17e      	cbz	r6, 800789a <sulp+0x36>
 800787a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800787e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007882:	2b00      	cmp	r3, #0
 8007884:	dd09      	ble.n	800789a <sulp+0x36>
 8007886:	051b      	lsls	r3, r3, #20
 8007888:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800788c:	2400      	movs	r4, #0
 800788e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007892:	4622      	mov	r2, r4
 8007894:	462b      	mov	r3, r5
 8007896:	f7f8 fed7 	bl	8000648 <__aeabi_dmul>
 800789a:	ec41 0b10 	vmov	d0, r0, r1
 800789e:	bd70      	pop	{r4, r5, r6, pc}

080078a0 <_strtod_l>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	b09f      	sub	sp, #124	@ 0x7c
 80078a6:	460c      	mov	r4, r1
 80078a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80078aa:	2200      	movs	r2, #0
 80078ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80078ae:	9005      	str	r0, [sp, #20]
 80078b0:	f04f 0a00 	mov.w	sl, #0
 80078b4:	f04f 0b00 	mov.w	fp, #0
 80078b8:	460a      	mov	r2, r1
 80078ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80078bc:	7811      	ldrb	r1, [r2, #0]
 80078be:	292b      	cmp	r1, #43	@ 0x2b
 80078c0:	d04a      	beq.n	8007958 <_strtod_l+0xb8>
 80078c2:	d838      	bhi.n	8007936 <_strtod_l+0x96>
 80078c4:	290d      	cmp	r1, #13
 80078c6:	d832      	bhi.n	800792e <_strtod_l+0x8e>
 80078c8:	2908      	cmp	r1, #8
 80078ca:	d832      	bhi.n	8007932 <_strtod_l+0x92>
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d03b      	beq.n	8007948 <_strtod_l+0xa8>
 80078d0:	2200      	movs	r2, #0
 80078d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80078d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80078d6:	782a      	ldrb	r2, [r5, #0]
 80078d8:	2a30      	cmp	r2, #48	@ 0x30
 80078da:	f040 80b3 	bne.w	8007a44 <_strtod_l+0x1a4>
 80078de:	786a      	ldrb	r2, [r5, #1]
 80078e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80078e4:	2a58      	cmp	r2, #88	@ 0x58
 80078e6:	d16e      	bne.n	80079c6 <_strtod_l+0x126>
 80078e8:	9302      	str	r3, [sp, #8]
 80078ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	4a8e      	ldr	r2, [pc, #568]	@ (8007b2c <_strtod_l+0x28c>)
 80078f4:	9805      	ldr	r0, [sp, #20]
 80078f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80078f8:	a919      	add	r1, sp, #100	@ 0x64
 80078fa:	f001 f927 	bl	8008b4c <__gethex>
 80078fe:	f010 060f 	ands.w	r6, r0, #15
 8007902:	4604      	mov	r4, r0
 8007904:	d005      	beq.n	8007912 <_strtod_l+0x72>
 8007906:	2e06      	cmp	r6, #6
 8007908:	d128      	bne.n	800795c <_strtod_l+0xbc>
 800790a:	3501      	adds	r5, #1
 800790c:	2300      	movs	r3, #0
 800790e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007910:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007912:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007914:	2b00      	cmp	r3, #0
 8007916:	f040 858e 	bne.w	8008436 <_strtod_l+0xb96>
 800791a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800791c:	b1cb      	cbz	r3, 8007952 <_strtod_l+0xb2>
 800791e:	4652      	mov	r2, sl
 8007920:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007924:	ec43 2b10 	vmov	d0, r2, r3
 8007928:	b01f      	add	sp, #124	@ 0x7c
 800792a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792e:	2920      	cmp	r1, #32
 8007930:	d1ce      	bne.n	80078d0 <_strtod_l+0x30>
 8007932:	3201      	adds	r2, #1
 8007934:	e7c1      	b.n	80078ba <_strtod_l+0x1a>
 8007936:	292d      	cmp	r1, #45	@ 0x2d
 8007938:	d1ca      	bne.n	80078d0 <_strtod_l+0x30>
 800793a:	2101      	movs	r1, #1
 800793c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800793e:	1c51      	adds	r1, r2, #1
 8007940:	9119      	str	r1, [sp, #100]	@ 0x64
 8007942:	7852      	ldrb	r2, [r2, #1]
 8007944:	2a00      	cmp	r2, #0
 8007946:	d1c5      	bne.n	80078d4 <_strtod_l+0x34>
 8007948:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800794a:	9419      	str	r4, [sp, #100]	@ 0x64
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8570 	bne.w	8008432 <_strtod_l+0xb92>
 8007952:	4652      	mov	r2, sl
 8007954:	465b      	mov	r3, fp
 8007956:	e7e5      	b.n	8007924 <_strtod_l+0x84>
 8007958:	2100      	movs	r1, #0
 800795a:	e7ef      	b.n	800793c <_strtod_l+0x9c>
 800795c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800795e:	b13a      	cbz	r2, 8007970 <_strtod_l+0xd0>
 8007960:	2135      	movs	r1, #53	@ 0x35
 8007962:	a81c      	add	r0, sp, #112	@ 0x70
 8007964:	f7ff ff3a 	bl	80077dc <__copybits>
 8007968:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800796a:	9805      	ldr	r0, [sp, #20]
 800796c:	f7ff fb08 	bl	8006f80 <_Bfree>
 8007970:	3e01      	subs	r6, #1
 8007972:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007974:	2e04      	cmp	r6, #4
 8007976:	d806      	bhi.n	8007986 <_strtod_l+0xe6>
 8007978:	e8df f006 	tbb	[pc, r6]
 800797c:	201d0314 	.word	0x201d0314
 8007980:	14          	.byte	0x14
 8007981:	00          	.byte	0x00
 8007982:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007986:	05e1      	lsls	r1, r4, #23
 8007988:	bf48      	it	mi
 800798a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800798e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007992:	0d1b      	lsrs	r3, r3, #20
 8007994:	051b      	lsls	r3, r3, #20
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1bb      	bne.n	8007912 <_strtod_l+0x72>
 800799a:	f7fe fb2f 	bl	8005ffc <__errno>
 800799e:	2322      	movs	r3, #34	@ 0x22
 80079a0:	6003      	str	r3, [r0, #0]
 80079a2:	e7b6      	b.n	8007912 <_strtod_l+0x72>
 80079a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80079a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80079ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80079b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80079b4:	e7e7      	b.n	8007986 <_strtod_l+0xe6>
 80079b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007b34 <_strtod_l+0x294>
 80079ba:	e7e4      	b.n	8007986 <_strtod_l+0xe6>
 80079bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80079c0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80079c4:	e7df      	b.n	8007986 <_strtod_l+0xe6>
 80079c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	2b30      	cmp	r3, #48	@ 0x30
 80079d0:	d0f9      	beq.n	80079c6 <_strtod_l+0x126>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d09d      	beq.n	8007912 <_strtod_l+0x72>
 80079d6:	2301      	movs	r3, #1
 80079d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80079da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80079de:	2300      	movs	r3, #0
 80079e0:	9308      	str	r3, [sp, #32]
 80079e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80079e4:	461f      	mov	r7, r3
 80079e6:	220a      	movs	r2, #10
 80079e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80079ea:	7805      	ldrb	r5, [r0, #0]
 80079ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80079f0:	b2d9      	uxtb	r1, r3
 80079f2:	2909      	cmp	r1, #9
 80079f4:	d928      	bls.n	8007a48 <_strtod_l+0x1a8>
 80079f6:	494e      	ldr	r1, [pc, #312]	@ (8007b30 <_strtod_l+0x290>)
 80079f8:	2201      	movs	r2, #1
 80079fa:	f000 ffd5 	bl	80089a8 <strncmp>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d032      	beq.n	8007a68 <_strtod_l+0x1c8>
 8007a02:	2000      	movs	r0, #0
 8007a04:	462a      	mov	r2, r5
 8007a06:	4681      	mov	r9, r0
 8007a08:	463d      	mov	r5, r7
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2a65      	cmp	r2, #101	@ 0x65
 8007a0e:	d001      	beq.n	8007a14 <_strtod_l+0x174>
 8007a10:	2a45      	cmp	r2, #69	@ 0x45
 8007a12:	d114      	bne.n	8007a3e <_strtod_l+0x19e>
 8007a14:	b91d      	cbnz	r5, 8007a1e <_strtod_l+0x17e>
 8007a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a18:	4302      	orrs	r2, r0
 8007a1a:	d095      	beq.n	8007948 <_strtod_l+0xa8>
 8007a1c:	2500      	movs	r5, #0
 8007a1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007a20:	1c62      	adds	r2, r4, #1
 8007a22:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a24:	7862      	ldrb	r2, [r4, #1]
 8007a26:	2a2b      	cmp	r2, #43	@ 0x2b
 8007a28:	d077      	beq.n	8007b1a <_strtod_l+0x27a>
 8007a2a:	2a2d      	cmp	r2, #45	@ 0x2d
 8007a2c:	d07b      	beq.n	8007b26 <_strtod_l+0x286>
 8007a2e:	f04f 0c00 	mov.w	ip, #0
 8007a32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007a36:	2909      	cmp	r1, #9
 8007a38:	f240 8082 	bls.w	8007b40 <_strtod_l+0x2a0>
 8007a3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8007a3e:	f04f 0800 	mov.w	r8, #0
 8007a42:	e0a2      	b.n	8007b8a <_strtod_l+0x2ea>
 8007a44:	2300      	movs	r3, #0
 8007a46:	e7c7      	b.n	80079d8 <_strtod_l+0x138>
 8007a48:	2f08      	cmp	r7, #8
 8007a4a:	bfd5      	itete	le
 8007a4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007a4e:	9908      	ldrgt	r1, [sp, #32]
 8007a50:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007a58:	f100 0001 	add.w	r0, r0, #1
 8007a5c:	bfd4      	ite	le
 8007a5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007a60:	9308      	strgt	r3, [sp, #32]
 8007a62:	3701      	adds	r7, #1
 8007a64:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a66:	e7bf      	b.n	80079e8 <_strtod_l+0x148>
 8007a68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a6e:	785a      	ldrb	r2, [r3, #1]
 8007a70:	b37f      	cbz	r7, 8007ad2 <_strtod_l+0x232>
 8007a72:	4681      	mov	r9, r0
 8007a74:	463d      	mov	r5, r7
 8007a76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007a7a:	2b09      	cmp	r3, #9
 8007a7c:	d912      	bls.n	8007aa4 <_strtod_l+0x204>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e7c4      	b.n	8007a0c <_strtod_l+0x16c>
 8007a82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a88:	785a      	ldrb	r2, [r3, #1]
 8007a8a:	3001      	adds	r0, #1
 8007a8c:	2a30      	cmp	r2, #48	@ 0x30
 8007a8e:	d0f8      	beq.n	8007a82 <_strtod_l+0x1e2>
 8007a90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	f200 84d3 	bhi.w	8008440 <_strtod_l+0xba0>
 8007a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a9e:	4681      	mov	r9, r0
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	3a30      	subs	r2, #48	@ 0x30
 8007aa6:	f100 0301 	add.w	r3, r0, #1
 8007aaa:	d02a      	beq.n	8007b02 <_strtod_l+0x262>
 8007aac:	4499      	add	r9, r3
 8007aae:	eb00 0c05 	add.w	ip, r0, r5
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	210a      	movs	r1, #10
 8007ab6:	4563      	cmp	r3, ip
 8007ab8:	d10d      	bne.n	8007ad6 <_strtod_l+0x236>
 8007aba:	1c69      	adds	r1, r5, #1
 8007abc:	4401      	add	r1, r0
 8007abe:	4428      	add	r0, r5
 8007ac0:	2808      	cmp	r0, #8
 8007ac2:	dc16      	bgt.n	8007af2 <_strtod_l+0x252>
 8007ac4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ac6:	230a      	movs	r3, #10
 8007ac8:	fb03 2300 	mla	r3, r3, r0, r2
 8007acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e018      	b.n	8007b04 <_strtod_l+0x264>
 8007ad2:	4638      	mov	r0, r7
 8007ad4:	e7da      	b.n	8007a8c <_strtod_l+0x1ec>
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	f103 0301 	add.w	r3, r3, #1
 8007adc:	dc03      	bgt.n	8007ae6 <_strtod_l+0x246>
 8007ade:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007ae0:	434e      	muls	r6, r1
 8007ae2:	960a      	str	r6, [sp, #40]	@ 0x28
 8007ae4:	e7e7      	b.n	8007ab6 <_strtod_l+0x216>
 8007ae6:	2b10      	cmp	r3, #16
 8007ae8:	bfde      	ittt	le
 8007aea:	9e08      	ldrle	r6, [sp, #32]
 8007aec:	434e      	mulle	r6, r1
 8007aee:	9608      	strle	r6, [sp, #32]
 8007af0:	e7e1      	b.n	8007ab6 <_strtod_l+0x216>
 8007af2:	280f      	cmp	r0, #15
 8007af4:	dceb      	bgt.n	8007ace <_strtod_l+0x22e>
 8007af6:	9808      	ldr	r0, [sp, #32]
 8007af8:	230a      	movs	r3, #10
 8007afa:	fb03 2300 	mla	r3, r3, r0, r2
 8007afe:	9308      	str	r3, [sp, #32]
 8007b00:	e7e5      	b.n	8007ace <_strtod_l+0x22e>
 8007b02:	4629      	mov	r1, r5
 8007b04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b06:	1c50      	adds	r0, r2, #1
 8007b08:	9019      	str	r0, [sp, #100]	@ 0x64
 8007b0a:	7852      	ldrb	r2, [r2, #1]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	460d      	mov	r5, r1
 8007b10:	e7b1      	b.n	8007a76 <_strtod_l+0x1d6>
 8007b12:	f04f 0900 	mov.w	r9, #0
 8007b16:	2301      	movs	r3, #1
 8007b18:	e77d      	b.n	8007a16 <_strtod_l+0x176>
 8007b1a:	f04f 0c00 	mov.w	ip, #0
 8007b1e:	1ca2      	adds	r2, r4, #2
 8007b20:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b22:	78a2      	ldrb	r2, [r4, #2]
 8007b24:	e785      	b.n	8007a32 <_strtod_l+0x192>
 8007b26:	f04f 0c01 	mov.w	ip, #1
 8007b2a:	e7f8      	b.n	8007b1e <_strtod_l+0x27e>
 8007b2c:	0800a890 	.word	0x0800a890
 8007b30:	0800a878 	.word	0x0800a878
 8007b34:	7ff00000 	.word	0x7ff00000
 8007b38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b3a:	1c51      	adds	r1, r2, #1
 8007b3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b3e:	7852      	ldrb	r2, [r2, #1]
 8007b40:	2a30      	cmp	r2, #48	@ 0x30
 8007b42:	d0f9      	beq.n	8007b38 <_strtod_l+0x298>
 8007b44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007b48:	2908      	cmp	r1, #8
 8007b4a:	f63f af78 	bhi.w	8007a3e <_strtod_l+0x19e>
 8007b4e:	3a30      	subs	r2, #48	@ 0x30
 8007b50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007b56:	f04f 080a 	mov.w	r8, #10
 8007b5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b5c:	1c56      	adds	r6, r2, #1
 8007b5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007b60:	7852      	ldrb	r2, [r2, #1]
 8007b62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007b66:	f1be 0f09 	cmp.w	lr, #9
 8007b6a:	d939      	bls.n	8007be0 <_strtod_l+0x340>
 8007b6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007b6e:	1a76      	subs	r6, r6, r1
 8007b70:	2e08      	cmp	r6, #8
 8007b72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007b76:	dc03      	bgt.n	8007b80 <_strtod_l+0x2e0>
 8007b78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007b7a:	4588      	cmp	r8, r1
 8007b7c:	bfa8      	it	ge
 8007b7e:	4688      	movge	r8, r1
 8007b80:	f1bc 0f00 	cmp.w	ip, #0
 8007b84:	d001      	beq.n	8007b8a <_strtod_l+0x2ea>
 8007b86:	f1c8 0800 	rsb	r8, r8, #0
 8007b8a:	2d00      	cmp	r5, #0
 8007b8c:	d14e      	bne.n	8007c2c <_strtod_l+0x38c>
 8007b8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b90:	4308      	orrs	r0, r1
 8007b92:	f47f aebe 	bne.w	8007912 <_strtod_l+0x72>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f47f aed6 	bne.w	8007948 <_strtod_l+0xa8>
 8007b9c:	2a69      	cmp	r2, #105	@ 0x69
 8007b9e:	d028      	beq.n	8007bf2 <_strtod_l+0x352>
 8007ba0:	dc25      	bgt.n	8007bee <_strtod_l+0x34e>
 8007ba2:	2a49      	cmp	r2, #73	@ 0x49
 8007ba4:	d025      	beq.n	8007bf2 <_strtod_l+0x352>
 8007ba6:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ba8:	f47f aece 	bne.w	8007948 <_strtod_l+0xa8>
 8007bac:	499b      	ldr	r1, [pc, #620]	@ (8007e1c <_strtod_l+0x57c>)
 8007bae:	a819      	add	r0, sp, #100	@ 0x64
 8007bb0:	f001 f9ee 	bl	8008f90 <__match>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f43f aec7 	beq.w	8007948 <_strtod_l+0xa8>
 8007bba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b28      	cmp	r3, #40	@ 0x28
 8007bc0:	d12e      	bne.n	8007c20 <_strtod_l+0x380>
 8007bc2:	4997      	ldr	r1, [pc, #604]	@ (8007e20 <_strtod_l+0x580>)
 8007bc4:	aa1c      	add	r2, sp, #112	@ 0x70
 8007bc6:	a819      	add	r0, sp, #100	@ 0x64
 8007bc8:	f001 f9f6 	bl	8008fb8 <__hexnan>
 8007bcc:	2805      	cmp	r0, #5
 8007bce:	d127      	bne.n	8007c20 <_strtod_l+0x380>
 8007bd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007bd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007bd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007bda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007bde:	e698      	b.n	8007912 <_strtod_l+0x72>
 8007be0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007be2:	fb08 2101 	mla	r1, r8, r1, r2
 8007be6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007bea:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bec:	e7b5      	b.n	8007b5a <_strtod_l+0x2ba>
 8007bee:	2a6e      	cmp	r2, #110	@ 0x6e
 8007bf0:	e7da      	b.n	8007ba8 <_strtod_l+0x308>
 8007bf2:	498c      	ldr	r1, [pc, #560]	@ (8007e24 <_strtod_l+0x584>)
 8007bf4:	a819      	add	r0, sp, #100	@ 0x64
 8007bf6:	f001 f9cb 	bl	8008f90 <__match>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	f43f aea4 	beq.w	8007948 <_strtod_l+0xa8>
 8007c00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c02:	4989      	ldr	r1, [pc, #548]	@ (8007e28 <_strtod_l+0x588>)
 8007c04:	3b01      	subs	r3, #1
 8007c06:	a819      	add	r0, sp, #100	@ 0x64
 8007c08:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c0a:	f001 f9c1 	bl	8008f90 <__match>
 8007c0e:	b910      	cbnz	r0, 8007c16 <_strtod_l+0x376>
 8007c10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c12:	3301      	adds	r3, #1
 8007c14:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007e38 <_strtod_l+0x598>
 8007c1a:	f04f 0a00 	mov.w	sl, #0
 8007c1e:	e678      	b.n	8007912 <_strtod_l+0x72>
 8007c20:	4882      	ldr	r0, [pc, #520]	@ (8007e2c <_strtod_l+0x58c>)
 8007c22:	f000 fef1 	bl	8008a08 <nan>
 8007c26:	ec5b ab10 	vmov	sl, fp, d0
 8007c2a:	e672      	b.n	8007912 <_strtod_l+0x72>
 8007c2c:	eba8 0309 	sub.w	r3, r8, r9
 8007c30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c34:	2f00      	cmp	r7, #0
 8007c36:	bf08      	it	eq
 8007c38:	462f      	moveq	r7, r5
 8007c3a:	2d10      	cmp	r5, #16
 8007c3c:	462c      	mov	r4, r5
 8007c3e:	bfa8      	it	ge
 8007c40:	2410      	movge	r4, #16
 8007c42:	f7f8 fc87 	bl	8000554 <__aeabi_ui2d>
 8007c46:	2d09      	cmp	r5, #9
 8007c48:	4682      	mov	sl, r0
 8007c4a:	468b      	mov	fp, r1
 8007c4c:	dc13      	bgt.n	8007c76 <_strtod_l+0x3d6>
 8007c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f43f ae5e 	beq.w	8007912 <_strtod_l+0x72>
 8007c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c58:	dd78      	ble.n	8007d4c <_strtod_l+0x4ac>
 8007c5a:	2b16      	cmp	r3, #22
 8007c5c:	dc5f      	bgt.n	8007d1e <_strtod_l+0x47e>
 8007c5e:	4974      	ldr	r1, [pc, #464]	@ (8007e30 <_strtod_l+0x590>)
 8007c60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c68:	4652      	mov	r2, sl
 8007c6a:	465b      	mov	r3, fp
 8007c6c:	f7f8 fcec 	bl	8000648 <__aeabi_dmul>
 8007c70:	4682      	mov	sl, r0
 8007c72:	468b      	mov	fp, r1
 8007c74:	e64d      	b.n	8007912 <_strtod_l+0x72>
 8007c76:	4b6e      	ldr	r3, [pc, #440]	@ (8007e30 <_strtod_l+0x590>)
 8007c78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007c80:	f7f8 fce2 	bl	8000648 <__aeabi_dmul>
 8007c84:	4682      	mov	sl, r0
 8007c86:	9808      	ldr	r0, [sp, #32]
 8007c88:	468b      	mov	fp, r1
 8007c8a:	f7f8 fc63 	bl	8000554 <__aeabi_ui2d>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4650      	mov	r0, sl
 8007c94:	4659      	mov	r1, fp
 8007c96:	f7f8 fb21 	bl	80002dc <__adddf3>
 8007c9a:	2d0f      	cmp	r5, #15
 8007c9c:	4682      	mov	sl, r0
 8007c9e:	468b      	mov	fp, r1
 8007ca0:	ddd5      	ble.n	8007c4e <_strtod_l+0x3ae>
 8007ca2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca4:	1b2c      	subs	r4, r5, r4
 8007ca6:	441c      	add	r4, r3
 8007ca8:	2c00      	cmp	r4, #0
 8007caa:	f340 8096 	ble.w	8007dda <_strtod_l+0x53a>
 8007cae:	f014 030f 	ands.w	r3, r4, #15
 8007cb2:	d00a      	beq.n	8007cca <_strtod_l+0x42a>
 8007cb4:	495e      	ldr	r1, [pc, #376]	@ (8007e30 <_strtod_l+0x590>)
 8007cb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cba:	4652      	mov	r2, sl
 8007cbc:	465b      	mov	r3, fp
 8007cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cc2:	f7f8 fcc1 	bl	8000648 <__aeabi_dmul>
 8007cc6:	4682      	mov	sl, r0
 8007cc8:	468b      	mov	fp, r1
 8007cca:	f034 040f 	bics.w	r4, r4, #15
 8007cce:	d073      	beq.n	8007db8 <_strtod_l+0x518>
 8007cd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007cd4:	dd48      	ble.n	8007d68 <_strtod_l+0x4c8>
 8007cd6:	2400      	movs	r4, #0
 8007cd8:	46a0      	mov	r8, r4
 8007cda:	940a      	str	r4, [sp, #40]	@ 0x28
 8007cdc:	46a1      	mov	r9, r4
 8007cde:	9a05      	ldr	r2, [sp, #20]
 8007ce0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007e38 <_strtod_l+0x598>
 8007ce4:	2322      	movs	r3, #34	@ 0x22
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	f04f 0a00 	mov.w	sl, #0
 8007cec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f43f ae0f 	beq.w	8007912 <_strtod_l+0x72>
 8007cf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cf6:	9805      	ldr	r0, [sp, #20]
 8007cf8:	f7ff f942 	bl	8006f80 <_Bfree>
 8007cfc:	9805      	ldr	r0, [sp, #20]
 8007cfe:	4649      	mov	r1, r9
 8007d00:	f7ff f93e 	bl	8006f80 <_Bfree>
 8007d04:	9805      	ldr	r0, [sp, #20]
 8007d06:	4641      	mov	r1, r8
 8007d08:	f7ff f93a 	bl	8006f80 <_Bfree>
 8007d0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d0e:	9805      	ldr	r0, [sp, #20]
 8007d10:	f7ff f936 	bl	8006f80 <_Bfree>
 8007d14:	9805      	ldr	r0, [sp, #20]
 8007d16:	4621      	mov	r1, r4
 8007d18:	f7ff f932 	bl	8006f80 <_Bfree>
 8007d1c:	e5f9      	b.n	8007912 <_strtod_l+0x72>
 8007d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007d24:	4293      	cmp	r3, r2
 8007d26:	dbbc      	blt.n	8007ca2 <_strtod_l+0x402>
 8007d28:	4c41      	ldr	r4, [pc, #260]	@ (8007e30 <_strtod_l+0x590>)
 8007d2a:	f1c5 050f 	rsb	r5, r5, #15
 8007d2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d32:	4652      	mov	r2, sl
 8007d34:	465b      	mov	r3, fp
 8007d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d3a:	f7f8 fc85 	bl	8000648 <__aeabi_dmul>
 8007d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d40:	1b5d      	subs	r5, r3, r5
 8007d42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d4a:	e78f      	b.n	8007c6c <_strtod_l+0x3cc>
 8007d4c:	3316      	adds	r3, #22
 8007d4e:	dba8      	blt.n	8007ca2 <_strtod_l+0x402>
 8007d50:	4b37      	ldr	r3, [pc, #220]	@ (8007e30 <_strtod_l+0x590>)
 8007d52:	eba9 0808 	sub.w	r8, r9, r8
 8007d56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007d5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007d5e:	4650      	mov	r0, sl
 8007d60:	4659      	mov	r1, fp
 8007d62:	f7f8 fd9b 	bl	800089c <__aeabi_ddiv>
 8007d66:	e783      	b.n	8007c70 <_strtod_l+0x3d0>
 8007d68:	4b32      	ldr	r3, [pc, #200]	@ (8007e34 <_strtod_l+0x594>)
 8007d6a:	9308      	str	r3, [sp, #32]
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	1124      	asrs	r4, r4, #4
 8007d70:	4650      	mov	r0, sl
 8007d72:	4659      	mov	r1, fp
 8007d74:	461e      	mov	r6, r3
 8007d76:	2c01      	cmp	r4, #1
 8007d78:	dc21      	bgt.n	8007dbe <_strtod_l+0x51e>
 8007d7a:	b10b      	cbz	r3, 8007d80 <_strtod_l+0x4e0>
 8007d7c:	4682      	mov	sl, r0
 8007d7e:	468b      	mov	fp, r1
 8007d80:	492c      	ldr	r1, [pc, #176]	@ (8007e34 <_strtod_l+0x594>)
 8007d82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007d86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007d8a:	4652      	mov	r2, sl
 8007d8c:	465b      	mov	r3, fp
 8007d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d92:	f7f8 fc59 	bl	8000648 <__aeabi_dmul>
 8007d96:	4b28      	ldr	r3, [pc, #160]	@ (8007e38 <_strtod_l+0x598>)
 8007d98:	460a      	mov	r2, r1
 8007d9a:	400b      	ands	r3, r1
 8007d9c:	4927      	ldr	r1, [pc, #156]	@ (8007e3c <_strtod_l+0x59c>)
 8007d9e:	428b      	cmp	r3, r1
 8007da0:	4682      	mov	sl, r0
 8007da2:	d898      	bhi.n	8007cd6 <_strtod_l+0x436>
 8007da4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007da8:	428b      	cmp	r3, r1
 8007daa:	bf86      	itte	hi
 8007dac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007e40 <_strtod_l+0x5a0>
 8007db0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007db4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007db8:	2300      	movs	r3, #0
 8007dba:	9308      	str	r3, [sp, #32]
 8007dbc:	e07a      	b.n	8007eb4 <_strtod_l+0x614>
 8007dbe:	07e2      	lsls	r2, r4, #31
 8007dc0:	d505      	bpl.n	8007dce <_strtod_l+0x52e>
 8007dc2:	9b08      	ldr	r3, [sp, #32]
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 fc3e 	bl	8000648 <__aeabi_dmul>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	9a08      	ldr	r2, [sp, #32]
 8007dd0:	3208      	adds	r2, #8
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	1064      	asrs	r4, r4, #1
 8007dd6:	9208      	str	r2, [sp, #32]
 8007dd8:	e7cd      	b.n	8007d76 <_strtod_l+0x4d6>
 8007dda:	d0ed      	beq.n	8007db8 <_strtod_l+0x518>
 8007ddc:	4264      	negs	r4, r4
 8007dde:	f014 020f 	ands.w	r2, r4, #15
 8007de2:	d00a      	beq.n	8007dfa <_strtod_l+0x55a>
 8007de4:	4b12      	ldr	r3, [pc, #72]	@ (8007e30 <_strtod_l+0x590>)
 8007de6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dea:	4650      	mov	r0, sl
 8007dec:	4659      	mov	r1, fp
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f7f8 fd53 	bl	800089c <__aeabi_ddiv>
 8007df6:	4682      	mov	sl, r0
 8007df8:	468b      	mov	fp, r1
 8007dfa:	1124      	asrs	r4, r4, #4
 8007dfc:	d0dc      	beq.n	8007db8 <_strtod_l+0x518>
 8007dfe:	2c1f      	cmp	r4, #31
 8007e00:	dd20      	ble.n	8007e44 <_strtod_l+0x5a4>
 8007e02:	2400      	movs	r4, #0
 8007e04:	46a0      	mov	r8, r4
 8007e06:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e08:	46a1      	mov	r9, r4
 8007e0a:	9a05      	ldr	r2, [sp, #20]
 8007e0c:	2322      	movs	r3, #34	@ 0x22
 8007e0e:	f04f 0a00 	mov.w	sl, #0
 8007e12:	f04f 0b00 	mov.w	fp, #0
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	e768      	b.n	8007cec <_strtod_l+0x44c>
 8007e1a:	bf00      	nop
 8007e1c:	0800a669 	.word	0x0800a669
 8007e20:	0800a87c 	.word	0x0800a87c
 8007e24:	0800a661 	.word	0x0800a661
 8007e28:	0800a698 	.word	0x0800a698
 8007e2c:	0800aa25 	.word	0x0800aa25
 8007e30:	0800a7b0 	.word	0x0800a7b0
 8007e34:	0800a788 	.word	0x0800a788
 8007e38:	7ff00000 	.word	0x7ff00000
 8007e3c:	7ca00000 	.word	0x7ca00000
 8007e40:	7fefffff 	.word	0x7fefffff
 8007e44:	f014 0310 	ands.w	r3, r4, #16
 8007e48:	bf18      	it	ne
 8007e4a:	236a      	movne	r3, #106	@ 0x6a
 8007e4c:	4ea9      	ldr	r6, [pc, #676]	@ (80080f4 <_strtod_l+0x854>)
 8007e4e:	9308      	str	r3, [sp, #32]
 8007e50:	4650      	mov	r0, sl
 8007e52:	4659      	mov	r1, fp
 8007e54:	2300      	movs	r3, #0
 8007e56:	07e2      	lsls	r2, r4, #31
 8007e58:	d504      	bpl.n	8007e64 <_strtod_l+0x5c4>
 8007e5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e5e:	f7f8 fbf3 	bl	8000648 <__aeabi_dmul>
 8007e62:	2301      	movs	r3, #1
 8007e64:	1064      	asrs	r4, r4, #1
 8007e66:	f106 0608 	add.w	r6, r6, #8
 8007e6a:	d1f4      	bne.n	8007e56 <_strtod_l+0x5b6>
 8007e6c:	b10b      	cbz	r3, 8007e72 <_strtod_l+0x5d2>
 8007e6e:	4682      	mov	sl, r0
 8007e70:	468b      	mov	fp, r1
 8007e72:	9b08      	ldr	r3, [sp, #32]
 8007e74:	b1b3      	cbz	r3, 8007ea4 <_strtod_l+0x604>
 8007e76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007e7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	4659      	mov	r1, fp
 8007e82:	dd0f      	ble.n	8007ea4 <_strtod_l+0x604>
 8007e84:	2b1f      	cmp	r3, #31
 8007e86:	dd55      	ble.n	8007f34 <_strtod_l+0x694>
 8007e88:	2b34      	cmp	r3, #52	@ 0x34
 8007e8a:	bfde      	ittt	le
 8007e8c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007e90:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007e94:	4093      	lslle	r3, r2
 8007e96:	f04f 0a00 	mov.w	sl, #0
 8007e9a:	bfcc      	ite	gt
 8007e9c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007ea0:	ea03 0b01 	andle.w	fp, r3, r1
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	4659      	mov	r1, fp
 8007eac:	f7f8 fe34 	bl	8000b18 <__aeabi_dcmpeq>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d1a6      	bne.n	8007e02 <_strtod_l+0x562>
 8007eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007eba:	9805      	ldr	r0, [sp, #20]
 8007ebc:	462b      	mov	r3, r5
 8007ebe:	463a      	mov	r2, r7
 8007ec0:	f7ff f8c6 	bl	8007050 <__s2b>
 8007ec4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f43f af05 	beq.w	8007cd6 <_strtod_l+0x436>
 8007ecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ece:	2a00      	cmp	r2, #0
 8007ed0:	eba9 0308 	sub.w	r3, r9, r8
 8007ed4:	bfa8      	it	ge
 8007ed6:	2300      	movge	r3, #0
 8007ed8:	9312      	str	r3, [sp, #72]	@ 0x48
 8007eda:	2400      	movs	r4, #0
 8007edc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ee0:	9316      	str	r3, [sp, #88]	@ 0x58
 8007ee2:	46a0      	mov	r8, r4
 8007ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ee6:	9805      	ldr	r0, [sp, #20]
 8007ee8:	6859      	ldr	r1, [r3, #4]
 8007eea:	f7ff f809 	bl	8006f00 <_Balloc>
 8007eee:	4681      	mov	r9, r0
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	f43f aef4 	beq.w	8007cde <_strtod_l+0x43e>
 8007ef6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	3202      	adds	r2, #2
 8007efc:	f103 010c 	add.w	r1, r3, #12
 8007f00:	0092      	lsls	r2, r2, #2
 8007f02:	300c      	adds	r0, #12
 8007f04:	f000 fd72 	bl	80089ec <memcpy>
 8007f08:	ec4b ab10 	vmov	d0, sl, fp
 8007f0c:	9805      	ldr	r0, [sp, #20]
 8007f0e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f10:	a91b      	add	r1, sp, #108	@ 0x6c
 8007f12:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007f16:	f7ff fbd7 	bl	80076c8 <__d2b>
 8007f1a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	f43f aede 	beq.w	8007cde <_strtod_l+0x43e>
 8007f22:	9805      	ldr	r0, [sp, #20]
 8007f24:	2101      	movs	r1, #1
 8007f26:	f7ff f929 	bl	800717c <__i2b>
 8007f2a:	4680      	mov	r8, r0
 8007f2c:	b948      	cbnz	r0, 8007f42 <_strtod_l+0x6a2>
 8007f2e:	f04f 0800 	mov.w	r8, #0
 8007f32:	e6d4      	b.n	8007cde <_strtod_l+0x43e>
 8007f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f38:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3c:	ea03 0a0a 	and.w	sl, r3, sl
 8007f40:	e7b0      	b.n	8007ea4 <_strtod_l+0x604>
 8007f42:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007f44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	bfab      	itete	ge
 8007f4a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007f4c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007f4e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007f50:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007f52:	bfac      	ite	ge
 8007f54:	18ef      	addge	r7, r5, r3
 8007f56:	1b5e      	sublt	r6, r3, r5
 8007f58:	9b08      	ldr	r3, [sp, #32]
 8007f5a:	1aed      	subs	r5, r5, r3
 8007f5c:	4415      	add	r5, r2
 8007f5e:	4b66      	ldr	r3, [pc, #408]	@ (80080f8 <_strtod_l+0x858>)
 8007f60:	3d01      	subs	r5, #1
 8007f62:	429d      	cmp	r5, r3
 8007f64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007f68:	da50      	bge.n	800800c <_strtod_l+0x76c>
 8007f6a:	1b5b      	subs	r3, r3, r5
 8007f6c:	2b1f      	cmp	r3, #31
 8007f6e:	eba2 0203 	sub.w	r2, r2, r3
 8007f72:	f04f 0101 	mov.w	r1, #1
 8007f76:	dc3d      	bgt.n	8007ff4 <_strtod_l+0x754>
 8007f78:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f82:	18bd      	adds	r5, r7, r2
 8007f84:	9b08      	ldr	r3, [sp, #32]
 8007f86:	42af      	cmp	r7, r5
 8007f88:	4416      	add	r6, r2
 8007f8a:	441e      	add	r6, r3
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	bfa8      	it	ge
 8007f90:	462b      	movge	r3, r5
 8007f92:	42b3      	cmp	r3, r6
 8007f94:	bfa8      	it	ge
 8007f96:	4633      	movge	r3, r6
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	bfc2      	ittt	gt
 8007f9c:	1aed      	subgt	r5, r5, r3
 8007f9e:	1af6      	subgt	r6, r6, r3
 8007fa0:	1aff      	subgt	r7, r7, r3
 8007fa2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dd16      	ble.n	8007fd6 <_strtod_l+0x736>
 8007fa8:	4641      	mov	r1, r8
 8007faa:	9805      	ldr	r0, [sp, #20]
 8007fac:	461a      	mov	r2, r3
 8007fae:	f7ff f9a5 	bl	80072fc <__pow5mult>
 8007fb2:	4680      	mov	r8, r0
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d0ba      	beq.n	8007f2e <_strtod_l+0x68e>
 8007fb8:	4601      	mov	r1, r0
 8007fba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007fbc:	9805      	ldr	r0, [sp, #20]
 8007fbe:	f7ff f8f3 	bl	80071a8 <__multiply>
 8007fc2:	900e      	str	r0, [sp, #56]	@ 0x38
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f43f ae8a 	beq.w	8007cde <_strtod_l+0x43e>
 8007fca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fcc:	9805      	ldr	r0, [sp, #20]
 8007fce:	f7fe ffd7 	bl	8006f80 <_Bfree>
 8007fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fd6:	2d00      	cmp	r5, #0
 8007fd8:	dc1d      	bgt.n	8008016 <_strtod_l+0x776>
 8007fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	dd23      	ble.n	8008028 <_strtod_l+0x788>
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007fe4:	9805      	ldr	r0, [sp, #20]
 8007fe6:	f7ff f989 	bl	80072fc <__pow5mult>
 8007fea:	4681      	mov	r9, r0
 8007fec:	b9e0      	cbnz	r0, 8008028 <_strtod_l+0x788>
 8007fee:	f04f 0900 	mov.w	r9, #0
 8007ff2:	e674      	b.n	8007cde <_strtod_l+0x43e>
 8007ff4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007ff8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007ffc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008000:	35e2      	adds	r5, #226	@ 0xe2
 8008002:	fa01 f305 	lsl.w	r3, r1, r5
 8008006:	9310      	str	r3, [sp, #64]	@ 0x40
 8008008:	9113      	str	r1, [sp, #76]	@ 0x4c
 800800a:	e7ba      	b.n	8007f82 <_strtod_l+0x6e2>
 800800c:	2300      	movs	r3, #0
 800800e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008010:	2301      	movs	r3, #1
 8008012:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008014:	e7b5      	b.n	8007f82 <_strtod_l+0x6e2>
 8008016:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008018:	9805      	ldr	r0, [sp, #20]
 800801a:	462a      	mov	r2, r5
 800801c:	f7ff f9c8 	bl	80073b0 <__lshift>
 8008020:	901a      	str	r0, [sp, #104]	@ 0x68
 8008022:	2800      	cmp	r0, #0
 8008024:	d1d9      	bne.n	8007fda <_strtod_l+0x73a>
 8008026:	e65a      	b.n	8007cde <_strtod_l+0x43e>
 8008028:	2e00      	cmp	r6, #0
 800802a:	dd07      	ble.n	800803c <_strtod_l+0x79c>
 800802c:	4649      	mov	r1, r9
 800802e:	9805      	ldr	r0, [sp, #20]
 8008030:	4632      	mov	r2, r6
 8008032:	f7ff f9bd 	bl	80073b0 <__lshift>
 8008036:	4681      	mov	r9, r0
 8008038:	2800      	cmp	r0, #0
 800803a:	d0d8      	beq.n	8007fee <_strtod_l+0x74e>
 800803c:	2f00      	cmp	r7, #0
 800803e:	dd08      	ble.n	8008052 <_strtod_l+0x7b2>
 8008040:	4641      	mov	r1, r8
 8008042:	9805      	ldr	r0, [sp, #20]
 8008044:	463a      	mov	r2, r7
 8008046:	f7ff f9b3 	bl	80073b0 <__lshift>
 800804a:	4680      	mov	r8, r0
 800804c:	2800      	cmp	r0, #0
 800804e:	f43f ae46 	beq.w	8007cde <_strtod_l+0x43e>
 8008052:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008054:	9805      	ldr	r0, [sp, #20]
 8008056:	464a      	mov	r2, r9
 8008058:	f7ff fa32 	bl	80074c0 <__mdiff>
 800805c:	4604      	mov	r4, r0
 800805e:	2800      	cmp	r0, #0
 8008060:	f43f ae3d 	beq.w	8007cde <_strtod_l+0x43e>
 8008064:	68c3      	ldr	r3, [r0, #12]
 8008066:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008068:	2300      	movs	r3, #0
 800806a:	60c3      	str	r3, [r0, #12]
 800806c:	4641      	mov	r1, r8
 800806e:	f7ff fa0b 	bl	8007488 <__mcmp>
 8008072:	2800      	cmp	r0, #0
 8008074:	da46      	bge.n	8008104 <_strtod_l+0x864>
 8008076:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008078:	ea53 030a 	orrs.w	r3, r3, sl
 800807c:	d16c      	bne.n	8008158 <_strtod_l+0x8b8>
 800807e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008082:	2b00      	cmp	r3, #0
 8008084:	d168      	bne.n	8008158 <_strtod_l+0x8b8>
 8008086:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800808a:	0d1b      	lsrs	r3, r3, #20
 800808c:	051b      	lsls	r3, r3, #20
 800808e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008092:	d961      	bls.n	8008158 <_strtod_l+0x8b8>
 8008094:	6963      	ldr	r3, [r4, #20]
 8008096:	b913      	cbnz	r3, 800809e <_strtod_l+0x7fe>
 8008098:	6923      	ldr	r3, [r4, #16]
 800809a:	2b01      	cmp	r3, #1
 800809c:	dd5c      	ble.n	8008158 <_strtod_l+0x8b8>
 800809e:	4621      	mov	r1, r4
 80080a0:	2201      	movs	r2, #1
 80080a2:	9805      	ldr	r0, [sp, #20]
 80080a4:	f7ff f984 	bl	80073b0 <__lshift>
 80080a8:	4641      	mov	r1, r8
 80080aa:	4604      	mov	r4, r0
 80080ac:	f7ff f9ec 	bl	8007488 <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	dd51      	ble.n	8008158 <_strtod_l+0x8b8>
 80080b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080b8:	9a08      	ldr	r2, [sp, #32]
 80080ba:	0d1b      	lsrs	r3, r3, #20
 80080bc:	051b      	lsls	r3, r3, #20
 80080be:	2a00      	cmp	r2, #0
 80080c0:	d06b      	beq.n	800819a <_strtod_l+0x8fa>
 80080c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80080c6:	d868      	bhi.n	800819a <_strtod_l+0x8fa>
 80080c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80080cc:	f67f ae9d 	bls.w	8007e0a <_strtod_l+0x56a>
 80080d0:	4b0a      	ldr	r3, [pc, #40]	@ (80080fc <_strtod_l+0x85c>)
 80080d2:	4650      	mov	r0, sl
 80080d4:	4659      	mov	r1, fp
 80080d6:	2200      	movs	r2, #0
 80080d8:	f7f8 fab6 	bl	8000648 <__aeabi_dmul>
 80080dc:	4b08      	ldr	r3, [pc, #32]	@ (8008100 <_strtod_l+0x860>)
 80080de:	400b      	ands	r3, r1
 80080e0:	4682      	mov	sl, r0
 80080e2:	468b      	mov	fp, r1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f47f ae05 	bne.w	8007cf4 <_strtod_l+0x454>
 80080ea:	9a05      	ldr	r2, [sp, #20]
 80080ec:	2322      	movs	r3, #34	@ 0x22
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	e600      	b.n	8007cf4 <_strtod_l+0x454>
 80080f2:	bf00      	nop
 80080f4:	0800a8a8 	.word	0x0800a8a8
 80080f8:	fffffc02 	.word	0xfffffc02
 80080fc:	39500000 	.word	0x39500000
 8008100:	7ff00000 	.word	0x7ff00000
 8008104:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008108:	d165      	bne.n	80081d6 <_strtod_l+0x936>
 800810a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800810c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008110:	b35a      	cbz	r2, 800816a <_strtod_l+0x8ca>
 8008112:	4a9f      	ldr	r2, [pc, #636]	@ (8008390 <_strtod_l+0xaf0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d12b      	bne.n	8008170 <_strtod_l+0x8d0>
 8008118:	9b08      	ldr	r3, [sp, #32]
 800811a:	4651      	mov	r1, sl
 800811c:	b303      	cbz	r3, 8008160 <_strtod_l+0x8c0>
 800811e:	4b9d      	ldr	r3, [pc, #628]	@ (8008394 <_strtod_l+0xaf4>)
 8008120:	465a      	mov	r2, fp
 8008122:	4013      	ands	r3, r2
 8008124:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800812c:	d81b      	bhi.n	8008166 <_strtod_l+0x8c6>
 800812e:	0d1b      	lsrs	r3, r3, #20
 8008130:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	4299      	cmp	r1, r3
 800813a:	d119      	bne.n	8008170 <_strtod_l+0x8d0>
 800813c:	4b96      	ldr	r3, [pc, #600]	@ (8008398 <_strtod_l+0xaf8>)
 800813e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008140:	429a      	cmp	r2, r3
 8008142:	d102      	bne.n	800814a <_strtod_l+0x8aa>
 8008144:	3101      	adds	r1, #1
 8008146:	f43f adca 	beq.w	8007cde <_strtod_l+0x43e>
 800814a:	4b92      	ldr	r3, [pc, #584]	@ (8008394 <_strtod_l+0xaf4>)
 800814c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800814e:	401a      	ands	r2, r3
 8008150:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008154:	f04f 0a00 	mov.w	sl, #0
 8008158:	9b08      	ldr	r3, [sp, #32]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1b8      	bne.n	80080d0 <_strtod_l+0x830>
 800815e:	e5c9      	b.n	8007cf4 <_strtod_l+0x454>
 8008160:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008164:	e7e8      	b.n	8008138 <_strtod_l+0x898>
 8008166:	4613      	mov	r3, r2
 8008168:	e7e6      	b.n	8008138 <_strtod_l+0x898>
 800816a:	ea53 030a 	orrs.w	r3, r3, sl
 800816e:	d0a1      	beq.n	80080b4 <_strtod_l+0x814>
 8008170:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008172:	b1db      	cbz	r3, 80081ac <_strtod_l+0x90c>
 8008174:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008176:	4213      	tst	r3, r2
 8008178:	d0ee      	beq.n	8008158 <_strtod_l+0x8b8>
 800817a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800817c:	9a08      	ldr	r2, [sp, #32]
 800817e:	4650      	mov	r0, sl
 8008180:	4659      	mov	r1, fp
 8008182:	b1bb      	cbz	r3, 80081b4 <_strtod_l+0x914>
 8008184:	f7ff fb6e 	bl	8007864 <sulp>
 8008188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800818c:	ec53 2b10 	vmov	r2, r3, d0
 8008190:	f7f8 f8a4 	bl	80002dc <__adddf3>
 8008194:	4682      	mov	sl, r0
 8008196:	468b      	mov	fp, r1
 8008198:	e7de      	b.n	8008158 <_strtod_l+0x8b8>
 800819a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800819e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80081a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80081a6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80081aa:	e7d5      	b.n	8008158 <_strtod_l+0x8b8>
 80081ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081ae:	ea13 0f0a 	tst.w	r3, sl
 80081b2:	e7e1      	b.n	8008178 <_strtod_l+0x8d8>
 80081b4:	f7ff fb56 	bl	8007864 <sulp>
 80081b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081bc:	ec53 2b10 	vmov	r2, r3, d0
 80081c0:	f7f8 f88a 	bl	80002d8 <__aeabi_dsub>
 80081c4:	2200      	movs	r2, #0
 80081c6:	2300      	movs	r3, #0
 80081c8:	4682      	mov	sl, r0
 80081ca:	468b      	mov	fp, r1
 80081cc:	f7f8 fca4 	bl	8000b18 <__aeabi_dcmpeq>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d0c1      	beq.n	8008158 <_strtod_l+0x8b8>
 80081d4:	e619      	b.n	8007e0a <_strtod_l+0x56a>
 80081d6:	4641      	mov	r1, r8
 80081d8:	4620      	mov	r0, r4
 80081da:	f7ff facd 	bl	8007778 <__ratio>
 80081de:	ec57 6b10 	vmov	r6, r7, d0
 80081e2:	2200      	movs	r2, #0
 80081e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	f7f8 fca8 	bl	8000b40 <__aeabi_dcmple>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d06f      	beq.n	80082d4 <_strtod_l+0xa34>
 80081f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d17a      	bne.n	80082f0 <_strtod_l+0xa50>
 80081fa:	f1ba 0f00 	cmp.w	sl, #0
 80081fe:	d158      	bne.n	80082b2 <_strtod_l+0xa12>
 8008200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008206:	2b00      	cmp	r3, #0
 8008208:	d15a      	bne.n	80082c0 <_strtod_l+0xa20>
 800820a:	4b64      	ldr	r3, [pc, #400]	@ (800839c <_strtod_l+0xafc>)
 800820c:	2200      	movs	r2, #0
 800820e:	4630      	mov	r0, r6
 8008210:	4639      	mov	r1, r7
 8008212:	f7f8 fc8b 	bl	8000b2c <__aeabi_dcmplt>
 8008216:	2800      	cmp	r0, #0
 8008218:	d159      	bne.n	80082ce <_strtod_l+0xa2e>
 800821a:	4630      	mov	r0, r6
 800821c:	4639      	mov	r1, r7
 800821e:	4b60      	ldr	r3, [pc, #384]	@ (80083a0 <_strtod_l+0xb00>)
 8008220:	2200      	movs	r2, #0
 8008222:	f7f8 fa11 	bl	8000648 <__aeabi_dmul>
 8008226:	4606      	mov	r6, r0
 8008228:	460f      	mov	r7, r1
 800822a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800822e:	9606      	str	r6, [sp, #24]
 8008230:	9307      	str	r3, [sp, #28]
 8008232:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008236:	4d57      	ldr	r5, [pc, #348]	@ (8008394 <_strtod_l+0xaf4>)
 8008238:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800823c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823e:	401d      	ands	r5, r3
 8008240:	4b58      	ldr	r3, [pc, #352]	@ (80083a4 <_strtod_l+0xb04>)
 8008242:	429d      	cmp	r5, r3
 8008244:	f040 80b2 	bne.w	80083ac <_strtod_l+0xb0c>
 8008248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800824a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800824e:	ec4b ab10 	vmov	d0, sl, fp
 8008252:	f7ff f9c9 	bl	80075e8 <__ulp>
 8008256:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800825a:	ec51 0b10 	vmov	r0, r1, d0
 800825e:	f7f8 f9f3 	bl	8000648 <__aeabi_dmul>
 8008262:	4652      	mov	r2, sl
 8008264:	465b      	mov	r3, fp
 8008266:	f7f8 f839 	bl	80002dc <__adddf3>
 800826a:	460b      	mov	r3, r1
 800826c:	4949      	ldr	r1, [pc, #292]	@ (8008394 <_strtod_l+0xaf4>)
 800826e:	4a4e      	ldr	r2, [pc, #312]	@ (80083a8 <_strtod_l+0xb08>)
 8008270:	4019      	ands	r1, r3
 8008272:	4291      	cmp	r1, r2
 8008274:	4682      	mov	sl, r0
 8008276:	d942      	bls.n	80082fe <_strtod_l+0xa5e>
 8008278:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800827a:	4b47      	ldr	r3, [pc, #284]	@ (8008398 <_strtod_l+0xaf8>)
 800827c:	429a      	cmp	r2, r3
 800827e:	d103      	bne.n	8008288 <_strtod_l+0x9e8>
 8008280:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008282:	3301      	adds	r3, #1
 8008284:	f43f ad2b 	beq.w	8007cde <_strtod_l+0x43e>
 8008288:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008398 <_strtod_l+0xaf8>
 800828c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008290:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008292:	9805      	ldr	r0, [sp, #20]
 8008294:	f7fe fe74 	bl	8006f80 <_Bfree>
 8008298:	9805      	ldr	r0, [sp, #20]
 800829a:	4649      	mov	r1, r9
 800829c:	f7fe fe70 	bl	8006f80 <_Bfree>
 80082a0:	9805      	ldr	r0, [sp, #20]
 80082a2:	4641      	mov	r1, r8
 80082a4:	f7fe fe6c 	bl	8006f80 <_Bfree>
 80082a8:	9805      	ldr	r0, [sp, #20]
 80082aa:	4621      	mov	r1, r4
 80082ac:	f7fe fe68 	bl	8006f80 <_Bfree>
 80082b0:	e618      	b.n	8007ee4 <_strtod_l+0x644>
 80082b2:	f1ba 0f01 	cmp.w	sl, #1
 80082b6:	d103      	bne.n	80082c0 <_strtod_l+0xa20>
 80082b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f43f ada5 	beq.w	8007e0a <_strtod_l+0x56a>
 80082c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008370 <_strtod_l+0xad0>
 80082c4:	4f35      	ldr	r7, [pc, #212]	@ (800839c <_strtod_l+0xafc>)
 80082c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80082ca:	2600      	movs	r6, #0
 80082cc:	e7b1      	b.n	8008232 <_strtod_l+0x992>
 80082ce:	4f34      	ldr	r7, [pc, #208]	@ (80083a0 <_strtod_l+0xb00>)
 80082d0:	2600      	movs	r6, #0
 80082d2:	e7aa      	b.n	800822a <_strtod_l+0x98a>
 80082d4:	4b32      	ldr	r3, [pc, #200]	@ (80083a0 <_strtod_l+0xb00>)
 80082d6:	4630      	mov	r0, r6
 80082d8:	4639      	mov	r1, r7
 80082da:	2200      	movs	r2, #0
 80082dc:	f7f8 f9b4 	bl	8000648 <__aeabi_dmul>
 80082e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082e2:	4606      	mov	r6, r0
 80082e4:	460f      	mov	r7, r1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d09f      	beq.n	800822a <_strtod_l+0x98a>
 80082ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80082ee:	e7a0      	b.n	8008232 <_strtod_l+0x992>
 80082f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008378 <_strtod_l+0xad8>
 80082f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80082f8:	ec57 6b17 	vmov	r6, r7, d7
 80082fc:	e799      	b.n	8008232 <_strtod_l+0x992>
 80082fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008302:	9b08      	ldr	r3, [sp, #32]
 8008304:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1c1      	bne.n	8008290 <_strtod_l+0x9f0>
 800830c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008310:	0d1b      	lsrs	r3, r3, #20
 8008312:	051b      	lsls	r3, r3, #20
 8008314:	429d      	cmp	r5, r3
 8008316:	d1bb      	bne.n	8008290 <_strtod_l+0x9f0>
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f7f8 fcf4 	bl	8000d08 <__aeabi_d2lz>
 8008320:	f7f8 f964 	bl	80005ec <__aeabi_l2d>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4630      	mov	r0, r6
 800832a:	4639      	mov	r1, r7
 800832c:	f7f7 ffd4 	bl	80002d8 <__aeabi_dsub>
 8008330:	460b      	mov	r3, r1
 8008332:	4602      	mov	r2, r0
 8008334:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008338:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800833c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800833e:	ea46 060a 	orr.w	r6, r6, sl
 8008342:	431e      	orrs	r6, r3
 8008344:	d06f      	beq.n	8008426 <_strtod_l+0xb86>
 8008346:	a30e      	add	r3, pc, #56	@ (adr r3, 8008380 <_strtod_l+0xae0>)
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f7f8 fbee 	bl	8000b2c <__aeabi_dcmplt>
 8008350:	2800      	cmp	r0, #0
 8008352:	f47f accf 	bne.w	8007cf4 <_strtod_l+0x454>
 8008356:	a30c      	add	r3, pc, #48	@ (adr r3, 8008388 <_strtod_l+0xae8>)
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008360:	f7f8 fc02 	bl	8000b68 <__aeabi_dcmpgt>
 8008364:	2800      	cmp	r0, #0
 8008366:	d093      	beq.n	8008290 <_strtod_l+0x9f0>
 8008368:	e4c4      	b.n	8007cf4 <_strtod_l+0x454>
 800836a:	bf00      	nop
 800836c:	f3af 8000 	nop.w
 8008370:	00000000 	.word	0x00000000
 8008374:	bff00000 	.word	0xbff00000
 8008378:	00000000 	.word	0x00000000
 800837c:	3ff00000 	.word	0x3ff00000
 8008380:	94a03595 	.word	0x94a03595
 8008384:	3fdfffff 	.word	0x3fdfffff
 8008388:	35afe535 	.word	0x35afe535
 800838c:	3fe00000 	.word	0x3fe00000
 8008390:	000fffff 	.word	0x000fffff
 8008394:	7ff00000 	.word	0x7ff00000
 8008398:	7fefffff 	.word	0x7fefffff
 800839c:	3ff00000 	.word	0x3ff00000
 80083a0:	3fe00000 	.word	0x3fe00000
 80083a4:	7fe00000 	.word	0x7fe00000
 80083a8:	7c9fffff 	.word	0x7c9fffff
 80083ac:	9b08      	ldr	r3, [sp, #32]
 80083ae:	b323      	cbz	r3, 80083fa <_strtod_l+0xb5a>
 80083b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80083b4:	d821      	bhi.n	80083fa <_strtod_l+0xb5a>
 80083b6:	a328      	add	r3, pc, #160	@ (adr r3, 8008458 <_strtod_l+0xbb8>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	4630      	mov	r0, r6
 80083be:	4639      	mov	r1, r7
 80083c0:	f7f8 fbbe 	bl	8000b40 <__aeabi_dcmple>
 80083c4:	b1a0      	cbz	r0, 80083f0 <_strtod_l+0xb50>
 80083c6:	4639      	mov	r1, r7
 80083c8:	4630      	mov	r0, r6
 80083ca:	f7f8 fc15 	bl	8000bf8 <__aeabi_d2uiz>
 80083ce:	2801      	cmp	r0, #1
 80083d0:	bf38      	it	cc
 80083d2:	2001      	movcc	r0, #1
 80083d4:	f7f8 f8be 	bl	8000554 <__aeabi_ui2d>
 80083d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083da:	4606      	mov	r6, r0
 80083dc:	460f      	mov	r7, r1
 80083de:	b9fb      	cbnz	r3, 8008420 <_strtod_l+0xb80>
 80083e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80083e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80083e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80083e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80083ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80083f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80083f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80083f6:	1b5b      	subs	r3, r3, r5
 80083f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80083fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80083fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008402:	f7ff f8f1 	bl	80075e8 <__ulp>
 8008406:	4650      	mov	r0, sl
 8008408:	ec53 2b10 	vmov	r2, r3, d0
 800840c:	4659      	mov	r1, fp
 800840e:	f7f8 f91b 	bl	8000648 <__aeabi_dmul>
 8008412:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008416:	f7f7 ff61 	bl	80002dc <__adddf3>
 800841a:	4682      	mov	sl, r0
 800841c:	468b      	mov	fp, r1
 800841e:	e770      	b.n	8008302 <_strtod_l+0xa62>
 8008420:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008424:	e7e0      	b.n	80083e8 <_strtod_l+0xb48>
 8008426:	a30e      	add	r3, pc, #56	@ (adr r3, 8008460 <_strtod_l+0xbc0>)
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	f7f8 fb7e 	bl	8000b2c <__aeabi_dcmplt>
 8008430:	e798      	b.n	8008364 <_strtod_l+0xac4>
 8008432:	2300      	movs	r3, #0
 8008434:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008436:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008438:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	f7ff ba6d 	b.w	800791a <_strtod_l+0x7a>
 8008440:	2a65      	cmp	r2, #101	@ 0x65
 8008442:	f43f ab66 	beq.w	8007b12 <_strtod_l+0x272>
 8008446:	2a45      	cmp	r2, #69	@ 0x45
 8008448:	f43f ab63 	beq.w	8007b12 <_strtod_l+0x272>
 800844c:	2301      	movs	r3, #1
 800844e:	f7ff bb9e 	b.w	8007b8e <_strtod_l+0x2ee>
 8008452:	bf00      	nop
 8008454:	f3af 8000 	nop.w
 8008458:	ffc00000 	.word	0xffc00000
 800845c:	41dfffff 	.word	0x41dfffff
 8008460:	94a03595 	.word	0x94a03595
 8008464:	3fcfffff 	.word	0x3fcfffff

08008468 <_strtod_r>:
 8008468:	4b01      	ldr	r3, [pc, #4]	@ (8008470 <_strtod_r+0x8>)
 800846a:	f7ff ba19 	b.w	80078a0 <_strtod_l>
 800846e:	bf00      	nop
 8008470:	20000068 	.word	0x20000068

08008474 <_strtol_l.constprop.0>:
 8008474:	2b24      	cmp	r3, #36	@ 0x24
 8008476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847a:	4686      	mov	lr, r0
 800847c:	4690      	mov	r8, r2
 800847e:	d801      	bhi.n	8008484 <_strtol_l.constprop.0+0x10>
 8008480:	2b01      	cmp	r3, #1
 8008482:	d106      	bne.n	8008492 <_strtol_l.constprop.0+0x1e>
 8008484:	f7fd fdba 	bl	8005ffc <__errno>
 8008488:	2316      	movs	r3, #22
 800848a:	6003      	str	r3, [r0, #0]
 800848c:	2000      	movs	r0, #0
 800848e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008492:	4834      	ldr	r0, [pc, #208]	@ (8008564 <_strtol_l.constprop.0+0xf0>)
 8008494:	460d      	mov	r5, r1
 8008496:	462a      	mov	r2, r5
 8008498:	f815 4b01 	ldrb.w	r4, [r5], #1
 800849c:	5d06      	ldrb	r6, [r0, r4]
 800849e:	f016 0608 	ands.w	r6, r6, #8
 80084a2:	d1f8      	bne.n	8008496 <_strtol_l.constprop.0+0x22>
 80084a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80084a6:	d12d      	bne.n	8008504 <_strtol_l.constprop.0+0x90>
 80084a8:	782c      	ldrb	r4, [r5, #0]
 80084aa:	2601      	movs	r6, #1
 80084ac:	1c95      	adds	r5, r2, #2
 80084ae:	f033 0210 	bics.w	r2, r3, #16
 80084b2:	d109      	bne.n	80084c8 <_strtol_l.constprop.0+0x54>
 80084b4:	2c30      	cmp	r4, #48	@ 0x30
 80084b6:	d12a      	bne.n	800850e <_strtol_l.constprop.0+0x9a>
 80084b8:	782a      	ldrb	r2, [r5, #0]
 80084ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084be:	2a58      	cmp	r2, #88	@ 0x58
 80084c0:	d125      	bne.n	800850e <_strtol_l.constprop.0+0x9a>
 80084c2:	786c      	ldrb	r4, [r5, #1]
 80084c4:	2310      	movs	r3, #16
 80084c6:	3502      	adds	r5, #2
 80084c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80084cc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80084d0:	2200      	movs	r2, #0
 80084d2:	fbbc f9f3 	udiv	r9, ip, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80084dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80084e0:	2f09      	cmp	r7, #9
 80084e2:	d81b      	bhi.n	800851c <_strtol_l.constprop.0+0xa8>
 80084e4:	463c      	mov	r4, r7
 80084e6:	42a3      	cmp	r3, r4
 80084e8:	dd27      	ble.n	800853a <_strtol_l.constprop.0+0xc6>
 80084ea:	1c57      	adds	r7, r2, #1
 80084ec:	d007      	beq.n	80084fe <_strtol_l.constprop.0+0x8a>
 80084ee:	4581      	cmp	r9, r0
 80084f0:	d320      	bcc.n	8008534 <_strtol_l.constprop.0+0xc0>
 80084f2:	d101      	bne.n	80084f8 <_strtol_l.constprop.0+0x84>
 80084f4:	45a2      	cmp	sl, r4
 80084f6:	db1d      	blt.n	8008534 <_strtol_l.constprop.0+0xc0>
 80084f8:	fb00 4003 	mla	r0, r0, r3, r4
 80084fc:	2201      	movs	r2, #1
 80084fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008502:	e7eb      	b.n	80084dc <_strtol_l.constprop.0+0x68>
 8008504:	2c2b      	cmp	r4, #43	@ 0x2b
 8008506:	bf04      	itt	eq
 8008508:	782c      	ldrbeq	r4, [r5, #0]
 800850a:	1c95      	addeq	r5, r2, #2
 800850c:	e7cf      	b.n	80084ae <_strtol_l.constprop.0+0x3a>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1da      	bne.n	80084c8 <_strtol_l.constprop.0+0x54>
 8008512:	2c30      	cmp	r4, #48	@ 0x30
 8008514:	bf0c      	ite	eq
 8008516:	2308      	moveq	r3, #8
 8008518:	230a      	movne	r3, #10
 800851a:	e7d5      	b.n	80084c8 <_strtol_l.constprop.0+0x54>
 800851c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008520:	2f19      	cmp	r7, #25
 8008522:	d801      	bhi.n	8008528 <_strtol_l.constprop.0+0xb4>
 8008524:	3c37      	subs	r4, #55	@ 0x37
 8008526:	e7de      	b.n	80084e6 <_strtol_l.constprop.0+0x72>
 8008528:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800852c:	2f19      	cmp	r7, #25
 800852e:	d804      	bhi.n	800853a <_strtol_l.constprop.0+0xc6>
 8008530:	3c57      	subs	r4, #87	@ 0x57
 8008532:	e7d8      	b.n	80084e6 <_strtol_l.constprop.0+0x72>
 8008534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008538:	e7e1      	b.n	80084fe <_strtol_l.constprop.0+0x8a>
 800853a:	1c53      	adds	r3, r2, #1
 800853c:	d108      	bne.n	8008550 <_strtol_l.constprop.0+0xdc>
 800853e:	2322      	movs	r3, #34	@ 0x22
 8008540:	f8ce 3000 	str.w	r3, [lr]
 8008544:	4660      	mov	r0, ip
 8008546:	f1b8 0f00 	cmp.w	r8, #0
 800854a:	d0a0      	beq.n	800848e <_strtol_l.constprop.0+0x1a>
 800854c:	1e69      	subs	r1, r5, #1
 800854e:	e006      	b.n	800855e <_strtol_l.constprop.0+0xea>
 8008550:	b106      	cbz	r6, 8008554 <_strtol_l.constprop.0+0xe0>
 8008552:	4240      	negs	r0, r0
 8008554:	f1b8 0f00 	cmp.w	r8, #0
 8008558:	d099      	beq.n	800848e <_strtol_l.constprop.0+0x1a>
 800855a:	2a00      	cmp	r2, #0
 800855c:	d1f6      	bne.n	800854c <_strtol_l.constprop.0+0xd8>
 800855e:	f8c8 1000 	str.w	r1, [r8]
 8008562:	e794      	b.n	800848e <_strtol_l.constprop.0+0x1a>
 8008564:	0800a8d1 	.word	0x0800a8d1

08008568 <_strtol_r>:
 8008568:	f7ff bf84 	b.w	8008474 <_strtol_l.constprop.0>

0800856c <__ssputs_r>:
 800856c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008570:	688e      	ldr	r6, [r1, #8]
 8008572:	461f      	mov	r7, r3
 8008574:	42be      	cmp	r6, r7
 8008576:	680b      	ldr	r3, [r1, #0]
 8008578:	4682      	mov	sl, r0
 800857a:	460c      	mov	r4, r1
 800857c:	4690      	mov	r8, r2
 800857e:	d82d      	bhi.n	80085dc <__ssputs_r+0x70>
 8008580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008584:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008588:	d026      	beq.n	80085d8 <__ssputs_r+0x6c>
 800858a:	6965      	ldr	r5, [r4, #20]
 800858c:	6909      	ldr	r1, [r1, #16]
 800858e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008592:	eba3 0901 	sub.w	r9, r3, r1
 8008596:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800859a:	1c7b      	adds	r3, r7, #1
 800859c:	444b      	add	r3, r9
 800859e:	106d      	asrs	r5, r5, #1
 80085a0:	429d      	cmp	r5, r3
 80085a2:	bf38      	it	cc
 80085a4:	461d      	movcc	r5, r3
 80085a6:	0553      	lsls	r3, r2, #21
 80085a8:	d527      	bpl.n	80085fa <__ssputs_r+0x8e>
 80085aa:	4629      	mov	r1, r5
 80085ac:	f7fe fc1c 	bl	8006de8 <_malloc_r>
 80085b0:	4606      	mov	r6, r0
 80085b2:	b360      	cbz	r0, 800860e <__ssputs_r+0xa2>
 80085b4:	6921      	ldr	r1, [r4, #16]
 80085b6:	464a      	mov	r2, r9
 80085b8:	f000 fa18 	bl	80089ec <memcpy>
 80085bc:	89a3      	ldrh	r3, [r4, #12]
 80085be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085c6:	81a3      	strh	r3, [r4, #12]
 80085c8:	6126      	str	r6, [r4, #16]
 80085ca:	6165      	str	r5, [r4, #20]
 80085cc:	444e      	add	r6, r9
 80085ce:	eba5 0509 	sub.w	r5, r5, r9
 80085d2:	6026      	str	r6, [r4, #0]
 80085d4:	60a5      	str	r5, [r4, #8]
 80085d6:	463e      	mov	r6, r7
 80085d8:	42be      	cmp	r6, r7
 80085da:	d900      	bls.n	80085de <__ssputs_r+0x72>
 80085dc:	463e      	mov	r6, r7
 80085de:	6820      	ldr	r0, [r4, #0]
 80085e0:	4632      	mov	r2, r6
 80085e2:	4641      	mov	r1, r8
 80085e4:	f000 f9c6 	bl	8008974 <memmove>
 80085e8:	68a3      	ldr	r3, [r4, #8]
 80085ea:	1b9b      	subs	r3, r3, r6
 80085ec:	60a3      	str	r3, [r4, #8]
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	4433      	add	r3, r6
 80085f2:	6023      	str	r3, [r4, #0]
 80085f4:	2000      	movs	r0, #0
 80085f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fa:	462a      	mov	r2, r5
 80085fc:	f000 fd89 	bl	8009112 <_realloc_r>
 8008600:	4606      	mov	r6, r0
 8008602:	2800      	cmp	r0, #0
 8008604:	d1e0      	bne.n	80085c8 <__ssputs_r+0x5c>
 8008606:	6921      	ldr	r1, [r4, #16]
 8008608:	4650      	mov	r0, sl
 800860a:	f7fe fb79 	bl	8006d00 <_free_r>
 800860e:	230c      	movs	r3, #12
 8008610:	f8ca 3000 	str.w	r3, [sl]
 8008614:	89a3      	ldrh	r3, [r4, #12]
 8008616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008620:	e7e9      	b.n	80085f6 <__ssputs_r+0x8a>
	...

08008624 <_svfiprintf_r>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	4698      	mov	r8, r3
 800862a:	898b      	ldrh	r3, [r1, #12]
 800862c:	061b      	lsls	r3, r3, #24
 800862e:	b09d      	sub	sp, #116	@ 0x74
 8008630:	4607      	mov	r7, r0
 8008632:	460d      	mov	r5, r1
 8008634:	4614      	mov	r4, r2
 8008636:	d510      	bpl.n	800865a <_svfiprintf_r+0x36>
 8008638:	690b      	ldr	r3, [r1, #16]
 800863a:	b973      	cbnz	r3, 800865a <_svfiprintf_r+0x36>
 800863c:	2140      	movs	r1, #64	@ 0x40
 800863e:	f7fe fbd3 	bl	8006de8 <_malloc_r>
 8008642:	6028      	str	r0, [r5, #0]
 8008644:	6128      	str	r0, [r5, #16]
 8008646:	b930      	cbnz	r0, 8008656 <_svfiprintf_r+0x32>
 8008648:	230c      	movs	r3, #12
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008650:	b01d      	add	sp, #116	@ 0x74
 8008652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008656:	2340      	movs	r3, #64	@ 0x40
 8008658:	616b      	str	r3, [r5, #20]
 800865a:	2300      	movs	r3, #0
 800865c:	9309      	str	r3, [sp, #36]	@ 0x24
 800865e:	2320      	movs	r3, #32
 8008660:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008664:	f8cd 800c 	str.w	r8, [sp, #12]
 8008668:	2330      	movs	r3, #48	@ 0x30
 800866a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008808 <_svfiprintf_r+0x1e4>
 800866e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008672:	f04f 0901 	mov.w	r9, #1
 8008676:	4623      	mov	r3, r4
 8008678:	469a      	mov	sl, r3
 800867a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800867e:	b10a      	cbz	r2, 8008684 <_svfiprintf_r+0x60>
 8008680:	2a25      	cmp	r2, #37	@ 0x25
 8008682:	d1f9      	bne.n	8008678 <_svfiprintf_r+0x54>
 8008684:	ebba 0b04 	subs.w	fp, sl, r4
 8008688:	d00b      	beq.n	80086a2 <_svfiprintf_r+0x7e>
 800868a:	465b      	mov	r3, fp
 800868c:	4622      	mov	r2, r4
 800868e:	4629      	mov	r1, r5
 8008690:	4638      	mov	r0, r7
 8008692:	f7ff ff6b 	bl	800856c <__ssputs_r>
 8008696:	3001      	adds	r0, #1
 8008698:	f000 80a7 	beq.w	80087ea <_svfiprintf_r+0x1c6>
 800869c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800869e:	445a      	add	r2, fp
 80086a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80086a2:	f89a 3000 	ldrb.w	r3, [sl]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 809f 	beq.w	80087ea <_svfiprintf_r+0x1c6>
 80086ac:	2300      	movs	r3, #0
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80086b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086b6:	f10a 0a01 	add.w	sl, sl, #1
 80086ba:	9304      	str	r3, [sp, #16]
 80086bc:	9307      	str	r3, [sp, #28]
 80086be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80086c4:	4654      	mov	r4, sl
 80086c6:	2205      	movs	r2, #5
 80086c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086cc:	484e      	ldr	r0, [pc, #312]	@ (8008808 <_svfiprintf_r+0x1e4>)
 80086ce:	f7f7 fda7 	bl	8000220 <memchr>
 80086d2:	9a04      	ldr	r2, [sp, #16]
 80086d4:	b9d8      	cbnz	r0, 800870e <_svfiprintf_r+0xea>
 80086d6:	06d0      	lsls	r0, r2, #27
 80086d8:	bf44      	itt	mi
 80086da:	2320      	movmi	r3, #32
 80086dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086e0:	0711      	lsls	r1, r2, #28
 80086e2:	bf44      	itt	mi
 80086e4:	232b      	movmi	r3, #43	@ 0x2b
 80086e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086ea:	f89a 3000 	ldrb.w	r3, [sl]
 80086ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80086f0:	d015      	beq.n	800871e <_svfiprintf_r+0xfa>
 80086f2:	9a07      	ldr	r2, [sp, #28]
 80086f4:	4654      	mov	r4, sl
 80086f6:	2000      	movs	r0, #0
 80086f8:	f04f 0c0a 	mov.w	ip, #10
 80086fc:	4621      	mov	r1, r4
 80086fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008702:	3b30      	subs	r3, #48	@ 0x30
 8008704:	2b09      	cmp	r3, #9
 8008706:	d94b      	bls.n	80087a0 <_svfiprintf_r+0x17c>
 8008708:	b1b0      	cbz	r0, 8008738 <_svfiprintf_r+0x114>
 800870a:	9207      	str	r2, [sp, #28]
 800870c:	e014      	b.n	8008738 <_svfiprintf_r+0x114>
 800870e:	eba0 0308 	sub.w	r3, r0, r8
 8008712:	fa09 f303 	lsl.w	r3, r9, r3
 8008716:	4313      	orrs	r3, r2
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	46a2      	mov	sl, r4
 800871c:	e7d2      	b.n	80086c4 <_svfiprintf_r+0xa0>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	1d19      	adds	r1, r3, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	9103      	str	r1, [sp, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	bfbb      	ittet	lt
 800872a:	425b      	neglt	r3, r3
 800872c:	f042 0202 	orrlt.w	r2, r2, #2
 8008730:	9307      	strge	r3, [sp, #28]
 8008732:	9307      	strlt	r3, [sp, #28]
 8008734:	bfb8      	it	lt
 8008736:	9204      	strlt	r2, [sp, #16]
 8008738:	7823      	ldrb	r3, [r4, #0]
 800873a:	2b2e      	cmp	r3, #46	@ 0x2e
 800873c:	d10a      	bne.n	8008754 <_svfiprintf_r+0x130>
 800873e:	7863      	ldrb	r3, [r4, #1]
 8008740:	2b2a      	cmp	r3, #42	@ 0x2a
 8008742:	d132      	bne.n	80087aa <_svfiprintf_r+0x186>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	1d1a      	adds	r2, r3, #4
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	9203      	str	r2, [sp, #12]
 800874c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008750:	3402      	adds	r4, #2
 8008752:	9305      	str	r3, [sp, #20]
 8008754:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008818 <_svfiprintf_r+0x1f4>
 8008758:	7821      	ldrb	r1, [r4, #0]
 800875a:	2203      	movs	r2, #3
 800875c:	4650      	mov	r0, sl
 800875e:	f7f7 fd5f 	bl	8000220 <memchr>
 8008762:	b138      	cbz	r0, 8008774 <_svfiprintf_r+0x150>
 8008764:	9b04      	ldr	r3, [sp, #16]
 8008766:	eba0 000a 	sub.w	r0, r0, sl
 800876a:	2240      	movs	r2, #64	@ 0x40
 800876c:	4082      	lsls	r2, r0
 800876e:	4313      	orrs	r3, r2
 8008770:	3401      	adds	r4, #1
 8008772:	9304      	str	r3, [sp, #16]
 8008774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008778:	4824      	ldr	r0, [pc, #144]	@ (800880c <_svfiprintf_r+0x1e8>)
 800877a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800877e:	2206      	movs	r2, #6
 8008780:	f7f7 fd4e 	bl	8000220 <memchr>
 8008784:	2800      	cmp	r0, #0
 8008786:	d036      	beq.n	80087f6 <_svfiprintf_r+0x1d2>
 8008788:	4b21      	ldr	r3, [pc, #132]	@ (8008810 <_svfiprintf_r+0x1ec>)
 800878a:	bb1b      	cbnz	r3, 80087d4 <_svfiprintf_r+0x1b0>
 800878c:	9b03      	ldr	r3, [sp, #12]
 800878e:	3307      	adds	r3, #7
 8008790:	f023 0307 	bic.w	r3, r3, #7
 8008794:	3308      	adds	r3, #8
 8008796:	9303      	str	r3, [sp, #12]
 8008798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879a:	4433      	add	r3, r6
 800879c:	9309      	str	r3, [sp, #36]	@ 0x24
 800879e:	e76a      	b.n	8008676 <_svfiprintf_r+0x52>
 80087a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80087a4:	460c      	mov	r4, r1
 80087a6:	2001      	movs	r0, #1
 80087a8:	e7a8      	b.n	80086fc <_svfiprintf_r+0xd8>
 80087aa:	2300      	movs	r3, #0
 80087ac:	3401      	adds	r4, #1
 80087ae:	9305      	str	r3, [sp, #20]
 80087b0:	4619      	mov	r1, r3
 80087b2:	f04f 0c0a 	mov.w	ip, #10
 80087b6:	4620      	mov	r0, r4
 80087b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087bc:	3a30      	subs	r2, #48	@ 0x30
 80087be:	2a09      	cmp	r2, #9
 80087c0:	d903      	bls.n	80087ca <_svfiprintf_r+0x1a6>
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0c6      	beq.n	8008754 <_svfiprintf_r+0x130>
 80087c6:	9105      	str	r1, [sp, #20]
 80087c8:	e7c4      	b.n	8008754 <_svfiprintf_r+0x130>
 80087ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ce:	4604      	mov	r4, r0
 80087d0:	2301      	movs	r3, #1
 80087d2:	e7f0      	b.n	80087b6 <_svfiprintf_r+0x192>
 80087d4:	ab03      	add	r3, sp, #12
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	462a      	mov	r2, r5
 80087da:	4b0e      	ldr	r3, [pc, #56]	@ (8008814 <_svfiprintf_r+0x1f0>)
 80087dc:	a904      	add	r1, sp, #16
 80087de:	4638      	mov	r0, r7
 80087e0:	f7fc fcc8 	bl	8005174 <_printf_float>
 80087e4:	1c42      	adds	r2, r0, #1
 80087e6:	4606      	mov	r6, r0
 80087e8:	d1d6      	bne.n	8008798 <_svfiprintf_r+0x174>
 80087ea:	89ab      	ldrh	r3, [r5, #12]
 80087ec:	065b      	lsls	r3, r3, #25
 80087ee:	f53f af2d 	bmi.w	800864c <_svfiprintf_r+0x28>
 80087f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087f4:	e72c      	b.n	8008650 <_svfiprintf_r+0x2c>
 80087f6:	ab03      	add	r3, sp, #12
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	462a      	mov	r2, r5
 80087fc:	4b05      	ldr	r3, [pc, #20]	@ (8008814 <_svfiprintf_r+0x1f0>)
 80087fe:	a904      	add	r1, sp, #16
 8008800:	4638      	mov	r0, r7
 8008802:	f7fc ff4f 	bl	80056a4 <_printf_i>
 8008806:	e7ed      	b.n	80087e4 <_svfiprintf_r+0x1c0>
 8008808:	0800a9d1 	.word	0x0800a9d1
 800880c:	0800a9db 	.word	0x0800a9db
 8008810:	08005175 	.word	0x08005175
 8008814:	0800856d 	.word	0x0800856d
 8008818:	0800a9d7 	.word	0x0800a9d7

0800881c <__sflush_r>:
 800881c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008824:	0716      	lsls	r6, r2, #28
 8008826:	4605      	mov	r5, r0
 8008828:	460c      	mov	r4, r1
 800882a:	d454      	bmi.n	80088d6 <__sflush_r+0xba>
 800882c:	684b      	ldr	r3, [r1, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	dc02      	bgt.n	8008838 <__sflush_r+0x1c>
 8008832:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008834:	2b00      	cmp	r3, #0
 8008836:	dd48      	ble.n	80088ca <__sflush_r+0xae>
 8008838:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800883a:	2e00      	cmp	r6, #0
 800883c:	d045      	beq.n	80088ca <__sflush_r+0xae>
 800883e:	2300      	movs	r3, #0
 8008840:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008844:	682f      	ldr	r7, [r5, #0]
 8008846:	6a21      	ldr	r1, [r4, #32]
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	d030      	beq.n	80088ae <__sflush_r+0x92>
 800884c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	0759      	lsls	r1, r3, #29
 8008852:	d505      	bpl.n	8008860 <__sflush_r+0x44>
 8008854:	6863      	ldr	r3, [r4, #4]
 8008856:	1ad2      	subs	r2, r2, r3
 8008858:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800885a:	b10b      	cbz	r3, 8008860 <__sflush_r+0x44>
 800885c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	2300      	movs	r3, #0
 8008862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008864:	6a21      	ldr	r1, [r4, #32]
 8008866:	4628      	mov	r0, r5
 8008868:	47b0      	blx	r6
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	d106      	bne.n	800887e <__sflush_r+0x62>
 8008870:	6829      	ldr	r1, [r5, #0]
 8008872:	291d      	cmp	r1, #29
 8008874:	d82b      	bhi.n	80088ce <__sflush_r+0xb2>
 8008876:	4a2a      	ldr	r2, [pc, #168]	@ (8008920 <__sflush_r+0x104>)
 8008878:	410a      	asrs	r2, r1
 800887a:	07d6      	lsls	r6, r2, #31
 800887c:	d427      	bmi.n	80088ce <__sflush_r+0xb2>
 800887e:	2200      	movs	r2, #0
 8008880:	6062      	str	r2, [r4, #4]
 8008882:	04d9      	lsls	r1, r3, #19
 8008884:	6922      	ldr	r2, [r4, #16]
 8008886:	6022      	str	r2, [r4, #0]
 8008888:	d504      	bpl.n	8008894 <__sflush_r+0x78>
 800888a:	1c42      	adds	r2, r0, #1
 800888c:	d101      	bne.n	8008892 <__sflush_r+0x76>
 800888e:	682b      	ldr	r3, [r5, #0]
 8008890:	b903      	cbnz	r3, 8008894 <__sflush_r+0x78>
 8008892:	6560      	str	r0, [r4, #84]	@ 0x54
 8008894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008896:	602f      	str	r7, [r5, #0]
 8008898:	b1b9      	cbz	r1, 80088ca <__sflush_r+0xae>
 800889a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800889e:	4299      	cmp	r1, r3
 80088a0:	d002      	beq.n	80088a8 <__sflush_r+0x8c>
 80088a2:	4628      	mov	r0, r5
 80088a4:	f7fe fa2c 	bl	8006d00 <_free_r>
 80088a8:	2300      	movs	r3, #0
 80088aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80088ac:	e00d      	b.n	80088ca <__sflush_r+0xae>
 80088ae:	2301      	movs	r3, #1
 80088b0:	4628      	mov	r0, r5
 80088b2:	47b0      	blx	r6
 80088b4:	4602      	mov	r2, r0
 80088b6:	1c50      	adds	r0, r2, #1
 80088b8:	d1c9      	bne.n	800884e <__sflush_r+0x32>
 80088ba:	682b      	ldr	r3, [r5, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0c6      	beq.n	800884e <__sflush_r+0x32>
 80088c0:	2b1d      	cmp	r3, #29
 80088c2:	d001      	beq.n	80088c8 <__sflush_r+0xac>
 80088c4:	2b16      	cmp	r3, #22
 80088c6:	d11e      	bne.n	8008906 <__sflush_r+0xea>
 80088c8:	602f      	str	r7, [r5, #0]
 80088ca:	2000      	movs	r0, #0
 80088cc:	e022      	b.n	8008914 <__sflush_r+0xf8>
 80088ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088d2:	b21b      	sxth	r3, r3
 80088d4:	e01b      	b.n	800890e <__sflush_r+0xf2>
 80088d6:	690f      	ldr	r7, [r1, #16]
 80088d8:	2f00      	cmp	r7, #0
 80088da:	d0f6      	beq.n	80088ca <__sflush_r+0xae>
 80088dc:	0793      	lsls	r3, r2, #30
 80088de:	680e      	ldr	r6, [r1, #0]
 80088e0:	bf08      	it	eq
 80088e2:	694b      	ldreq	r3, [r1, #20]
 80088e4:	600f      	str	r7, [r1, #0]
 80088e6:	bf18      	it	ne
 80088e8:	2300      	movne	r3, #0
 80088ea:	eba6 0807 	sub.w	r8, r6, r7
 80088ee:	608b      	str	r3, [r1, #8]
 80088f0:	f1b8 0f00 	cmp.w	r8, #0
 80088f4:	dde9      	ble.n	80088ca <__sflush_r+0xae>
 80088f6:	6a21      	ldr	r1, [r4, #32]
 80088f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088fa:	4643      	mov	r3, r8
 80088fc:	463a      	mov	r2, r7
 80088fe:	4628      	mov	r0, r5
 8008900:	47b0      	blx	r6
 8008902:	2800      	cmp	r0, #0
 8008904:	dc08      	bgt.n	8008918 <__sflush_r+0xfc>
 8008906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800890e:	81a3      	strh	r3, [r4, #12]
 8008910:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	4407      	add	r7, r0
 800891a:	eba8 0800 	sub.w	r8, r8, r0
 800891e:	e7e7      	b.n	80088f0 <__sflush_r+0xd4>
 8008920:	dfbffffe 	.word	0xdfbffffe

08008924 <_fflush_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	690b      	ldr	r3, [r1, #16]
 8008928:	4605      	mov	r5, r0
 800892a:	460c      	mov	r4, r1
 800892c:	b913      	cbnz	r3, 8008934 <_fflush_r+0x10>
 800892e:	2500      	movs	r5, #0
 8008930:	4628      	mov	r0, r5
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	b118      	cbz	r0, 800893e <_fflush_r+0x1a>
 8008936:	6a03      	ldr	r3, [r0, #32]
 8008938:	b90b      	cbnz	r3, 800893e <_fflush_r+0x1a>
 800893a:	f7fd fa73 	bl	8005e24 <__sinit>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0f3      	beq.n	800892e <_fflush_r+0xa>
 8008946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008948:	07d0      	lsls	r0, r2, #31
 800894a:	d404      	bmi.n	8008956 <_fflush_r+0x32>
 800894c:	0599      	lsls	r1, r3, #22
 800894e:	d402      	bmi.n	8008956 <_fflush_r+0x32>
 8008950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008952:	f7fd fb7e 	bl	8006052 <__retarget_lock_acquire_recursive>
 8008956:	4628      	mov	r0, r5
 8008958:	4621      	mov	r1, r4
 800895a:	f7ff ff5f 	bl	800881c <__sflush_r>
 800895e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008960:	07da      	lsls	r2, r3, #31
 8008962:	4605      	mov	r5, r0
 8008964:	d4e4      	bmi.n	8008930 <_fflush_r+0xc>
 8008966:	89a3      	ldrh	r3, [r4, #12]
 8008968:	059b      	lsls	r3, r3, #22
 800896a:	d4e1      	bmi.n	8008930 <_fflush_r+0xc>
 800896c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800896e:	f7fd fb71 	bl	8006054 <__retarget_lock_release_recursive>
 8008972:	e7dd      	b.n	8008930 <_fflush_r+0xc>

08008974 <memmove>:
 8008974:	4288      	cmp	r0, r1
 8008976:	b510      	push	{r4, lr}
 8008978:	eb01 0402 	add.w	r4, r1, r2
 800897c:	d902      	bls.n	8008984 <memmove+0x10>
 800897e:	4284      	cmp	r4, r0
 8008980:	4623      	mov	r3, r4
 8008982:	d807      	bhi.n	8008994 <memmove+0x20>
 8008984:	1e43      	subs	r3, r0, #1
 8008986:	42a1      	cmp	r1, r4
 8008988:	d008      	beq.n	800899c <memmove+0x28>
 800898a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800898e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008992:	e7f8      	b.n	8008986 <memmove+0x12>
 8008994:	4402      	add	r2, r0
 8008996:	4601      	mov	r1, r0
 8008998:	428a      	cmp	r2, r1
 800899a:	d100      	bne.n	800899e <memmove+0x2a>
 800899c:	bd10      	pop	{r4, pc}
 800899e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089a6:	e7f7      	b.n	8008998 <memmove+0x24>

080089a8 <strncmp>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	b16a      	cbz	r2, 80089c8 <strncmp+0x20>
 80089ac:	3901      	subs	r1, #1
 80089ae:	1884      	adds	r4, r0, r2
 80089b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d103      	bne.n	80089c4 <strncmp+0x1c>
 80089bc:	42a0      	cmp	r0, r4
 80089be:	d001      	beq.n	80089c4 <strncmp+0x1c>
 80089c0:	2a00      	cmp	r2, #0
 80089c2:	d1f5      	bne.n	80089b0 <strncmp+0x8>
 80089c4:	1ad0      	subs	r0, r2, r3
 80089c6:	bd10      	pop	{r4, pc}
 80089c8:	4610      	mov	r0, r2
 80089ca:	e7fc      	b.n	80089c6 <strncmp+0x1e>

080089cc <_sbrk_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4d06      	ldr	r5, [pc, #24]	@ (80089e8 <_sbrk_r+0x1c>)
 80089d0:	2300      	movs	r3, #0
 80089d2:	4604      	mov	r4, r0
 80089d4:	4608      	mov	r0, r1
 80089d6:	602b      	str	r3, [r5, #0]
 80089d8:	f7f9 fae8 	bl	8001fac <_sbrk>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d102      	bne.n	80089e6 <_sbrk_r+0x1a>
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	b103      	cbz	r3, 80089e6 <_sbrk_r+0x1a>
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	200004e4 	.word	0x200004e4

080089ec <memcpy>:
 80089ec:	440a      	add	r2, r1
 80089ee:	4291      	cmp	r1, r2
 80089f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80089f4:	d100      	bne.n	80089f8 <memcpy+0xc>
 80089f6:	4770      	bx	lr
 80089f8:	b510      	push	{r4, lr}
 80089fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a02:	4291      	cmp	r1, r2
 8008a04:	d1f9      	bne.n	80089fa <memcpy+0xe>
 8008a06:	bd10      	pop	{r4, pc}

08008a08 <nan>:
 8008a08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008a10 <nan+0x8>
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	00000000 	.word	0x00000000
 8008a14:	7ff80000 	.word	0x7ff80000

08008a18 <__assert_func>:
 8008a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a1a:	4614      	mov	r4, r2
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	4b09      	ldr	r3, [pc, #36]	@ (8008a44 <__assert_func+0x2c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4605      	mov	r5, r0
 8008a24:	68d8      	ldr	r0, [r3, #12]
 8008a26:	b954      	cbnz	r4, 8008a3e <__assert_func+0x26>
 8008a28:	4b07      	ldr	r3, [pc, #28]	@ (8008a48 <__assert_func+0x30>)
 8008a2a:	461c      	mov	r4, r3
 8008a2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a30:	9100      	str	r1, [sp, #0]
 8008a32:	462b      	mov	r3, r5
 8008a34:	4905      	ldr	r1, [pc, #20]	@ (8008a4c <__assert_func+0x34>)
 8008a36:	f000 fba7 	bl	8009188 <fiprintf>
 8008a3a:	f000 fbb7 	bl	80091ac <abort>
 8008a3e:	4b04      	ldr	r3, [pc, #16]	@ (8008a50 <__assert_func+0x38>)
 8008a40:	e7f4      	b.n	8008a2c <__assert_func+0x14>
 8008a42:	bf00      	nop
 8008a44:	20000018 	.word	0x20000018
 8008a48:	0800aa25 	.word	0x0800aa25
 8008a4c:	0800a9f7 	.word	0x0800a9f7
 8008a50:	0800a9ea 	.word	0x0800a9ea

08008a54 <_calloc_r>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	fba1 5402 	umull	r5, r4, r1, r2
 8008a5a:	b93c      	cbnz	r4, 8008a6c <_calloc_r+0x18>
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7fe f9c3 	bl	8006de8 <_malloc_r>
 8008a62:	4606      	mov	r6, r0
 8008a64:	b928      	cbnz	r0, 8008a72 <_calloc_r+0x1e>
 8008a66:	2600      	movs	r6, #0
 8008a68:	4630      	mov	r0, r6
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	220c      	movs	r2, #12
 8008a6e:	6002      	str	r2, [r0, #0]
 8008a70:	e7f9      	b.n	8008a66 <_calloc_r+0x12>
 8008a72:	462a      	mov	r2, r5
 8008a74:	4621      	mov	r1, r4
 8008a76:	f7fd fa6e 	bl	8005f56 <memset>
 8008a7a:	e7f5      	b.n	8008a68 <_calloc_r+0x14>

08008a7c <rshift>:
 8008a7c:	6903      	ldr	r3, [r0, #16]
 8008a7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a8a:	f100 0414 	add.w	r4, r0, #20
 8008a8e:	dd45      	ble.n	8008b1c <rshift+0xa0>
 8008a90:	f011 011f 	ands.w	r1, r1, #31
 8008a94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a9c:	d10c      	bne.n	8008ab8 <rshift+0x3c>
 8008a9e:	f100 0710 	add.w	r7, r0, #16
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	42b1      	cmp	r1, r6
 8008aa6:	d334      	bcc.n	8008b12 <rshift+0x96>
 8008aa8:	1a9b      	subs	r3, r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	1eea      	subs	r2, r5, #3
 8008aae:	4296      	cmp	r6, r2
 8008ab0:	bf38      	it	cc
 8008ab2:	2300      	movcc	r3, #0
 8008ab4:	4423      	add	r3, r4
 8008ab6:	e015      	b.n	8008ae4 <rshift+0x68>
 8008ab8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008abc:	f1c1 0820 	rsb	r8, r1, #32
 8008ac0:	40cf      	lsrs	r7, r1
 8008ac2:	f105 0e04 	add.w	lr, r5, #4
 8008ac6:	46a1      	mov	r9, r4
 8008ac8:	4576      	cmp	r6, lr
 8008aca:	46f4      	mov	ip, lr
 8008acc:	d815      	bhi.n	8008afa <rshift+0x7e>
 8008ace:	1a9a      	subs	r2, r3, r2
 8008ad0:	0092      	lsls	r2, r2, #2
 8008ad2:	3a04      	subs	r2, #4
 8008ad4:	3501      	adds	r5, #1
 8008ad6:	42ae      	cmp	r6, r5
 8008ad8:	bf38      	it	cc
 8008ada:	2200      	movcc	r2, #0
 8008adc:	18a3      	adds	r3, r4, r2
 8008ade:	50a7      	str	r7, [r4, r2]
 8008ae0:	b107      	cbz	r7, 8008ae4 <rshift+0x68>
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	1b1a      	subs	r2, r3, r4
 8008ae6:	42a3      	cmp	r3, r4
 8008ae8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008aec:	bf08      	it	eq
 8008aee:	2300      	moveq	r3, #0
 8008af0:	6102      	str	r2, [r0, #16]
 8008af2:	bf08      	it	eq
 8008af4:	6143      	streq	r3, [r0, #20]
 8008af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008afa:	f8dc c000 	ldr.w	ip, [ip]
 8008afe:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b02:	ea4c 0707 	orr.w	r7, ip, r7
 8008b06:	f849 7b04 	str.w	r7, [r9], #4
 8008b0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b0e:	40cf      	lsrs	r7, r1
 8008b10:	e7da      	b.n	8008ac8 <rshift+0x4c>
 8008b12:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b16:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b1a:	e7c3      	b.n	8008aa4 <rshift+0x28>
 8008b1c:	4623      	mov	r3, r4
 8008b1e:	e7e1      	b.n	8008ae4 <rshift+0x68>

08008b20 <__hexdig_fun>:
 8008b20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d802      	bhi.n	8008b2e <__hexdig_fun+0xe>
 8008b28:	3820      	subs	r0, #32
 8008b2a:	b2c0      	uxtb	r0, r0
 8008b2c:	4770      	bx	lr
 8008b2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	d801      	bhi.n	8008b3a <__hexdig_fun+0x1a>
 8008b36:	3847      	subs	r0, #71	@ 0x47
 8008b38:	e7f7      	b.n	8008b2a <__hexdig_fun+0xa>
 8008b3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008b3e:	2b05      	cmp	r3, #5
 8008b40:	d801      	bhi.n	8008b46 <__hexdig_fun+0x26>
 8008b42:	3827      	subs	r0, #39	@ 0x27
 8008b44:	e7f1      	b.n	8008b2a <__hexdig_fun+0xa>
 8008b46:	2000      	movs	r0, #0
 8008b48:	4770      	bx	lr
	...

08008b4c <__gethex>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	b085      	sub	sp, #20
 8008b52:	468a      	mov	sl, r1
 8008b54:	9302      	str	r3, [sp, #8]
 8008b56:	680b      	ldr	r3, [r1, #0]
 8008b58:	9001      	str	r0, [sp, #4]
 8008b5a:	4690      	mov	r8, r2
 8008b5c:	1c9c      	adds	r4, r3, #2
 8008b5e:	46a1      	mov	r9, r4
 8008b60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008b64:	2830      	cmp	r0, #48	@ 0x30
 8008b66:	d0fa      	beq.n	8008b5e <__gethex+0x12>
 8008b68:	eba9 0303 	sub.w	r3, r9, r3
 8008b6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008b70:	f7ff ffd6 	bl	8008b20 <__hexdig_fun>
 8008b74:	4605      	mov	r5, r0
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d168      	bne.n	8008c4c <__gethex+0x100>
 8008b7a:	49a0      	ldr	r1, [pc, #640]	@ (8008dfc <__gethex+0x2b0>)
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	4648      	mov	r0, r9
 8008b80:	f7ff ff12 	bl	80089a8 <strncmp>
 8008b84:	4607      	mov	r7, r0
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d167      	bne.n	8008c5a <__gethex+0x10e>
 8008b8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008b8e:	4626      	mov	r6, r4
 8008b90:	f7ff ffc6 	bl	8008b20 <__hexdig_fun>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d062      	beq.n	8008c5e <__gethex+0x112>
 8008b98:	4623      	mov	r3, r4
 8008b9a:	7818      	ldrb	r0, [r3, #0]
 8008b9c:	2830      	cmp	r0, #48	@ 0x30
 8008b9e:	4699      	mov	r9, r3
 8008ba0:	f103 0301 	add.w	r3, r3, #1
 8008ba4:	d0f9      	beq.n	8008b9a <__gethex+0x4e>
 8008ba6:	f7ff ffbb 	bl	8008b20 <__hexdig_fun>
 8008baa:	fab0 f580 	clz	r5, r0
 8008bae:	096d      	lsrs	r5, r5, #5
 8008bb0:	f04f 0b01 	mov.w	fp, #1
 8008bb4:	464a      	mov	r2, r9
 8008bb6:	4616      	mov	r6, r2
 8008bb8:	3201      	adds	r2, #1
 8008bba:	7830      	ldrb	r0, [r6, #0]
 8008bbc:	f7ff ffb0 	bl	8008b20 <__hexdig_fun>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d1f8      	bne.n	8008bb6 <__gethex+0x6a>
 8008bc4:	498d      	ldr	r1, [pc, #564]	@ (8008dfc <__gethex+0x2b0>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f7ff feed 	bl	80089a8 <strncmp>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d13f      	bne.n	8008c52 <__gethex+0x106>
 8008bd2:	b944      	cbnz	r4, 8008be6 <__gethex+0x9a>
 8008bd4:	1c74      	adds	r4, r6, #1
 8008bd6:	4622      	mov	r2, r4
 8008bd8:	4616      	mov	r6, r2
 8008bda:	3201      	adds	r2, #1
 8008bdc:	7830      	ldrb	r0, [r6, #0]
 8008bde:	f7ff ff9f 	bl	8008b20 <__hexdig_fun>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d1f8      	bne.n	8008bd8 <__gethex+0x8c>
 8008be6:	1ba4      	subs	r4, r4, r6
 8008be8:	00a7      	lsls	r7, r4, #2
 8008bea:	7833      	ldrb	r3, [r6, #0]
 8008bec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008bf0:	2b50      	cmp	r3, #80	@ 0x50
 8008bf2:	d13e      	bne.n	8008c72 <__gethex+0x126>
 8008bf4:	7873      	ldrb	r3, [r6, #1]
 8008bf6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008bf8:	d033      	beq.n	8008c62 <__gethex+0x116>
 8008bfa:	2b2d      	cmp	r3, #45	@ 0x2d
 8008bfc:	d034      	beq.n	8008c68 <__gethex+0x11c>
 8008bfe:	1c71      	adds	r1, r6, #1
 8008c00:	2400      	movs	r4, #0
 8008c02:	7808      	ldrb	r0, [r1, #0]
 8008c04:	f7ff ff8c 	bl	8008b20 <__hexdig_fun>
 8008c08:	1e43      	subs	r3, r0, #1
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b18      	cmp	r3, #24
 8008c0e:	d830      	bhi.n	8008c72 <__gethex+0x126>
 8008c10:	f1a0 0210 	sub.w	r2, r0, #16
 8008c14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c18:	f7ff ff82 	bl	8008b20 <__hexdig_fun>
 8008c1c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008c20:	fa5f fc8c 	uxtb.w	ip, ip
 8008c24:	f1bc 0f18 	cmp.w	ip, #24
 8008c28:	f04f 030a 	mov.w	r3, #10
 8008c2c:	d91e      	bls.n	8008c6c <__gethex+0x120>
 8008c2e:	b104      	cbz	r4, 8008c32 <__gethex+0xe6>
 8008c30:	4252      	negs	r2, r2
 8008c32:	4417      	add	r7, r2
 8008c34:	f8ca 1000 	str.w	r1, [sl]
 8008c38:	b1ed      	cbz	r5, 8008c76 <__gethex+0x12a>
 8008c3a:	f1bb 0f00 	cmp.w	fp, #0
 8008c3e:	bf0c      	ite	eq
 8008c40:	2506      	moveq	r5, #6
 8008c42:	2500      	movne	r5, #0
 8008c44:	4628      	mov	r0, r5
 8008c46:	b005      	add	sp, #20
 8008c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4c:	2500      	movs	r5, #0
 8008c4e:	462c      	mov	r4, r5
 8008c50:	e7b0      	b.n	8008bb4 <__gethex+0x68>
 8008c52:	2c00      	cmp	r4, #0
 8008c54:	d1c7      	bne.n	8008be6 <__gethex+0x9a>
 8008c56:	4627      	mov	r7, r4
 8008c58:	e7c7      	b.n	8008bea <__gethex+0x9e>
 8008c5a:	464e      	mov	r6, r9
 8008c5c:	462f      	mov	r7, r5
 8008c5e:	2501      	movs	r5, #1
 8008c60:	e7c3      	b.n	8008bea <__gethex+0x9e>
 8008c62:	2400      	movs	r4, #0
 8008c64:	1cb1      	adds	r1, r6, #2
 8008c66:	e7cc      	b.n	8008c02 <__gethex+0xb6>
 8008c68:	2401      	movs	r4, #1
 8008c6a:	e7fb      	b.n	8008c64 <__gethex+0x118>
 8008c6c:	fb03 0002 	mla	r0, r3, r2, r0
 8008c70:	e7ce      	b.n	8008c10 <__gethex+0xc4>
 8008c72:	4631      	mov	r1, r6
 8008c74:	e7de      	b.n	8008c34 <__gethex+0xe8>
 8008c76:	eba6 0309 	sub.w	r3, r6, r9
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	2b07      	cmp	r3, #7
 8008c80:	dc0a      	bgt.n	8008c98 <__gethex+0x14c>
 8008c82:	9801      	ldr	r0, [sp, #4]
 8008c84:	f7fe f93c 	bl	8006f00 <_Balloc>
 8008c88:	4604      	mov	r4, r0
 8008c8a:	b940      	cbnz	r0, 8008c9e <__gethex+0x152>
 8008c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8008e00 <__gethex+0x2b4>)
 8008c8e:	4602      	mov	r2, r0
 8008c90:	21e4      	movs	r1, #228	@ 0xe4
 8008c92:	485c      	ldr	r0, [pc, #368]	@ (8008e04 <__gethex+0x2b8>)
 8008c94:	f7ff fec0 	bl	8008a18 <__assert_func>
 8008c98:	3101      	adds	r1, #1
 8008c9a:	105b      	asrs	r3, r3, #1
 8008c9c:	e7ef      	b.n	8008c7e <__gethex+0x132>
 8008c9e:	f100 0a14 	add.w	sl, r0, #20
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	4655      	mov	r5, sl
 8008ca6:	469b      	mov	fp, r3
 8008ca8:	45b1      	cmp	r9, r6
 8008caa:	d337      	bcc.n	8008d1c <__gethex+0x1d0>
 8008cac:	f845 bb04 	str.w	fp, [r5], #4
 8008cb0:	eba5 050a 	sub.w	r5, r5, sl
 8008cb4:	10ad      	asrs	r5, r5, #2
 8008cb6:	6125      	str	r5, [r4, #16]
 8008cb8:	4658      	mov	r0, fp
 8008cba:	f7fe fa13 	bl	80070e4 <__hi0bits>
 8008cbe:	016d      	lsls	r5, r5, #5
 8008cc0:	f8d8 6000 	ldr.w	r6, [r8]
 8008cc4:	1a2d      	subs	r5, r5, r0
 8008cc6:	42b5      	cmp	r5, r6
 8008cc8:	dd54      	ble.n	8008d74 <__gethex+0x228>
 8008cca:	1bad      	subs	r5, r5, r6
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f7fe fda7 	bl	8007822 <__any_on>
 8008cd4:	4681      	mov	r9, r0
 8008cd6:	b178      	cbz	r0, 8008cf8 <__gethex+0x1ac>
 8008cd8:	1e6b      	subs	r3, r5, #1
 8008cda:	1159      	asrs	r1, r3, #5
 8008cdc:	f003 021f 	and.w	r2, r3, #31
 8008ce0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ce4:	f04f 0901 	mov.w	r9, #1
 8008ce8:	fa09 f202 	lsl.w	r2, r9, r2
 8008cec:	420a      	tst	r2, r1
 8008cee:	d003      	beq.n	8008cf8 <__gethex+0x1ac>
 8008cf0:	454b      	cmp	r3, r9
 8008cf2:	dc36      	bgt.n	8008d62 <__gethex+0x216>
 8008cf4:	f04f 0902 	mov.w	r9, #2
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f7ff febe 	bl	8008a7c <rshift>
 8008d00:	442f      	add	r7, r5
 8008d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d06:	42bb      	cmp	r3, r7
 8008d08:	da42      	bge.n	8008d90 <__gethex+0x244>
 8008d0a:	9801      	ldr	r0, [sp, #4]
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	f7fe f937 	bl	8006f80 <_Bfree>
 8008d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d14:	2300      	movs	r3, #0
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	25a3      	movs	r5, #163	@ 0xa3
 8008d1a:	e793      	b.n	8008c44 <__gethex+0xf8>
 8008d1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d20:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d22:	d012      	beq.n	8008d4a <__gethex+0x1fe>
 8008d24:	2b20      	cmp	r3, #32
 8008d26:	d104      	bne.n	8008d32 <__gethex+0x1e6>
 8008d28:	f845 bb04 	str.w	fp, [r5], #4
 8008d2c:	f04f 0b00 	mov.w	fp, #0
 8008d30:	465b      	mov	r3, fp
 8008d32:	7830      	ldrb	r0, [r6, #0]
 8008d34:	9303      	str	r3, [sp, #12]
 8008d36:	f7ff fef3 	bl	8008b20 <__hexdig_fun>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	f000 000f 	and.w	r0, r0, #15
 8008d40:	4098      	lsls	r0, r3
 8008d42:	ea4b 0b00 	orr.w	fp, fp, r0
 8008d46:	3304      	adds	r3, #4
 8008d48:	e7ae      	b.n	8008ca8 <__gethex+0x15c>
 8008d4a:	45b1      	cmp	r9, r6
 8008d4c:	d8ea      	bhi.n	8008d24 <__gethex+0x1d8>
 8008d4e:	492b      	ldr	r1, [pc, #172]	@ (8008dfc <__gethex+0x2b0>)
 8008d50:	9303      	str	r3, [sp, #12]
 8008d52:	2201      	movs	r2, #1
 8008d54:	4630      	mov	r0, r6
 8008d56:	f7ff fe27 	bl	80089a8 <strncmp>
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d1e1      	bne.n	8008d24 <__gethex+0x1d8>
 8008d60:	e7a2      	b.n	8008ca8 <__gethex+0x15c>
 8008d62:	1ea9      	subs	r1, r5, #2
 8008d64:	4620      	mov	r0, r4
 8008d66:	f7fe fd5c 	bl	8007822 <__any_on>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d0c2      	beq.n	8008cf4 <__gethex+0x1a8>
 8008d6e:	f04f 0903 	mov.w	r9, #3
 8008d72:	e7c1      	b.n	8008cf8 <__gethex+0x1ac>
 8008d74:	da09      	bge.n	8008d8a <__gethex+0x23e>
 8008d76:	1b75      	subs	r5, r6, r5
 8008d78:	4621      	mov	r1, r4
 8008d7a:	9801      	ldr	r0, [sp, #4]
 8008d7c:	462a      	mov	r2, r5
 8008d7e:	f7fe fb17 	bl	80073b0 <__lshift>
 8008d82:	1b7f      	subs	r7, r7, r5
 8008d84:	4604      	mov	r4, r0
 8008d86:	f100 0a14 	add.w	sl, r0, #20
 8008d8a:	f04f 0900 	mov.w	r9, #0
 8008d8e:	e7b8      	b.n	8008d02 <__gethex+0x1b6>
 8008d90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d94:	42bd      	cmp	r5, r7
 8008d96:	dd6f      	ble.n	8008e78 <__gethex+0x32c>
 8008d98:	1bed      	subs	r5, r5, r7
 8008d9a:	42ae      	cmp	r6, r5
 8008d9c:	dc34      	bgt.n	8008e08 <__gethex+0x2bc>
 8008d9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d022      	beq.n	8008dec <__gethex+0x2a0>
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d024      	beq.n	8008df4 <__gethex+0x2a8>
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d115      	bne.n	8008dda <__gethex+0x28e>
 8008dae:	42ae      	cmp	r6, r5
 8008db0:	d113      	bne.n	8008dda <__gethex+0x28e>
 8008db2:	2e01      	cmp	r6, #1
 8008db4:	d10b      	bne.n	8008dce <__gethex+0x282>
 8008db6:	9a02      	ldr	r2, [sp, #8]
 8008db8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	6123      	str	r3, [r4, #16]
 8008dc2:	f8ca 3000 	str.w	r3, [sl]
 8008dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dc8:	2562      	movs	r5, #98	@ 0x62
 8008dca:	601c      	str	r4, [r3, #0]
 8008dcc:	e73a      	b.n	8008c44 <__gethex+0xf8>
 8008dce:	1e71      	subs	r1, r6, #1
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f7fe fd26 	bl	8007822 <__any_on>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d1ed      	bne.n	8008db6 <__gethex+0x26a>
 8008dda:	9801      	ldr	r0, [sp, #4]
 8008ddc:	4621      	mov	r1, r4
 8008dde:	f7fe f8cf 	bl	8006f80 <_Bfree>
 8008de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008de4:	2300      	movs	r3, #0
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	2550      	movs	r5, #80	@ 0x50
 8008dea:	e72b      	b.n	8008c44 <__gethex+0xf8>
 8008dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1f3      	bne.n	8008dda <__gethex+0x28e>
 8008df2:	e7e0      	b.n	8008db6 <__gethex+0x26a>
 8008df4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1dd      	bne.n	8008db6 <__gethex+0x26a>
 8008dfa:	e7ee      	b.n	8008dda <__gethex+0x28e>
 8008dfc:	0800a878 	.word	0x0800a878
 8008e00:	0800a711 	.word	0x0800a711
 8008e04:	0800aa26 	.word	0x0800aa26
 8008e08:	1e6f      	subs	r7, r5, #1
 8008e0a:	f1b9 0f00 	cmp.w	r9, #0
 8008e0e:	d130      	bne.n	8008e72 <__gethex+0x326>
 8008e10:	b127      	cbz	r7, 8008e1c <__gethex+0x2d0>
 8008e12:	4639      	mov	r1, r7
 8008e14:	4620      	mov	r0, r4
 8008e16:	f7fe fd04 	bl	8007822 <__any_on>
 8008e1a:	4681      	mov	r9, r0
 8008e1c:	117a      	asrs	r2, r7, #5
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e24:	f007 071f 	and.w	r7, r7, #31
 8008e28:	40bb      	lsls	r3, r7
 8008e2a:	4213      	tst	r3, r2
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	4620      	mov	r0, r4
 8008e30:	bf18      	it	ne
 8008e32:	f049 0902 	orrne.w	r9, r9, #2
 8008e36:	f7ff fe21 	bl	8008a7c <rshift>
 8008e3a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008e3e:	1b76      	subs	r6, r6, r5
 8008e40:	2502      	movs	r5, #2
 8008e42:	f1b9 0f00 	cmp.w	r9, #0
 8008e46:	d047      	beq.n	8008ed8 <__gethex+0x38c>
 8008e48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d015      	beq.n	8008e7c <__gethex+0x330>
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d017      	beq.n	8008e84 <__gethex+0x338>
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d109      	bne.n	8008e6c <__gethex+0x320>
 8008e58:	f019 0f02 	tst.w	r9, #2
 8008e5c:	d006      	beq.n	8008e6c <__gethex+0x320>
 8008e5e:	f8da 3000 	ldr.w	r3, [sl]
 8008e62:	ea49 0903 	orr.w	r9, r9, r3
 8008e66:	f019 0f01 	tst.w	r9, #1
 8008e6a:	d10e      	bne.n	8008e8a <__gethex+0x33e>
 8008e6c:	f045 0510 	orr.w	r5, r5, #16
 8008e70:	e032      	b.n	8008ed8 <__gethex+0x38c>
 8008e72:	f04f 0901 	mov.w	r9, #1
 8008e76:	e7d1      	b.n	8008e1c <__gethex+0x2d0>
 8008e78:	2501      	movs	r5, #1
 8008e7a:	e7e2      	b.n	8008e42 <__gethex+0x2f6>
 8008e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e7e:	f1c3 0301 	rsb	r3, r3, #1
 8008e82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d0f0      	beq.n	8008e6c <__gethex+0x320>
 8008e8a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e8e:	f104 0314 	add.w	r3, r4, #20
 8008e92:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e96:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e9a:	f04f 0c00 	mov.w	ip, #0
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008ea8:	d01b      	beq.n	8008ee2 <__gethex+0x396>
 8008eaa:	3201      	adds	r2, #1
 8008eac:	6002      	str	r2, [r0, #0]
 8008eae:	2d02      	cmp	r5, #2
 8008eb0:	f104 0314 	add.w	r3, r4, #20
 8008eb4:	d13c      	bne.n	8008f30 <__gethex+0x3e4>
 8008eb6:	f8d8 2000 	ldr.w	r2, [r8]
 8008eba:	3a01      	subs	r2, #1
 8008ebc:	42b2      	cmp	r2, r6
 8008ebe:	d109      	bne.n	8008ed4 <__gethex+0x388>
 8008ec0:	1171      	asrs	r1, r6, #5
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ec8:	f006 061f 	and.w	r6, r6, #31
 8008ecc:	fa02 f606 	lsl.w	r6, r2, r6
 8008ed0:	421e      	tst	r6, r3
 8008ed2:	d13a      	bne.n	8008f4a <__gethex+0x3fe>
 8008ed4:	f045 0520 	orr.w	r5, r5, #32
 8008ed8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eda:	601c      	str	r4, [r3, #0]
 8008edc:	9b02      	ldr	r3, [sp, #8]
 8008ede:	601f      	str	r7, [r3, #0]
 8008ee0:	e6b0      	b.n	8008c44 <__gethex+0xf8>
 8008ee2:	4299      	cmp	r1, r3
 8008ee4:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ee8:	d8d9      	bhi.n	8008e9e <__gethex+0x352>
 8008eea:	68a3      	ldr	r3, [r4, #8]
 8008eec:	459b      	cmp	fp, r3
 8008eee:	db17      	blt.n	8008f20 <__gethex+0x3d4>
 8008ef0:	6861      	ldr	r1, [r4, #4]
 8008ef2:	9801      	ldr	r0, [sp, #4]
 8008ef4:	3101      	adds	r1, #1
 8008ef6:	f7fe f803 	bl	8006f00 <_Balloc>
 8008efa:	4681      	mov	r9, r0
 8008efc:	b918      	cbnz	r0, 8008f06 <__gethex+0x3ba>
 8008efe:	4b1a      	ldr	r3, [pc, #104]	@ (8008f68 <__gethex+0x41c>)
 8008f00:	4602      	mov	r2, r0
 8008f02:	2184      	movs	r1, #132	@ 0x84
 8008f04:	e6c5      	b.n	8008c92 <__gethex+0x146>
 8008f06:	6922      	ldr	r2, [r4, #16]
 8008f08:	3202      	adds	r2, #2
 8008f0a:	f104 010c 	add.w	r1, r4, #12
 8008f0e:	0092      	lsls	r2, r2, #2
 8008f10:	300c      	adds	r0, #12
 8008f12:	f7ff fd6b 	bl	80089ec <memcpy>
 8008f16:	4621      	mov	r1, r4
 8008f18:	9801      	ldr	r0, [sp, #4]
 8008f1a:	f7fe f831 	bl	8006f80 <_Bfree>
 8008f1e:	464c      	mov	r4, r9
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f28:	6122      	str	r2, [r4, #16]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	615a      	str	r2, [r3, #20]
 8008f2e:	e7be      	b.n	8008eae <__gethex+0x362>
 8008f30:	6922      	ldr	r2, [r4, #16]
 8008f32:	455a      	cmp	r2, fp
 8008f34:	dd0b      	ble.n	8008f4e <__gethex+0x402>
 8008f36:	2101      	movs	r1, #1
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f7ff fd9f 	bl	8008a7c <rshift>
 8008f3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f42:	3701      	adds	r7, #1
 8008f44:	42bb      	cmp	r3, r7
 8008f46:	f6ff aee0 	blt.w	8008d0a <__gethex+0x1be>
 8008f4a:	2501      	movs	r5, #1
 8008f4c:	e7c2      	b.n	8008ed4 <__gethex+0x388>
 8008f4e:	f016 061f 	ands.w	r6, r6, #31
 8008f52:	d0fa      	beq.n	8008f4a <__gethex+0x3fe>
 8008f54:	4453      	add	r3, sl
 8008f56:	f1c6 0620 	rsb	r6, r6, #32
 8008f5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f5e:	f7fe f8c1 	bl	80070e4 <__hi0bits>
 8008f62:	42b0      	cmp	r0, r6
 8008f64:	dbe7      	blt.n	8008f36 <__gethex+0x3ea>
 8008f66:	e7f0      	b.n	8008f4a <__gethex+0x3fe>
 8008f68:	0800a711 	.word	0x0800a711

08008f6c <L_shift>:
 8008f6c:	f1c2 0208 	rsb	r2, r2, #8
 8008f70:	0092      	lsls	r2, r2, #2
 8008f72:	b570      	push	{r4, r5, r6, lr}
 8008f74:	f1c2 0620 	rsb	r6, r2, #32
 8008f78:	6843      	ldr	r3, [r0, #4]
 8008f7a:	6804      	ldr	r4, [r0, #0]
 8008f7c:	fa03 f506 	lsl.w	r5, r3, r6
 8008f80:	432c      	orrs	r4, r5
 8008f82:	40d3      	lsrs	r3, r2
 8008f84:	6004      	str	r4, [r0, #0]
 8008f86:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f8a:	4288      	cmp	r0, r1
 8008f8c:	d3f4      	bcc.n	8008f78 <L_shift+0xc>
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}

08008f90 <__match>:
 8008f90:	b530      	push	{r4, r5, lr}
 8008f92:	6803      	ldr	r3, [r0, #0]
 8008f94:	3301      	adds	r3, #1
 8008f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f9a:	b914      	cbnz	r4, 8008fa2 <__match+0x12>
 8008f9c:	6003      	str	r3, [r0, #0]
 8008f9e:	2001      	movs	r0, #1
 8008fa0:	bd30      	pop	{r4, r5, pc}
 8008fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fa6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008faa:	2d19      	cmp	r5, #25
 8008fac:	bf98      	it	ls
 8008fae:	3220      	addls	r2, #32
 8008fb0:	42a2      	cmp	r2, r4
 8008fb2:	d0f0      	beq.n	8008f96 <__match+0x6>
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e7f3      	b.n	8008fa0 <__match+0x10>

08008fb8 <__hexnan>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	680b      	ldr	r3, [r1, #0]
 8008fbe:	6801      	ldr	r1, [r0, #0]
 8008fc0:	115e      	asrs	r6, r3, #5
 8008fc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008fc6:	f013 031f 	ands.w	r3, r3, #31
 8008fca:	b087      	sub	sp, #28
 8008fcc:	bf18      	it	ne
 8008fce:	3604      	addne	r6, #4
 8008fd0:	2500      	movs	r5, #0
 8008fd2:	1f37      	subs	r7, r6, #4
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	4690      	mov	r8, r2
 8008fd8:	9301      	str	r3, [sp, #4]
 8008fda:	f846 5c04 	str.w	r5, [r6, #-4]
 8008fde:	46b9      	mov	r9, r7
 8008fe0:	463c      	mov	r4, r7
 8008fe2:	9502      	str	r5, [sp, #8]
 8008fe4:	46ab      	mov	fp, r5
 8008fe6:	784a      	ldrb	r2, [r1, #1]
 8008fe8:	1c4b      	adds	r3, r1, #1
 8008fea:	9303      	str	r3, [sp, #12]
 8008fec:	b342      	cbz	r2, 8009040 <__hexnan+0x88>
 8008fee:	4610      	mov	r0, r2
 8008ff0:	9105      	str	r1, [sp, #20]
 8008ff2:	9204      	str	r2, [sp, #16]
 8008ff4:	f7ff fd94 	bl	8008b20 <__hexdig_fun>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d151      	bne.n	80090a0 <__hexnan+0xe8>
 8008ffc:	9a04      	ldr	r2, [sp, #16]
 8008ffe:	9905      	ldr	r1, [sp, #20]
 8009000:	2a20      	cmp	r2, #32
 8009002:	d818      	bhi.n	8009036 <__hexnan+0x7e>
 8009004:	9b02      	ldr	r3, [sp, #8]
 8009006:	459b      	cmp	fp, r3
 8009008:	dd13      	ble.n	8009032 <__hexnan+0x7a>
 800900a:	454c      	cmp	r4, r9
 800900c:	d206      	bcs.n	800901c <__hexnan+0x64>
 800900e:	2d07      	cmp	r5, #7
 8009010:	dc04      	bgt.n	800901c <__hexnan+0x64>
 8009012:	462a      	mov	r2, r5
 8009014:	4649      	mov	r1, r9
 8009016:	4620      	mov	r0, r4
 8009018:	f7ff ffa8 	bl	8008f6c <L_shift>
 800901c:	4544      	cmp	r4, r8
 800901e:	d952      	bls.n	80090c6 <__hexnan+0x10e>
 8009020:	2300      	movs	r3, #0
 8009022:	f1a4 0904 	sub.w	r9, r4, #4
 8009026:	f844 3c04 	str.w	r3, [r4, #-4]
 800902a:	f8cd b008 	str.w	fp, [sp, #8]
 800902e:	464c      	mov	r4, r9
 8009030:	461d      	mov	r5, r3
 8009032:	9903      	ldr	r1, [sp, #12]
 8009034:	e7d7      	b.n	8008fe6 <__hexnan+0x2e>
 8009036:	2a29      	cmp	r2, #41	@ 0x29
 8009038:	d157      	bne.n	80090ea <__hexnan+0x132>
 800903a:	3102      	adds	r1, #2
 800903c:	f8ca 1000 	str.w	r1, [sl]
 8009040:	f1bb 0f00 	cmp.w	fp, #0
 8009044:	d051      	beq.n	80090ea <__hexnan+0x132>
 8009046:	454c      	cmp	r4, r9
 8009048:	d206      	bcs.n	8009058 <__hexnan+0xa0>
 800904a:	2d07      	cmp	r5, #7
 800904c:	dc04      	bgt.n	8009058 <__hexnan+0xa0>
 800904e:	462a      	mov	r2, r5
 8009050:	4649      	mov	r1, r9
 8009052:	4620      	mov	r0, r4
 8009054:	f7ff ff8a 	bl	8008f6c <L_shift>
 8009058:	4544      	cmp	r4, r8
 800905a:	d936      	bls.n	80090ca <__hexnan+0x112>
 800905c:	f1a8 0204 	sub.w	r2, r8, #4
 8009060:	4623      	mov	r3, r4
 8009062:	f853 1b04 	ldr.w	r1, [r3], #4
 8009066:	f842 1f04 	str.w	r1, [r2, #4]!
 800906a:	429f      	cmp	r7, r3
 800906c:	d2f9      	bcs.n	8009062 <__hexnan+0xaa>
 800906e:	1b3b      	subs	r3, r7, r4
 8009070:	f023 0303 	bic.w	r3, r3, #3
 8009074:	3304      	adds	r3, #4
 8009076:	3401      	adds	r4, #1
 8009078:	3e03      	subs	r6, #3
 800907a:	42b4      	cmp	r4, r6
 800907c:	bf88      	it	hi
 800907e:	2304      	movhi	r3, #4
 8009080:	4443      	add	r3, r8
 8009082:	2200      	movs	r2, #0
 8009084:	f843 2b04 	str.w	r2, [r3], #4
 8009088:	429f      	cmp	r7, r3
 800908a:	d2fb      	bcs.n	8009084 <__hexnan+0xcc>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	b91b      	cbnz	r3, 8009098 <__hexnan+0xe0>
 8009090:	4547      	cmp	r7, r8
 8009092:	d128      	bne.n	80090e6 <__hexnan+0x12e>
 8009094:	2301      	movs	r3, #1
 8009096:	603b      	str	r3, [r7, #0]
 8009098:	2005      	movs	r0, #5
 800909a:	b007      	add	sp, #28
 800909c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a0:	3501      	adds	r5, #1
 80090a2:	2d08      	cmp	r5, #8
 80090a4:	f10b 0b01 	add.w	fp, fp, #1
 80090a8:	dd06      	ble.n	80090b8 <__hexnan+0x100>
 80090aa:	4544      	cmp	r4, r8
 80090ac:	d9c1      	bls.n	8009032 <__hexnan+0x7a>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80090b4:	2501      	movs	r5, #1
 80090b6:	3c04      	subs	r4, #4
 80090b8:	6822      	ldr	r2, [r4, #0]
 80090ba:	f000 000f 	and.w	r0, r0, #15
 80090be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80090c2:	6020      	str	r0, [r4, #0]
 80090c4:	e7b5      	b.n	8009032 <__hexnan+0x7a>
 80090c6:	2508      	movs	r5, #8
 80090c8:	e7b3      	b.n	8009032 <__hexnan+0x7a>
 80090ca:	9b01      	ldr	r3, [sp, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0dd      	beq.n	800908c <__hexnan+0xd4>
 80090d0:	f1c3 0320 	rsb	r3, r3, #32
 80090d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090d8:	40da      	lsrs	r2, r3
 80090da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80090de:	4013      	ands	r3, r2
 80090e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80090e4:	e7d2      	b.n	800908c <__hexnan+0xd4>
 80090e6:	3f04      	subs	r7, #4
 80090e8:	e7d0      	b.n	800908c <__hexnan+0xd4>
 80090ea:	2004      	movs	r0, #4
 80090ec:	e7d5      	b.n	800909a <__hexnan+0xe2>

080090ee <__ascii_mbtowc>:
 80090ee:	b082      	sub	sp, #8
 80090f0:	b901      	cbnz	r1, 80090f4 <__ascii_mbtowc+0x6>
 80090f2:	a901      	add	r1, sp, #4
 80090f4:	b142      	cbz	r2, 8009108 <__ascii_mbtowc+0x1a>
 80090f6:	b14b      	cbz	r3, 800910c <__ascii_mbtowc+0x1e>
 80090f8:	7813      	ldrb	r3, [r2, #0]
 80090fa:	600b      	str	r3, [r1, #0]
 80090fc:	7812      	ldrb	r2, [r2, #0]
 80090fe:	1e10      	subs	r0, r2, #0
 8009100:	bf18      	it	ne
 8009102:	2001      	movne	r0, #1
 8009104:	b002      	add	sp, #8
 8009106:	4770      	bx	lr
 8009108:	4610      	mov	r0, r2
 800910a:	e7fb      	b.n	8009104 <__ascii_mbtowc+0x16>
 800910c:	f06f 0001 	mvn.w	r0, #1
 8009110:	e7f8      	b.n	8009104 <__ascii_mbtowc+0x16>

08009112 <_realloc_r>:
 8009112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009116:	4680      	mov	r8, r0
 8009118:	4615      	mov	r5, r2
 800911a:	460c      	mov	r4, r1
 800911c:	b921      	cbnz	r1, 8009128 <_realloc_r+0x16>
 800911e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009122:	4611      	mov	r1, r2
 8009124:	f7fd be60 	b.w	8006de8 <_malloc_r>
 8009128:	b92a      	cbnz	r2, 8009136 <_realloc_r+0x24>
 800912a:	f7fd fde9 	bl	8006d00 <_free_r>
 800912e:	2400      	movs	r4, #0
 8009130:	4620      	mov	r0, r4
 8009132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009136:	f000 f840 	bl	80091ba <_malloc_usable_size_r>
 800913a:	4285      	cmp	r5, r0
 800913c:	4606      	mov	r6, r0
 800913e:	d802      	bhi.n	8009146 <_realloc_r+0x34>
 8009140:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009144:	d8f4      	bhi.n	8009130 <_realloc_r+0x1e>
 8009146:	4629      	mov	r1, r5
 8009148:	4640      	mov	r0, r8
 800914a:	f7fd fe4d 	bl	8006de8 <_malloc_r>
 800914e:	4607      	mov	r7, r0
 8009150:	2800      	cmp	r0, #0
 8009152:	d0ec      	beq.n	800912e <_realloc_r+0x1c>
 8009154:	42b5      	cmp	r5, r6
 8009156:	462a      	mov	r2, r5
 8009158:	4621      	mov	r1, r4
 800915a:	bf28      	it	cs
 800915c:	4632      	movcs	r2, r6
 800915e:	f7ff fc45 	bl	80089ec <memcpy>
 8009162:	4621      	mov	r1, r4
 8009164:	4640      	mov	r0, r8
 8009166:	f7fd fdcb 	bl	8006d00 <_free_r>
 800916a:	463c      	mov	r4, r7
 800916c:	e7e0      	b.n	8009130 <_realloc_r+0x1e>

0800916e <__ascii_wctomb>:
 800916e:	4603      	mov	r3, r0
 8009170:	4608      	mov	r0, r1
 8009172:	b141      	cbz	r1, 8009186 <__ascii_wctomb+0x18>
 8009174:	2aff      	cmp	r2, #255	@ 0xff
 8009176:	d904      	bls.n	8009182 <__ascii_wctomb+0x14>
 8009178:	228a      	movs	r2, #138	@ 0x8a
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009180:	4770      	bx	lr
 8009182:	700a      	strb	r2, [r1, #0]
 8009184:	2001      	movs	r0, #1
 8009186:	4770      	bx	lr

08009188 <fiprintf>:
 8009188:	b40e      	push	{r1, r2, r3}
 800918a:	b503      	push	{r0, r1, lr}
 800918c:	4601      	mov	r1, r0
 800918e:	ab03      	add	r3, sp, #12
 8009190:	4805      	ldr	r0, [pc, #20]	@ (80091a8 <fiprintf+0x20>)
 8009192:	f853 2b04 	ldr.w	r2, [r3], #4
 8009196:	6800      	ldr	r0, [r0, #0]
 8009198:	9301      	str	r3, [sp, #4]
 800919a:	f000 f83f 	bl	800921c <_vfiprintf_r>
 800919e:	b002      	add	sp, #8
 80091a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a4:	b003      	add	sp, #12
 80091a6:	4770      	bx	lr
 80091a8:	20000018 	.word	0x20000018

080091ac <abort>:
 80091ac:	b508      	push	{r3, lr}
 80091ae:	2006      	movs	r0, #6
 80091b0:	f000 fa08 	bl	80095c4 <raise>
 80091b4:	2001      	movs	r0, #1
 80091b6:	f7f8 fe80 	bl	8001eba <_exit>

080091ba <_malloc_usable_size_r>:
 80091ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091be:	1f18      	subs	r0, r3, #4
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	bfbc      	itt	lt
 80091c4:	580b      	ldrlt	r3, [r1, r0]
 80091c6:	18c0      	addlt	r0, r0, r3
 80091c8:	4770      	bx	lr

080091ca <__sfputc_r>:
 80091ca:	6893      	ldr	r3, [r2, #8]
 80091cc:	3b01      	subs	r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	b410      	push	{r4}
 80091d2:	6093      	str	r3, [r2, #8]
 80091d4:	da08      	bge.n	80091e8 <__sfputc_r+0x1e>
 80091d6:	6994      	ldr	r4, [r2, #24]
 80091d8:	42a3      	cmp	r3, r4
 80091da:	db01      	blt.n	80091e0 <__sfputc_r+0x16>
 80091dc:	290a      	cmp	r1, #10
 80091de:	d103      	bne.n	80091e8 <__sfputc_r+0x1e>
 80091e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e4:	f000 b932 	b.w	800944c <__swbuf_r>
 80091e8:	6813      	ldr	r3, [r2, #0]
 80091ea:	1c58      	adds	r0, r3, #1
 80091ec:	6010      	str	r0, [r2, #0]
 80091ee:	7019      	strb	r1, [r3, #0]
 80091f0:	4608      	mov	r0, r1
 80091f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <__sfputs_r>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	4614      	mov	r4, r2
 8009200:	18d5      	adds	r5, r2, r3
 8009202:	42ac      	cmp	r4, r5
 8009204:	d101      	bne.n	800920a <__sfputs_r+0x12>
 8009206:	2000      	movs	r0, #0
 8009208:	e007      	b.n	800921a <__sfputs_r+0x22>
 800920a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920e:	463a      	mov	r2, r7
 8009210:	4630      	mov	r0, r6
 8009212:	f7ff ffda 	bl	80091ca <__sfputc_r>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	d1f3      	bne.n	8009202 <__sfputs_r+0xa>
 800921a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800921c <_vfiprintf_r>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	460d      	mov	r5, r1
 8009222:	b09d      	sub	sp, #116	@ 0x74
 8009224:	4614      	mov	r4, r2
 8009226:	4698      	mov	r8, r3
 8009228:	4606      	mov	r6, r0
 800922a:	b118      	cbz	r0, 8009234 <_vfiprintf_r+0x18>
 800922c:	6a03      	ldr	r3, [r0, #32]
 800922e:	b90b      	cbnz	r3, 8009234 <_vfiprintf_r+0x18>
 8009230:	f7fc fdf8 	bl	8005e24 <__sinit>
 8009234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009236:	07d9      	lsls	r1, r3, #31
 8009238:	d405      	bmi.n	8009246 <_vfiprintf_r+0x2a>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	059a      	lsls	r2, r3, #22
 800923e:	d402      	bmi.n	8009246 <_vfiprintf_r+0x2a>
 8009240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009242:	f7fc ff06 	bl	8006052 <__retarget_lock_acquire_recursive>
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	071b      	lsls	r3, r3, #28
 800924a:	d501      	bpl.n	8009250 <_vfiprintf_r+0x34>
 800924c:	692b      	ldr	r3, [r5, #16]
 800924e:	b99b      	cbnz	r3, 8009278 <_vfiprintf_r+0x5c>
 8009250:	4629      	mov	r1, r5
 8009252:	4630      	mov	r0, r6
 8009254:	f000 f938 	bl	80094c8 <__swsetup_r>
 8009258:	b170      	cbz	r0, 8009278 <_vfiprintf_r+0x5c>
 800925a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800925c:	07dc      	lsls	r4, r3, #31
 800925e:	d504      	bpl.n	800926a <_vfiprintf_r+0x4e>
 8009260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009264:	b01d      	add	sp, #116	@ 0x74
 8009266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926a:	89ab      	ldrh	r3, [r5, #12]
 800926c:	0598      	lsls	r0, r3, #22
 800926e:	d4f7      	bmi.n	8009260 <_vfiprintf_r+0x44>
 8009270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009272:	f7fc feef 	bl	8006054 <__retarget_lock_release_recursive>
 8009276:	e7f3      	b.n	8009260 <_vfiprintf_r+0x44>
 8009278:	2300      	movs	r3, #0
 800927a:	9309      	str	r3, [sp, #36]	@ 0x24
 800927c:	2320      	movs	r3, #32
 800927e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009282:	f8cd 800c 	str.w	r8, [sp, #12]
 8009286:	2330      	movs	r3, #48	@ 0x30
 8009288:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009438 <_vfiprintf_r+0x21c>
 800928c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009290:	f04f 0901 	mov.w	r9, #1
 8009294:	4623      	mov	r3, r4
 8009296:	469a      	mov	sl, r3
 8009298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800929c:	b10a      	cbz	r2, 80092a2 <_vfiprintf_r+0x86>
 800929e:	2a25      	cmp	r2, #37	@ 0x25
 80092a0:	d1f9      	bne.n	8009296 <_vfiprintf_r+0x7a>
 80092a2:	ebba 0b04 	subs.w	fp, sl, r4
 80092a6:	d00b      	beq.n	80092c0 <_vfiprintf_r+0xa4>
 80092a8:	465b      	mov	r3, fp
 80092aa:	4622      	mov	r2, r4
 80092ac:	4629      	mov	r1, r5
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7ff ffa2 	bl	80091f8 <__sfputs_r>
 80092b4:	3001      	adds	r0, #1
 80092b6:	f000 80a7 	beq.w	8009408 <_vfiprintf_r+0x1ec>
 80092ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092bc:	445a      	add	r2, fp
 80092be:	9209      	str	r2, [sp, #36]	@ 0x24
 80092c0:	f89a 3000 	ldrb.w	r3, [sl]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f000 809f 	beq.w	8009408 <_vfiprintf_r+0x1ec>
 80092ca:	2300      	movs	r3, #0
 80092cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092d4:	f10a 0a01 	add.w	sl, sl, #1
 80092d8:	9304      	str	r3, [sp, #16]
 80092da:	9307      	str	r3, [sp, #28]
 80092dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80092e2:	4654      	mov	r4, sl
 80092e4:	2205      	movs	r2, #5
 80092e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ea:	4853      	ldr	r0, [pc, #332]	@ (8009438 <_vfiprintf_r+0x21c>)
 80092ec:	f7f6 ff98 	bl	8000220 <memchr>
 80092f0:	9a04      	ldr	r2, [sp, #16]
 80092f2:	b9d8      	cbnz	r0, 800932c <_vfiprintf_r+0x110>
 80092f4:	06d1      	lsls	r1, r2, #27
 80092f6:	bf44      	itt	mi
 80092f8:	2320      	movmi	r3, #32
 80092fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092fe:	0713      	lsls	r3, r2, #28
 8009300:	bf44      	itt	mi
 8009302:	232b      	movmi	r3, #43	@ 0x2b
 8009304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009308:	f89a 3000 	ldrb.w	r3, [sl]
 800930c:	2b2a      	cmp	r3, #42	@ 0x2a
 800930e:	d015      	beq.n	800933c <_vfiprintf_r+0x120>
 8009310:	9a07      	ldr	r2, [sp, #28]
 8009312:	4654      	mov	r4, sl
 8009314:	2000      	movs	r0, #0
 8009316:	f04f 0c0a 	mov.w	ip, #10
 800931a:	4621      	mov	r1, r4
 800931c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009320:	3b30      	subs	r3, #48	@ 0x30
 8009322:	2b09      	cmp	r3, #9
 8009324:	d94b      	bls.n	80093be <_vfiprintf_r+0x1a2>
 8009326:	b1b0      	cbz	r0, 8009356 <_vfiprintf_r+0x13a>
 8009328:	9207      	str	r2, [sp, #28]
 800932a:	e014      	b.n	8009356 <_vfiprintf_r+0x13a>
 800932c:	eba0 0308 	sub.w	r3, r0, r8
 8009330:	fa09 f303 	lsl.w	r3, r9, r3
 8009334:	4313      	orrs	r3, r2
 8009336:	9304      	str	r3, [sp, #16]
 8009338:	46a2      	mov	sl, r4
 800933a:	e7d2      	b.n	80092e2 <_vfiprintf_r+0xc6>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	1d19      	adds	r1, r3, #4
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	9103      	str	r1, [sp, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	bfbb      	ittet	lt
 8009348:	425b      	neglt	r3, r3
 800934a:	f042 0202 	orrlt.w	r2, r2, #2
 800934e:	9307      	strge	r3, [sp, #28]
 8009350:	9307      	strlt	r3, [sp, #28]
 8009352:	bfb8      	it	lt
 8009354:	9204      	strlt	r2, [sp, #16]
 8009356:	7823      	ldrb	r3, [r4, #0]
 8009358:	2b2e      	cmp	r3, #46	@ 0x2e
 800935a:	d10a      	bne.n	8009372 <_vfiprintf_r+0x156>
 800935c:	7863      	ldrb	r3, [r4, #1]
 800935e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009360:	d132      	bne.n	80093c8 <_vfiprintf_r+0x1ac>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	1d1a      	adds	r2, r3, #4
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	9203      	str	r2, [sp, #12]
 800936a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800936e:	3402      	adds	r4, #2
 8009370:	9305      	str	r3, [sp, #20]
 8009372:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009448 <_vfiprintf_r+0x22c>
 8009376:	7821      	ldrb	r1, [r4, #0]
 8009378:	2203      	movs	r2, #3
 800937a:	4650      	mov	r0, sl
 800937c:	f7f6 ff50 	bl	8000220 <memchr>
 8009380:	b138      	cbz	r0, 8009392 <_vfiprintf_r+0x176>
 8009382:	9b04      	ldr	r3, [sp, #16]
 8009384:	eba0 000a 	sub.w	r0, r0, sl
 8009388:	2240      	movs	r2, #64	@ 0x40
 800938a:	4082      	lsls	r2, r0
 800938c:	4313      	orrs	r3, r2
 800938e:	3401      	adds	r4, #1
 8009390:	9304      	str	r3, [sp, #16]
 8009392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009396:	4829      	ldr	r0, [pc, #164]	@ (800943c <_vfiprintf_r+0x220>)
 8009398:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800939c:	2206      	movs	r2, #6
 800939e:	f7f6 ff3f 	bl	8000220 <memchr>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d03f      	beq.n	8009426 <_vfiprintf_r+0x20a>
 80093a6:	4b26      	ldr	r3, [pc, #152]	@ (8009440 <_vfiprintf_r+0x224>)
 80093a8:	bb1b      	cbnz	r3, 80093f2 <_vfiprintf_r+0x1d6>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	3307      	adds	r3, #7
 80093ae:	f023 0307 	bic.w	r3, r3, #7
 80093b2:	3308      	adds	r3, #8
 80093b4:	9303      	str	r3, [sp, #12]
 80093b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b8:	443b      	add	r3, r7
 80093ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80093bc:	e76a      	b.n	8009294 <_vfiprintf_r+0x78>
 80093be:	fb0c 3202 	mla	r2, ip, r2, r3
 80093c2:	460c      	mov	r4, r1
 80093c4:	2001      	movs	r0, #1
 80093c6:	e7a8      	b.n	800931a <_vfiprintf_r+0xfe>
 80093c8:	2300      	movs	r3, #0
 80093ca:	3401      	adds	r4, #1
 80093cc:	9305      	str	r3, [sp, #20]
 80093ce:	4619      	mov	r1, r3
 80093d0:	f04f 0c0a 	mov.w	ip, #10
 80093d4:	4620      	mov	r0, r4
 80093d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093da:	3a30      	subs	r2, #48	@ 0x30
 80093dc:	2a09      	cmp	r2, #9
 80093de:	d903      	bls.n	80093e8 <_vfiprintf_r+0x1cc>
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0c6      	beq.n	8009372 <_vfiprintf_r+0x156>
 80093e4:	9105      	str	r1, [sp, #20]
 80093e6:	e7c4      	b.n	8009372 <_vfiprintf_r+0x156>
 80093e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80093ec:	4604      	mov	r4, r0
 80093ee:	2301      	movs	r3, #1
 80093f0:	e7f0      	b.n	80093d4 <_vfiprintf_r+0x1b8>
 80093f2:	ab03      	add	r3, sp, #12
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	462a      	mov	r2, r5
 80093f8:	4b12      	ldr	r3, [pc, #72]	@ (8009444 <_vfiprintf_r+0x228>)
 80093fa:	a904      	add	r1, sp, #16
 80093fc:	4630      	mov	r0, r6
 80093fe:	f7fb feb9 	bl	8005174 <_printf_float>
 8009402:	4607      	mov	r7, r0
 8009404:	1c78      	adds	r0, r7, #1
 8009406:	d1d6      	bne.n	80093b6 <_vfiprintf_r+0x19a>
 8009408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800940a:	07d9      	lsls	r1, r3, #31
 800940c:	d405      	bmi.n	800941a <_vfiprintf_r+0x1fe>
 800940e:	89ab      	ldrh	r3, [r5, #12]
 8009410:	059a      	lsls	r2, r3, #22
 8009412:	d402      	bmi.n	800941a <_vfiprintf_r+0x1fe>
 8009414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009416:	f7fc fe1d 	bl	8006054 <__retarget_lock_release_recursive>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	065b      	lsls	r3, r3, #25
 800941e:	f53f af1f 	bmi.w	8009260 <_vfiprintf_r+0x44>
 8009422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009424:	e71e      	b.n	8009264 <_vfiprintf_r+0x48>
 8009426:	ab03      	add	r3, sp, #12
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	462a      	mov	r2, r5
 800942c:	4b05      	ldr	r3, [pc, #20]	@ (8009444 <_vfiprintf_r+0x228>)
 800942e:	a904      	add	r1, sp, #16
 8009430:	4630      	mov	r0, r6
 8009432:	f7fc f937 	bl	80056a4 <_printf_i>
 8009436:	e7e4      	b.n	8009402 <_vfiprintf_r+0x1e6>
 8009438:	0800a9d1 	.word	0x0800a9d1
 800943c:	0800a9db 	.word	0x0800a9db
 8009440:	08005175 	.word	0x08005175
 8009444:	080091f9 	.word	0x080091f9
 8009448:	0800a9d7 	.word	0x0800a9d7

0800944c <__swbuf_r>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	460e      	mov	r6, r1
 8009450:	4614      	mov	r4, r2
 8009452:	4605      	mov	r5, r0
 8009454:	b118      	cbz	r0, 800945e <__swbuf_r+0x12>
 8009456:	6a03      	ldr	r3, [r0, #32]
 8009458:	b90b      	cbnz	r3, 800945e <__swbuf_r+0x12>
 800945a:	f7fc fce3 	bl	8005e24 <__sinit>
 800945e:	69a3      	ldr	r3, [r4, #24]
 8009460:	60a3      	str	r3, [r4, #8]
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	071a      	lsls	r2, r3, #28
 8009466:	d501      	bpl.n	800946c <__swbuf_r+0x20>
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	b943      	cbnz	r3, 800947e <__swbuf_r+0x32>
 800946c:	4621      	mov	r1, r4
 800946e:	4628      	mov	r0, r5
 8009470:	f000 f82a 	bl	80094c8 <__swsetup_r>
 8009474:	b118      	cbz	r0, 800947e <__swbuf_r+0x32>
 8009476:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800947a:	4638      	mov	r0, r7
 800947c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	6922      	ldr	r2, [r4, #16]
 8009482:	1a98      	subs	r0, r3, r2
 8009484:	6963      	ldr	r3, [r4, #20]
 8009486:	b2f6      	uxtb	r6, r6
 8009488:	4283      	cmp	r3, r0
 800948a:	4637      	mov	r7, r6
 800948c:	dc05      	bgt.n	800949a <__swbuf_r+0x4e>
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f7ff fa47 	bl	8008924 <_fflush_r>
 8009496:	2800      	cmp	r0, #0
 8009498:	d1ed      	bne.n	8009476 <__swbuf_r+0x2a>
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	3b01      	subs	r3, #1
 800949e:	60a3      	str	r3, [r4, #8]
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	6022      	str	r2, [r4, #0]
 80094a6:	701e      	strb	r6, [r3, #0]
 80094a8:	6962      	ldr	r2, [r4, #20]
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d004      	beq.n	80094ba <__swbuf_r+0x6e>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	07db      	lsls	r3, r3, #31
 80094b4:	d5e1      	bpl.n	800947a <__swbuf_r+0x2e>
 80094b6:	2e0a      	cmp	r6, #10
 80094b8:	d1df      	bne.n	800947a <__swbuf_r+0x2e>
 80094ba:	4621      	mov	r1, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	f7ff fa31 	bl	8008924 <_fflush_r>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d0d9      	beq.n	800947a <__swbuf_r+0x2e>
 80094c6:	e7d6      	b.n	8009476 <__swbuf_r+0x2a>

080094c8 <__swsetup_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4b29      	ldr	r3, [pc, #164]	@ (8009570 <__swsetup_r+0xa8>)
 80094cc:	4605      	mov	r5, r0
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	460c      	mov	r4, r1
 80094d2:	b118      	cbz	r0, 80094dc <__swsetup_r+0x14>
 80094d4:	6a03      	ldr	r3, [r0, #32]
 80094d6:	b90b      	cbnz	r3, 80094dc <__swsetup_r+0x14>
 80094d8:	f7fc fca4 	bl	8005e24 <__sinit>
 80094dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e0:	0719      	lsls	r1, r3, #28
 80094e2:	d422      	bmi.n	800952a <__swsetup_r+0x62>
 80094e4:	06da      	lsls	r2, r3, #27
 80094e6:	d407      	bmi.n	80094f8 <__swsetup_r+0x30>
 80094e8:	2209      	movs	r2, #9
 80094ea:	602a      	str	r2, [r5, #0]
 80094ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094f6:	e033      	b.n	8009560 <__swsetup_r+0x98>
 80094f8:	0758      	lsls	r0, r3, #29
 80094fa:	d512      	bpl.n	8009522 <__swsetup_r+0x5a>
 80094fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094fe:	b141      	cbz	r1, 8009512 <__swsetup_r+0x4a>
 8009500:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009504:	4299      	cmp	r1, r3
 8009506:	d002      	beq.n	800950e <__swsetup_r+0x46>
 8009508:	4628      	mov	r0, r5
 800950a:	f7fd fbf9 	bl	8006d00 <_free_r>
 800950e:	2300      	movs	r3, #0
 8009510:	6363      	str	r3, [r4, #52]	@ 0x34
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009518:	81a3      	strh	r3, [r4, #12]
 800951a:	2300      	movs	r3, #0
 800951c:	6063      	str	r3, [r4, #4]
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	f043 0308 	orr.w	r3, r3, #8
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	6923      	ldr	r3, [r4, #16]
 800952c:	b94b      	cbnz	r3, 8009542 <__swsetup_r+0x7a>
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009538:	d003      	beq.n	8009542 <__swsetup_r+0x7a>
 800953a:	4621      	mov	r1, r4
 800953c:	4628      	mov	r0, r5
 800953e:	f000 f883 	bl	8009648 <__smakebuf_r>
 8009542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009546:	f013 0201 	ands.w	r2, r3, #1
 800954a:	d00a      	beq.n	8009562 <__swsetup_r+0x9a>
 800954c:	2200      	movs	r2, #0
 800954e:	60a2      	str	r2, [r4, #8]
 8009550:	6962      	ldr	r2, [r4, #20]
 8009552:	4252      	negs	r2, r2
 8009554:	61a2      	str	r2, [r4, #24]
 8009556:	6922      	ldr	r2, [r4, #16]
 8009558:	b942      	cbnz	r2, 800956c <__swsetup_r+0xa4>
 800955a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800955e:	d1c5      	bne.n	80094ec <__swsetup_r+0x24>
 8009560:	bd38      	pop	{r3, r4, r5, pc}
 8009562:	0799      	lsls	r1, r3, #30
 8009564:	bf58      	it	pl
 8009566:	6962      	ldrpl	r2, [r4, #20]
 8009568:	60a2      	str	r2, [r4, #8]
 800956a:	e7f4      	b.n	8009556 <__swsetup_r+0x8e>
 800956c:	2000      	movs	r0, #0
 800956e:	e7f7      	b.n	8009560 <__swsetup_r+0x98>
 8009570:	20000018 	.word	0x20000018

08009574 <_raise_r>:
 8009574:	291f      	cmp	r1, #31
 8009576:	b538      	push	{r3, r4, r5, lr}
 8009578:	4605      	mov	r5, r0
 800957a:	460c      	mov	r4, r1
 800957c:	d904      	bls.n	8009588 <_raise_r+0x14>
 800957e:	2316      	movs	r3, #22
 8009580:	6003      	str	r3, [r0, #0]
 8009582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800958a:	b112      	cbz	r2, 8009592 <_raise_r+0x1e>
 800958c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009590:	b94b      	cbnz	r3, 80095a6 <_raise_r+0x32>
 8009592:	4628      	mov	r0, r5
 8009594:	f000 f830 	bl	80095f8 <_getpid_r>
 8009598:	4622      	mov	r2, r4
 800959a:	4601      	mov	r1, r0
 800959c:	4628      	mov	r0, r5
 800959e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095a2:	f000 b817 	b.w	80095d4 <_kill_r>
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d00a      	beq.n	80095c0 <_raise_r+0x4c>
 80095aa:	1c59      	adds	r1, r3, #1
 80095ac:	d103      	bne.n	80095b6 <_raise_r+0x42>
 80095ae:	2316      	movs	r3, #22
 80095b0:	6003      	str	r3, [r0, #0]
 80095b2:	2001      	movs	r0, #1
 80095b4:	e7e7      	b.n	8009586 <_raise_r+0x12>
 80095b6:	2100      	movs	r1, #0
 80095b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095bc:	4620      	mov	r0, r4
 80095be:	4798      	blx	r3
 80095c0:	2000      	movs	r0, #0
 80095c2:	e7e0      	b.n	8009586 <_raise_r+0x12>

080095c4 <raise>:
 80095c4:	4b02      	ldr	r3, [pc, #8]	@ (80095d0 <raise+0xc>)
 80095c6:	4601      	mov	r1, r0
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	f7ff bfd3 	b.w	8009574 <_raise_r>
 80095ce:	bf00      	nop
 80095d0:	20000018 	.word	0x20000018

080095d4 <_kill_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4d07      	ldr	r5, [pc, #28]	@ (80095f4 <_kill_r+0x20>)
 80095d8:	2300      	movs	r3, #0
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	4611      	mov	r1, r2
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	f7f8 fc5a 	bl	8001e9a <_kill>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d102      	bne.n	80095f0 <_kill_r+0x1c>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	b103      	cbz	r3, 80095f0 <_kill_r+0x1c>
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	bf00      	nop
 80095f4:	200004e4 	.word	0x200004e4

080095f8 <_getpid_r>:
 80095f8:	f7f8 bc47 	b.w	8001e8a <_getpid>

080095fc <__swhatbuf_r>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	460c      	mov	r4, r1
 8009600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009604:	2900      	cmp	r1, #0
 8009606:	b096      	sub	sp, #88	@ 0x58
 8009608:	4615      	mov	r5, r2
 800960a:	461e      	mov	r6, r3
 800960c:	da0d      	bge.n	800962a <__swhatbuf_r+0x2e>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009614:	f04f 0100 	mov.w	r1, #0
 8009618:	bf14      	ite	ne
 800961a:	2340      	movne	r3, #64	@ 0x40
 800961c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009620:	2000      	movs	r0, #0
 8009622:	6031      	str	r1, [r6, #0]
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	b016      	add	sp, #88	@ 0x58
 8009628:	bd70      	pop	{r4, r5, r6, pc}
 800962a:	466a      	mov	r2, sp
 800962c:	f000 f848 	bl	80096c0 <_fstat_r>
 8009630:	2800      	cmp	r0, #0
 8009632:	dbec      	blt.n	800960e <__swhatbuf_r+0x12>
 8009634:	9901      	ldr	r1, [sp, #4]
 8009636:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800963a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800963e:	4259      	negs	r1, r3
 8009640:	4159      	adcs	r1, r3
 8009642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009646:	e7eb      	b.n	8009620 <__swhatbuf_r+0x24>

08009648 <__smakebuf_r>:
 8009648:	898b      	ldrh	r3, [r1, #12]
 800964a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800964c:	079d      	lsls	r5, r3, #30
 800964e:	4606      	mov	r6, r0
 8009650:	460c      	mov	r4, r1
 8009652:	d507      	bpl.n	8009664 <__smakebuf_r+0x1c>
 8009654:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009658:	6023      	str	r3, [r4, #0]
 800965a:	6123      	str	r3, [r4, #16]
 800965c:	2301      	movs	r3, #1
 800965e:	6163      	str	r3, [r4, #20]
 8009660:	b003      	add	sp, #12
 8009662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009664:	ab01      	add	r3, sp, #4
 8009666:	466a      	mov	r2, sp
 8009668:	f7ff ffc8 	bl	80095fc <__swhatbuf_r>
 800966c:	9f00      	ldr	r7, [sp, #0]
 800966e:	4605      	mov	r5, r0
 8009670:	4639      	mov	r1, r7
 8009672:	4630      	mov	r0, r6
 8009674:	f7fd fbb8 	bl	8006de8 <_malloc_r>
 8009678:	b948      	cbnz	r0, 800968e <__smakebuf_r+0x46>
 800967a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800967e:	059a      	lsls	r2, r3, #22
 8009680:	d4ee      	bmi.n	8009660 <__smakebuf_r+0x18>
 8009682:	f023 0303 	bic.w	r3, r3, #3
 8009686:	f043 0302 	orr.w	r3, r3, #2
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	e7e2      	b.n	8009654 <__smakebuf_r+0xc>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	6020      	str	r0, [r4, #0]
 8009692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009696:	81a3      	strh	r3, [r4, #12]
 8009698:	9b01      	ldr	r3, [sp, #4]
 800969a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800969e:	b15b      	cbz	r3, 80096b8 <__smakebuf_r+0x70>
 80096a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096a4:	4630      	mov	r0, r6
 80096a6:	f000 f81d 	bl	80096e4 <_isatty_r>
 80096aa:	b128      	cbz	r0, 80096b8 <__smakebuf_r+0x70>
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	f023 0303 	bic.w	r3, r3, #3
 80096b2:	f043 0301 	orr.w	r3, r3, #1
 80096b6:	81a3      	strh	r3, [r4, #12]
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	431d      	orrs	r5, r3
 80096bc:	81a5      	strh	r5, [r4, #12]
 80096be:	e7cf      	b.n	8009660 <__smakebuf_r+0x18>

080096c0 <_fstat_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d07      	ldr	r5, [pc, #28]	@ (80096e0 <_fstat_r+0x20>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	4611      	mov	r1, r2
 80096cc:	602b      	str	r3, [r5, #0]
 80096ce:	f7f8 fc44 	bl	8001f5a <_fstat>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	d102      	bne.n	80096dc <_fstat_r+0x1c>
 80096d6:	682b      	ldr	r3, [r5, #0]
 80096d8:	b103      	cbz	r3, 80096dc <_fstat_r+0x1c>
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop
 80096e0:	200004e4 	.word	0x200004e4

080096e4 <_isatty_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d06      	ldr	r5, [pc, #24]	@ (8009700 <_isatty_r+0x1c>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	f7f8 fc43 	bl	8001f7a <_isatty>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_isatty_r+0x1a>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_isatty_r+0x1a>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	200004e4 	.word	0x200004e4

08009704 <pow>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	ed2d 8b02 	vpush	{d8}
 800970a:	eeb0 8a40 	vmov.f32	s16, s0
 800970e:	eef0 8a60 	vmov.f32	s17, s1
 8009712:	ec55 4b11 	vmov	r4, r5, d1
 8009716:	f000 f873 	bl	8009800 <__ieee754_pow>
 800971a:	4622      	mov	r2, r4
 800971c:	462b      	mov	r3, r5
 800971e:	4620      	mov	r0, r4
 8009720:	4629      	mov	r1, r5
 8009722:	ec57 6b10 	vmov	r6, r7, d0
 8009726:	f7f7 fa29 	bl	8000b7c <__aeabi_dcmpun>
 800972a:	2800      	cmp	r0, #0
 800972c:	d13b      	bne.n	80097a6 <pow+0xa2>
 800972e:	ec51 0b18 	vmov	r0, r1, d8
 8009732:	2200      	movs	r2, #0
 8009734:	2300      	movs	r3, #0
 8009736:	f7f7 f9ef 	bl	8000b18 <__aeabi_dcmpeq>
 800973a:	b1b8      	cbz	r0, 800976c <pow+0x68>
 800973c:	2200      	movs	r2, #0
 800973e:	2300      	movs	r3, #0
 8009740:	4620      	mov	r0, r4
 8009742:	4629      	mov	r1, r5
 8009744:	f7f7 f9e8 	bl	8000b18 <__aeabi_dcmpeq>
 8009748:	2800      	cmp	r0, #0
 800974a:	d146      	bne.n	80097da <pow+0xd6>
 800974c:	ec45 4b10 	vmov	d0, r4, r5
 8009750:	f000 f848 	bl	80097e4 <finite>
 8009754:	b338      	cbz	r0, 80097a6 <pow+0xa2>
 8009756:	2200      	movs	r2, #0
 8009758:	2300      	movs	r3, #0
 800975a:	4620      	mov	r0, r4
 800975c:	4629      	mov	r1, r5
 800975e:	f7f7 f9e5 	bl	8000b2c <__aeabi_dcmplt>
 8009762:	b300      	cbz	r0, 80097a6 <pow+0xa2>
 8009764:	f7fc fc4a 	bl	8005ffc <__errno>
 8009768:	2322      	movs	r3, #34	@ 0x22
 800976a:	e01b      	b.n	80097a4 <pow+0xa0>
 800976c:	ec47 6b10 	vmov	d0, r6, r7
 8009770:	f000 f838 	bl	80097e4 <finite>
 8009774:	b9e0      	cbnz	r0, 80097b0 <pow+0xac>
 8009776:	eeb0 0a48 	vmov.f32	s0, s16
 800977a:	eef0 0a68 	vmov.f32	s1, s17
 800977e:	f000 f831 	bl	80097e4 <finite>
 8009782:	b1a8      	cbz	r0, 80097b0 <pow+0xac>
 8009784:	ec45 4b10 	vmov	d0, r4, r5
 8009788:	f000 f82c 	bl	80097e4 <finite>
 800978c:	b180      	cbz	r0, 80097b0 <pow+0xac>
 800978e:	4632      	mov	r2, r6
 8009790:	463b      	mov	r3, r7
 8009792:	4630      	mov	r0, r6
 8009794:	4639      	mov	r1, r7
 8009796:	f7f7 f9f1 	bl	8000b7c <__aeabi_dcmpun>
 800979a:	2800      	cmp	r0, #0
 800979c:	d0e2      	beq.n	8009764 <pow+0x60>
 800979e:	f7fc fc2d 	bl	8005ffc <__errno>
 80097a2:	2321      	movs	r3, #33	@ 0x21
 80097a4:	6003      	str	r3, [r0, #0]
 80097a6:	ecbd 8b02 	vpop	{d8}
 80097aa:	ec47 6b10 	vmov	d0, r6, r7
 80097ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b0:	2200      	movs	r2, #0
 80097b2:	2300      	movs	r3, #0
 80097b4:	4630      	mov	r0, r6
 80097b6:	4639      	mov	r1, r7
 80097b8:	f7f7 f9ae 	bl	8000b18 <__aeabi_dcmpeq>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d0f2      	beq.n	80097a6 <pow+0xa2>
 80097c0:	eeb0 0a48 	vmov.f32	s0, s16
 80097c4:	eef0 0a68 	vmov.f32	s1, s17
 80097c8:	f000 f80c 	bl	80097e4 <finite>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d0ea      	beq.n	80097a6 <pow+0xa2>
 80097d0:	ec45 4b10 	vmov	d0, r4, r5
 80097d4:	f000 f806 	bl	80097e4 <finite>
 80097d8:	e7c3      	b.n	8009762 <pow+0x5e>
 80097da:	4f01      	ldr	r7, [pc, #4]	@ (80097e0 <pow+0xdc>)
 80097dc:	2600      	movs	r6, #0
 80097de:	e7e2      	b.n	80097a6 <pow+0xa2>
 80097e0:	3ff00000 	.word	0x3ff00000

080097e4 <finite>:
 80097e4:	b082      	sub	sp, #8
 80097e6:	ed8d 0b00 	vstr	d0, [sp]
 80097ea:	9801      	ldr	r0, [sp, #4]
 80097ec:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80097f0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80097f4:	0fc0      	lsrs	r0, r0, #31
 80097f6:	b002      	add	sp, #8
 80097f8:	4770      	bx	lr
 80097fa:	0000      	movs	r0, r0
 80097fc:	0000      	movs	r0, r0
	...

08009800 <__ieee754_pow>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	b091      	sub	sp, #68	@ 0x44
 8009806:	ed8d 1b00 	vstr	d1, [sp]
 800980a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800980e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009812:	ea5a 0001 	orrs.w	r0, sl, r1
 8009816:	ec57 6b10 	vmov	r6, r7, d0
 800981a:	d113      	bne.n	8009844 <__ieee754_pow+0x44>
 800981c:	19b3      	adds	r3, r6, r6
 800981e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009822:	4152      	adcs	r2, r2
 8009824:	4298      	cmp	r0, r3
 8009826:	4b98      	ldr	r3, [pc, #608]	@ (8009a88 <__ieee754_pow+0x288>)
 8009828:	4193      	sbcs	r3, r2
 800982a:	f080 84ea 	bcs.w	800a202 <__ieee754_pow+0xa02>
 800982e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009832:	4630      	mov	r0, r6
 8009834:	4639      	mov	r1, r7
 8009836:	f7f6 fd51 	bl	80002dc <__adddf3>
 800983a:	ec41 0b10 	vmov	d0, r0, r1
 800983e:	b011      	add	sp, #68	@ 0x44
 8009840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009844:	4a91      	ldr	r2, [pc, #580]	@ (8009a8c <__ieee754_pow+0x28c>)
 8009846:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800984a:	4590      	cmp	r8, r2
 800984c:	463d      	mov	r5, r7
 800984e:	4633      	mov	r3, r6
 8009850:	d806      	bhi.n	8009860 <__ieee754_pow+0x60>
 8009852:	d101      	bne.n	8009858 <__ieee754_pow+0x58>
 8009854:	2e00      	cmp	r6, #0
 8009856:	d1ea      	bne.n	800982e <__ieee754_pow+0x2e>
 8009858:	4592      	cmp	sl, r2
 800985a:	d801      	bhi.n	8009860 <__ieee754_pow+0x60>
 800985c:	d10e      	bne.n	800987c <__ieee754_pow+0x7c>
 800985e:	b169      	cbz	r1, 800987c <__ieee754_pow+0x7c>
 8009860:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009864:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009868:	431d      	orrs	r5, r3
 800986a:	d1e0      	bne.n	800982e <__ieee754_pow+0x2e>
 800986c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009870:	18db      	adds	r3, r3, r3
 8009872:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009876:	4152      	adcs	r2, r2
 8009878:	429d      	cmp	r5, r3
 800987a:	e7d4      	b.n	8009826 <__ieee754_pow+0x26>
 800987c:	2d00      	cmp	r5, #0
 800987e:	46c3      	mov	fp, r8
 8009880:	da3a      	bge.n	80098f8 <__ieee754_pow+0xf8>
 8009882:	4a83      	ldr	r2, [pc, #524]	@ (8009a90 <__ieee754_pow+0x290>)
 8009884:	4592      	cmp	sl, r2
 8009886:	d84d      	bhi.n	8009924 <__ieee754_pow+0x124>
 8009888:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800988c:	4592      	cmp	sl, r2
 800988e:	f240 84c7 	bls.w	800a220 <__ieee754_pow+0xa20>
 8009892:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009896:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800989a:	2a14      	cmp	r2, #20
 800989c:	dd0f      	ble.n	80098be <__ieee754_pow+0xbe>
 800989e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80098a2:	fa21 f402 	lsr.w	r4, r1, r2
 80098a6:	fa04 f202 	lsl.w	r2, r4, r2
 80098aa:	428a      	cmp	r2, r1
 80098ac:	f040 84b8 	bne.w	800a220 <__ieee754_pow+0xa20>
 80098b0:	f004 0401 	and.w	r4, r4, #1
 80098b4:	f1c4 0402 	rsb	r4, r4, #2
 80098b8:	2900      	cmp	r1, #0
 80098ba:	d158      	bne.n	800996e <__ieee754_pow+0x16e>
 80098bc:	e00e      	b.n	80098dc <__ieee754_pow+0xdc>
 80098be:	2900      	cmp	r1, #0
 80098c0:	d154      	bne.n	800996c <__ieee754_pow+0x16c>
 80098c2:	f1c2 0214 	rsb	r2, r2, #20
 80098c6:	fa4a f402 	asr.w	r4, sl, r2
 80098ca:	fa04 f202 	lsl.w	r2, r4, r2
 80098ce:	4552      	cmp	r2, sl
 80098d0:	f040 84a3 	bne.w	800a21a <__ieee754_pow+0xa1a>
 80098d4:	f004 0401 	and.w	r4, r4, #1
 80098d8:	f1c4 0402 	rsb	r4, r4, #2
 80098dc:	4a6d      	ldr	r2, [pc, #436]	@ (8009a94 <__ieee754_pow+0x294>)
 80098de:	4592      	cmp	sl, r2
 80098e0:	d12e      	bne.n	8009940 <__ieee754_pow+0x140>
 80098e2:	f1b9 0f00 	cmp.w	r9, #0
 80098e6:	f280 8494 	bge.w	800a212 <__ieee754_pow+0xa12>
 80098ea:	496a      	ldr	r1, [pc, #424]	@ (8009a94 <__ieee754_pow+0x294>)
 80098ec:	4632      	mov	r2, r6
 80098ee:	463b      	mov	r3, r7
 80098f0:	2000      	movs	r0, #0
 80098f2:	f7f6 ffd3 	bl	800089c <__aeabi_ddiv>
 80098f6:	e7a0      	b.n	800983a <__ieee754_pow+0x3a>
 80098f8:	2400      	movs	r4, #0
 80098fa:	bbc1      	cbnz	r1, 800996e <__ieee754_pow+0x16e>
 80098fc:	4a63      	ldr	r2, [pc, #396]	@ (8009a8c <__ieee754_pow+0x28c>)
 80098fe:	4592      	cmp	sl, r2
 8009900:	d1ec      	bne.n	80098dc <__ieee754_pow+0xdc>
 8009902:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8009906:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800990a:	431a      	orrs	r2, r3
 800990c:	f000 8479 	beq.w	800a202 <__ieee754_pow+0xa02>
 8009910:	4b61      	ldr	r3, [pc, #388]	@ (8009a98 <__ieee754_pow+0x298>)
 8009912:	4598      	cmp	r8, r3
 8009914:	d908      	bls.n	8009928 <__ieee754_pow+0x128>
 8009916:	f1b9 0f00 	cmp.w	r9, #0
 800991a:	f2c0 8476 	blt.w	800a20a <__ieee754_pow+0xa0a>
 800991e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009922:	e78a      	b.n	800983a <__ieee754_pow+0x3a>
 8009924:	2402      	movs	r4, #2
 8009926:	e7e8      	b.n	80098fa <__ieee754_pow+0xfa>
 8009928:	f1b9 0f00 	cmp.w	r9, #0
 800992c:	f04f 0000 	mov.w	r0, #0
 8009930:	f04f 0100 	mov.w	r1, #0
 8009934:	da81      	bge.n	800983a <__ieee754_pow+0x3a>
 8009936:	e9dd 0300 	ldrd	r0, r3, [sp]
 800993a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800993e:	e77c      	b.n	800983a <__ieee754_pow+0x3a>
 8009940:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009944:	d106      	bne.n	8009954 <__ieee754_pow+0x154>
 8009946:	4632      	mov	r2, r6
 8009948:	463b      	mov	r3, r7
 800994a:	4630      	mov	r0, r6
 800994c:	4639      	mov	r1, r7
 800994e:	f7f6 fe7b 	bl	8000648 <__aeabi_dmul>
 8009952:	e772      	b.n	800983a <__ieee754_pow+0x3a>
 8009954:	4a51      	ldr	r2, [pc, #324]	@ (8009a9c <__ieee754_pow+0x29c>)
 8009956:	4591      	cmp	r9, r2
 8009958:	d109      	bne.n	800996e <__ieee754_pow+0x16e>
 800995a:	2d00      	cmp	r5, #0
 800995c:	db07      	blt.n	800996e <__ieee754_pow+0x16e>
 800995e:	ec47 6b10 	vmov	d0, r6, r7
 8009962:	b011      	add	sp, #68	@ 0x44
 8009964:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009968:	f000 bd52 	b.w	800a410 <__ieee754_sqrt>
 800996c:	2400      	movs	r4, #0
 800996e:	ec47 6b10 	vmov	d0, r6, r7
 8009972:	9302      	str	r3, [sp, #8]
 8009974:	f000 fc88 	bl	800a288 <fabs>
 8009978:	9b02      	ldr	r3, [sp, #8]
 800997a:	ec51 0b10 	vmov	r0, r1, d0
 800997e:	bb53      	cbnz	r3, 80099d6 <__ieee754_pow+0x1d6>
 8009980:	4b44      	ldr	r3, [pc, #272]	@ (8009a94 <__ieee754_pow+0x294>)
 8009982:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8009986:	429a      	cmp	r2, r3
 8009988:	d002      	beq.n	8009990 <__ieee754_pow+0x190>
 800998a:	f1b8 0f00 	cmp.w	r8, #0
 800998e:	d122      	bne.n	80099d6 <__ieee754_pow+0x1d6>
 8009990:	f1b9 0f00 	cmp.w	r9, #0
 8009994:	da05      	bge.n	80099a2 <__ieee754_pow+0x1a2>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	2000      	movs	r0, #0
 800999c:	493d      	ldr	r1, [pc, #244]	@ (8009a94 <__ieee754_pow+0x294>)
 800999e:	f7f6 ff7d 	bl	800089c <__aeabi_ddiv>
 80099a2:	2d00      	cmp	r5, #0
 80099a4:	f6bf af49 	bge.w	800983a <__ieee754_pow+0x3a>
 80099a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80099ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80099b0:	ea58 0804 	orrs.w	r8, r8, r4
 80099b4:	d108      	bne.n	80099c8 <__ieee754_pow+0x1c8>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4610      	mov	r0, r2
 80099bc:	4619      	mov	r1, r3
 80099be:	f7f6 fc8b 	bl	80002d8 <__aeabi_dsub>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	e794      	b.n	80098f2 <__ieee754_pow+0xf2>
 80099c8:	2c01      	cmp	r4, #1
 80099ca:	f47f af36 	bne.w	800983a <__ieee754_pow+0x3a>
 80099ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099d2:	4619      	mov	r1, r3
 80099d4:	e731      	b.n	800983a <__ieee754_pow+0x3a>
 80099d6:	0feb      	lsrs	r3, r5, #31
 80099d8:	3b01      	subs	r3, #1
 80099da:	ea53 0204 	orrs.w	r2, r3, r4
 80099de:	d102      	bne.n	80099e6 <__ieee754_pow+0x1e6>
 80099e0:	4632      	mov	r2, r6
 80099e2:	463b      	mov	r3, r7
 80099e4:	e7e9      	b.n	80099ba <__ieee754_pow+0x1ba>
 80099e6:	3c01      	subs	r4, #1
 80099e8:	431c      	orrs	r4, r3
 80099ea:	d016      	beq.n	8009a1a <__ieee754_pow+0x21a>
 80099ec:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009a78 <__ieee754_pow+0x278>
 80099f0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80099f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099f8:	f240 8112 	bls.w	8009c20 <__ieee754_pow+0x420>
 80099fc:	4b28      	ldr	r3, [pc, #160]	@ (8009aa0 <__ieee754_pow+0x2a0>)
 80099fe:	459a      	cmp	sl, r3
 8009a00:	4b25      	ldr	r3, [pc, #148]	@ (8009a98 <__ieee754_pow+0x298>)
 8009a02:	d916      	bls.n	8009a32 <__ieee754_pow+0x232>
 8009a04:	4598      	cmp	r8, r3
 8009a06:	d80b      	bhi.n	8009a20 <__ieee754_pow+0x220>
 8009a08:	f1b9 0f00 	cmp.w	r9, #0
 8009a0c:	da0b      	bge.n	8009a26 <__ieee754_pow+0x226>
 8009a0e:	2000      	movs	r0, #0
 8009a10:	b011      	add	sp, #68	@ 0x44
 8009a12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a16:	f000 bcf3 	b.w	800a400 <__math_oflow>
 8009a1a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009a80 <__ieee754_pow+0x280>
 8009a1e:	e7e7      	b.n	80099f0 <__ieee754_pow+0x1f0>
 8009a20:	f1b9 0f00 	cmp.w	r9, #0
 8009a24:	dcf3      	bgt.n	8009a0e <__ieee754_pow+0x20e>
 8009a26:	2000      	movs	r0, #0
 8009a28:	b011      	add	sp, #68	@ 0x44
 8009a2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2e:	f000 bcdf 	b.w	800a3f0 <__math_uflow>
 8009a32:	4598      	cmp	r8, r3
 8009a34:	d20c      	bcs.n	8009a50 <__ieee754_pow+0x250>
 8009a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f7f7 f875 	bl	8000b2c <__aeabi_dcmplt>
 8009a42:	3800      	subs	r0, #0
 8009a44:	bf18      	it	ne
 8009a46:	2001      	movne	r0, #1
 8009a48:	f1b9 0f00 	cmp.w	r9, #0
 8009a4c:	daec      	bge.n	8009a28 <__ieee754_pow+0x228>
 8009a4e:	e7df      	b.n	8009a10 <__ieee754_pow+0x210>
 8009a50:	4b10      	ldr	r3, [pc, #64]	@ (8009a94 <__ieee754_pow+0x294>)
 8009a52:	4598      	cmp	r8, r3
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	d924      	bls.n	8009aa4 <__ieee754_pow+0x2a4>
 8009a5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f7f7 f864 	bl	8000b2c <__aeabi_dcmplt>
 8009a64:	3800      	subs	r0, #0
 8009a66:	bf18      	it	ne
 8009a68:	2001      	movne	r0, #1
 8009a6a:	f1b9 0f00 	cmp.w	r9, #0
 8009a6e:	dccf      	bgt.n	8009a10 <__ieee754_pow+0x210>
 8009a70:	e7da      	b.n	8009a28 <__ieee754_pow+0x228>
 8009a72:	bf00      	nop
 8009a74:	f3af 8000 	nop.w
 8009a78:	00000000 	.word	0x00000000
 8009a7c:	3ff00000 	.word	0x3ff00000
 8009a80:	00000000 	.word	0x00000000
 8009a84:	bff00000 	.word	0xbff00000
 8009a88:	fff00000 	.word	0xfff00000
 8009a8c:	7ff00000 	.word	0x7ff00000
 8009a90:	433fffff 	.word	0x433fffff
 8009a94:	3ff00000 	.word	0x3ff00000
 8009a98:	3fefffff 	.word	0x3fefffff
 8009a9c:	3fe00000 	.word	0x3fe00000
 8009aa0:	43f00000 	.word	0x43f00000
 8009aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8009c10 <__ieee754_pow+0x410>)
 8009aa6:	f7f6 fc17 	bl	80002d8 <__aeabi_dsub>
 8009aaa:	a351      	add	r3, pc, #324	@ (adr r3, 8009bf0 <__ieee754_pow+0x3f0>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	460d      	mov	r5, r1
 8009ab4:	f7f6 fdc8 	bl	8000648 <__aeabi_dmul>
 8009ab8:	a34f      	add	r3, pc, #316	@ (adr r3, 8009bf8 <__ieee754_pow+0x3f8>)
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	4606      	mov	r6, r0
 8009ac0:	460f      	mov	r7, r1
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	f7f6 fdbf 	bl	8000648 <__aeabi_dmul>
 8009aca:	4b52      	ldr	r3, [pc, #328]	@ (8009c14 <__ieee754_pow+0x414>)
 8009acc:	4682      	mov	sl, r0
 8009ace:	468b      	mov	fp, r1
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	f7f6 fdb7 	bl	8000648 <__aeabi_dmul>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	a148      	add	r1, pc, #288	@ (adr r1, 8009c00 <__ieee754_pow+0x400>)
 8009ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ae4:	f7f6 fbf8 	bl	80002d8 <__aeabi_dsub>
 8009ae8:	4622      	mov	r2, r4
 8009aea:	462b      	mov	r3, r5
 8009aec:	f7f6 fdac 	bl	8000648 <__aeabi_dmul>
 8009af0:	4602      	mov	r2, r0
 8009af2:	460b      	mov	r3, r1
 8009af4:	2000      	movs	r0, #0
 8009af6:	4948      	ldr	r1, [pc, #288]	@ (8009c18 <__ieee754_pow+0x418>)
 8009af8:	f7f6 fbee 	bl	80002d8 <__aeabi_dsub>
 8009afc:	4622      	mov	r2, r4
 8009afe:	4680      	mov	r8, r0
 8009b00:	4689      	mov	r9, r1
 8009b02:	462b      	mov	r3, r5
 8009b04:	4620      	mov	r0, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7f6 fd9e 	bl	8000648 <__aeabi_dmul>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4640      	mov	r0, r8
 8009b12:	4649      	mov	r1, r9
 8009b14:	f7f6 fd98 	bl	8000648 <__aeabi_dmul>
 8009b18:	a33b      	add	r3, pc, #236	@ (adr r3, 8009c08 <__ieee754_pow+0x408>)
 8009b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1e:	f7f6 fd93 	bl	8000648 <__aeabi_dmul>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4650      	mov	r0, sl
 8009b28:	4659      	mov	r1, fp
 8009b2a:	f7f6 fbd5 	bl	80002d8 <__aeabi_dsub>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4680      	mov	r8, r0
 8009b34:	4689      	mov	r9, r1
 8009b36:	4630      	mov	r0, r6
 8009b38:	4639      	mov	r1, r7
 8009b3a:	f7f6 fbcf 	bl	80002dc <__adddf3>
 8009b3e:	2400      	movs	r4, #0
 8009b40:	4632      	mov	r2, r6
 8009b42:	463b      	mov	r3, r7
 8009b44:	4620      	mov	r0, r4
 8009b46:	460d      	mov	r5, r1
 8009b48:	f7f6 fbc6 	bl	80002d8 <__aeabi_dsub>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4640      	mov	r0, r8
 8009b52:	4649      	mov	r1, r9
 8009b54:	f7f6 fbc0 	bl	80002d8 <__aeabi_dsub>
 8009b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b60:	2300      	movs	r3, #0
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009b68:	4606      	mov	r6, r0
 8009b6a:	460f      	mov	r7, r1
 8009b6c:	4652      	mov	r2, sl
 8009b6e:	465b      	mov	r3, fp
 8009b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b74:	f7f6 fbb0 	bl	80002d8 <__aeabi_dsub>
 8009b78:	4622      	mov	r2, r4
 8009b7a:	462b      	mov	r3, r5
 8009b7c:	f7f6 fd64 	bl	8000648 <__aeabi_dmul>
 8009b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b84:	4680      	mov	r8, r0
 8009b86:	4689      	mov	r9, r1
 8009b88:	4630      	mov	r0, r6
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f7f6 fd5c 	bl	8000648 <__aeabi_dmul>
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4640      	mov	r0, r8
 8009b96:	4649      	mov	r1, r9
 8009b98:	f7f6 fba0 	bl	80002dc <__adddf3>
 8009b9c:	4652      	mov	r2, sl
 8009b9e:	465b      	mov	r3, fp
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	460f      	mov	r7, r1
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f7f6 fd4e 	bl	8000648 <__aeabi_dmul>
 8009bac:	460b      	mov	r3, r1
 8009bae:	4602      	mov	r2, r0
 8009bb0:	4680      	mov	r8, r0
 8009bb2:	4689      	mov	r9, r1
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	f7f6 fb90 	bl	80002dc <__adddf3>
 8009bbc:	4b17      	ldr	r3, [pc, #92]	@ (8009c1c <__ieee754_pow+0x41c>)
 8009bbe:	4299      	cmp	r1, r3
 8009bc0:	4604      	mov	r4, r0
 8009bc2:	460d      	mov	r5, r1
 8009bc4:	468a      	mov	sl, r1
 8009bc6:	468b      	mov	fp, r1
 8009bc8:	f340 82ef 	ble.w	800a1aa <__ieee754_pow+0x9aa>
 8009bcc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009bd0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009bd4:	4303      	orrs	r3, r0
 8009bd6:	f000 81e8 	beq.w	8009faa <__ieee754_pow+0x7aa>
 8009bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bde:	2200      	movs	r2, #0
 8009be0:	2300      	movs	r3, #0
 8009be2:	f7f6 ffa3 	bl	8000b2c <__aeabi_dcmplt>
 8009be6:	3800      	subs	r0, #0
 8009be8:	bf18      	it	ne
 8009bea:	2001      	movne	r0, #1
 8009bec:	e710      	b.n	8009a10 <__ieee754_pow+0x210>
 8009bee:	bf00      	nop
 8009bf0:	60000000 	.word	0x60000000
 8009bf4:	3ff71547 	.word	0x3ff71547
 8009bf8:	f85ddf44 	.word	0xf85ddf44
 8009bfc:	3e54ae0b 	.word	0x3e54ae0b
 8009c00:	55555555 	.word	0x55555555
 8009c04:	3fd55555 	.word	0x3fd55555
 8009c08:	652b82fe 	.word	0x652b82fe
 8009c0c:	3ff71547 	.word	0x3ff71547
 8009c10:	3ff00000 	.word	0x3ff00000
 8009c14:	3fd00000 	.word	0x3fd00000
 8009c18:	3fe00000 	.word	0x3fe00000
 8009c1c:	408fffff 	.word	0x408fffff
 8009c20:	4bd5      	ldr	r3, [pc, #852]	@ (8009f78 <__ieee754_pow+0x778>)
 8009c22:	402b      	ands	r3, r5
 8009c24:	2200      	movs	r2, #0
 8009c26:	b92b      	cbnz	r3, 8009c34 <__ieee754_pow+0x434>
 8009c28:	4bd4      	ldr	r3, [pc, #848]	@ (8009f7c <__ieee754_pow+0x77c>)
 8009c2a:	f7f6 fd0d 	bl	8000648 <__aeabi_dmul>
 8009c2e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009c32:	468b      	mov	fp, r1
 8009c34:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009c38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009c3c:	4413      	add	r3, r2
 8009c3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c40:	4bcf      	ldr	r3, [pc, #828]	@ (8009f80 <__ieee754_pow+0x780>)
 8009c42:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009c46:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009c4a:	459b      	cmp	fp, r3
 8009c4c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009c50:	dd08      	ble.n	8009c64 <__ieee754_pow+0x464>
 8009c52:	4bcc      	ldr	r3, [pc, #816]	@ (8009f84 <__ieee754_pow+0x784>)
 8009c54:	459b      	cmp	fp, r3
 8009c56:	f340 81a5 	ble.w	8009fa4 <__ieee754_pow+0x7a4>
 8009c5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c60:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009c64:	f04f 0a00 	mov.w	sl, #0
 8009c68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009c6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c6e:	4bc6      	ldr	r3, [pc, #792]	@ (8009f88 <__ieee754_pow+0x788>)
 8009c70:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c74:	ed93 7b00 	vldr	d7, [r3]
 8009c78:	4629      	mov	r1, r5
 8009c7a:	ec53 2b17 	vmov	r2, r3, d7
 8009c7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c86:	f7f6 fb27 	bl	80002d8 <__aeabi_dsub>
 8009c8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c8e:	4606      	mov	r6, r0
 8009c90:	460f      	mov	r7, r1
 8009c92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c96:	f7f6 fb21 	bl	80002dc <__adddf3>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	49ba      	ldr	r1, [pc, #744]	@ (8009f8c <__ieee754_pow+0x78c>)
 8009ca2:	f7f6 fdfb 	bl	800089c <__aeabi_ddiv>
 8009ca6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4630      	mov	r0, r6
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	f7f6 fcc9 	bl	8000648 <__aeabi_dmul>
 8009cb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cba:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009cbe:	106d      	asrs	r5, r5, #1
 8009cc0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009cc4:	f04f 0b00 	mov.w	fp, #0
 8009cc8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009ccc:	4661      	mov	r1, ip
 8009cce:	2200      	movs	r2, #0
 8009cd0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009cd4:	4658      	mov	r0, fp
 8009cd6:	46e1      	mov	r9, ip
 8009cd8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009cdc:	4614      	mov	r4, r2
 8009cde:	461d      	mov	r5, r3
 8009ce0:	f7f6 fcb2 	bl	8000648 <__aeabi_dmul>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4630      	mov	r0, r6
 8009cea:	4639      	mov	r1, r7
 8009cec:	f7f6 faf4 	bl	80002d8 <__aeabi_dsub>
 8009cf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	460f      	mov	r7, r1
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	f7f6 faec 	bl	80002d8 <__aeabi_dsub>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d08:	f7f6 fae6 	bl	80002d8 <__aeabi_dsub>
 8009d0c:	465a      	mov	r2, fp
 8009d0e:	464b      	mov	r3, r9
 8009d10:	f7f6 fc9a 	bl	8000648 <__aeabi_dmul>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 fadc 	bl	80002d8 <__aeabi_dsub>
 8009d20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d24:	f7f6 fc90 	bl	8000648 <__aeabi_dmul>
 8009d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d30:	4610      	mov	r0, r2
 8009d32:	4619      	mov	r1, r3
 8009d34:	f7f6 fc88 	bl	8000648 <__aeabi_dmul>
 8009d38:	a37d      	add	r3, pc, #500	@ (adr r3, 8009f30 <__ieee754_pow+0x730>)
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	4604      	mov	r4, r0
 8009d40:	460d      	mov	r5, r1
 8009d42:	f7f6 fc81 	bl	8000648 <__aeabi_dmul>
 8009d46:	a37c      	add	r3, pc, #496	@ (adr r3, 8009f38 <__ieee754_pow+0x738>)
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f7f6 fac6 	bl	80002dc <__adddf3>
 8009d50:	4622      	mov	r2, r4
 8009d52:	462b      	mov	r3, r5
 8009d54:	f7f6 fc78 	bl	8000648 <__aeabi_dmul>
 8009d58:	a379      	add	r3, pc, #484	@ (adr r3, 8009f40 <__ieee754_pow+0x740>)
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 fabd 	bl	80002dc <__adddf3>
 8009d62:	4622      	mov	r2, r4
 8009d64:	462b      	mov	r3, r5
 8009d66:	f7f6 fc6f 	bl	8000648 <__aeabi_dmul>
 8009d6a:	a377      	add	r3, pc, #476	@ (adr r3, 8009f48 <__ieee754_pow+0x748>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f7f6 fab4 	bl	80002dc <__adddf3>
 8009d74:	4622      	mov	r2, r4
 8009d76:	462b      	mov	r3, r5
 8009d78:	f7f6 fc66 	bl	8000648 <__aeabi_dmul>
 8009d7c:	a374      	add	r3, pc, #464	@ (adr r3, 8009f50 <__ieee754_pow+0x750>)
 8009d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d82:	f7f6 faab 	bl	80002dc <__adddf3>
 8009d86:	4622      	mov	r2, r4
 8009d88:	462b      	mov	r3, r5
 8009d8a:	f7f6 fc5d 	bl	8000648 <__aeabi_dmul>
 8009d8e:	a372      	add	r3, pc, #456	@ (adr r3, 8009f58 <__ieee754_pow+0x758>)
 8009d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d94:	f7f6 faa2 	bl	80002dc <__adddf3>
 8009d98:	4622      	mov	r2, r4
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	462b      	mov	r3, r5
 8009da0:	4620      	mov	r0, r4
 8009da2:	4629      	mov	r1, r5
 8009da4:	f7f6 fc50 	bl	8000648 <__aeabi_dmul>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4630      	mov	r0, r6
 8009dae:	4639      	mov	r1, r7
 8009db0:	f7f6 fc4a 	bl	8000648 <__aeabi_dmul>
 8009db4:	465a      	mov	r2, fp
 8009db6:	4604      	mov	r4, r0
 8009db8:	460d      	mov	r5, r1
 8009dba:	464b      	mov	r3, r9
 8009dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dc0:	f7f6 fa8c 	bl	80002dc <__adddf3>
 8009dc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009dc8:	f7f6 fc3e 	bl	8000648 <__aeabi_dmul>
 8009dcc:	4622      	mov	r2, r4
 8009dce:	462b      	mov	r3, r5
 8009dd0:	f7f6 fa84 	bl	80002dc <__adddf3>
 8009dd4:	465a      	mov	r2, fp
 8009dd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009dda:	464b      	mov	r3, r9
 8009ddc:	4658      	mov	r0, fp
 8009dde:	4649      	mov	r1, r9
 8009de0:	f7f6 fc32 	bl	8000648 <__aeabi_dmul>
 8009de4:	4b6a      	ldr	r3, [pc, #424]	@ (8009f90 <__ieee754_pow+0x790>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	4606      	mov	r6, r0
 8009dea:	460f      	mov	r7, r1
 8009dec:	f7f6 fa76 	bl	80002dc <__adddf3>
 8009df0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009df4:	f7f6 fa72 	bl	80002dc <__adddf3>
 8009df8:	46d8      	mov	r8, fp
 8009dfa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009dfe:	460d      	mov	r5, r1
 8009e00:	465a      	mov	r2, fp
 8009e02:	460b      	mov	r3, r1
 8009e04:	4640      	mov	r0, r8
 8009e06:	4649      	mov	r1, r9
 8009e08:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009e0c:	f7f6 fc1c 	bl	8000648 <__aeabi_dmul>
 8009e10:	465c      	mov	r4, fp
 8009e12:	4680      	mov	r8, r0
 8009e14:	4689      	mov	r9, r1
 8009e16:	4b5e      	ldr	r3, [pc, #376]	@ (8009f90 <__ieee754_pow+0x790>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	f7f6 fa5b 	bl	80002d8 <__aeabi_dsub>
 8009e22:	4632      	mov	r2, r6
 8009e24:	463b      	mov	r3, r7
 8009e26:	f7f6 fa57 	bl	80002d8 <__aeabi_dsub>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e32:	f7f6 fa51 	bl	80002d8 <__aeabi_dsub>
 8009e36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e3a:	f7f6 fc05 	bl	8000648 <__aeabi_dmul>
 8009e3e:	4622      	mov	r2, r4
 8009e40:	4606      	mov	r6, r0
 8009e42:	460f      	mov	r7, r1
 8009e44:	462b      	mov	r3, r5
 8009e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e4a:	f7f6 fbfd 	bl	8000648 <__aeabi_dmul>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4630      	mov	r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	f7f6 fa41 	bl	80002dc <__adddf3>
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	460f      	mov	r7, r1
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4640      	mov	r0, r8
 8009e64:	4649      	mov	r1, r9
 8009e66:	f7f6 fa39 	bl	80002dc <__adddf3>
 8009e6a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009e6e:	a33c      	add	r3, pc, #240	@ (adr r3, 8009f60 <__ieee754_pow+0x760>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	4658      	mov	r0, fp
 8009e76:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009e7a:	460d      	mov	r5, r1
 8009e7c:	f7f6 fbe4 	bl	8000648 <__aeabi_dmul>
 8009e80:	465c      	mov	r4, fp
 8009e82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e86:	4642      	mov	r2, r8
 8009e88:	464b      	mov	r3, r9
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	f7f6 fa23 	bl	80002d8 <__aeabi_dsub>
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	4630      	mov	r0, r6
 8009e98:	4639      	mov	r1, r7
 8009e9a:	f7f6 fa1d 	bl	80002d8 <__aeabi_dsub>
 8009e9e:	a332      	add	r3, pc, #200	@ (adr r3, 8009f68 <__ieee754_pow+0x768>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 fbd0 	bl	8000648 <__aeabi_dmul>
 8009ea8:	a331      	add	r3, pc, #196	@ (adr r3, 8009f70 <__ieee754_pow+0x770>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	4606      	mov	r6, r0
 8009eb0:	460f      	mov	r7, r1
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	f7f6 fbc7 	bl	8000648 <__aeabi_dmul>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	f7f6 fa0b 	bl	80002dc <__adddf3>
 8009ec6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009ec8:	4b32      	ldr	r3, [pc, #200]	@ (8009f94 <__ieee754_pow+0x794>)
 8009eca:	4413      	add	r3, r2
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	f7f6 fa04 	bl	80002dc <__adddf3>
 8009ed4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009ed8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009eda:	f7f6 fb4b 	bl	8000574 <__aeabi_i2d>
 8009ede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8009f98 <__ieee754_pow+0x798>)
 8009ee2:	4413      	add	r3, r2
 8009ee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ee8:	4606      	mov	r6, r0
 8009eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009eee:	460f      	mov	r7, r1
 8009ef0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ef4:	f7f6 f9f2 	bl	80002dc <__adddf3>
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	f7f6 f9ee 	bl	80002dc <__adddf3>
 8009f00:	4632      	mov	r2, r6
 8009f02:	463b      	mov	r3, r7
 8009f04:	f7f6 f9ea 	bl	80002dc <__adddf3>
 8009f08:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	463b      	mov	r3, r7
 8009f10:	4658      	mov	r0, fp
 8009f12:	460d      	mov	r5, r1
 8009f14:	f7f6 f9e0 	bl	80002d8 <__aeabi_dsub>
 8009f18:	4642      	mov	r2, r8
 8009f1a:	464b      	mov	r3, r9
 8009f1c:	f7f6 f9dc 	bl	80002d8 <__aeabi_dsub>
 8009f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f24:	f7f6 f9d8 	bl	80002d8 <__aeabi_dsub>
 8009f28:	465c      	mov	r4, fp
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	e036      	b.n	8009f9c <__ieee754_pow+0x79c>
 8009f2e:	bf00      	nop
 8009f30:	4a454eef 	.word	0x4a454eef
 8009f34:	3fca7e28 	.word	0x3fca7e28
 8009f38:	93c9db65 	.word	0x93c9db65
 8009f3c:	3fcd864a 	.word	0x3fcd864a
 8009f40:	a91d4101 	.word	0xa91d4101
 8009f44:	3fd17460 	.word	0x3fd17460
 8009f48:	518f264d 	.word	0x518f264d
 8009f4c:	3fd55555 	.word	0x3fd55555
 8009f50:	db6fabff 	.word	0xdb6fabff
 8009f54:	3fdb6db6 	.word	0x3fdb6db6
 8009f58:	33333303 	.word	0x33333303
 8009f5c:	3fe33333 	.word	0x3fe33333
 8009f60:	e0000000 	.word	0xe0000000
 8009f64:	3feec709 	.word	0x3feec709
 8009f68:	dc3a03fd 	.word	0xdc3a03fd
 8009f6c:	3feec709 	.word	0x3feec709
 8009f70:	145b01f5 	.word	0x145b01f5
 8009f74:	be3e2fe0 	.word	0xbe3e2fe0
 8009f78:	7ff00000 	.word	0x7ff00000
 8009f7c:	43400000 	.word	0x43400000
 8009f80:	0003988e 	.word	0x0003988e
 8009f84:	000bb679 	.word	0x000bb679
 8009f88:	0800aaa8 	.word	0x0800aaa8
 8009f8c:	3ff00000 	.word	0x3ff00000
 8009f90:	40080000 	.word	0x40080000
 8009f94:	0800aa88 	.word	0x0800aa88
 8009f98:	0800aa98 	.word	0x0800aa98
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fa2:	e5d7      	b.n	8009b54 <__ieee754_pow+0x354>
 8009fa4:	f04f 0a01 	mov.w	sl, #1
 8009fa8:	e65e      	b.n	8009c68 <__ieee754_pow+0x468>
 8009faa:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a27c <__ieee754_pow+0xa7c>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	f7f6 f992 	bl	80002dc <__adddf3>
 8009fb8:	4642      	mov	r2, r8
 8009fba:	e9cd 0100 	strd	r0, r1, [sp]
 8009fbe:	464b      	mov	r3, r9
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	4629      	mov	r1, r5
 8009fc4:	f7f6 f988 	bl	80002d8 <__aeabi_dsub>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fd0:	f7f6 fdca 	bl	8000b68 <__aeabi_dcmpgt>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	f47f ae00 	bne.w	8009bda <__ieee754_pow+0x3da>
 8009fda:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009fde:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009fe2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009fe6:	fa43 fa0a 	asr.w	sl, r3, sl
 8009fea:	44da      	add	sl, fp
 8009fec:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009ff0:	489d      	ldr	r0, [pc, #628]	@ (800a268 <__ieee754_pow+0xa68>)
 8009ff2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009ff6:	4108      	asrs	r0, r1
 8009ff8:	ea00 030a 	and.w	r3, r0, sl
 8009ffc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a000:	f1c1 0114 	rsb	r1, r1, #20
 800a004:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a008:	fa4a fa01 	asr.w	sl, sl, r1
 800a00c:	f1bb 0f00 	cmp.w	fp, #0
 800a010:	4640      	mov	r0, r8
 800a012:	4649      	mov	r1, r9
 800a014:	f04f 0200 	mov.w	r2, #0
 800a018:	bfb8      	it	lt
 800a01a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a01e:	f7f6 f95b 	bl	80002d8 <__aeabi_dsub>
 800a022:	4680      	mov	r8, r0
 800a024:	4689      	mov	r9, r1
 800a026:	4632      	mov	r2, r6
 800a028:	463b      	mov	r3, r7
 800a02a:	4640      	mov	r0, r8
 800a02c:	4649      	mov	r1, r9
 800a02e:	f7f6 f955 	bl	80002dc <__adddf3>
 800a032:	2400      	movs	r4, #0
 800a034:	a37c      	add	r3, pc, #496	@ (adr r3, 800a228 <__ieee754_pow+0xa28>)
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	4620      	mov	r0, r4
 800a03c:	460d      	mov	r5, r1
 800a03e:	f7f6 fb03 	bl	8000648 <__aeabi_dmul>
 800a042:	4642      	mov	r2, r8
 800a044:	e9cd 0100 	strd	r0, r1, [sp]
 800a048:	464b      	mov	r3, r9
 800a04a:	4620      	mov	r0, r4
 800a04c:	4629      	mov	r1, r5
 800a04e:	f7f6 f943 	bl	80002d8 <__aeabi_dsub>
 800a052:	4602      	mov	r2, r0
 800a054:	460b      	mov	r3, r1
 800a056:	4630      	mov	r0, r6
 800a058:	4639      	mov	r1, r7
 800a05a:	f7f6 f93d 	bl	80002d8 <__aeabi_dsub>
 800a05e:	a374      	add	r3, pc, #464	@ (adr r3, 800a230 <__ieee754_pow+0xa30>)
 800a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a064:	f7f6 faf0 	bl	8000648 <__aeabi_dmul>
 800a068:	a373      	add	r3, pc, #460	@ (adr r3, 800a238 <__ieee754_pow+0xa38>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	4680      	mov	r8, r0
 800a070:	4689      	mov	r9, r1
 800a072:	4620      	mov	r0, r4
 800a074:	4629      	mov	r1, r5
 800a076:	f7f6 fae7 	bl	8000648 <__aeabi_dmul>
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	4640      	mov	r0, r8
 800a080:	4649      	mov	r1, r9
 800a082:	f7f6 f92b 	bl	80002dc <__adddf3>
 800a086:	4604      	mov	r4, r0
 800a088:	460d      	mov	r5, r1
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a092:	f7f6 f923 	bl	80002dc <__adddf3>
 800a096:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a09a:	4680      	mov	r8, r0
 800a09c:	4689      	mov	r9, r1
 800a09e:	f7f6 f91b 	bl	80002d8 <__aeabi_dsub>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	f7f6 f915 	bl	80002d8 <__aeabi_dsub>
 800a0ae:	4642      	mov	r2, r8
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	460f      	mov	r7, r1
 800a0b4:	464b      	mov	r3, r9
 800a0b6:	4640      	mov	r0, r8
 800a0b8:	4649      	mov	r1, r9
 800a0ba:	f7f6 fac5 	bl	8000648 <__aeabi_dmul>
 800a0be:	a360      	add	r3, pc, #384	@ (adr r3, 800a240 <__ieee754_pow+0xa40>)
 800a0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	460d      	mov	r5, r1
 800a0c8:	f7f6 fabe 	bl	8000648 <__aeabi_dmul>
 800a0cc:	a35e      	add	r3, pc, #376	@ (adr r3, 800a248 <__ieee754_pow+0xa48>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f7f6 f901 	bl	80002d8 <__aeabi_dsub>
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	462b      	mov	r3, r5
 800a0da:	f7f6 fab5 	bl	8000648 <__aeabi_dmul>
 800a0de:	a35c      	add	r3, pc, #368	@ (adr r3, 800a250 <__ieee754_pow+0xa50>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 f8fa 	bl	80002dc <__adddf3>
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	462b      	mov	r3, r5
 800a0ec:	f7f6 faac 	bl	8000648 <__aeabi_dmul>
 800a0f0:	a359      	add	r3, pc, #356	@ (adr r3, 800a258 <__ieee754_pow+0xa58>)
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 f8ef 	bl	80002d8 <__aeabi_dsub>
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	462b      	mov	r3, r5
 800a0fe:	f7f6 faa3 	bl	8000648 <__aeabi_dmul>
 800a102:	a357      	add	r3, pc, #348	@ (adr r3, 800a260 <__ieee754_pow+0xa60>)
 800a104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a108:	f7f6 f8e8 	bl	80002dc <__adddf3>
 800a10c:	4622      	mov	r2, r4
 800a10e:	462b      	mov	r3, r5
 800a110:	f7f6 fa9a 	bl	8000648 <__aeabi_dmul>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4640      	mov	r0, r8
 800a11a:	4649      	mov	r1, r9
 800a11c:	f7f6 f8dc 	bl	80002d8 <__aeabi_dsub>
 800a120:	4604      	mov	r4, r0
 800a122:	460d      	mov	r5, r1
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4640      	mov	r0, r8
 800a12a:	4649      	mov	r1, r9
 800a12c:	f7f6 fa8c 	bl	8000648 <__aeabi_dmul>
 800a130:	2200      	movs	r2, #0
 800a132:	e9cd 0100 	strd	r0, r1, [sp]
 800a136:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a13a:	4620      	mov	r0, r4
 800a13c:	4629      	mov	r1, r5
 800a13e:	f7f6 f8cb 	bl	80002d8 <__aeabi_dsub>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a14a:	f7f6 fba7 	bl	800089c <__aeabi_ddiv>
 800a14e:	4632      	mov	r2, r6
 800a150:	4604      	mov	r4, r0
 800a152:	460d      	mov	r5, r1
 800a154:	463b      	mov	r3, r7
 800a156:	4640      	mov	r0, r8
 800a158:	4649      	mov	r1, r9
 800a15a:	f7f6 fa75 	bl	8000648 <__aeabi_dmul>
 800a15e:	4632      	mov	r2, r6
 800a160:	463b      	mov	r3, r7
 800a162:	f7f6 f8bb 	bl	80002dc <__adddf3>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4620      	mov	r0, r4
 800a16c:	4629      	mov	r1, r5
 800a16e:	f7f6 f8b3 	bl	80002d8 <__aeabi_dsub>
 800a172:	4642      	mov	r2, r8
 800a174:	464b      	mov	r3, r9
 800a176:	f7f6 f8af 	bl	80002d8 <__aeabi_dsub>
 800a17a:	460b      	mov	r3, r1
 800a17c:	4602      	mov	r2, r0
 800a17e:	493b      	ldr	r1, [pc, #236]	@ (800a26c <__ieee754_pow+0xa6c>)
 800a180:	2000      	movs	r0, #0
 800a182:	f7f6 f8a9 	bl	80002d8 <__aeabi_dsub>
 800a186:	ec41 0b10 	vmov	d0, r0, r1
 800a18a:	ee10 3a90 	vmov	r3, s1
 800a18e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a196:	da30      	bge.n	800a1fa <__ieee754_pow+0x9fa>
 800a198:	4650      	mov	r0, sl
 800a19a:	f000 f87d 	bl	800a298 <scalbn>
 800a19e:	ec51 0b10 	vmov	r0, r1, d0
 800a1a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1a6:	f7ff bbd2 	b.w	800994e <__ieee754_pow+0x14e>
 800a1aa:	4c31      	ldr	r4, [pc, #196]	@ (800a270 <__ieee754_pow+0xa70>)
 800a1ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	d91a      	bls.n	800a1ea <__ieee754_pow+0x9ea>
 800a1b4:	4b2f      	ldr	r3, [pc, #188]	@ (800a274 <__ieee754_pow+0xa74>)
 800a1b6:	440b      	add	r3, r1
 800a1b8:	4303      	orrs	r3, r0
 800a1ba:	d009      	beq.n	800a1d0 <__ieee754_pow+0x9d0>
 800a1bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f7f6 fcb2 	bl	8000b2c <__aeabi_dcmplt>
 800a1c8:	3800      	subs	r0, #0
 800a1ca:	bf18      	it	ne
 800a1cc:	2001      	movne	r0, #1
 800a1ce:	e42b      	b.n	8009a28 <__ieee754_pow+0x228>
 800a1d0:	4642      	mov	r2, r8
 800a1d2:	464b      	mov	r3, r9
 800a1d4:	f7f6 f880 	bl	80002d8 <__aeabi_dsub>
 800a1d8:	4632      	mov	r2, r6
 800a1da:	463b      	mov	r3, r7
 800a1dc:	f7f6 fcba 	bl	8000b54 <__aeabi_dcmpge>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d1eb      	bne.n	800a1bc <__ieee754_pow+0x9bc>
 800a1e4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a284 <__ieee754_pow+0xa84>
 800a1e8:	e6f7      	b.n	8009fda <__ieee754_pow+0x7da>
 800a1ea:	469a      	mov	sl, r3
 800a1ec:	4b22      	ldr	r3, [pc, #136]	@ (800a278 <__ieee754_pow+0xa78>)
 800a1ee:	459a      	cmp	sl, r3
 800a1f0:	f63f aef3 	bhi.w	8009fda <__ieee754_pow+0x7da>
 800a1f4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a1f8:	e715      	b.n	800a026 <__ieee754_pow+0x826>
 800a1fa:	ec51 0b10 	vmov	r0, r1, d0
 800a1fe:	4619      	mov	r1, r3
 800a200:	e7cf      	b.n	800a1a2 <__ieee754_pow+0x9a2>
 800a202:	491a      	ldr	r1, [pc, #104]	@ (800a26c <__ieee754_pow+0xa6c>)
 800a204:	2000      	movs	r0, #0
 800a206:	f7ff bb18 	b.w	800983a <__ieee754_pow+0x3a>
 800a20a:	2000      	movs	r0, #0
 800a20c:	2100      	movs	r1, #0
 800a20e:	f7ff bb14 	b.w	800983a <__ieee754_pow+0x3a>
 800a212:	4630      	mov	r0, r6
 800a214:	4639      	mov	r1, r7
 800a216:	f7ff bb10 	b.w	800983a <__ieee754_pow+0x3a>
 800a21a:	460c      	mov	r4, r1
 800a21c:	f7ff bb5e 	b.w	80098dc <__ieee754_pow+0xdc>
 800a220:	2400      	movs	r4, #0
 800a222:	f7ff bb49 	b.w	80098b8 <__ieee754_pow+0xb8>
 800a226:	bf00      	nop
 800a228:	00000000 	.word	0x00000000
 800a22c:	3fe62e43 	.word	0x3fe62e43
 800a230:	fefa39ef 	.word	0xfefa39ef
 800a234:	3fe62e42 	.word	0x3fe62e42
 800a238:	0ca86c39 	.word	0x0ca86c39
 800a23c:	be205c61 	.word	0xbe205c61
 800a240:	72bea4d0 	.word	0x72bea4d0
 800a244:	3e663769 	.word	0x3e663769
 800a248:	c5d26bf1 	.word	0xc5d26bf1
 800a24c:	3ebbbd41 	.word	0x3ebbbd41
 800a250:	af25de2c 	.word	0xaf25de2c
 800a254:	3f11566a 	.word	0x3f11566a
 800a258:	16bebd93 	.word	0x16bebd93
 800a25c:	3f66c16c 	.word	0x3f66c16c
 800a260:	5555553e 	.word	0x5555553e
 800a264:	3fc55555 	.word	0x3fc55555
 800a268:	fff00000 	.word	0xfff00000
 800a26c:	3ff00000 	.word	0x3ff00000
 800a270:	4090cbff 	.word	0x4090cbff
 800a274:	3f6f3400 	.word	0x3f6f3400
 800a278:	3fe00000 	.word	0x3fe00000
 800a27c:	652b82fe 	.word	0x652b82fe
 800a280:	3c971547 	.word	0x3c971547
 800a284:	4090cc00 	.word	0x4090cc00

0800a288 <fabs>:
 800a288:	ec51 0b10 	vmov	r0, r1, d0
 800a28c:	4602      	mov	r2, r0
 800a28e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a292:	ec43 2b10 	vmov	d0, r2, r3
 800a296:	4770      	bx	lr

0800a298 <scalbn>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	ec55 4b10 	vmov	r4, r5, d0
 800a29e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	b991      	cbnz	r1, 800a2ce <scalbn+0x36>
 800a2a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a2ac:	4323      	orrs	r3, r4
 800a2ae:	d03d      	beq.n	800a32c <scalbn+0x94>
 800a2b0:	4b35      	ldr	r3, [pc, #212]	@ (800a388 <scalbn+0xf0>)
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f7f6 f9c6 	bl	8000648 <__aeabi_dmul>
 800a2bc:	4b33      	ldr	r3, [pc, #204]	@ (800a38c <scalbn+0xf4>)
 800a2be:	429e      	cmp	r6, r3
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	da0f      	bge.n	800a2e6 <scalbn+0x4e>
 800a2c6:	a328      	add	r3, pc, #160	@ (adr r3, 800a368 <scalbn+0xd0>)
 800a2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2cc:	e01e      	b.n	800a30c <scalbn+0x74>
 800a2ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a2d2:	4291      	cmp	r1, r2
 800a2d4:	d10b      	bne.n	800a2ee <scalbn+0x56>
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	4620      	mov	r0, r4
 800a2da:	4629      	mov	r1, r5
 800a2dc:	f7f5 fffe 	bl	80002dc <__adddf3>
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	460d      	mov	r5, r1
 800a2e4:	e022      	b.n	800a32c <scalbn+0x94>
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a2ec:	3936      	subs	r1, #54	@ 0x36
 800a2ee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a2f2:	4296      	cmp	r6, r2
 800a2f4:	dd0d      	ble.n	800a312 <scalbn+0x7a>
 800a2f6:	2d00      	cmp	r5, #0
 800a2f8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a370 <scalbn+0xd8>)
 800a2fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2fe:	da02      	bge.n	800a306 <scalbn+0x6e>
 800a300:	a11d      	add	r1, pc, #116	@ (adr r1, 800a378 <scalbn+0xe0>)
 800a302:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a306:	a31a      	add	r3, pc, #104	@ (adr r3, 800a370 <scalbn+0xd8>)
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	f7f6 f99c 	bl	8000648 <__aeabi_dmul>
 800a310:	e7e6      	b.n	800a2e0 <scalbn+0x48>
 800a312:	1872      	adds	r2, r6, r1
 800a314:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a318:	428a      	cmp	r2, r1
 800a31a:	dcec      	bgt.n	800a2f6 <scalbn+0x5e>
 800a31c:	2a00      	cmp	r2, #0
 800a31e:	dd08      	ble.n	800a332 <scalbn+0x9a>
 800a320:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a324:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a328:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a32c:	ec45 4b10 	vmov	d0, r4, r5
 800a330:	bd70      	pop	{r4, r5, r6, pc}
 800a332:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a336:	da08      	bge.n	800a34a <scalbn+0xb2>
 800a338:	2d00      	cmp	r5, #0
 800a33a:	a10b      	add	r1, pc, #44	@ (adr r1, 800a368 <scalbn+0xd0>)
 800a33c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a340:	dac1      	bge.n	800a2c6 <scalbn+0x2e>
 800a342:	a10f      	add	r1, pc, #60	@ (adr r1, 800a380 <scalbn+0xe8>)
 800a344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a348:	e7bd      	b.n	800a2c6 <scalbn+0x2e>
 800a34a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a34e:	3236      	adds	r2, #54	@ 0x36
 800a350:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a354:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a358:	4620      	mov	r0, r4
 800a35a:	4b0d      	ldr	r3, [pc, #52]	@ (800a390 <scalbn+0xf8>)
 800a35c:	4629      	mov	r1, r5
 800a35e:	2200      	movs	r2, #0
 800a360:	e7d4      	b.n	800a30c <scalbn+0x74>
 800a362:	bf00      	nop
 800a364:	f3af 8000 	nop.w
 800a368:	c2f8f359 	.word	0xc2f8f359
 800a36c:	01a56e1f 	.word	0x01a56e1f
 800a370:	8800759c 	.word	0x8800759c
 800a374:	7e37e43c 	.word	0x7e37e43c
 800a378:	8800759c 	.word	0x8800759c
 800a37c:	fe37e43c 	.word	0xfe37e43c
 800a380:	c2f8f359 	.word	0xc2f8f359
 800a384:	81a56e1f 	.word	0x81a56e1f
 800a388:	43500000 	.word	0x43500000
 800a38c:	ffff3cb0 	.word	0xffff3cb0
 800a390:	3c900000 	.word	0x3c900000

0800a394 <with_errno>:
 800a394:	b510      	push	{r4, lr}
 800a396:	ed2d 8b02 	vpush	{d8}
 800a39a:	eeb0 8a40 	vmov.f32	s16, s0
 800a39e:	eef0 8a60 	vmov.f32	s17, s1
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	f7fb fe2a 	bl	8005ffc <__errno>
 800a3a8:	eeb0 0a48 	vmov.f32	s0, s16
 800a3ac:	eef0 0a68 	vmov.f32	s1, s17
 800a3b0:	ecbd 8b02 	vpop	{d8}
 800a3b4:	6004      	str	r4, [r0, #0]
 800a3b6:	bd10      	pop	{r4, pc}

0800a3b8 <xflow>:
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	b507      	push	{r0, r1, r2, lr}
 800a3bc:	ec51 0b10 	vmov	r0, r1, d0
 800a3c0:	b183      	cbz	r3, 800a3e4 <xflow+0x2c>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a3c8:	e9cd 2300 	strd	r2, r3, [sp]
 800a3cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3d0:	f7f6 f93a 	bl	8000648 <__aeabi_dmul>
 800a3d4:	ec41 0b10 	vmov	d0, r0, r1
 800a3d8:	2022      	movs	r0, #34	@ 0x22
 800a3da:	b003      	add	sp, #12
 800a3dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3e0:	f7ff bfd8 	b.w	800a394 <with_errno>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	e7ee      	b.n	800a3c8 <xflow+0x10>
 800a3ea:	0000      	movs	r0, r0
 800a3ec:	0000      	movs	r0, r0
	...

0800a3f0 <__math_uflow>:
 800a3f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a3f8 <__math_uflow+0x8>
 800a3f4:	f7ff bfe0 	b.w	800a3b8 <xflow>
 800a3f8:	00000000 	.word	0x00000000
 800a3fc:	10000000 	.word	0x10000000

0800a400 <__math_oflow>:
 800a400:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a408 <__math_oflow+0x8>
 800a404:	f7ff bfd8 	b.w	800a3b8 <xflow>
 800a408:	00000000 	.word	0x00000000
 800a40c:	70000000 	.word	0x70000000

0800a410 <__ieee754_sqrt>:
 800a410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	4a68      	ldr	r2, [pc, #416]	@ (800a5b8 <__ieee754_sqrt+0x1a8>)
 800a416:	ec55 4b10 	vmov	r4, r5, d0
 800a41a:	43aa      	bics	r2, r5
 800a41c:	462b      	mov	r3, r5
 800a41e:	4621      	mov	r1, r4
 800a420:	d110      	bne.n	800a444 <__ieee754_sqrt+0x34>
 800a422:	4622      	mov	r2, r4
 800a424:	4620      	mov	r0, r4
 800a426:	4629      	mov	r1, r5
 800a428:	f7f6 f90e 	bl	8000648 <__aeabi_dmul>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	4620      	mov	r0, r4
 800a432:	4629      	mov	r1, r5
 800a434:	f7f5 ff52 	bl	80002dc <__adddf3>
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	ec45 4b10 	vmov	d0, r4, r5
 800a440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a444:	2d00      	cmp	r5, #0
 800a446:	dc0e      	bgt.n	800a466 <__ieee754_sqrt+0x56>
 800a448:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a44c:	4322      	orrs	r2, r4
 800a44e:	d0f5      	beq.n	800a43c <__ieee754_sqrt+0x2c>
 800a450:	b19d      	cbz	r5, 800a47a <__ieee754_sqrt+0x6a>
 800a452:	4622      	mov	r2, r4
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f5 ff3e 	bl	80002d8 <__aeabi_dsub>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	f7f6 fa1c 	bl	800089c <__aeabi_ddiv>
 800a464:	e7e8      	b.n	800a438 <__ieee754_sqrt+0x28>
 800a466:	152a      	asrs	r2, r5, #20
 800a468:	d115      	bne.n	800a496 <__ieee754_sqrt+0x86>
 800a46a:	2000      	movs	r0, #0
 800a46c:	e009      	b.n	800a482 <__ieee754_sqrt+0x72>
 800a46e:	0acb      	lsrs	r3, r1, #11
 800a470:	3a15      	subs	r2, #21
 800a472:	0549      	lsls	r1, r1, #21
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0fa      	beq.n	800a46e <__ieee754_sqrt+0x5e>
 800a478:	e7f7      	b.n	800a46a <__ieee754_sqrt+0x5a>
 800a47a:	462a      	mov	r2, r5
 800a47c:	e7fa      	b.n	800a474 <__ieee754_sqrt+0x64>
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	3001      	adds	r0, #1
 800a482:	02dc      	lsls	r4, r3, #11
 800a484:	d5fb      	bpl.n	800a47e <__ieee754_sqrt+0x6e>
 800a486:	1e44      	subs	r4, r0, #1
 800a488:	1b12      	subs	r2, r2, r4
 800a48a:	f1c0 0420 	rsb	r4, r0, #32
 800a48e:	fa21 f404 	lsr.w	r4, r1, r4
 800a492:	4323      	orrs	r3, r4
 800a494:	4081      	lsls	r1, r0
 800a496:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a49a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a49e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4a2:	07d2      	lsls	r2, r2, #31
 800a4a4:	bf5c      	itt	pl
 800a4a6:	005b      	lslpl	r3, r3, #1
 800a4a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a4ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4b0:	bf58      	it	pl
 800a4b2:	0049      	lslpl	r1, r1, #1
 800a4b4:	2600      	movs	r6, #0
 800a4b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a4ba:	106d      	asrs	r5, r5, #1
 800a4bc:	0049      	lsls	r1, r1, #1
 800a4be:	2016      	movs	r0, #22
 800a4c0:	4632      	mov	r2, r6
 800a4c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a4c6:	1917      	adds	r7, r2, r4
 800a4c8:	429f      	cmp	r7, r3
 800a4ca:	bfde      	ittt	le
 800a4cc:	193a      	addle	r2, r7, r4
 800a4ce:	1bdb      	suble	r3, r3, r7
 800a4d0:	1936      	addle	r6, r6, r4
 800a4d2:	0fcf      	lsrs	r7, r1, #31
 800a4d4:	3801      	subs	r0, #1
 800a4d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a4da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a4de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a4e2:	d1f0      	bne.n	800a4c6 <__ieee754_sqrt+0xb6>
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	2720      	movs	r7, #32
 800a4e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	eb00 0e0c 	add.w	lr, r0, ip
 800a4f2:	db02      	blt.n	800a4fa <__ieee754_sqrt+0xea>
 800a4f4:	d113      	bne.n	800a51e <__ieee754_sqrt+0x10e>
 800a4f6:	458e      	cmp	lr, r1
 800a4f8:	d811      	bhi.n	800a51e <__ieee754_sqrt+0x10e>
 800a4fa:	f1be 0f00 	cmp.w	lr, #0
 800a4fe:	eb0e 000c 	add.w	r0, lr, ip
 800a502:	da42      	bge.n	800a58a <__ieee754_sqrt+0x17a>
 800a504:	2800      	cmp	r0, #0
 800a506:	db40      	blt.n	800a58a <__ieee754_sqrt+0x17a>
 800a508:	f102 0801 	add.w	r8, r2, #1
 800a50c:	1a9b      	subs	r3, r3, r2
 800a50e:	458e      	cmp	lr, r1
 800a510:	bf88      	it	hi
 800a512:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800a516:	eba1 010e 	sub.w	r1, r1, lr
 800a51a:	4464      	add	r4, ip
 800a51c:	4642      	mov	r2, r8
 800a51e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a522:	3f01      	subs	r7, #1
 800a524:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a528:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a52c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a530:	d1dc      	bne.n	800a4ec <__ieee754_sqrt+0xdc>
 800a532:	4319      	orrs	r1, r3
 800a534:	d01b      	beq.n	800a56e <__ieee754_sqrt+0x15e>
 800a536:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a5bc <__ieee754_sqrt+0x1ac>
 800a53a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a5c0 <__ieee754_sqrt+0x1b0>
 800a53e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a542:	e9db 2300 	ldrd	r2, r3, [fp]
 800a546:	f7f5 fec7 	bl	80002d8 <__aeabi_dsub>
 800a54a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4640      	mov	r0, r8
 800a554:	4649      	mov	r1, r9
 800a556:	f7f6 faf3 	bl	8000b40 <__aeabi_dcmple>
 800a55a:	b140      	cbz	r0, 800a56e <__ieee754_sqrt+0x15e>
 800a55c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800a560:	e9da 0100 	ldrd	r0, r1, [sl]
 800a564:	e9db 2300 	ldrd	r2, r3, [fp]
 800a568:	d111      	bne.n	800a58e <__ieee754_sqrt+0x17e>
 800a56a:	3601      	adds	r6, #1
 800a56c:	463c      	mov	r4, r7
 800a56e:	1072      	asrs	r2, r6, #1
 800a570:	0863      	lsrs	r3, r4, #1
 800a572:	07f1      	lsls	r1, r6, #31
 800a574:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a578:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a57c:	bf48      	it	mi
 800a57e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a582:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a586:	4618      	mov	r0, r3
 800a588:	e756      	b.n	800a438 <__ieee754_sqrt+0x28>
 800a58a:	4690      	mov	r8, r2
 800a58c:	e7be      	b.n	800a50c <__ieee754_sqrt+0xfc>
 800a58e:	f7f5 fea5 	bl	80002dc <__adddf3>
 800a592:	e9da 8900 	ldrd	r8, r9, [sl]
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4640      	mov	r0, r8
 800a59c:	4649      	mov	r1, r9
 800a59e:	f7f6 fac5 	bl	8000b2c <__aeabi_dcmplt>
 800a5a2:	b120      	cbz	r0, 800a5ae <__ieee754_sqrt+0x19e>
 800a5a4:	1ca0      	adds	r0, r4, #2
 800a5a6:	bf08      	it	eq
 800a5a8:	3601      	addeq	r6, #1
 800a5aa:	3402      	adds	r4, #2
 800a5ac:	e7df      	b.n	800a56e <__ieee754_sqrt+0x15e>
 800a5ae:	1c63      	adds	r3, r4, #1
 800a5b0:	f023 0401 	bic.w	r4, r3, #1
 800a5b4:	e7db      	b.n	800a56e <__ieee754_sqrt+0x15e>
 800a5b6:	bf00      	nop
 800a5b8:	7ff00000 	.word	0x7ff00000
 800a5bc:	200001e0 	.word	0x200001e0
 800a5c0:	200001d8 	.word	0x200001d8

0800a5c4 <_init>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	bf00      	nop
 800a5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ca:	bc08      	pop	{r3}
 800a5cc:	469e      	mov	lr, r3
 800a5ce:	4770      	bx	lr

0800a5d0 <_fini>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	bf00      	nop
 800a5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d6:	bc08      	pop	{r3}
 800a5d8:	469e      	mov	lr, r3
 800a5da:	4770      	bx	lr


ADC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f4c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800512c  0800512c  0000612c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b4  080051b4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080051b4  080051b4  000061b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051bc  080051bc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051bc  080051bc  000061bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051c0  080051c0  000061c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080051c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000005c  08005220  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005220  000072ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105d4  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213e  00000000  00000000  00017660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  000197a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a69  00000000  00000000  0001a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e509  00000000  00000000  0001af99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f296  00000000  00000000  000394a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca132  00000000  00000000  00048738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011286a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e08  00000000  00000000  001128b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001166b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005114 	.word	0x08005114

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005114 	.word	0x08005114

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fb27 	bl	8000c16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f83a 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f946 	bl	800085c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005d0:	f000 f8fa 	bl	80007c8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80005d4:	f000 f880 	bl	80006d8 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 80005d8:	4814      	ldr	r0, [pc, #80]	@ (800062c <main+0x6c>)
 80005da:	f000 ffad 	bl	8001538 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80005de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005e2:	4812      	ldr	r0, [pc, #72]	@ (800062c <main+0x6c>)
 80005e4:	f001 f898 	bl	8001718 <HAL_ADC_PollForConversion>
	  Value = HAL_ADC_GetValue(&hadc1);
 80005e8:	4810      	ldr	r0, [pc, #64]	@ (800062c <main+0x6c>)
 80005ea:	f001 f96d 	bl	80018c8 <HAL_ADC_GetValue>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000630 <main+0x70>)
 80005f2:	6013      	str	r3, [r2, #0]
	  sprintf(Value1,"The value is %ld\r\n",Value);
 80005f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <main+0x70>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	490e      	ldr	r1, [pc, #56]	@ (8000634 <main+0x74>)
 80005fc:	480e      	ldr	r0, [pc, #56]	@ (8000638 <main+0x78>)
 80005fe:	f004 f8e9 	bl	80047d4 <siprintf>
	  HAL_UART_Transmit(&hlpuart1, (uint8_t*)Value1, strlen(Value1),1000);
 8000602:	480d      	ldr	r0, [pc, #52]	@ (8000638 <main+0x78>)
 8000604:	f7ff fe0c 	bl	8000220 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000610:	4909      	ldr	r1, [pc, #36]	@ (8000638 <main+0x78>)
 8000612:	480a      	ldr	r0, [pc, #40]	@ (800063c <main+0x7c>)
 8000614:	f003 fa62 	bl	8003adc <HAL_UART_Transmit>
	  HAL_ADC_Stop(&hadc1);
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <main+0x6c>)
 800061a:	f001 f849 	bl	80016b0 <HAL_ADC_Stop>
	  HAL_Delay(1000);
 800061e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000622:	f000 fb69 	bl	8000cf8 <HAL_Delay>
  {
 8000626:	bf00      	nop
 8000628:	e7d6      	b.n	80005d8 <main+0x18>
 800062a:	bf00      	nop
 800062c:	20000078 	.word	0x20000078
 8000630:	20000178 	.word	0x20000178
 8000634:	0800512c 	.word	0x0800512c
 8000638:	2000017c 	.word	0x2000017c
 800063c:	200000e4 	.word	0x200000e4

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0318 	add.w	r3, r7, #24
 800064a:	2238      	movs	r2, #56	@ 0x38
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f004 f8e0 	bl	8004814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000662:	2000      	movs	r0, #0
 8000664:	f002 fa18 	bl	8002a98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2340      	movs	r3, #64	@ 0x40
 8000674:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800067e:	2304      	movs	r3, #4
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000682:	2355      	movs	r3, #85	@ 0x55
 8000684:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fab2 	bl	8002c00 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006a2:	f000 f941 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fdb0 	bl	8003224 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006ca:	f000 f92d 	bl	8000928 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	@ 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	@ 0x30
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2220      	movs	r2, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 f88f 	bl	8004814 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006f6:	4b32      	ldr	r3, [pc, #200]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 80006f8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80006fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fe:	4b30      	ldr	r3, [pc, #192]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000700:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000704:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070c:	4b2c      	ldr	r3, [pc, #176]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000712:	4b2b      	ldr	r3, [pc, #172]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000718:	4b29      	ldr	r3, [pc, #164]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071e:	4b28      	ldr	r3, [pc, #160]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000720:	2204      	movs	r2, #4
 8000722:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000724:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800072a:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 800072c:	2200      	movs	r2, #0
 800072e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000730:	4b23      	ldr	r3, [pc, #140]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000732:	2201      	movs	r2, #1
 8000734:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000736:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073e:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000740:	2200      	movs	r2, #0
 8000742:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000746:	2200      	movs	r2, #0
 8000748:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000752:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000760:	4817      	ldr	r0, [pc, #92]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 8000762:	f000 fd65 	bl	8001230 <HAL_ADC_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800076c:	f000 f8dc 	bl	8000928 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000778:	4619      	mov	r1, r3
 800077a:	4811      	ldr	r0, [pc, #68]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 800077c:	f001 fe6a 	bl	8002454 <HAL_ADCEx_MultiModeConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000786:	f000 f8cf 	bl	8000928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_ADC1_Init+0xec>)
 800078c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078e:	2306      	movs	r3, #6
 8000790:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000796:	237f      	movs	r3, #127	@ 0x7f
 8000798:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079a:	2304      	movs	r3, #4
 800079c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	@ (80007c0 <MX_ADC1_Init+0xe8>)
 80007a8:	f001 f89c 	bl	80018e4 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007b2:	f000 f8b9 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	@ 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000078 	.word	0x20000078
 80007c4:	04300002 	.word	0x04300002

080007c8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007cc:	4b21      	ldr	r3, [pc, #132]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007ce:	4a22      	ldr	r2, [pc, #136]	@ (8000858 <MX_LPUART1_UART_Init+0x90>)
 80007d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b1e      	ldr	r3, [pc, #120]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b18      	ldr	r3, [pc, #96]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f8:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007fe:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800080a:	4812      	ldr	r0, [pc, #72]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 800080c:	f003 f916 	bl	8003a3c <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f887 	bl	8000928 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081a:	2100      	movs	r1, #0
 800081c:	480d      	ldr	r0, [pc, #52]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 800081e:	f003 ff0f 	bl	8004640 <HAL_UARTEx_SetTxFifoThreshold>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000828:	f000 f87e 	bl	8000928 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082c:	2100      	movs	r1, #0
 800082e:	4809      	ldr	r0, [pc, #36]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 8000830:	f003 ff44 	bl	80046bc <HAL_UARTEx_SetRxFifoThreshold>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800083a:	f000 f875 	bl	8000928 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_LPUART1_UART_Init+0x8c>)
 8000840:	f003 fec5 	bl	80045ce <HAL_UARTEx_DisableFifoMode>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800084a:	f000 f86d 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000e4 	.word	0x200000e4
 8000858:	40008000 	.word	0x40008000

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	4a2a      	ldr	r2, [pc, #168]	@ (8000920 <MX_GPIO_Init+0xc4>)
 8000878:	f043 0304 	orr.w	r3, r3, #4
 800087c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087e:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	f003 0304 	and.w	r3, r3, #4
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088a:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a24      	ldr	r2, [pc, #144]	@ (8000920 <MX_GPIO_Init+0xc4>)
 8000890:	f043 0320 	orr.w	r3, r3, #32
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0320 	and.w	r3, r3, #32
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000920 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <MX_GPIO_Init+0xc4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2120      	movs	r1, #32
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008da:	f002 f8c5 	bl	8002a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	480b      	ldr	r0, [pc, #44]	@ (8000924 <MX_GPIO_Init+0xc8>)
 80008f6:	f001 ff35 	bl	8002764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008fa:	2320      	movs	r3, #32
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000914:	f001 ff26 	bl	8002764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	48000800 	.word	0x48000800

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093e:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <HAL_MspInit+0x44>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6613      	str	r3, [r2, #96]	@ 0x60
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x44>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	6593      	str	r3, [r2, #88]	@ 0x58
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800096a:	f002 f939 	bl	8002be0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b09a      	sub	sp, #104	@ 0x68
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2244      	movs	r2, #68	@ 0x44
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f003 ff39 	bl	8004814 <memset>
  if(hadc->Instance==ADC1)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009aa:	d134      	bne.n	8000a16 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009b2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fe4d 	bl	800365c <HAL_RCCEx_PeriphCLKConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009c8:	f7ff ffae 	bl	8000928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <HAL_ADC_MspInit+0xa4>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d0:	4a13      	ldr	r2, [pc, #76]	@ (8000a20 <HAL_ADC_MspInit+0xa4>)
 80009d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <HAL_ADC_MspInit+0xa4>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <HAL_ADC_MspInit+0xa4>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a20 <HAL_ADC_MspInit+0xa4>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <HAL_ADC_MspInit+0xa4>)
 80009f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009fc:	2301      	movs	r3, #1
 80009fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a00:	2303      	movs	r3, #3
 8000a02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a12:	f001 fea7 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3768      	adds	r7, #104	@ 0x68
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09a      	sub	sp, #104	@ 0x68
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2244      	movs	r2, #68	@ 0x44
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f003 fee5 	bl	8004814 <memset>
  if(huart->Instance==LPUART1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000acc <HAL_UART_MspInit+0xa8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d136      	bne.n	8000ac2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a54:	2320      	movs	r3, #32
 8000a56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 fdfb 	bl	800365c <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a6c:	f7ff ff5c 	bl	8000928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a74:	4a16      	ldr	r2, [pc, #88]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8c:	4a10      	ldr	r2, [pc, #64]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <HAL_UART_MspInit+0xac>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abe:	f001 fe51 	bl	8002764 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3768      	adds	r7, #104	@ 0x68
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40008000 	.word	0x40008000
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2a:	f000 f8c7 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	@ (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f003 fe5e 	bl	8004824 <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20008000 	.word	0x20008000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	2000019c 	.word	0x2000019c
 8000b9c:	200002f0 	.word	0x200002f0

08000ba0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	@ (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc4:	480d      	ldr	r0, [pc, #52]	@ (8000bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc8:	f7ff ffea 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	@ (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f003 fe1d 	bl	8004830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf6:	f7ff fce3 	bl	80005c0 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   r0, =_estack
 8000bfc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c08:	080051c4 	.word	0x080051c4
  ldr r2, =_sbss
 8000c0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c10:	200002ec 	.word	0x200002ec

08000c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC1_2_IRQHandler>

08000c16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f001 fd6d 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f80e 	bl	8000c48 <HAL_InitTick>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d002      	beq.n	8000c38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	e001      	b.n	8000c3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c38:	f7ff fe7c 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]

}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <HAL_InitTick+0x68>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d022      	beq.n	8000ca2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_InitTick+0x6c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <HAL_InitTick+0x68>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fd6a 	bl	800274a <HAL_SYSTICK_Config>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10f      	bne.n	8000c9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d809      	bhi.n	8000c96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c82:	2200      	movs	r2, #0
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c8a:	f001 fd44 	bl	8002716 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_InitTick+0x70>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	e007      	b.n	8000ca6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e004      	b.n	8000ca6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e001      	b.n	8000ca6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <HAL_IncTick+0x1c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <HAL_IncTick+0x20>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a03      	ldr	r2, [pc, #12]	@ (8000cd8 <HAL_IncTick+0x1c>)
 8000ccc:	6013      	str	r3, [r2, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	200001a0 	.word	0x200001a0
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200001a0 	.word	0x200001a0

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d10:	d004      	beq.n	8000d1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_Delay+0x40>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4413      	add	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1c:	bf00      	nop
 8000d1e:	f7ff ffdf 	bl	8000ce0 <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d8f7      	bhi.n	8000d1e <HAL_Delay+0x26>
  {
  }
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000008 	.word	0x20000008

08000d3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	609a      	str	r2, [r3, #8]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3360      	adds	r3, #96	@ 0x60
 8000db6:	461a      	mov	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <LL_ADC_SetOffset+0x44>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000dce:	683a      	ldr	r2, [r7, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ddc:	bf00      	nop
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	03fff000 	.word	0x03fff000

08000dec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3360      	adds	r3, #96	@ 0x60
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b087      	sub	sp, #28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3360      	adds	r3, #96	@ 0x60
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	431a      	orrs	r2, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e42:	bf00      	nop
 8000e44:	371c      	adds	r7, #28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b087      	sub	sp, #28
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3360      	adds	r3, #96	@ 0x60
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	431a      	orrs	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3360      	adds	r3, #96	@ 0x60
 8000e94:	461a      	mov	r2, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000eae:	bf00      	nop
 8000eb0:	371c      	adds	r7, #28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	615a      	str	r2, [r3, #20]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b087      	sub	sp, #28
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3330      	adds	r3, #48	@ 0x30
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	0a1b      	lsrs	r3, r3, #8
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	f003 030c 	and.w	r3, r3, #12
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	211f      	movs	r1, #31
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	401a      	ands	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0e9b      	lsrs	r3, r3, #26
 8000f3e:	f003 011f 	and.w	r1, r3, #31
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	f003 031f 	and.w	r3, r3, #31
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f52:	bf00      	nop
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b087      	sub	sp, #28
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3314      	adds	r3, #20
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	0e5b      	lsrs	r3, r3, #25
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	4413      	add	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	0d1b      	lsrs	r3, r3, #20
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	2107      	movs	r1, #7
 8000f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	401a      	ands	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	0d1b      	lsrs	r3, r3, #20
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fa8:	bf00      	nop
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0318 	and.w	r3, r3, #24
 8000fd6:	4908      	ldr	r1, [pc, #32]	@ (8000ff8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fd8:	40d9      	lsrs	r1, r3
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	400b      	ands	r3, r1
 8000fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	0007ffff 	.word	0x0007ffff

08000ffc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 031f 	and.w	r3, r3, #31
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001044:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6093      	str	r3, [r2, #8]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800106c:	d101      	bne.n	8001072 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001090:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001094:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010bc:	d101      	bne.n	80010c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010e4:	f043 0201 	orr.w	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001108:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800110c:	f043 0202 	orr.w	r2, r3, #2
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b01      	cmp	r3, #1
 8001132:	d101      	bne.n	8001138 <LL_ADC_IsEnabled+0x18>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <LL_ADC_IsEnabled+0x1a>
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b02      	cmp	r3, #2
 8001158:	d101      	bne.n	800115e <LL_ADC_IsDisableOngoing+0x18>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <LL_ADC_IsDisableOngoing+0x1a>
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800117c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001180:	f043 0204 	orr.w	r2, r3, #4
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011a8:	f043 0210 	orr.w	r2, r3, #16
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d101      	bne.n	80011d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011d0:	2301      	movs	r3, #1
 80011d2:	e000      	b.n	80011d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011f6:	f043 0220 	orr.w	r2, r3, #32
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b08      	cmp	r3, #8
 800121c:	d101      	bne.n	8001222 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800121e:	2301      	movs	r3, #1
 8001220:	e000      	b.n	8001224 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b089      	sub	sp, #36	@ 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e167      	b.n	800151a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001254:	2b00      	cmp	r3, #0
 8001256:	d109      	bne.n	800126c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff fb8f 	bl	800097c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fef1 	bl	8001058 <LL_ADC_IsDeepPowerDownEnabled>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fed7 	bl	8001034 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff0c 	bl	80010a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d115      	bne.n	80012c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fef0 	bl	8001080 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001524 <HAL_ADC_Init+0x2f4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	4aa0      	ldr	r2, [pc, #640]	@ (8001528 <HAL_ADC_Init+0x2f8>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	3301      	adds	r3, #1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012b4:	e002      	b.n	80012bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f9      	bne.n	80012b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff feee 	bl	80010a8 <LL_ADC_IsInternalRegulatorEnabled>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10d      	bne.n	80012ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d6:	f043 0210 	orr.w	r2, r3, #16
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e2:	f043 0201 	orr.w	r2, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff62 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 80012f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	2b00      	cmp	r3, #0
 8001304:	f040 8100 	bne.w	8001508 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f040 80fc 	bne.w	8001508 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001314:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001318:	f043 0202 	orr.w	r2, r3, #2
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fefb 	bl	8001120 <LL_ADC_IsEnabled>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d111      	bne.n	8001354 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001330:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001334:	f7ff fef4 	bl	8001120 <LL_ADC_IsEnabled>
 8001338:	4604      	mov	r4, r0
 800133a:	487c      	ldr	r0, [pc, #496]	@ (800152c <HAL_ADC_Init+0x2fc>)
 800133c:	f7ff fef0 	bl	8001120 <LL_ADC_IsEnabled>
 8001340:	4603      	mov	r3, r0
 8001342:	4323      	orrs	r3, r4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d105      	bne.n	8001354 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4619      	mov	r1, r3
 800134e:	4878      	ldr	r0, [pc, #480]	@ (8001530 <HAL_ADC_Init+0x300>)
 8001350:	f7ff fcf4 	bl	8000d3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7f5b      	ldrb	r3, [r3, #29]
 8001358:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800135e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001364:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800136a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001372:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800137e:	2b01      	cmp	r3, #1
 8001380:	d106      	bne.n	8001390 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001386:	3b01      	subs	r3, #1
 8001388:	045b      	lsls	r3, r3, #17
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001394:	2b00      	cmp	r3, #0
 8001396:	d009      	beq.n	80013ac <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	4b60      	ldr	r3, [pc, #384]	@ (8001534 <HAL_ADC_Init+0x304>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	69b9      	ldr	r1, [r7, #24]
 80013bc:	430b      	orrs	r3, r1
 80013be:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff15 	bl	800120a <LL_ADC_INJ_IsConversionOngoing>
 80013e0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d16d      	bne.n	80014c4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d16a      	bne.n	80014c4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013f2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013fa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800140a:	f023 0302 	bic.w	r3, r3, #2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	430b      	orrs	r3, r1
 8001416:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d017      	beq.n	8001450 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800142e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001438:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800143c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6911      	ldr	r1, [r2, #16]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	430b      	orrs	r3, r1
 800144a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800144e:	e013      	b.n	8001478 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800145e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001470:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001474:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800147e:	2b01      	cmp	r3, #1
 8001480:	d118      	bne.n	80014b4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001498:	4311      	orrs	r1, r2
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800149e:	4311      	orrs	r1, r2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014a4:	430a      	orrs	r2, r1
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0201 	orr.w	r2, r2, #1
 80014b0:	611a      	str	r2, [r3, #16]
 80014b2:	e007      	b.n	80014c4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d10c      	bne.n	80014e6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f023 010f 	bic.w	r1, r3, #15
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	1e5a      	subs	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014e4:	e007      	b.n	80014f6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 020f 	bic.w	r2, r2, #15
 80014f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fa:	f023 0303 	bic.w	r3, r3, #3
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001506:	e007      	b.n	8001518 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150c:	f043 0210 	orr.w	r2, r3, #16
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001518:	7ffb      	ldrb	r3, [r7, #31]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	@ 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd90      	pop	{r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	20000000 	.word	0x20000000
 8001528:	053e2d63 	.word	0x053e2d63
 800152c:	50000100 	.word	0x50000100
 8001530:	50000300 	.word	0x50000300
 8001534:	fff04007 	.word	0xfff04007

08001538 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001540:	4859      	ldr	r0, [pc, #356]	@ (80016a8 <HAL_ADC_Start+0x170>)
 8001542:	f7ff fd5b 	bl	8000ffc <LL_ADC_GetMultimode>
 8001546:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fe35 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	f040 809f 	bne.w	8001698 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001560:	2b01      	cmp	r3, #1
 8001562:	d101      	bne.n	8001568 <HAL_ADC_Start+0x30>
 8001564:	2302      	movs	r3, #2
 8001566:	e09a      	b.n	800169e <HAL_ADC_Start+0x166>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 fe63 	bl	800223c <ADC_Enable>
 8001576:	4603      	mov	r3, r0
 8001578:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	2b00      	cmp	r3, #0
 800157e:	f040 8086 	bne.w	800168e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001586:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a44      	ldr	r2, [pc, #272]	@ (80016ac <HAL_ADC_Start+0x174>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d002      	beq.n	80015a6 <HAL_ADC_Start+0x6e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	e001      	b.n	80015aa <HAL_ADC_Start+0x72>
 80015a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d002      	beq.n	80015b8 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015d0:	d106      	bne.n	80015e0 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d6:	f023 0206 	bic.w	r2, r3, #6
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80015de:	e002      	b.n	80015e6 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	221c      	movs	r2, #28
 80015ec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a2c      	ldr	r2, [pc, #176]	@ (80016ac <HAL_ADC_Start+0x174>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d002      	beq.n	8001606 <HAL_ADC_Start+0xce>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e001      	b.n	800160a <HAL_ADC_Start+0xd2>
 8001606:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	4293      	cmp	r3, r2
 8001610:	d008      	beq.n	8001624 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2b05      	cmp	r3, #5
 800161c:	d002      	beq.n	8001624 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	2b09      	cmp	r3, #9
 8001622:	d114      	bne.n	800164e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001636:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800163a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fd90 	bl	800116c <LL_ADC_REG_StartConversion>
 800164c:	e026      	b.n	800169c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001652:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a13      	ldr	r2, [pc, #76]	@ (80016ac <HAL_ADC_Start+0x174>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d002      	beq.n	800166a <HAL_ADC_Start+0x132>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	e001      	b.n	800166e <HAL_ADC_Start+0x136>
 800166a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800166e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00f      	beq.n	800169c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001680:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001684:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800168c:	e006      	b.n	800169c <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001696:	e001      	b.n	800169c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001698:	2302      	movs	r3, #2
 800169a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800169c:	7dfb      	ldrb	r3, [r7, #23]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	50000300 	.word	0x50000300
 80016ac:	50000100 	.word	0x50000100

080016b0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Stop+0x16>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e023      	b.n	800170e <HAL_ADC_Stop+0x5e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80016ce:	2103      	movs	r1, #3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fcf7 	bl	80020c4 <ADC_ConversionStop>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d111      	bne.n	8001704 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fe31 	bl	8002348 <ADC_Disable>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d109      	bne.n	8001704 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	f043 0201 	orr.w	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001722:	4867      	ldr	r0, [pc, #412]	@ (80018c0 <HAL_ADC_PollForConversion+0x1a8>)
 8001724:	f7ff fc6a 	bl	8000ffc <LL_ADC_GetMultimode>
 8001728:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b08      	cmp	r3, #8
 8001730:	d102      	bne.n	8001738 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001732:	2308      	movs	r3, #8
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	e02a      	b.n	800178e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	2b05      	cmp	r3, #5
 8001742:	d002      	beq.n	800174a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b09      	cmp	r3, #9
 8001748:	d111      	bne.n	800176e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d007      	beq.n	8001768 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800175c:	f043 0220 	orr.w	r2, r3, #32
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e0a6      	b.n	80018b6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001768:	2304      	movs	r3, #4
 800176a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800176c:	e00f      	b.n	800178e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800176e:	4854      	ldr	r0, [pc, #336]	@ (80018c0 <HAL_ADC_PollForConversion+0x1a8>)
 8001770:	f7ff fc52 	bl	8001018 <LL_ADC_GetMultiDMATransfer>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177e:	f043 0220 	orr.w	r2, r3, #32
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e095      	b.n	80018b6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800178a:	2304      	movs	r3, #4
 800178c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800178e:	f7ff faa7 	bl	8000ce0 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001794:	e021      	b.n	80017da <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800179c:	d01d      	beq.n	80017da <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800179e:	f7ff fa9f 	bl	8000ce0 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d302      	bcc.n	80017b4 <HAL_ADC_PollForConversion+0x9c>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d112      	bne.n	80017da <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10b      	bne.n	80017da <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c6:	f043 0204 	orr.w	r2, r3, #4
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e06d      	b.n	80018b6 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0d6      	beq.n	8001796 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fb71 	bl	8000ee0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01c      	beq.n	800183e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7f5b      	ldrb	r3, [r3, #29]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d118      	bne.n	800183e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b08      	cmp	r3, #8
 8001818:	d111      	bne.n	800183e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d105      	bne.n	800183e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001836:	f043 0201 	orr.w	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a20      	ldr	r2, [pc, #128]	@ (80018c4 <HAL_ADC_PollForConversion+0x1ac>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d002      	beq.n	800184e <HAL_ADC_PollForConversion+0x136>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	e001      	b.n	8001852 <HAL_ADC_PollForConversion+0x13a>
 800184e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	4293      	cmp	r3, r2
 8001858:	d008      	beq.n	800186c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b05      	cmp	r3, #5
 8001864:	d002      	beq.n	800186c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b09      	cmp	r3, #9
 800186a:	d104      	bne.n	8001876 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	e00d      	b.n	8001892 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <HAL_ADC_PollForConversion+0x1ac>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d002      	beq.n	8001886 <HAL_ADC_PollForConversion+0x16e>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	e001      	b.n	800188a <HAL_ADC_PollForConversion+0x172>
 8001886:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800188a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d104      	bne.n	80018a2 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2208      	movs	r2, #8
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e008      	b.n	80018b4 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	220c      	movs	r2, #12
 80018b2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	50000300 	.word	0x50000300
 80018c4:	50000100 	.word	0x50000100

080018c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b0b6      	sub	sp, #216	@ 0xd8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x22>
 8001902:	2302      	movs	r3, #2
 8001904:	e3c8      	b.n	8002098 <HAL_ADC_ConfigChannel+0x7b4>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fc52 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	f040 83ad 	bne.w	800207a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	6859      	ldr	r1, [r3, #4]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	f7ff faea 	bl	8000f06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fc40 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 800193c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fc60 	bl	800120a <LL_ADC_INJ_IsConversionOngoing>
 800194a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800194e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 81d9 	bne.w	8001d0a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001958:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800195c:	2b00      	cmp	r3, #0
 800195e:	f040 81d4 	bne.w	8001d0a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800196a:	d10f      	bne.n	800198c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2200      	movs	r2, #0
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff faf1 	bl	8000f5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fa98 	bl	8000eba <LL_ADC_SetSamplingTimeCommonConfig>
 800198a:	e00e      	b.n	80019aa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	461a      	mov	r2, r3
 800199a:	f7ff fae0 	bl	8000f5e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fa88 	bl	8000eba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	08db      	lsrs	r3, r3, #3
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d022      	beq.n	8001a12 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6919      	ldr	r1, [r3, #16]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80019dc:	f7ff f9e2 	bl	8000da4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6919      	ldr	r1, [r3, #16]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	461a      	mov	r2, r3
 80019ee:	f7ff fa2e 	bl	8000e4e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x124>
 8001a02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a06:	e000      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x126>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f7ff fa3a 	bl	8000e84 <LL_ADC_SetOffsetSaturation>
 8001a10:	e17b      	b.n	8001d0a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2100      	movs	r1, #0
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f9e7 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10a      	bne.n	8001a3e <HAL_ADC_ConfigChannel+0x15a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff f9dc 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	0e9b      	lsrs	r3, r3, #26
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	e01e      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x198>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff f9d1 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001a6c:	2320      	movs	r3, #32
 8001a6e:	e004      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001a70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a74:	fab3 f383 	clz	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1b0>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0e9b      	lsrs	r3, r3, #26
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	e018      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x1e2>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	e004      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001abc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d106      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f9a0 	bl	8000e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f984 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10a      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x220>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2101      	movs	r1, #1
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff f979 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001afa:	4603      	mov	r3, r0
 8001afc:	0e9b      	lsrs	r3, r3, #26
 8001afe:	f003 021f 	and.w	r2, r3, #31
 8001b02:	e01e      	b.n	8001b42 <HAL_ADC_ConfigChannel+0x25e>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f96e 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001b2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001b32:	2320      	movs	r3, #32
 8001b34:	e004      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001b36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b3a:	fab3 f383 	clz	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d105      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x276>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0e9b      	lsrs	r3, r3, #26
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	e018      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x2a8>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001b7e:	2320      	movs	r3, #32
 8001b80:	e004      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001b82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d106      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	2101      	movs	r1, #1
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f93d 	bl	8000e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f921 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x2e6>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f916 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	0e9b      	lsrs	r3, r3, #26
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	e01e      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x324>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f90b 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001bec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001bf8:	2320      	movs	r3, #32
 8001bfa:	e004      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x33c>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0e9b      	lsrs	r3, r3, #26
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	e016      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x36a>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001c32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001c40:	2320      	movs	r3, #32
 8001c42:	e004      	b.n	8001c4e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001c44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d106      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f8dc 	bl	8000e18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2103      	movs	r1, #3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f8c0 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10a      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x3a8>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f8b5 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	0e9b      	lsrs	r3, r3, #26
 8001c86:	f003 021f 	and.w	r2, r3, #31
 8001c8a:	e017      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x3d8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2103      	movs	r1, #3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f8aa 	bl	8000dec <LL_ADC_GetOffsetChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001ca4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ca6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001ca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	e003      	b.n	8001cba <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001cb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x3f0>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	0e9b      	lsrs	r3, r3, #26
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	e011      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x414>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001ce2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ce4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e003      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d106      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2103      	movs	r1, #3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff f887 	bl	8000e18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fa06 	bl	8001120 <LL_ADC_IsEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 8140 	bne.w	8001f9c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	6819      	ldr	r1, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f7ff f943 	bl	8000fb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	4a8f      	ldr	r2, [pc, #572]	@ (8001f70 <HAL_ADC_ConfigChannel+0x68c>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	f040 8131 	bne.w	8001f9c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10b      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x47e>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0e9b      	lsrs	r3, r3, #26
 8001d50:	3301      	adds	r3, #1
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	2b09      	cmp	r3, #9
 8001d58:	bf94      	ite	ls
 8001d5a:	2301      	movls	r3, #1
 8001d5c:	2300      	movhi	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	e019      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x4b2>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001d70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d72:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001d74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001d7a:	2320      	movs	r3, #32
 8001d7c:	e003      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001d7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	3301      	adds	r3, #1
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	bf94      	ite	ls
 8001d90:	2301      	movls	r3, #1
 8001d92:	2300      	movhi	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d079      	beq.n	8001e8e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x4d2>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	0e9b      	lsrs	r3, r3, #26
 8001dac:	3301      	adds	r3, #1
 8001dae:	069b      	lsls	r3, r3, #26
 8001db0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001db4:	e015      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x4fe>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001dc6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	e003      	b.n	8001dda <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dd4:	fab3 f383 	clz	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	069b      	lsls	r3, r3, #26
 8001dde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x51e>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	0e9b      	lsrs	r3, r3, #26
 8001df4:	3301      	adds	r3, #1
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	e017      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x54e>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e12:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001e14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	e003      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	ea42 0103 	orr.w	r1, r2, r3
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x574>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	0e9b      	lsrs	r3, r3, #26
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f003 021f 	and.w	r2, r3, #31
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	051b      	lsls	r3, r3, #20
 8001e56:	e018      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x5a6>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001e70:	2320      	movs	r3, #32
 8001e72:	e003      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f003 021f 	and.w	r2, r3, #31
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	e081      	b.n	8001f92 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d107      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x5c6>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0e9b      	lsrs	r3, r3, #26
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	069b      	lsls	r3, r3, #26
 8001ea4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ea8:	e015      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x5f2>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb2:	fa93 f3a3 	rbit	r3, r3
 8001eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001ec2:	2320      	movs	r3, #32
 8001ec4:	e003      	b.n	8001ece <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	069b      	lsls	r3, r3, #26
 8001ed2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x612>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	0e9b      	lsrs	r3, r3, #26
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	e017      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x642>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	61fb      	str	r3, [r7, #28]
  return result;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	e003      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f003 031f 	and.w	r3, r3, #31
 8001f20:	2101      	movs	r1, #1
 8001f22:	fa01 f303 	lsl.w	r3, r1, r3
 8001f26:	ea42 0103 	orr.w	r1, r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10d      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x66e>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0e9b      	lsrs	r3, r3, #26
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f003 021f 	and.w	r2, r3, #31
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	3b1e      	subs	r3, #30
 8001f4a:	051b      	lsls	r3, r3, #20
 8001f4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f50:	e01e      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x6ac>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	613b      	str	r3, [r7, #16]
  return result;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d104      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	e006      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x698>
 8001f6e:	bf00      	nop
 8001f70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f003 021f 	and.w	r2, r3, #31
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	3b1e      	subs	r3, #30
 8001f8a:	051b      	lsls	r3, r3, #20
 8001f8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe ffe1 	bl	8000f5e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <HAL_ADC_ConfigChannel+0x7bc>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d071      	beq.n	800208c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fa8:	483e      	ldr	r0, [pc, #248]	@ (80020a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001faa:	f7fe feed 	bl	8000d88 <LL_ADC_GetCommonPathInternalCh>
 8001fae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80020a8 <HAL_ADC_ConfigChannel+0x7c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d004      	beq.n	8001fc6 <HAL_ADC_ConfigChannel+0x6e2>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80020ac <HAL_ADC_ConfigChannel+0x7c8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d127      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d121      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fda:	d157      	bne.n	800208c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fe0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	482f      	ldr	r0, [pc, #188]	@ (80020a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fe8:	f7fe febb 	bl	8000d62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fec:	4b30      	ldr	r3, [pc, #192]	@ (80020b0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	4a30      	ldr	r2, [pc, #192]	@ (80020b4 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	099b      	lsrs	r3, r3, #6
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002006:	e002      	b.n	800200e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3b01      	subs	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f9      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002014:	e03a      	b.n	800208c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a27      	ldr	r2, [pc, #156]	@ (80020b8 <HAL_ADC_ConfigChannel+0x7d4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d113      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a22      	ldr	r2, [pc, #136]	@ (80020bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02a      	beq.n	800208c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800203e:	4619      	mov	r1, r3
 8002040:	4818      	ldr	r0, [pc, #96]	@ (80020a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002042:	f7fe fe8e 	bl	8000d62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002046:	e021      	b.n	800208c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1c      	ldr	r2, [pc, #112]	@ (80020c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11c      	bne.n	800208c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d116      	bne.n	800208c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a16      	ldr	r2, [pc, #88]	@ (80020bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d011      	beq.n	800208c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800206c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002070:	4619      	mov	r1, r3
 8002072:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002074:	f7fe fe75 	bl	8000d62 <LL_ADC_SetCommonPathInternalCh>
 8002078:	e008      	b.n	800208c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207e:	f043 0220 	orr.w	r2, r3, #32
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002094:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002098:	4618      	mov	r0, r3
 800209a:	37d8      	adds	r7, #216	@ 0xd8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	80080000 	.word	0x80080000
 80020a4:	50000300 	.word	0x50000300
 80020a8:	c3210000 	.word	0xc3210000
 80020ac:	90c00010 	.word	0x90c00010
 80020b0:	20000000 	.word	0x20000000
 80020b4:	053e2d63 	.word	0x053e2d63
 80020b8:	c7520000 	.word	0xc7520000
 80020bc:	50000100 	.word	0x50000100
 80020c0:	cb840000 	.word	0xcb840000

080020c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f86e 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 80020e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f88f 	bl	800120a <LL_ADC_INJ_IsConversionOngoing>
 80020ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8098 	beq.w	800222c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d02a      	beq.n	8002160 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7f5b      	ldrb	r3, [r3, #29]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d126      	bne.n	8002160 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7f1b      	ldrb	r3, [r3, #28]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d122      	bne.n	8002160 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800211a:	2301      	movs	r3, #1
 800211c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800211e:	e014      	b.n	800214a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	4a45      	ldr	r2, [pc, #276]	@ (8002238 <ADC_ConversionStop+0x174>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d90d      	bls.n	8002144 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212c:	f043 0210 	orr.w	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e074      	b.n	800222e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	3301      	adds	r3, #1
 8002148:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002154:	2b40      	cmp	r3, #64	@ 0x40
 8002156:	d1e3      	bne.n	8002120 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2240      	movs	r2, #64	@ 0x40
 800215e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d014      	beq.n	8002190 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f826 	bl	80011bc <LL_ADC_REG_IsConversionOngoing>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00c      	beq.n	8002190 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe ffe3 	bl	8001146 <LL_ADC_IsDisableOngoing>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d104      	bne.n	8002190 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f802 	bl	8001194 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d014      	beq.n	80021c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f835 	bl	800120a <LL_ADC_INJ_IsConversionOngoing>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00c      	beq.n	80021c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe ffcb 	bl	8001146 <LL_ADC_IsDisableOngoing>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f811 	bl	80011e2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d005      	beq.n	80021d2 <ADC_ConversionStop+0x10e>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d105      	bne.n	80021d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80021cc:	230c      	movs	r3, #12
 80021ce:	617b      	str	r3, [r7, #20]
        break;
 80021d0:	e005      	b.n	80021de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80021d2:	2308      	movs	r3, #8
 80021d4:	617b      	str	r3, [r7, #20]
        break;
 80021d6:	e002      	b.n	80021de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80021d8:	2304      	movs	r3, #4
 80021da:	617b      	str	r3, [r7, #20]
        break;
 80021dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80021de:	f7fe fd7f 	bl	8000ce0 <HAL_GetTick>
 80021e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021e4:	e01b      	b.n	800221e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021e6:	f7fe fd7b 	bl	8000ce0 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d914      	bls.n	800221e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e007      	b.n	800222e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1dc      	bne.n	80021e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	a33fffff 	.word	0xa33fffff

0800223c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe ff67 	bl	8001120 <LL_ADC_IsEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d169      	bne.n	800232c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <ADC_Enable+0xfc>)
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00d      	beq.n	8002282 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	f043 0210 	orr.w	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e055      	b.n	800232e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe ff22 	bl	80010d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800228c:	482b      	ldr	r0, [pc, #172]	@ (800233c <ADC_Enable+0x100>)
 800228e:	f7fe fd7b 	bl	8000d88 <LL_ADC_GetCommonPathInternalCh>
 8002292:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002294:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800229c:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <ADC_Enable+0x104>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	4a28      	ldr	r2, [pc, #160]	@ (8002344 <ADC_Enable+0x108>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022b6:	e002      	b.n	80022be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f9      	bne.n	80022b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022c4:	f7fe fd0c 	bl	8000ce0 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022ca:	e028      	b.n	800231e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe ff25 	bl	8001120 <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d104      	bne.n	80022e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fef5 	bl	80010d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022e6:	f7fe fcfb 	bl	8000ce0 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d914      	bls.n	800231e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d00d      	beq.n	800231e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002306:	f043 0210 	orr.w	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e007      	b.n	800232e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b01      	cmp	r3, #1
 800232a:	d1cf      	bne.n	80022cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	8000003f 	.word	0x8000003f
 800233c:	50000300 	.word	0x50000300
 8002340:	20000000 	.word	0x20000000
 8002344:	053e2d63 	.word	0x053e2d63

08002348 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fef6 	bl	8001146 <LL_ADC_IsDisableOngoing>
 800235a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fedd 	bl	8001120 <LL_ADC_IsEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d047      	beq.n	80023fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d144      	bne.n	80023fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 030d 	and.w	r3, r3, #13
 800237c:	2b01      	cmp	r3, #1
 800237e:	d10c      	bne.n	800239a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe feb7 	bl	80010f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2203      	movs	r2, #3
 8002390:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002392:	f7fe fca5 	bl	8000ce0 <HAL_GetTick>
 8002396:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002398:	e029      	b.n	80023ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	f043 0210 	orr.w	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e023      	b.n	80023fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023b6:	f7fe fc93 	bl	8000ce0 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d914      	bls.n	80023ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	f043 0210 	orr.w	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e007      	b.n	80023fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1dc      	bne.n	80023b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <LL_ADC_IsEnabled>:
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <LL_ADC_IsEnabled+0x18>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <LL_ADC_IsEnabled+0x1a>
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_REG_IsConversionOngoing>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d101      	bne.n	8002444 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b0a1      	sub	sp, #132	@ 0x84
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800246e:	2302      	movs	r3, #2
 8002470:	e08b      	b.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800247a:	2300      	movs	r3, #0
 800247c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800247e:	2300      	movs	r3, #0
 8002480:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800248a:	d102      	bne.n	8002492 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800248c:	4b41      	ldr	r3, [pc, #260]	@ (8002594 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	e001      	b.n	8002496 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10b      	bne.n	80024b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a0:	f043 0220 	orr.w	r2, r3, #32
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e06a      	b.n	800258a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ffb8 	bl	800242c <LL_ADC_REG_IsConversionOngoing>
 80024bc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ffb2 	bl	800242c <LL_ADC_REG_IsConversionOngoing>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d14c      	bne.n	8002568 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80024ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d149      	bne.n	8002568 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024d4:	4b30      	ldr	r3, [pc, #192]	@ (8002598 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80024d6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d028      	beq.n	8002532 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024f2:	035b      	lsls	r3, r3, #13
 80024f4:	430b      	orrs	r3, r1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002500:	f7ff ff81 	bl	8002406 <LL_ADC_IsEnabled>
 8002504:	4604      	mov	r4, r0
 8002506:	4823      	ldr	r0, [pc, #140]	@ (8002594 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002508:	f7ff ff7d 	bl	8002406 <LL_ADC_IsEnabled>
 800250c:	4603      	mov	r3, r0
 800250e:	4323      	orrs	r3, r4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d133      	bne.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002514:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800251c:	f023 030f 	bic.w	r3, r3, #15
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	6811      	ldr	r1, [r2, #0]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	6892      	ldr	r2, [r2, #8]
 8002528:	430a      	orrs	r2, r1
 800252a:	431a      	orrs	r2, r3
 800252c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800252e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002530:	e024      	b.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800253a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800253c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800253e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002542:	f7ff ff60 	bl	8002406 <LL_ADC_IsEnabled>
 8002546:	4604      	mov	r4, r0
 8002548:	4812      	ldr	r0, [pc, #72]	@ (8002594 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800254a:	f7ff ff5c 	bl	8002406 <LL_ADC_IsEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	4323      	orrs	r3, r4
 8002552:	2b00      	cmp	r3, #0
 8002554:	d112      	bne.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800255e:	f023 030f 	bic.w	r3, r3, #15
 8002562:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002564:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002566:	e009      	b.n	800257c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	f043 0220 	orr.w	r2, r3, #32
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800257a:	e000      	b.n	800257e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800257c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002586:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800258a:	4618      	mov	r0, r3
 800258c:	3784      	adds	r7, #132	@ 0x84
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}
 8002592:	bf00      	nop
 8002594:	50000100 	.word	0x50000100
 8002598:	50000300 	.word	0x50000300

0800259c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ce:	4a04      	ldr	r2, [pc, #16]	@ (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	60d3      	str	r3, [r2, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	@ (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	@ (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
         );
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	@ 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026e0:	f7ff ff8e 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff47 	bl	800259c <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002724:	f7ff ff5e 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 8002728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68b9      	ldr	r1, [r7, #8]
 800272e:	6978      	ldr	r0, [r7, #20]
 8002730:	f7ff ff90 	bl	8002654 <NVIC_EncodePriority>
 8002734:	4602      	mov	r2, r0
 8002736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff5f 	bl	8002600 <__NVIC_SetPriority>
}
 8002742:	bf00      	nop
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffb2 	bl	80026bc <SysTick_Config>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002772:	e15a      	b.n	8002a2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 814c 	beq.w	8002a24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b01      	cmp	r3, #1
 8002796:	d005      	beq.n	80027a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d130      	bne.n	8002806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027da:	2201      	movs	r2, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4013      	ands	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 0201 	and.w	r2, r3, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b03      	cmp	r3, #3
 8002810:	d017      	beq.n	8002842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d123      	bne.n	8002896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	08da      	lsrs	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3208      	adds	r2, #8
 8002856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	6939      	ldr	r1, [r7, #16]
 8002892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80a6 	beq.w	8002a24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a48 <HAL_GPIO_Init+0x2e4>)
 80028da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002a48 <HAL_GPIO_Init+0x2e4>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80028e4:	4b58      	ldr	r3, [pc, #352]	@ (8002a48 <HAL_GPIO_Init+0x2e4>)
 80028e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f0:	4a56      	ldr	r2, [pc, #344]	@ (8002a4c <HAL_GPIO_Init+0x2e8>)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	089b      	lsrs	r3, r3, #2
 80028f6:	3302      	adds	r3, #2
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800291a:	d01f      	beq.n	800295c <HAL_GPIO_Init+0x1f8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a4c      	ldr	r2, [pc, #304]	@ (8002a50 <HAL_GPIO_Init+0x2ec>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d019      	beq.n	8002958 <HAL_GPIO_Init+0x1f4>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a4b      	ldr	r2, [pc, #300]	@ (8002a54 <HAL_GPIO_Init+0x2f0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d013      	beq.n	8002954 <HAL_GPIO_Init+0x1f0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a58 <HAL_GPIO_Init+0x2f4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00d      	beq.n	8002950 <HAL_GPIO_Init+0x1ec>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a49      	ldr	r2, [pc, #292]	@ (8002a5c <HAL_GPIO_Init+0x2f8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d007      	beq.n	800294c <HAL_GPIO_Init+0x1e8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a48      	ldr	r2, [pc, #288]	@ (8002a60 <HAL_GPIO_Init+0x2fc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_GPIO_Init+0x1e4>
 8002944:	2305      	movs	r3, #5
 8002946:	e00a      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 8002948:	2306      	movs	r3, #6
 800294a:	e008      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 800294c:	2304      	movs	r3, #4
 800294e:	e006      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 8002950:	2303      	movs	r3, #3
 8002952:	e004      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 8002954:	2302      	movs	r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_GPIO_Init+0x1fa>
 800295c:	2300      	movs	r3, #0
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	f002 0203 	and.w	r2, r2, #3
 8002964:	0092      	lsls	r2, r2, #2
 8002966:	4093      	lsls	r3, r2
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800296e:	4937      	ldr	r1, [pc, #220]	@ (8002a4c <HAL_GPIO_Init+0x2e8>)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800297c:	4b39      	ldr	r3, [pc, #228]	@ (8002a64 <HAL_GPIO_Init+0x300>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43db      	mvns	r3, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029a0:	4a30      	ldr	r2, [pc, #192]	@ (8002a64 <HAL_GPIO_Init+0x300>)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a64 <HAL_GPIO_Init+0x300>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4013      	ands	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029ca:	4a26      	ldr	r2, [pc, #152]	@ (8002a64 <HAL_GPIO_Init+0x300>)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029d0:	4b24      	ldr	r3, [pc, #144]	@ (8002a64 <HAL_GPIO_Init+0x300>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <HAL_GPIO_Init+0x300>)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <HAL_GPIO_Init+0x300>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a1e:	4a11      	ldr	r2, [pc, #68]	@ (8002a64 <HAL_GPIO_Init+0x300>)
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3301      	adds	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f47f ae9d 	bne.w	8002774 <HAL_GPIO_Init+0x10>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	48000400 	.word	0x48000400
 8002a54:	48000800 	.word	0x48000800
 8002a58:	48000c00 	.word	0x48000c00
 8002a5c:	48001000 	.word	0x48001000
 8002a60:	48001400 	.word	0x48001400
 8002a64:	40010400 	.word	0x40010400

08002a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	807b      	strh	r3, [r7, #2]
 8002a74:	4613      	mov	r3, r2
 8002a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a78:	787b      	ldrb	r3, [r7, #1]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d141      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ab2:	d131      	bne.n	8002b18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ab4:	4b47      	ldr	r3, [pc, #284]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002aba:	4a46      	ldr	r2, [pc, #280]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ac0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac4:	4b43      	ldr	r3, [pc, #268]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002acc:	4a41      	ldr	r2, [pc, #260]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ad4:	4b40      	ldr	r3, [pc, #256]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2232      	movs	r2, #50	@ 0x32
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	4a3f      	ldr	r2, [pc, #252]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	0c9b      	lsrs	r3, r3, #18
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aea:	e002      	b.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af2:	4b38      	ldr	r3, [pc, #224]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002afe:	d102      	bne.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f2      	bne.n	8002aec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b06:	4b33      	ldr	r3, [pc, #204]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b12:	d158      	bne.n	8002bc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e057      	b.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b18:	4b2e      	ldr	r3, [pc, #184]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b28:	e04d      	b.n	8002bc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b30:	d141      	bne.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b32:	4b28      	ldr	r3, [pc, #160]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3e:	d131      	bne.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b40:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b46:	4a23      	ldr	r2, [pc, #140]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b50:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b58:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2232      	movs	r2, #50	@ 0x32
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	0c9b      	lsrs	r3, r3, #18
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b76:	e002      	b.n	8002b7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7e:	4b15      	ldr	r3, [pc, #84]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8a:	d102      	bne.n	8002b92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f2      	bne.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b92:	4b10      	ldr	r3, [pc, #64]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9e:	d112      	bne.n	8002bc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e011      	b.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002baa:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bb4:	e007      	b.n	8002bc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bb6:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bbe:	4a05      	ldr	r2, [pc, #20]	@ (8002bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	431bde83 	.word	0x431bde83

08002be0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bee:	6093      	str	r3, [r2, #8]
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40007000 	.word	0x40007000

08002c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e2fe      	b.n	8003210 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d075      	beq.n	8002d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1e:	4b97      	ldr	r3, [pc, #604]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c28:	4b94      	ldr	r3, [pc, #592]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	2b0c      	cmp	r3, #12
 8002c36:	d102      	bne.n	8002c3e <HAL_RCC_OscConfig+0x3e>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_OscConfig+0x44>
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d10b      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	4b8d      	ldr	r3, [pc, #564]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d05b      	beq.n	8002d08 <HAL_RCC_OscConfig+0x108>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d157      	bne.n	8002d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e2d9      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x74>
 8002c66:	4b85      	ldr	r3, [pc, #532]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a84      	ldr	r2, [pc, #528]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e01d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb0>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x98>
 8002c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7e      	ldr	r2, [pc, #504]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb0>
 8002c98:	4b78      	ldr	r3, [pc, #480]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a77      	ldr	r2, [pc, #476]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b75      	ldr	r3, [pc, #468]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a74      	ldr	r2, [pc, #464]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe f812 	bl	8000ce0 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f80e 	bl	8000ce0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e29e      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xc0>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fd fffe 	bl	8000ce0 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fd fffa 	bl	8000ce0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	@ 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e28a      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cfa:	4b60      	ldr	r3, [pc, #384]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xe8>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d075      	beq.n	8002e02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d16:	4b59      	ldr	r3, [pc, #356]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d20:	4b56      	ldr	r3, [pc, #344]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b0c      	cmp	r3, #12
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_OscConfig+0x136>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d002      	beq.n	8002d3c <HAL_RCC_OscConfig+0x13c>
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d11f      	bne.n	8002d7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_OscConfig+0x154>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e25d      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d54:	4b49      	ldr	r3, [pc, #292]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	4946      	ldr	r1, [pc, #280]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d68:	4b45      	ldr	r3, [pc, #276]	@ (8002e80 <HAL_RCC_OscConfig+0x280>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd ff6b 	bl	8000c48 <HAL_InitTick>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d043      	beq.n	8002e00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e249      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d023      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d84:	4b3d      	ldr	r3, [pc, #244]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a3c      	ldr	r2, [pc, #240]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fd ffa6 	bl	8000ce0 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d98:	f7fd ffa2 	bl	8000ce0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e232      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002daa:	4b34      	ldr	r3, [pc, #208]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db6:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	061b      	lsls	r3, r3, #24
 8002dc4:	492d      	ldr	r1, [pc, #180]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	604b      	str	r3, [r1, #4]
 8002dca:	e01a      	b.n	8002e02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fd ff82 	bl	8000ce0 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de0:	f7fd ff7e 	bl	8000ce0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e20e      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df2:	4b22      	ldr	r3, [pc, #136]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1e0>
 8002dfe:	e000      	b.n	8002e02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d041      	beq.n	8002e92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01c      	beq.n	8002e50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e1c:	4a17      	ldr	r2, [pc, #92]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e26:	f7fd ff5b 	bl	8000ce0 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7fd ff57 	bl	8000ce0 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1e7      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e40:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ef      	beq.n	8002e2e <HAL_RCC_OscConfig+0x22e>
 8002e4e:	e020      	b.n	8002e92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e50:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e56:	4a09      	ldr	r2, [pc, #36]	@ (8002e7c <HAL_RCC_OscConfig+0x27c>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fd ff3e 	bl	8000ce0 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e66:	e00d      	b.n	8002e84 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e68:	f7fd ff3a 	bl	8000ce0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d906      	bls.n	8002e84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1ca      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e84:	4b8c      	ldr	r3, [pc, #560]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ea      	bne.n	8002e68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80a6 	beq.w	8002fec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ea4:	4b84      	ldr	r3, [pc, #528]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2b4>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x2b6>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	4b7f      	ldr	r3, [pc, #508]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	4a7e      	ldr	r2, [pc, #504]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ec6:	4b7c      	ldr	r3, [pc, #496]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed6:	4b79      	ldr	r3, [pc, #484]	@ (80030bc <HAL_RCC_OscConfig+0x4bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d118      	bne.n	8002f14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee2:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <HAL_RCC_OscConfig+0x4bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	@ (80030bc <HAL_RCC_OscConfig+0x4bc>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eee:	f7fd fef7 	bl	8000ce0 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7fd fef3 	bl	8000ce0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e183      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f08:	4b6c      	ldr	r3, [pc, #432]	@ (80030bc <HAL_RCC_OscConfig+0x4bc>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d108      	bne.n	8002f2e <HAL_RCC_OscConfig+0x32e>
 8002f1c:	4b66      	ldr	r3, [pc, #408]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f22:	4a65      	ldr	r2, [pc, #404]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f2c:	e024      	b.n	8002f78 <HAL_RCC_OscConfig+0x378>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b05      	cmp	r3, #5
 8002f34:	d110      	bne.n	8002f58 <HAL_RCC_OscConfig+0x358>
 8002f36:	4b60      	ldr	r3, [pc, #384]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3c:	4a5e      	ldr	r2, [pc, #376]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f46:	4b5c      	ldr	r3, [pc, #368]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f56:	e00f      	b.n	8002f78 <HAL_RCC_OscConfig+0x378>
 8002f58:	4b57      	ldr	r3, [pc, #348]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f5e:	4a56      	ldr	r2, [pc, #344]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f68:	4b53      	ldr	r3, [pc, #332]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6e:	4a52      	ldr	r2, [pc, #328]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f70:	f023 0304 	bic.w	r3, r3, #4
 8002f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d016      	beq.n	8002fae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f80:	f7fd feae 	bl	8000ce0 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f88:	f7fd feaa 	bl	8000ce0 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e138      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9e:	4b46      	ldr	r3, [pc, #280]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ed      	beq.n	8002f88 <HAL_RCC_OscConfig+0x388>
 8002fac:	e015      	b.n	8002fda <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fae:	f7fd fe97 	bl	8000ce0 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb6:	f7fd fe93 	bl	8000ce0 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e121      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fcc:	4b3a      	ldr	r3, [pc, #232]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ed      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe0:	4b35      	ldr	r3, [pc, #212]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe4:	4a34      	ldr	r2, [pc, #208]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8002fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d03c      	beq.n	8003072 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01c      	beq.n	800303a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003000:	4b2d      	ldr	r3, [pc, #180]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8003002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003006:	4a2c      	ldr	r2, [pc, #176]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fd fe66 	bl	8000ce0 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003018:	f7fd fe62 	bl	8000ce0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0f2      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800302a:	4b23      	ldr	r3, [pc, #140]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 800302c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ef      	beq.n	8003018 <HAL_RCC_OscConfig+0x418>
 8003038:	e01b      	b.n	8003072 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800303a:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 800303c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003040:	4a1d      	ldr	r2, [pc, #116]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304a:	f7fd fe49 	bl	8000ce0 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003052:	f7fd fe45 	bl	8000ce0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0d5      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8003066:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ef      	bne.n	8003052 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80c9 	beq.w	800320e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800307c:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b0c      	cmp	r3, #12
 8003086:	f000 8083 	beq.w	8003190 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d15e      	bne.n	8003150 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b09      	ldr	r3, [pc, #36]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a08      	ldr	r2, [pc, #32]	@ (80030b8 <HAL_RCC_OscConfig+0x4b8>)
 8003098:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800309c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fd fe1f 	bl	8000ce0 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a4:	e00c      	b.n	80030c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a6:	f7fd fe1b 	bl	8000ce0 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d905      	bls.n	80030c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e0ab      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c0:	4b55      	ldr	r3, [pc, #340]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1ec      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030cc:	4b52      	ldr	r3, [pc, #328]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	4b52      	ldr	r3, [pc, #328]	@ (800321c <HAL_RCC_OscConfig+0x61c>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6a11      	ldr	r1, [r2, #32]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030dc:	3a01      	subs	r2, #1
 80030de:	0112      	lsls	r2, r2, #4
 80030e0:	4311      	orrs	r1, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030e6:	0212      	lsls	r2, r2, #8
 80030e8:	4311      	orrs	r1, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030ee:	0852      	lsrs	r2, r2, #1
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0552      	lsls	r2, r2, #21
 80030f4:	4311      	orrs	r1, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030fa:	0852      	lsrs	r2, r2, #1
 80030fc:	3a01      	subs	r2, #1
 80030fe:	0652      	lsls	r2, r2, #25
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003106:	06d2      	lsls	r2, r2, #27
 8003108:	430a      	orrs	r2, r1
 800310a:	4943      	ldr	r1, [pc, #268]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 800310c:	4313      	orrs	r3, r2
 800310e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	4b41      	ldr	r3, [pc, #260]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a40      	ldr	r2, [pc, #256]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 8003116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800311a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800311c:	4b3e      	ldr	r3, [pc, #248]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4a3d      	ldr	r2, [pc, #244]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003126:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fd fdda 	bl	8000ce0 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003130:	f7fd fdd6 	bl	8000ce0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e066      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	4b35      	ldr	r3, [pc, #212]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x530>
 800314e:	e05e      	b.n	800320e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b31      	ldr	r3, [pc, #196]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a30      	ldr	r2, [pc, #192]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 8003156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fd fdc0 	bl	8000ce0 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fd fdbc 	bl	8000ce0 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e04c      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003176:	4b28      	ldr	r3, [pc, #160]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003182:	4b25      	ldr	r3, [pc, #148]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	4924      	ldr	r1, [pc, #144]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 8003188:	4b25      	ldr	r3, [pc, #148]	@ (8003220 <HAL_RCC_OscConfig+0x620>)
 800318a:	4013      	ands	r3, r2
 800318c:	60cb      	str	r3, [r1, #12]
 800318e:	e03e      	b.n	800320e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e039      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800319c:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <HAL_RCC_OscConfig+0x618>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f003 0203 	and.w	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d12c      	bne.n	800320a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	3b01      	subs	r3, #1
 80031bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d123      	bne.n	800320a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d11b      	bne.n	800320a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031de:	429a      	cmp	r2, r3
 80031e0:	d113      	bne.n	800320a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	3b01      	subs	r3, #1
 80031f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d109      	bne.n	800320a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	3b01      	subs	r3, #1
 8003204:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	019f800c 	.word	0x019f800c
 8003220:	feeefffc 	.word	0xfeeefffc

08003224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e11e      	b.n	800347a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b91      	ldr	r3, [pc, #580]	@ (8003484 <HAL_RCC_ClockConfig+0x260>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d910      	bls.n	800326c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b8e      	ldr	r3, [pc, #568]	@ (8003484 <HAL_RCC_ClockConfig+0x260>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 020f 	bic.w	r2, r3, #15
 8003252:	498c      	ldr	r1, [pc, #560]	@ (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b8a      	ldr	r3, [pc, #552]	@ (8003484 <HAL_RCC_ClockConfig+0x260>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e106      	b.n	800347a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d073      	beq.n	8003360 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b03      	cmp	r3, #3
 800327e:	d129      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003280:	4b81      	ldr	r3, [pc, #516]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0f4      	b.n	800347a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003290:	f000 f99e 	bl	80035d0 <RCC_GetSysClockFreqFromPLLSource>
 8003294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4a7c      	ldr	r2, [pc, #496]	@ (800348c <HAL_RCC_ClockConfig+0x268>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d93f      	bls.n	800331e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800329e:	4b7a      	ldr	r3, [pc, #488]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d033      	beq.n	800331e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d12f      	bne.n	800331e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032be:	4b72      	ldr	r3, [pc, #456]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032c6:	4a70      	ldr	r2, [pc, #448]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 80032c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032ce:	2380      	movs	r3, #128	@ 0x80
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	e024      	b.n	800331e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d107      	bne.n	80032ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0c6      	b.n	800347a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032ec:	4b66      	ldr	r3, [pc, #408]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0be      	b.n	800347a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032fc:	f000 f8ce 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8003300:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4a61      	ldr	r2, [pc, #388]	@ (800348c <HAL_RCC_ClockConfig+0x268>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d909      	bls.n	800331e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800330a:	4b5f      	ldr	r3, [pc, #380]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003312:	4a5d      	ldr	r2, [pc, #372]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 8003314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003318:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800331a:	2380      	movs	r3, #128	@ 0x80
 800331c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800331e:	4b5a      	ldr	r3, [pc, #360]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f023 0203 	bic.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4957      	ldr	r1, [pc, #348]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 800332c:	4313      	orrs	r3, r2
 800332e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003330:	f7fd fcd6 	bl	8000ce0 <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003336:	e00a      	b.n	800334e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003338:	f7fd fcd2 	bl	8000ce0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e095      	b.n	800347a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	4b4e      	ldr	r3, [pc, #312]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 020c 	and.w	r2, r3, #12
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	429a      	cmp	r2, r3
 800335e:	d1eb      	bne.n	8003338 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d023      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b43      	ldr	r3, [pc, #268]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a42      	ldr	r2, [pc, #264]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 800337e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003382:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003390:	4b3d      	ldr	r3, [pc, #244]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003398:	4a3b      	ldr	r2, [pc, #236]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 800339a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800339e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4936      	ldr	r1, [pc, #216]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b80      	cmp	r3, #128	@ 0x80
 80033b8:	d105      	bne.n	80033c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033ba:	4b33      	ldr	r3, [pc, #204]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4a32      	ldr	r2, [pc, #200]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 80033c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d21d      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 020f 	bic.w	r2, r3, #15
 80033dc:	4929      	ldr	r1, [pc, #164]	@ (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033e4:	f7fd fc7c 	bl	8000ce0 <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ec:	f7fd fc78 	bl	8000ce0 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e03b      	b.n	800347a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b20      	ldr	r3, [pc, #128]	@ (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d1ed      	bne.n	80033ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800341c:	4b1a      	ldr	r3, [pc, #104]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4917      	ldr	r1, [pc, #92]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343a:	4b13      	ldr	r3, [pc, #76]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	490f      	ldr	r1, [pc, #60]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800344e:	f000 f825 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b0c      	ldr	r3, [pc, #48]	@ (8003488 <HAL_RCC_ClockConfig+0x264>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	490c      	ldr	r1, [pc, #48]	@ (8003490 <HAL_RCC_ClockConfig+0x26c>)
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	fa22 f303 	lsr.w	r3, r2, r3
 800346a:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <HAL_RCC_ClockConfig+0x270>)
 800346c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <HAL_RCC_ClockConfig+0x274>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fbe8 	bl	8000c48 <HAL_InitTick>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40022000 	.word	0x40022000
 8003488:	40021000 	.word	0x40021000
 800348c:	04c4b400 	.word	0x04c4b400
 8003490:	08005140 	.word	0x08005140
 8003494:	20000000 	.word	0x20000000
 8003498:	20000004 	.word	0x20000004

0800349c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d102      	bne.n	80034b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	e047      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034b4:	4b27      	ldr	r3, [pc, #156]	@ (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d102      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034c0:	4b26      	ldr	r3, [pc, #152]	@ (800355c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	e03e      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034c6:	4b23      	ldr	r3, [pc, #140]	@ (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 030c 	and.w	r3, r3, #12
 80034ce:	2b0c      	cmp	r3, #12
 80034d0:	d136      	bne.n	8003540 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034d2:	4b20      	ldr	r3, [pc, #128]	@ (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	3301      	adds	r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d10c      	bne.n	800350a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034f0:	4a1a      	ldr	r2, [pc, #104]	@ (800355c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f8:	4a16      	ldr	r2, [pc, #88]	@ (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034fa:	68d2      	ldr	r2, [r2, #12]
 80034fc:	0a12      	lsrs	r2, r2, #8
 80034fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	617b      	str	r3, [r7, #20]
      break;
 8003508:	e00c      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800350a:	4a13      	ldr	r2, [pc, #76]	@ (8003558 <HAL_RCC_GetSysClockFreq+0xbc>)
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	4a10      	ldr	r2, [pc, #64]	@ (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003514:	68d2      	ldr	r2, [r2, #12]
 8003516:	0a12      	lsrs	r2, r2, #8
 8003518:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
      break;
 8003522:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	0e5b      	lsrs	r3, r3, #25
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	e001      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003544:	693b      	ldr	r3, [r7, #16]
}
 8003546:	4618      	mov	r0, r3
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	00f42400 	.word	0x00f42400
 800355c:	016e3600 	.word	0x016e3600

08003560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003564:	4b03      	ldr	r3, [pc, #12]	@ (8003574 <HAL_RCC_GetHCLKFreq+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000000 	.word	0x20000000

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800357c:	f7ff fff0 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4904      	ldr	r1, [pc, #16]	@ (80035a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	08005150 	.word	0x08005150

080035a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035a8:	f7ff ffda 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	0adb      	lsrs	r3, r3, #11
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4904      	ldr	r1, [pc, #16]	@ (80035cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08005150 	.word	0x08005150

080035d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	3301      	adds	r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d10c      	bne.n	800360e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035f4:	4a17      	ldr	r2, [pc, #92]	@ (8003654 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fc:	4a14      	ldr	r2, [pc, #80]	@ (8003650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80035fe:	68d2      	ldr	r2, [r2, #12]
 8003600:	0a12      	lsrs	r2, r2, #8
 8003602:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	617b      	str	r3, [r7, #20]
    break;
 800360c:	e00c      	b.n	8003628 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800360e:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	4a0e      	ldr	r2, [pc, #56]	@ (8003650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003618:	68d2      	ldr	r2, [r2, #12]
 800361a:	0a12      	lsrs	r2, r2, #8
 800361c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
    break;
 8003626:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003628:	4b09      	ldr	r3, [pc, #36]	@ (8003650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	0e5b      	lsrs	r3, r3, #25
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	3301      	adds	r3, #1
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003642:	687b      	ldr	r3, [r7, #4]
}
 8003644:	4618      	mov	r0, r3
 8003646:	371c      	adds	r7, #28
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40021000 	.word	0x40021000
 8003654:	016e3600 	.word	0x016e3600
 8003658:	00f42400 	.word	0x00f42400

0800365c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003664:	2300      	movs	r3, #0
 8003666:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003668:	2300      	movs	r3, #0
 800366a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 8098 	beq.w	80037aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800367a:	2300      	movs	r3, #0
 800367c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367e:	4b43      	ldr	r3, [pc, #268]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800368a:	4b40      	ldr	r3, [pc, #256]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368e:	4a3f      	ldr	r2, [pc, #252]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003694:	6593      	str	r3, [r2, #88]	@ 0x58
 8003696:	4b3d      	ldr	r3, [pc, #244]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a2:	2301      	movs	r3, #1
 80036a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a39      	ldr	r2, [pc, #228]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036b2:	f7fd fb15 	bl	8000ce0 <HAL_GetTick>
 80036b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036b8:	e009      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ba:	f7fd fb11 	bl	8000ce0 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d902      	bls.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	74fb      	strb	r3, [r7, #19]
        break;
 80036cc:	e005      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036ce:	4b30      	ldr	r3, [pc, #192]	@ (8003790 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0ef      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80036da:	7cfb      	ldrb	r3, [r7, #19]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d159      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036e0:	4b2a      	ldr	r3, [pc, #168]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01e      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d019      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036fc:	4b23      	ldr	r3, [pc, #140]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003706:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003708:	4b20      	ldr	r3, [pc, #128]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370e:	4a1f      	ldr	r2, [pc, #124]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003718:	4b1c      	ldr	r3, [pc, #112]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371e:	4a1b      	ldr	r2, [pc, #108]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003728:	4a18      	ldr	r2, [pc, #96]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d016      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fd fad1 	bl	8000ce0 <HAL_GetTick>
 800373e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003740:	e00b      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fd facd 	bl	8000ce0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d902      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	74fb      	strb	r3, [r7, #19]
            break;
 8003758:	e006      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375a:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ec      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10b      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800376e:	4b07      	ldr	r3, [pc, #28]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	4903      	ldr	r1, [pc, #12]	@ (800378c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003784:	e008      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003786:	7cfb      	ldrb	r3, [r7, #19]
 8003788:	74bb      	strb	r3, [r7, #18]
 800378a:	e005      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800378c:	40021000 	.word	0x40021000
 8003790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003798:	7c7b      	ldrb	r3, [r7, #17]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d105      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379e:	4ba6      	ldr	r3, [pc, #664]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	4aa5      	ldr	r2, [pc, #660]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037b6:	4ba0      	ldr	r3, [pc, #640]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037bc:	f023 0203 	bic.w	r2, r3, #3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	499c      	ldr	r1, [pc, #624]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037d8:	4b97      	ldr	r3, [pc, #604]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037de:	f023 020c 	bic.w	r2, r3, #12
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	4994      	ldr	r1, [pc, #592]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037fa:	4b8f      	ldr	r3, [pc, #572]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003800:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	498b      	ldr	r1, [pc, #556]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800381c:	4b86      	ldr	r3, [pc, #536]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003822:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	4983      	ldr	r1, [pc, #524]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800383e:	4b7e      	ldr	r3, [pc, #504]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003844:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	497a      	ldr	r1, [pc, #488]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003860:	4b75      	ldr	r3, [pc, #468]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003866:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	4972      	ldr	r1, [pc, #456]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003882:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003888:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	4969      	ldr	r1, [pc, #420]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038a4:	4b64      	ldr	r3, [pc, #400]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	4961      	ldr	r1, [pc, #388]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	4958      	ldr	r1, [pc, #352]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d015      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e8:	4b53      	ldr	r3, [pc, #332]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f6:	4950      	ldr	r1, [pc, #320]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003906:	d105      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003908:	4b4b      	ldr	r3, [pc, #300]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a4a      	ldr	r2, [pc, #296]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800390e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003912:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800391c:	2b00      	cmp	r3, #0
 800391e:	d015      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003920:	4b45      	ldr	r3, [pc, #276]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392e:	4942      	ldr	r1, [pc, #264]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800393e:	d105      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003940:	4b3d      	ldr	r3, [pc, #244]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a3c      	ldr	r2, [pc, #240]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800394a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d015      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003958:	4b37      	ldr	r3, [pc, #220]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	4934      	ldr	r1, [pc, #208]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003972:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003976:	d105      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003978:	4b2f      	ldr	r3, [pc, #188]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800397e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003982:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003990:	4b29      	ldr	r3, [pc, #164]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003996:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800399e:	4926      	ldr	r1, [pc, #152]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039ae:	d105      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b0:	4b21      	ldr	r3, [pc, #132]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a20      	ldr	r2, [pc, #128]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d6:	4918      	ldr	r1, [pc, #96]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039e6:	d105      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e8:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a12      	ldr	r2, [pc, #72]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a00:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0e:	490a      	ldr	r1, [pc, #40]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a20:	4b05      	ldr	r3, [pc, #20]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a04      	ldr	r2, [pc, #16]	@ (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003a2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000

08003a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e042      	b.n	8003ad4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fc ffdf 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2224      	movs	r2, #36	@ 0x24
 8003a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fb82 	bl	8004190 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f8b3 	bl	8003bf8 <UART_SetConfig>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e01b      	b.n	8003ad4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fc01 	bl	80042d4 <UART_CheckIdleState>
 8003ad2:	4603      	mov	r3, r0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	@ 0x28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d17b      	bne.n	8003bee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_UART_Transmit+0x26>
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e074      	b.n	8003bf0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2221      	movs	r2, #33	@ 0x21
 8003b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b16:	f7fd f8e3 	bl	8000ce0 <HAL_GetTick>
 8003b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	88fa      	ldrh	r2, [r7, #6]
 8003b28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b34:	d108      	bne.n	8003b48 <HAL_UART_Transmit+0x6c>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e003      	b.n	8003b50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b50:	e030      	b.n	8003bb4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	@ 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fc63 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e03d      	b.n	8003bf0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	e007      	b.n	8003ba2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1c8      	bne.n	8003b52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2140      	movs	r1, #64	@ 0x40
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fc2c 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e006      	b.n	8003bf0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3720      	adds	r7, #32
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bfc:	b08c      	sub	sp, #48	@ 0x30
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4bab      	ldr	r3, [pc, #684]	@ (8003ed4 <UART_SetConfig+0x2dc>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4aa0      	ldr	r2, [pc, #640]	@ (8003ed8 <UART_SetConfig+0x2e0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d004      	beq.n	8003c64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c60:	4313      	orrs	r3, r2
 8003c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003c6e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	6812      	ldr	r2, [r2, #0]
 8003c76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c82:	f023 010f 	bic.w	r1, r3, #15
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a91      	ldr	r2, [pc, #580]	@ (8003edc <UART_SetConfig+0x2e4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d125      	bne.n	8003ce8 <UART_SetConfig+0xf0>
 8003c9c:	4b90      	ldr	r3, [pc, #576]	@ (8003ee0 <UART_SetConfig+0x2e8>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d81a      	bhi.n	8003ce0 <UART_SetConfig+0xe8>
 8003caa:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb0 <UART_SetConfig+0xb8>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003cc1 	.word	0x08003cc1
 8003cb4:	08003cd1 	.word	0x08003cd1
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003cd9 	.word	0x08003cd9
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cc6:	e0d6      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cce:	e0d2      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cd6:	e0ce      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003cd8:	2308      	movs	r3, #8
 8003cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cde:	e0ca      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce6:	e0c6      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a7d      	ldr	r2, [pc, #500]	@ (8003ee4 <UART_SetConfig+0x2ec>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d138      	bne.n	8003d64 <UART_SetConfig+0x16c>
 8003cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee0 <UART_SetConfig+0x2e8>)
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	d82d      	bhi.n	8003d5c <UART_SetConfig+0x164>
 8003d00:	a201      	add	r2, pc, #4	@ (adr r2, 8003d08 <UART_SetConfig+0x110>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003d5d 	.word	0x08003d5d
 8003d10:	08003d5d 	.word	0x08003d5d
 8003d14:	08003d5d 	.word	0x08003d5d
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003d5d 	.word	0x08003d5d
 8003d20:	08003d5d 	.word	0x08003d5d
 8003d24:	08003d5d 	.word	0x08003d5d
 8003d28:	08003d45 	.word	0x08003d45
 8003d2c:	08003d5d 	.word	0x08003d5d
 8003d30:	08003d5d 	.word	0x08003d5d
 8003d34:	08003d5d 	.word	0x08003d5d
 8003d38:	08003d55 	.word	0x08003d55
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d42:	e098      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003d44:	2302      	movs	r3, #2
 8003d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d4a:	e094      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d52:	e090      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003d54:	2308      	movs	r3, #8
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d5a:	e08c      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d62:	e088      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a5f      	ldr	r2, [pc, #380]	@ (8003ee8 <UART_SetConfig+0x2f0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d125      	bne.n	8003dba <UART_SetConfig+0x1c2>
 8003d6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ee0 <UART_SetConfig+0x2e8>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d74:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d78:	2b30      	cmp	r3, #48	@ 0x30
 8003d7a:	d016      	beq.n	8003daa <UART_SetConfig+0x1b2>
 8003d7c:	2b30      	cmp	r3, #48	@ 0x30
 8003d7e:	d818      	bhi.n	8003db2 <UART_SetConfig+0x1ba>
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d00a      	beq.n	8003d9a <UART_SetConfig+0x1a2>
 8003d84:	2b20      	cmp	r3, #32
 8003d86:	d814      	bhi.n	8003db2 <UART_SetConfig+0x1ba>
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <UART_SetConfig+0x19a>
 8003d8c:	2b10      	cmp	r3, #16
 8003d8e:	d008      	beq.n	8003da2 <UART_SetConfig+0x1aa>
 8003d90:	e00f      	b.n	8003db2 <UART_SetConfig+0x1ba>
 8003d92:	2300      	movs	r3, #0
 8003d94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d98:	e06d      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003da0:	e069      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003da2:	2304      	movs	r3, #4
 8003da4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003da8:	e065      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003daa:	2308      	movs	r3, #8
 8003dac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db0:	e061      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003db2:	2310      	movs	r3, #16
 8003db4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db8:	e05d      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a4b      	ldr	r2, [pc, #300]	@ (8003eec <UART_SetConfig+0x2f4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d125      	bne.n	8003e10 <UART_SetConfig+0x218>
 8003dc4:	4b46      	ldr	r3, [pc, #280]	@ (8003ee0 <UART_SetConfig+0x2e8>)
 8003dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dce:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dd0:	d016      	beq.n	8003e00 <UART_SetConfig+0x208>
 8003dd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dd4:	d818      	bhi.n	8003e08 <UART_SetConfig+0x210>
 8003dd6:	2b80      	cmp	r3, #128	@ 0x80
 8003dd8:	d00a      	beq.n	8003df0 <UART_SetConfig+0x1f8>
 8003dda:	2b80      	cmp	r3, #128	@ 0x80
 8003ddc:	d814      	bhi.n	8003e08 <UART_SetConfig+0x210>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <UART_SetConfig+0x1f0>
 8003de2:	2b40      	cmp	r3, #64	@ 0x40
 8003de4:	d008      	beq.n	8003df8 <UART_SetConfig+0x200>
 8003de6:	e00f      	b.n	8003e08 <UART_SetConfig+0x210>
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dee:	e042      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003df0:	2302      	movs	r3, #2
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df6:	e03e      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfe:	e03a      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003e00:	2308      	movs	r3, #8
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e06:	e036      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003e08:	2310      	movs	r3, #16
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e0e:	e032      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a30      	ldr	r2, [pc, #192]	@ (8003ed8 <UART_SetConfig+0x2e0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d12a      	bne.n	8003e70 <UART_SetConfig+0x278>
 8003e1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ee0 <UART_SetConfig+0x2e8>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e28:	d01a      	beq.n	8003e60 <UART_SetConfig+0x268>
 8003e2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e2e:	d81b      	bhi.n	8003e68 <UART_SetConfig+0x270>
 8003e30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e34:	d00c      	beq.n	8003e50 <UART_SetConfig+0x258>
 8003e36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e3a:	d815      	bhi.n	8003e68 <UART_SetConfig+0x270>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <UART_SetConfig+0x250>
 8003e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e44:	d008      	beq.n	8003e58 <UART_SetConfig+0x260>
 8003e46:	e00f      	b.n	8003e68 <UART_SetConfig+0x270>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e4e:	e012      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003e50:	2302      	movs	r3, #2
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e56:	e00e      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e5e:	e00a      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003e60:	2308      	movs	r3, #8
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e66:	e006      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6e:	e002      	b.n	8003e76 <UART_SetConfig+0x27e>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a17      	ldr	r2, [pc, #92]	@ (8003ed8 <UART_SetConfig+0x2e0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	f040 80a8 	bne.w	8003fd2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d834      	bhi.n	8003ef4 <UART_SetConfig+0x2fc>
 8003e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <UART_SetConfig+0x298>)
 8003e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e90:	08003eb5 	.word	0x08003eb5
 8003e94:	08003ef5 	.word	0x08003ef5
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ef5 	.word	0x08003ef5
 8003ea0:	08003ec3 	.word	0x08003ec3
 8003ea4:	08003ef5 	.word	0x08003ef5
 8003ea8:	08003ef5 	.word	0x08003ef5
 8003eac:	08003ef5 	.word	0x08003ef5
 8003eb0:	08003ecb 	.word	0x08003ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f7ff fb60 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eba:	e021      	b.n	8003f00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef0 <UART_SetConfig+0x2f8>)
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ec0:	e01e      	b.n	8003f00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec2:	f7ff faeb 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8003ec6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ec8:	e01a      	b.n	8003f00 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ed0:	e016      	b.n	8003f00 <UART_SetConfig+0x308>
 8003ed2:	bf00      	nop
 8003ed4:	cfff69f3 	.word	0xcfff69f3
 8003ed8:	40008000 	.word	0x40008000
 8003edc:	40013800 	.word	0x40013800
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40004400 	.word	0x40004400
 8003ee8:	40004800 	.word	0x40004800
 8003eec:	40004c00 	.word	0x40004c00
 8003ef0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003efe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 812a 	beq.w	800415c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	4a9e      	ldr	r2, [pc, #632]	@ (8004188 <UART_SetConfig+0x590>)
 8003f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f12:	461a      	mov	r2, r3
 8003f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f16:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d305      	bcc.n	8003f38 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d903      	bls.n	8003f40 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f3e:	e10d      	b.n	800415c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	2200      	movs	r2, #0
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	60fa      	str	r2, [r7, #12]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	4a8e      	ldr	r2, [pc, #568]	@ (8004188 <UART_SetConfig+0x590>)
 8003f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2200      	movs	r2, #0
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f62:	f7fc f9b5 	bl	80002d0 <__aeabi_uldivmod>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	020b      	lsls	r3, r1, #8
 8003f78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f7c:	0202      	lsls	r2, r0, #8
 8003f7e:	6979      	ldr	r1, [r7, #20]
 8003f80:	6849      	ldr	r1, [r1, #4]
 8003f82:	0849      	lsrs	r1, r1, #1
 8003f84:	2000      	movs	r0, #0
 8003f86:	460c      	mov	r4, r1
 8003f88:	4605      	mov	r5, r0
 8003f8a:	eb12 0804 	adds.w	r8, r2, r4
 8003f8e:	eb43 0905 	adc.w	r9, r3, r5
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	469a      	mov	sl, r3
 8003f9a:	4693      	mov	fp, r2
 8003f9c:	4652      	mov	r2, sl
 8003f9e:	465b      	mov	r3, fp
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	f7fc f994 	bl	80002d0 <__aeabi_uldivmod>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4613      	mov	r3, r2
 8003fae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fb6:	d308      	bcc.n	8003fca <UART_SetConfig+0x3d2>
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fbe:	d204      	bcs.n	8003fca <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a3a      	ldr	r2, [r7, #32]
 8003fc6:	60da      	str	r2, [r3, #12]
 8003fc8:	e0c8      	b.n	800415c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fd0:	e0c4      	b.n	800415c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fda:	d167      	bne.n	80040ac <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003fdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d828      	bhi.n	8004036 <UART_SetConfig+0x43e>
 8003fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fec <UART_SetConfig+0x3f4>)
 8003fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fea:	bf00      	nop
 8003fec:	08004011 	.word	0x08004011
 8003ff0:	08004019 	.word	0x08004019
 8003ff4:	08004021 	.word	0x08004021
 8003ff8:	08004037 	.word	0x08004037
 8003ffc:	08004027 	.word	0x08004027
 8004000:	08004037 	.word	0x08004037
 8004004:	08004037 	.word	0x08004037
 8004008:	08004037 	.word	0x08004037
 800400c:	0800402f 	.word	0x0800402f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004010:	f7ff fab2 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8004014:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004016:	e014      	b.n	8004042 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004018:	f7ff fac4 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 800401c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800401e:	e010      	b.n	8004042 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004020:	4b5a      	ldr	r3, [pc, #360]	@ (800418c <UART_SetConfig+0x594>)
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004024:	e00d      	b.n	8004042 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004026:	f7ff fa39 	bl	800349c <HAL_RCC_GetSysClockFreq>
 800402a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800402c:	e009      	b.n	8004042 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004034:	e005      	b.n	8004042 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004040:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8089 	beq.w	800415c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	4a4e      	ldr	r2, [pc, #312]	@ (8004188 <UART_SetConfig+0x590>)
 8004050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004054:	461a      	mov	r2, r3
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	fbb3 f3f2 	udiv	r3, r3, r2
 800405c:	005a      	lsls	r2, r3, #1
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	441a      	add	r2, r3
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	2b0f      	cmp	r3, #15
 8004074:	d916      	bls.n	80040a4 <UART_SetConfig+0x4ac>
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800407c:	d212      	bcs.n	80040a4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	b29b      	uxth	r3, r3
 8004082:	f023 030f 	bic.w	r3, r3, #15
 8004086:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	b29b      	uxth	r3, r3
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	b29a      	uxth	r2, r3
 8004094:	8bfb      	ldrh	r3, [r7, #30]
 8004096:	4313      	orrs	r3, r2
 8004098:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	8bfa      	ldrh	r2, [r7, #30]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	e05b      	b.n	800415c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040aa:	e057      	b.n	800415c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d828      	bhi.n	8004106 <UART_SetConfig+0x50e>
 80040b4:	a201      	add	r2, pc, #4	@ (adr r2, 80040bc <UART_SetConfig+0x4c4>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040e1 	.word	0x080040e1
 80040c0:	080040e9 	.word	0x080040e9
 80040c4:	080040f1 	.word	0x080040f1
 80040c8:	08004107 	.word	0x08004107
 80040cc:	080040f7 	.word	0x080040f7
 80040d0:	08004107 	.word	0x08004107
 80040d4:	08004107 	.word	0x08004107
 80040d8:	08004107 	.word	0x08004107
 80040dc:	080040ff 	.word	0x080040ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e0:	f7ff fa4a 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 80040e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040e6:	e014      	b.n	8004112 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e8:	f7ff fa5c 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 80040ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040ee:	e010      	b.n	8004112 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f0:	4b26      	ldr	r3, [pc, #152]	@ (800418c <UART_SetConfig+0x594>)
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040f4:	e00d      	b.n	8004112 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f6:	f7ff f9d1 	bl	800349c <HAL_RCC_GetSysClockFreq>
 80040fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040fc:	e009      	b.n	8004112 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004104:	e005      	b.n	8004112 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004110:	bf00      	nop
    }

    if (pclk != 0U)
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d021      	beq.n	800415c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	4a1a      	ldr	r2, [pc, #104]	@ (8004188 <UART_SetConfig+0x590>)
 800411e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004122:	461a      	mov	r2, r3
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	fbb3 f2f2 	udiv	r2, r3, r2
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	085b      	lsrs	r3, r3, #1
 8004130:	441a      	add	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d909      	bls.n	8004156 <UART_SetConfig+0x55e>
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004148:	d205      	bcs.n	8004156 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	b29a      	uxth	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60da      	str	r2, [r3, #12]
 8004154:	e002      	b.n	800415c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2201      	movs	r2, #1
 8004160:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2201      	movs	r2, #1
 8004168:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2200      	movs	r2, #0
 8004170:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2200      	movs	r2, #0
 8004176:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004178:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800417c:	4618      	mov	r0, r3
 800417e:	3730      	adds	r7, #48	@ 0x30
 8004180:	46bd      	mov	sp, r7
 8004182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004186:	bf00      	nop
 8004188:	08005158 	.word	0x08005158
 800418c:	00f42400 	.word	0x00f42400

08004190 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00a      	beq.n	80041ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00a      	beq.n	80041fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01a      	beq.n	80042a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800428e:	d10a      	bne.n	80042a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
  }
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b098      	sub	sp, #96	@ 0x60
 80042d8:	af02      	add	r7, sp, #8
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e4:	f7fc fcfc 	bl	8000ce0 <HAL_GetTick>
 80042e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d12f      	bne.n	8004358 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004300:	2200      	movs	r2, #0
 8004302:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f88e 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d022      	beq.n	8004358 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004326:	653b      	str	r3, [r7, #80]	@ 0x50
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004330:	647b      	str	r3, [r7, #68]	@ 0x44
 8004332:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800433e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e063      	b.n	8004420 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b04      	cmp	r3, #4
 8004364:	d149      	bne.n	80043fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004366:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436e:	2200      	movs	r2, #0
 8004370:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f857 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d03c      	beq.n	80043fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	623b      	str	r3, [r7, #32]
   return(result);
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800439e:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e6      	bne.n	8004380 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3308      	adds	r3, #8
 80043b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3308      	adds	r3, #8
 80043d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043d2:	61fa      	str	r2, [r7, #28]
 80043d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	69b9      	ldr	r1, [r7, #24]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	617b      	str	r3, [r7, #20]
   return(result);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e5      	bne.n	80043b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e012      	b.n	8004420 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3758      	adds	r7, #88	@ 0x58
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004438:	e04f      	b.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004440:	d04b      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fc fc4d 	bl	8000ce0 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <UART_WaitOnFlagUntilTimeout+0x30>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e04e      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d037      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b80      	cmp	r3, #128	@ 0x80
 800446e:	d034      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b40      	cmp	r3, #64	@ 0x40
 8004474:	d031      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b08      	cmp	r3, #8
 8004482:	d110      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2208      	movs	r2, #8
 800448a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f838 	bl	8004502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2208      	movs	r2, #8
 8004496:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e029      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b4:	d111      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f81e 	bl	8004502 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e00f      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	461a      	mov	r2, r3
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d0a0      	beq.n	800443a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004502:	b480      	push	{r7}
 8004504:	b095      	sub	sp, #84	@ 0x54
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800451e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004528:	643b      	str	r3, [r7, #64]	@ 0x40
 800452a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800452e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e6      	bne.n	800450a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3308      	adds	r3, #8
 8004542:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	61fb      	str	r3, [r7, #28]
   return(result);
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004560:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004562:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e3      	bne.n	800453c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d118      	bne.n	80045ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	60bb      	str	r3, [r7, #8]
   return(result);
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f023 0310 	bic.w	r3, r3, #16
 8004590:	647b      	str	r3, [r7, #68]	@ 0x44
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6979      	ldr	r1, [r7, #20]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	613b      	str	r3, [r7, #16]
   return(result);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e6      	bne.n	800457c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045c2:	bf00      	nop
 80045c4:	3754      	adds	r7, #84	@ 0x54
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e027      	b.n	8004634 <HAL_UARTEx_DisableFifoMode+0x66>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2224      	movs	r2, #36	@ 0x24
 80045f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004612:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004654:	2302      	movs	r3, #2
 8004656:	e02d      	b.n	80046b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2224      	movs	r2, #36	@ 0x24
 8004664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f84f 	bl	8004738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e02d      	b.n	8004730 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2224      	movs	r2, #36	@ 0x24
 80046e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0201 	bic.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f811 	bl	8004738 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004744:	2b00      	cmp	r3, #0
 8004746:	d108      	bne.n	800475a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004758:	e031      	b.n	80047be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800475a:	2308      	movs	r3, #8
 800475c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800475e:	2308      	movs	r3, #8
 8004760:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	0e5b      	lsrs	r3, r3, #25
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	0f5b      	lsrs	r3, r3, #29
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004782:	7bbb      	ldrb	r3, [r7, #14]
 8004784:	7b3a      	ldrb	r2, [r7, #12]
 8004786:	4911      	ldr	r1, [pc, #68]	@ (80047cc <UARTEx_SetNbDataToProcess+0x94>)
 8004788:	5c8a      	ldrb	r2, [r1, r2]
 800478a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800478e:	7b3a      	ldrb	r2, [r7, #12]
 8004790:	490f      	ldr	r1, [pc, #60]	@ (80047d0 <UARTEx_SetNbDataToProcess+0x98>)
 8004792:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004794:	fb93 f3f2 	sdiv	r3, r3, r2
 8004798:	b29a      	uxth	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	7b7a      	ldrb	r2, [r7, #13]
 80047a4:	4909      	ldr	r1, [pc, #36]	@ (80047cc <UARTEx_SetNbDataToProcess+0x94>)
 80047a6:	5c8a      	ldrb	r2, [r1, r2]
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047ac:	7b7a      	ldrb	r2, [r7, #13]
 80047ae:	4908      	ldr	r1, [pc, #32]	@ (80047d0 <UARTEx_SetNbDataToProcess+0x98>)
 80047b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80047be:	bf00      	nop
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	08005170 	.word	0x08005170
 80047d0:	08005178 	.word	0x08005178

080047d4 <siprintf>:
 80047d4:	b40e      	push	{r1, r2, r3}
 80047d6:	b500      	push	{lr}
 80047d8:	b09c      	sub	sp, #112	@ 0x70
 80047da:	ab1d      	add	r3, sp, #116	@ 0x74
 80047dc:	9002      	str	r0, [sp, #8]
 80047de:	9006      	str	r0, [sp, #24]
 80047e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047e4:	4809      	ldr	r0, [pc, #36]	@ (800480c <siprintf+0x38>)
 80047e6:	9107      	str	r1, [sp, #28]
 80047e8:	9104      	str	r1, [sp, #16]
 80047ea:	4909      	ldr	r1, [pc, #36]	@ (8004810 <siprintf+0x3c>)
 80047ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80047f0:	9105      	str	r1, [sp, #20]
 80047f2:	6800      	ldr	r0, [r0, #0]
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	a902      	add	r1, sp, #8
 80047f8:	f000 f994 	bl	8004b24 <_svfiprintf_r>
 80047fc:	9b02      	ldr	r3, [sp, #8]
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	b01c      	add	sp, #112	@ 0x70
 8004804:	f85d eb04 	ldr.w	lr, [sp], #4
 8004808:	b003      	add	sp, #12
 800480a:	4770      	bx	lr
 800480c:	2000000c 	.word	0x2000000c
 8004810:	ffff0208 	.word	0xffff0208

08004814 <memset>:
 8004814:	4402      	add	r2, r0
 8004816:	4603      	mov	r3, r0
 8004818:	4293      	cmp	r3, r2
 800481a:	d100      	bne.n	800481e <memset+0xa>
 800481c:	4770      	bx	lr
 800481e:	f803 1b01 	strb.w	r1, [r3], #1
 8004822:	e7f9      	b.n	8004818 <memset+0x4>

08004824 <__errno>:
 8004824:	4b01      	ldr	r3, [pc, #4]	@ (800482c <__errno+0x8>)
 8004826:	6818      	ldr	r0, [r3, #0]
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	2000000c 	.word	0x2000000c

08004830 <__libc_init_array>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4d0d      	ldr	r5, [pc, #52]	@ (8004868 <__libc_init_array+0x38>)
 8004834:	4c0d      	ldr	r4, [pc, #52]	@ (800486c <__libc_init_array+0x3c>)
 8004836:	1b64      	subs	r4, r4, r5
 8004838:	10a4      	asrs	r4, r4, #2
 800483a:	2600      	movs	r6, #0
 800483c:	42a6      	cmp	r6, r4
 800483e:	d109      	bne.n	8004854 <__libc_init_array+0x24>
 8004840:	4d0b      	ldr	r5, [pc, #44]	@ (8004870 <__libc_init_array+0x40>)
 8004842:	4c0c      	ldr	r4, [pc, #48]	@ (8004874 <__libc_init_array+0x44>)
 8004844:	f000 fc66 	bl	8005114 <_init>
 8004848:	1b64      	subs	r4, r4, r5
 800484a:	10a4      	asrs	r4, r4, #2
 800484c:	2600      	movs	r6, #0
 800484e:	42a6      	cmp	r6, r4
 8004850:	d105      	bne.n	800485e <__libc_init_array+0x2e>
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	f855 3b04 	ldr.w	r3, [r5], #4
 8004858:	4798      	blx	r3
 800485a:	3601      	adds	r6, #1
 800485c:	e7ee      	b.n	800483c <__libc_init_array+0xc>
 800485e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004862:	4798      	blx	r3
 8004864:	3601      	adds	r6, #1
 8004866:	e7f2      	b.n	800484e <__libc_init_array+0x1e>
 8004868:	080051bc 	.word	0x080051bc
 800486c:	080051bc 	.word	0x080051bc
 8004870:	080051bc 	.word	0x080051bc
 8004874:	080051c0 	.word	0x080051c0

08004878 <__retarget_lock_acquire_recursive>:
 8004878:	4770      	bx	lr

0800487a <__retarget_lock_release_recursive>:
 800487a:	4770      	bx	lr

0800487c <_free_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4605      	mov	r5, r0
 8004880:	2900      	cmp	r1, #0
 8004882:	d041      	beq.n	8004908 <_free_r+0x8c>
 8004884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004888:	1f0c      	subs	r4, r1, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	bfb8      	it	lt
 800488e:	18e4      	addlt	r4, r4, r3
 8004890:	f000 f8e0 	bl	8004a54 <__malloc_lock>
 8004894:	4a1d      	ldr	r2, [pc, #116]	@ (800490c <_free_r+0x90>)
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	b933      	cbnz	r3, 80048a8 <_free_r+0x2c>
 800489a:	6063      	str	r3, [r4, #4]
 800489c:	6014      	str	r4, [r2, #0]
 800489e:	4628      	mov	r0, r5
 80048a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048a4:	f000 b8dc 	b.w	8004a60 <__malloc_unlock>
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d908      	bls.n	80048be <_free_r+0x42>
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	1821      	adds	r1, r4, r0
 80048b0:	428b      	cmp	r3, r1
 80048b2:	bf01      	itttt	eq
 80048b4:	6819      	ldreq	r1, [r3, #0]
 80048b6:	685b      	ldreq	r3, [r3, #4]
 80048b8:	1809      	addeq	r1, r1, r0
 80048ba:	6021      	streq	r1, [r4, #0]
 80048bc:	e7ed      	b.n	800489a <_free_r+0x1e>
 80048be:	461a      	mov	r2, r3
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b10b      	cbz	r3, 80048c8 <_free_r+0x4c>
 80048c4:	42a3      	cmp	r3, r4
 80048c6:	d9fa      	bls.n	80048be <_free_r+0x42>
 80048c8:	6811      	ldr	r1, [r2, #0]
 80048ca:	1850      	adds	r0, r2, r1
 80048cc:	42a0      	cmp	r0, r4
 80048ce:	d10b      	bne.n	80048e8 <_free_r+0x6c>
 80048d0:	6820      	ldr	r0, [r4, #0]
 80048d2:	4401      	add	r1, r0
 80048d4:	1850      	adds	r0, r2, r1
 80048d6:	4283      	cmp	r3, r0
 80048d8:	6011      	str	r1, [r2, #0]
 80048da:	d1e0      	bne.n	800489e <_free_r+0x22>
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	6053      	str	r3, [r2, #4]
 80048e2:	4408      	add	r0, r1
 80048e4:	6010      	str	r0, [r2, #0]
 80048e6:	e7da      	b.n	800489e <_free_r+0x22>
 80048e8:	d902      	bls.n	80048f0 <_free_r+0x74>
 80048ea:	230c      	movs	r3, #12
 80048ec:	602b      	str	r3, [r5, #0]
 80048ee:	e7d6      	b.n	800489e <_free_r+0x22>
 80048f0:	6820      	ldr	r0, [r4, #0]
 80048f2:	1821      	adds	r1, r4, r0
 80048f4:	428b      	cmp	r3, r1
 80048f6:	bf04      	itt	eq
 80048f8:	6819      	ldreq	r1, [r3, #0]
 80048fa:	685b      	ldreq	r3, [r3, #4]
 80048fc:	6063      	str	r3, [r4, #4]
 80048fe:	bf04      	itt	eq
 8004900:	1809      	addeq	r1, r1, r0
 8004902:	6021      	streq	r1, [r4, #0]
 8004904:	6054      	str	r4, [r2, #4]
 8004906:	e7ca      	b.n	800489e <_free_r+0x22>
 8004908:	bd38      	pop	{r3, r4, r5, pc}
 800490a:	bf00      	nop
 800490c:	200002e8 	.word	0x200002e8

08004910 <sbrk_aligned>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4e0f      	ldr	r6, [pc, #60]	@ (8004950 <sbrk_aligned+0x40>)
 8004914:	460c      	mov	r4, r1
 8004916:	6831      	ldr	r1, [r6, #0]
 8004918:	4605      	mov	r5, r0
 800491a:	b911      	cbnz	r1, 8004922 <sbrk_aligned+0x12>
 800491c:	f000 fba6 	bl	800506c <_sbrk_r>
 8004920:	6030      	str	r0, [r6, #0]
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	f000 fba1 	bl	800506c <_sbrk_r>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d103      	bne.n	8004936 <sbrk_aligned+0x26>
 800492e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004932:	4620      	mov	r0, r4
 8004934:	bd70      	pop	{r4, r5, r6, pc}
 8004936:	1cc4      	adds	r4, r0, #3
 8004938:	f024 0403 	bic.w	r4, r4, #3
 800493c:	42a0      	cmp	r0, r4
 800493e:	d0f8      	beq.n	8004932 <sbrk_aligned+0x22>
 8004940:	1a21      	subs	r1, r4, r0
 8004942:	4628      	mov	r0, r5
 8004944:	f000 fb92 	bl	800506c <_sbrk_r>
 8004948:	3001      	adds	r0, #1
 800494a:	d1f2      	bne.n	8004932 <sbrk_aligned+0x22>
 800494c:	e7ef      	b.n	800492e <sbrk_aligned+0x1e>
 800494e:	bf00      	nop
 8004950:	200002e4 	.word	0x200002e4

08004954 <_malloc_r>:
 8004954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004958:	1ccd      	adds	r5, r1, #3
 800495a:	f025 0503 	bic.w	r5, r5, #3
 800495e:	3508      	adds	r5, #8
 8004960:	2d0c      	cmp	r5, #12
 8004962:	bf38      	it	cc
 8004964:	250c      	movcc	r5, #12
 8004966:	2d00      	cmp	r5, #0
 8004968:	4606      	mov	r6, r0
 800496a:	db01      	blt.n	8004970 <_malloc_r+0x1c>
 800496c:	42a9      	cmp	r1, r5
 800496e:	d904      	bls.n	800497a <_malloc_r+0x26>
 8004970:	230c      	movs	r3, #12
 8004972:	6033      	str	r3, [r6, #0]
 8004974:	2000      	movs	r0, #0
 8004976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800497a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a50 <_malloc_r+0xfc>
 800497e:	f000 f869 	bl	8004a54 <__malloc_lock>
 8004982:	f8d8 3000 	ldr.w	r3, [r8]
 8004986:	461c      	mov	r4, r3
 8004988:	bb44      	cbnz	r4, 80049dc <_malloc_r+0x88>
 800498a:	4629      	mov	r1, r5
 800498c:	4630      	mov	r0, r6
 800498e:	f7ff ffbf 	bl	8004910 <sbrk_aligned>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	4604      	mov	r4, r0
 8004996:	d158      	bne.n	8004a4a <_malloc_r+0xf6>
 8004998:	f8d8 4000 	ldr.w	r4, [r8]
 800499c:	4627      	mov	r7, r4
 800499e:	2f00      	cmp	r7, #0
 80049a0:	d143      	bne.n	8004a2a <_malloc_r+0xd6>
 80049a2:	2c00      	cmp	r4, #0
 80049a4:	d04b      	beq.n	8004a3e <_malloc_r+0xea>
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	4639      	mov	r1, r7
 80049aa:	4630      	mov	r0, r6
 80049ac:	eb04 0903 	add.w	r9, r4, r3
 80049b0:	f000 fb5c 	bl	800506c <_sbrk_r>
 80049b4:	4581      	cmp	r9, r0
 80049b6:	d142      	bne.n	8004a3e <_malloc_r+0xea>
 80049b8:	6821      	ldr	r1, [r4, #0]
 80049ba:	1a6d      	subs	r5, r5, r1
 80049bc:	4629      	mov	r1, r5
 80049be:	4630      	mov	r0, r6
 80049c0:	f7ff ffa6 	bl	8004910 <sbrk_aligned>
 80049c4:	3001      	adds	r0, #1
 80049c6:	d03a      	beq.n	8004a3e <_malloc_r+0xea>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	442b      	add	r3, r5
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	f8d8 3000 	ldr.w	r3, [r8]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	bb62      	cbnz	r2, 8004a30 <_malloc_r+0xdc>
 80049d6:	f8c8 7000 	str.w	r7, [r8]
 80049da:	e00f      	b.n	80049fc <_malloc_r+0xa8>
 80049dc:	6822      	ldr	r2, [r4, #0]
 80049de:	1b52      	subs	r2, r2, r5
 80049e0:	d420      	bmi.n	8004a24 <_malloc_r+0xd0>
 80049e2:	2a0b      	cmp	r2, #11
 80049e4:	d917      	bls.n	8004a16 <_malloc_r+0xc2>
 80049e6:	1961      	adds	r1, r4, r5
 80049e8:	42a3      	cmp	r3, r4
 80049ea:	6025      	str	r5, [r4, #0]
 80049ec:	bf18      	it	ne
 80049ee:	6059      	strne	r1, [r3, #4]
 80049f0:	6863      	ldr	r3, [r4, #4]
 80049f2:	bf08      	it	eq
 80049f4:	f8c8 1000 	streq.w	r1, [r8]
 80049f8:	5162      	str	r2, [r4, r5]
 80049fa:	604b      	str	r3, [r1, #4]
 80049fc:	4630      	mov	r0, r6
 80049fe:	f000 f82f 	bl	8004a60 <__malloc_unlock>
 8004a02:	f104 000b 	add.w	r0, r4, #11
 8004a06:	1d23      	adds	r3, r4, #4
 8004a08:	f020 0007 	bic.w	r0, r0, #7
 8004a0c:	1ac2      	subs	r2, r0, r3
 8004a0e:	bf1c      	itt	ne
 8004a10:	1a1b      	subne	r3, r3, r0
 8004a12:	50a3      	strne	r3, [r4, r2]
 8004a14:	e7af      	b.n	8004976 <_malloc_r+0x22>
 8004a16:	6862      	ldr	r2, [r4, #4]
 8004a18:	42a3      	cmp	r3, r4
 8004a1a:	bf0c      	ite	eq
 8004a1c:	f8c8 2000 	streq.w	r2, [r8]
 8004a20:	605a      	strne	r2, [r3, #4]
 8004a22:	e7eb      	b.n	80049fc <_malloc_r+0xa8>
 8004a24:	4623      	mov	r3, r4
 8004a26:	6864      	ldr	r4, [r4, #4]
 8004a28:	e7ae      	b.n	8004988 <_malloc_r+0x34>
 8004a2a:	463c      	mov	r4, r7
 8004a2c:	687f      	ldr	r7, [r7, #4]
 8004a2e:	e7b6      	b.n	800499e <_malloc_r+0x4a>
 8004a30:	461a      	mov	r2, r3
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d1fb      	bne.n	8004a30 <_malloc_r+0xdc>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6053      	str	r3, [r2, #4]
 8004a3c:	e7de      	b.n	80049fc <_malloc_r+0xa8>
 8004a3e:	230c      	movs	r3, #12
 8004a40:	6033      	str	r3, [r6, #0]
 8004a42:	4630      	mov	r0, r6
 8004a44:	f000 f80c 	bl	8004a60 <__malloc_unlock>
 8004a48:	e794      	b.n	8004974 <_malloc_r+0x20>
 8004a4a:	6005      	str	r5, [r0, #0]
 8004a4c:	e7d6      	b.n	80049fc <_malloc_r+0xa8>
 8004a4e:	bf00      	nop
 8004a50:	200002e8 	.word	0x200002e8

08004a54 <__malloc_lock>:
 8004a54:	4801      	ldr	r0, [pc, #4]	@ (8004a5c <__malloc_lock+0x8>)
 8004a56:	f7ff bf0f 	b.w	8004878 <__retarget_lock_acquire_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	200002e0 	.word	0x200002e0

08004a60 <__malloc_unlock>:
 8004a60:	4801      	ldr	r0, [pc, #4]	@ (8004a68 <__malloc_unlock+0x8>)
 8004a62:	f7ff bf0a 	b.w	800487a <__retarget_lock_release_recursive>
 8004a66:	bf00      	nop
 8004a68:	200002e0 	.word	0x200002e0

08004a6c <__ssputs_r>:
 8004a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	688e      	ldr	r6, [r1, #8]
 8004a72:	461f      	mov	r7, r3
 8004a74:	42be      	cmp	r6, r7
 8004a76:	680b      	ldr	r3, [r1, #0]
 8004a78:	4682      	mov	sl, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	4690      	mov	r8, r2
 8004a7e:	d82d      	bhi.n	8004adc <__ssputs_r+0x70>
 8004a80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004a88:	d026      	beq.n	8004ad8 <__ssputs_r+0x6c>
 8004a8a:	6965      	ldr	r5, [r4, #20]
 8004a8c:	6909      	ldr	r1, [r1, #16]
 8004a8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a92:	eba3 0901 	sub.w	r9, r3, r1
 8004a96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a9a:	1c7b      	adds	r3, r7, #1
 8004a9c:	444b      	add	r3, r9
 8004a9e:	106d      	asrs	r5, r5, #1
 8004aa0:	429d      	cmp	r5, r3
 8004aa2:	bf38      	it	cc
 8004aa4:	461d      	movcc	r5, r3
 8004aa6:	0553      	lsls	r3, r2, #21
 8004aa8:	d527      	bpl.n	8004afa <__ssputs_r+0x8e>
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7ff ff52 	bl	8004954 <_malloc_r>
 8004ab0:	4606      	mov	r6, r0
 8004ab2:	b360      	cbz	r0, 8004b0e <__ssputs_r+0xa2>
 8004ab4:	6921      	ldr	r1, [r4, #16]
 8004ab6:	464a      	mov	r2, r9
 8004ab8:	f000 fae8 	bl	800508c <memcpy>
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004ac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac6:	81a3      	strh	r3, [r4, #12]
 8004ac8:	6126      	str	r6, [r4, #16]
 8004aca:	6165      	str	r5, [r4, #20]
 8004acc:	444e      	add	r6, r9
 8004ace:	eba5 0509 	sub.w	r5, r5, r9
 8004ad2:	6026      	str	r6, [r4, #0]
 8004ad4:	60a5      	str	r5, [r4, #8]
 8004ad6:	463e      	mov	r6, r7
 8004ad8:	42be      	cmp	r6, r7
 8004ada:	d900      	bls.n	8004ade <__ssputs_r+0x72>
 8004adc:	463e      	mov	r6, r7
 8004ade:	6820      	ldr	r0, [r4, #0]
 8004ae0:	4632      	mov	r2, r6
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	f000 faa8 	bl	8005038 <memmove>
 8004ae8:	68a3      	ldr	r3, [r4, #8]
 8004aea:	1b9b      	subs	r3, r3, r6
 8004aec:	60a3      	str	r3, [r4, #8]
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	4433      	add	r3, r6
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	2000      	movs	r0, #0
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	462a      	mov	r2, r5
 8004afc:	f000 fad4 	bl	80050a8 <_realloc_r>
 8004b00:	4606      	mov	r6, r0
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d1e0      	bne.n	8004ac8 <__ssputs_r+0x5c>
 8004b06:	6921      	ldr	r1, [r4, #16]
 8004b08:	4650      	mov	r0, sl
 8004b0a:	f7ff feb7 	bl	800487c <_free_r>
 8004b0e:	230c      	movs	r3, #12
 8004b10:	f8ca 3000 	str.w	r3, [sl]
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b20:	e7e9      	b.n	8004af6 <__ssputs_r+0x8a>
	...

08004b24 <_svfiprintf_r>:
 8004b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b28:	4698      	mov	r8, r3
 8004b2a:	898b      	ldrh	r3, [r1, #12]
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	b09d      	sub	sp, #116	@ 0x74
 8004b30:	4607      	mov	r7, r0
 8004b32:	460d      	mov	r5, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	d510      	bpl.n	8004b5a <_svfiprintf_r+0x36>
 8004b38:	690b      	ldr	r3, [r1, #16]
 8004b3a:	b973      	cbnz	r3, 8004b5a <_svfiprintf_r+0x36>
 8004b3c:	2140      	movs	r1, #64	@ 0x40
 8004b3e:	f7ff ff09 	bl	8004954 <_malloc_r>
 8004b42:	6028      	str	r0, [r5, #0]
 8004b44:	6128      	str	r0, [r5, #16]
 8004b46:	b930      	cbnz	r0, 8004b56 <_svfiprintf_r+0x32>
 8004b48:	230c      	movs	r3, #12
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b50:	b01d      	add	sp, #116	@ 0x74
 8004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b56:	2340      	movs	r3, #64	@ 0x40
 8004b58:	616b      	str	r3, [r5, #20]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b5e:	2320      	movs	r3, #32
 8004b60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b68:	2330      	movs	r3, #48	@ 0x30
 8004b6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d08 <_svfiprintf_r+0x1e4>
 8004b6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b72:	f04f 0901 	mov.w	r9, #1
 8004b76:	4623      	mov	r3, r4
 8004b78:	469a      	mov	sl, r3
 8004b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b7e:	b10a      	cbz	r2, 8004b84 <_svfiprintf_r+0x60>
 8004b80:	2a25      	cmp	r2, #37	@ 0x25
 8004b82:	d1f9      	bne.n	8004b78 <_svfiprintf_r+0x54>
 8004b84:	ebba 0b04 	subs.w	fp, sl, r4
 8004b88:	d00b      	beq.n	8004ba2 <_svfiprintf_r+0x7e>
 8004b8a:	465b      	mov	r3, fp
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7ff ff6b 	bl	8004a6c <__ssputs_r>
 8004b96:	3001      	adds	r0, #1
 8004b98:	f000 80a7 	beq.w	8004cea <_svfiprintf_r+0x1c6>
 8004b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b9e:	445a      	add	r2, fp
 8004ba0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 809f 	beq.w	8004cea <_svfiprintf_r+0x1c6>
 8004bac:	2300      	movs	r3, #0
 8004bae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb6:	f10a 0a01 	add.w	sl, sl, #1
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	9307      	str	r3, [sp, #28]
 8004bbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bc2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bc4:	4654      	mov	r4, sl
 8004bc6:	2205      	movs	r2, #5
 8004bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bcc:	484e      	ldr	r0, [pc, #312]	@ (8004d08 <_svfiprintf_r+0x1e4>)
 8004bce:	f7fb fb2f 	bl	8000230 <memchr>
 8004bd2:	9a04      	ldr	r2, [sp, #16]
 8004bd4:	b9d8      	cbnz	r0, 8004c0e <_svfiprintf_r+0xea>
 8004bd6:	06d0      	lsls	r0, r2, #27
 8004bd8:	bf44      	itt	mi
 8004bda:	2320      	movmi	r3, #32
 8004bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004be0:	0711      	lsls	r1, r2, #28
 8004be2:	bf44      	itt	mi
 8004be4:	232b      	movmi	r3, #43	@ 0x2b
 8004be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bea:	f89a 3000 	ldrb.w	r3, [sl]
 8004bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bf0:	d015      	beq.n	8004c1e <_svfiprintf_r+0xfa>
 8004bf2:	9a07      	ldr	r2, [sp, #28]
 8004bf4:	4654      	mov	r4, sl
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f04f 0c0a 	mov.w	ip, #10
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c02:	3b30      	subs	r3, #48	@ 0x30
 8004c04:	2b09      	cmp	r3, #9
 8004c06:	d94b      	bls.n	8004ca0 <_svfiprintf_r+0x17c>
 8004c08:	b1b0      	cbz	r0, 8004c38 <_svfiprintf_r+0x114>
 8004c0a:	9207      	str	r2, [sp, #28]
 8004c0c:	e014      	b.n	8004c38 <_svfiprintf_r+0x114>
 8004c0e:	eba0 0308 	sub.w	r3, r0, r8
 8004c12:	fa09 f303 	lsl.w	r3, r9, r3
 8004c16:	4313      	orrs	r3, r2
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	46a2      	mov	sl, r4
 8004c1c:	e7d2      	b.n	8004bc4 <_svfiprintf_r+0xa0>
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	9103      	str	r1, [sp, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bfbb      	ittet	lt
 8004c2a:	425b      	neglt	r3, r3
 8004c2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c30:	9307      	strge	r3, [sp, #28]
 8004c32:	9307      	strlt	r3, [sp, #28]
 8004c34:	bfb8      	it	lt
 8004c36:	9204      	strlt	r2, [sp, #16]
 8004c38:	7823      	ldrb	r3, [r4, #0]
 8004c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c3c:	d10a      	bne.n	8004c54 <_svfiprintf_r+0x130>
 8004c3e:	7863      	ldrb	r3, [r4, #1]
 8004c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c42:	d132      	bne.n	8004caa <_svfiprintf_r+0x186>
 8004c44:	9b03      	ldr	r3, [sp, #12]
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	9203      	str	r2, [sp, #12]
 8004c4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c50:	3402      	adds	r4, #2
 8004c52:	9305      	str	r3, [sp, #20]
 8004c54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d18 <_svfiprintf_r+0x1f4>
 8004c58:	7821      	ldrb	r1, [r4, #0]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	f7fb fae7 	bl	8000230 <memchr>
 8004c62:	b138      	cbz	r0, 8004c74 <_svfiprintf_r+0x150>
 8004c64:	9b04      	ldr	r3, [sp, #16]
 8004c66:	eba0 000a 	sub.w	r0, r0, sl
 8004c6a:	2240      	movs	r2, #64	@ 0x40
 8004c6c:	4082      	lsls	r2, r0
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	3401      	adds	r4, #1
 8004c72:	9304      	str	r3, [sp, #16]
 8004c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c78:	4824      	ldr	r0, [pc, #144]	@ (8004d0c <_svfiprintf_r+0x1e8>)
 8004c7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c7e:	2206      	movs	r2, #6
 8004c80:	f7fb fad6 	bl	8000230 <memchr>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d036      	beq.n	8004cf6 <_svfiprintf_r+0x1d2>
 8004c88:	4b21      	ldr	r3, [pc, #132]	@ (8004d10 <_svfiprintf_r+0x1ec>)
 8004c8a:	bb1b      	cbnz	r3, 8004cd4 <_svfiprintf_r+0x1b0>
 8004c8c:	9b03      	ldr	r3, [sp, #12]
 8004c8e:	3307      	adds	r3, #7
 8004c90:	f023 0307 	bic.w	r3, r3, #7
 8004c94:	3308      	adds	r3, #8
 8004c96:	9303      	str	r3, [sp, #12]
 8004c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c9a:	4433      	add	r3, r6
 8004c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c9e:	e76a      	b.n	8004b76 <_svfiprintf_r+0x52>
 8004ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	e7a8      	b.n	8004bfc <_svfiprintf_r+0xd8>
 8004caa:	2300      	movs	r3, #0
 8004cac:	3401      	adds	r4, #1
 8004cae:	9305      	str	r3, [sp, #20]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	f04f 0c0a 	mov.w	ip, #10
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cbc:	3a30      	subs	r2, #48	@ 0x30
 8004cbe:	2a09      	cmp	r2, #9
 8004cc0:	d903      	bls.n	8004cca <_svfiprintf_r+0x1a6>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0c6      	beq.n	8004c54 <_svfiprintf_r+0x130>
 8004cc6:	9105      	str	r1, [sp, #20]
 8004cc8:	e7c4      	b.n	8004c54 <_svfiprintf_r+0x130>
 8004cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cce:	4604      	mov	r4, r0
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e7f0      	b.n	8004cb6 <_svfiprintf_r+0x192>
 8004cd4:	ab03      	add	r3, sp, #12
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	462a      	mov	r2, r5
 8004cda:	4b0e      	ldr	r3, [pc, #56]	@ (8004d14 <_svfiprintf_r+0x1f0>)
 8004cdc:	a904      	add	r1, sp, #16
 8004cde:	4638      	mov	r0, r7
 8004ce0:	f3af 8000 	nop.w
 8004ce4:	1c42      	adds	r2, r0, #1
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	d1d6      	bne.n	8004c98 <_svfiprintf_r+0x174>
 8004cea:	89ab      	ldrh	r3, [r5, #12]
 8004cec:	065b      	lsls	r3, r3, #25
 8004cee:	f53f af2d 	bmi.w	8004b4c <_svfiprintf_r+0x28>
 8004cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004cf4:	e72c      	b.n	8004b50 <_svfiprintf_r+0x2c>
 8004cf6:	ab03      	add	r3, sp, #12
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	462a      	mov	r2, r5
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <_svfiprintf_r+0x1f0>)
 8004cfe:	a904      	add	r1, sp, #16
 8004d00:	4638      	mov	r0, r7
 8004d02:	f000 f879 	bl	8004df8 <_printf_i>
 8004d06:	e7ed      	b.n	8004ce4 <_svfiprintf_r+0x1c0>
 8004d08:	08005180 	.word	0x08005180
 8004d0c:	0800518a 	.word	0x0800518a
 8004d10:	00000000 	.word	0x00000000
 8004d14:	08004a6d 	.word	0x08004a6d
 8004d18:	08005186 	.word	0x08005186

08004d1c <_printf_common>:
 8004d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	4616      	mov	r6, r2
 8004d22:	4698      	mov	r8, r3
 8004d24:	688a      	ldr	r2, [r1, #8]
 8004d26:	690b      	ldr	r3, [r1, #16]
 8004d28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	bfb8      	it	lt
 8004d30:	4613      	movlt	r3, r2
 8004d32:	6033      	str	r3, [r6, #0]
 8004d34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d38:	4607      	mov	r7, r0
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	b10a      	cbz	r2, 8004d42 <_printf_common+0x26>
 8004d3e:	3301      	adds	r3, #1
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	0699      	lsls	r1, r3, #26
 8004d46:	bf42      	ittt	mi
 8004d48:	6833      	ldrmi	r3, [r6, #0]
 8004d4a:	3302      	addmi	r3, #2
 8004d4c:	6033      	strmi	r3, [r6, #0]
 8004d4e:	6825      	ldr	r5, [r4, #0]
 8004d50:	f015 0506 	ands.w	r5, r5, #6
 8004d54:	d106      	bne.n	8004d64 <_printf_common+0x48>
 8004d56:	f104 0a19 	add.w	sl, r4, #25
 8004d5a:	68e3      	ldr	r3, [r4, #12]
 8004d5c:	6832      	ldr	r2, [r6, #0]
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	42ab      	cmp	r3, r5
 8004d62:	dc26      	bgt.n	8004db2 <_printf_common+0x96>
 8004d64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d68:	6822      	ldr	r2, [r4, #0]
 8004d6a:	3b00      	subs	r3, #0
 8004d6c:	bf18      	it	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	0692      	lsls	r2, r2, #26
 8004d72:	d42b      	bmi.n	8004dcc <_printf_common+0xb0>
 8004d74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d78:	4641      	mov	r1, r8
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	47c8      	blx	r9
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d01e      	beq.n	8004dc0 <_printf_common+0xa4>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	6922      	ldr	r2, [r4, #16]
 8004d86:	f003 0306 	and.w	r3, r3, #6
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	bf02      	ittt	eq
 8004d8e:	68e5      	ldreq	r5, [r4, #12]
 8004d90:	6833      	ldreq	r3, [r6, #0]
 8004d92:	1aed      	subeq	r5, r5, r3
 8004d94:	68a3      	ldr	r3, [r4, #8]
 8004d96:	bf0c      	ite	eq
 8004d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d9c:	2500      	movne	r5, #0
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	bfc4      	itt	gt
 8004da2:	1a9b      	subgt	r3, r3, r2
 8004da4:	18ed      	addgt	r5, r5, r3
 8004da6:	2600      	movs	r6, #0
 8004da8:	341a      	adds	r4, #26
 8004daa:	42b5      	cmp	r5, r6
 8004dac:	d11a      	bne.n	8004de4 <_printf_common+0xc8>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e008      	b.n	8004dc4 <_printf_common+0xa8>
 8004db2:	2301      	movs	r3, #1
 8004db4:	4652      	mov	r2, sl
 8004db6:	4641      	mov	r1, r8
 8004db8:	4638      	mov	r0, r7
 8004dba:	47c8      	blx	r9
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d103      	bne.n	8004dc8 <_printf_common+0xac>
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	3501      	adds	r5, #1
 8004dca:	e7c6      	b.n	8004d5a <_printf_common+0x3e>
 8004dcc:	18e1      	adds	r1, r4, r3
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	2030      	movs	r0, #48	@ 0x30
 8004dd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dd6:	4422      	add	r2, r4
 8004dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004de0:	3302      	adds	r3, #2
 8004de2:	e7c7      	b.n	8004d74 <_printf_common+0x58>
 8004de4:	2301      	movs	r3, #1
 8004de6:	4622      	mov	r2, r4
 8004de8:	4641      	mov	r1, r8
 8004dea:	4638      	mov	r0, r7
 8004dec:	47c8      	blx	r9
 8004dee:	3001      	adds	r0, #1
 8004df0:	d0e6      	beq.n	8004dc0 <_printf_common+0xa4>
 8004df2:	3601      	adds	r6, #1
 8004df4:	e7d9      	b.n	8004daa <_printf_common+0x8e>
	...

08004df8 <_printf_i>:
 8004df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfc:	7e0f      	ldrb	r7, [r1, #24]
 8004dfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e00:	2f78      	cmp	r7, #120	@ 0x78
 8004e02:	4691      	mov	r9, r2
 8004e04:	4680      	mov	r8, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	469a      	mov	sl, r3
 8004e0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e0e:	d807      	bhi.n	8004e20 <_printf_i+0x28>
 8004e10:	2f62      	cmp	r7, #98	@ 0x62
 8004e12:	d80a      	bhi.n	8004e2a <_printf_i+0x32>
 8004e14:	2f00      	cmp	r7, #0
 8004e16:	f000 80d2 	beq.w	8004fbe <_printf_i+0x1c6>
 8004e1a:	2f58      	cmp	r7, #88	@ 0x58
 8004e1c:	f000 80b9 	beq.w	8004f92 <_printf_i+0x19a>
 8004e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e28:	e03a      	b.n	8004ea0 <_printf_i+0xa8>
 8004e2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e2e:	2b15      	cmp	r3, #21
 8004e30:	d8f6      	bhi.n	8004e20 <_printf_i+0x28>
 8004e32:	a101      	add	r1, pc, #4	@ (adr r1, 8004e38 <_printf_i+0x40>)
 8004e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e38:	08004e91 	.word	0x08004e91
 8004e3c:	08004ea5 	.word	0x08004ea5
 8004e40:	08004e21 	.word	0x08004e21
 8004e44:	08004e21 	.word	0x08004e21
 8004e48:	08004e21 	.word	0x08004e21
 8004e4c:	08004e21 	.word	0x08004e21
 8004e50:	08004ea5 	.word	0x08004ea5
 8004e54:	08004e21 	.word	0x08004e21
 8004e58:	08004e21 	.word	0x08004e21
 8004e5c:	08004e21 	.word	0x08004e21
 8004e60:	08004e21 	.word	0x08004e21
 8004e64:	08004fa5 	.word	0x08004fa5
 8004e68:	08004ecf 	.word	0x08004ecf
 8004e6c:	08004f5f 	.word	0x08004f5f
 8004e70:	08004e21 	.word	0x08004e21
 8004e74:	08004e21 	.word	0x08004e21
 8004e78:	08004fc7 	.word	0x08004fc7
 8004e7c:	08004e21 	.word	0x08004e21
 8004e80:	08004ecf 	.word	0x08004ecf
 8004e84:	08004e21 	.word	0x08004e21
 8004e88:	08004e21 	.word	0x08004e21
 8004e8c:	08004f67 	.word	0x08004f67
 8004e90:	6833      	ldr	r3, [r6, #0]
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6032      	str	r2, [r6, #0]
 8004e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e09d      	b.n	8004fe0 <_printf_i+0x1e8>
 8004ea4:	6833      	ldr	r3, [r6, #0]
 8004ea6:	6820      	ldr	r0, [r4, #0]
 8004ea8:	1d19      	adds	r1, r3, #4
 8004eaa:	6031      	str	r1, [r6, #0]
 8004eac:	0606      	lsls	r6, r0, #24
 8004eae:	d501      	bpl.n	8004eb4 <_printf_i+0xbc>
 8004eb0:	681d      	ldr	r5, [r3, #0]
 8004eb2:	e003      	b.n	8004ebc <_printf_i+0xc4>
 8004eb4:	0645      	lsls	r5, r0, #25
 8004eb6:	d5fb      	bpl.n	8004eb0 <_printf_i+0xb8>
 8004eb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	da03      	bge.n	8004ec8 <_printf_i+0xd0>
 8004ec0:	232d      	movs	r3, #45	@ 0x2d
 8004ec2:	426d      	negs	r5, r5
 8004ec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec8:	4859      	ldr	r0, [pc, #356]	@ (8005030 <_printf_i+0x238>)
 8004eca:	230a      	movs	r3, #10
 8004ecc:	e011      	b.n	8004ef2 <_printf_i+0xfa>
 8004ece:	6821      	ldr	r1, [r4, #0]
 8004ed0:	6833      	ldr	r3, [r6, #0]
 8004ed2:	0608      	lsls	r0, r1, #24
 8004ed4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ed8:	d402      	bmi.n	8004ee0 <_printf_i+0xe8>
 8004eda:	0649      	lsls	r1, r1, #25
 8004edc:	bf48      	it	mi
 8004ede:	b2ad      	uxthmi	r5, r5
 8004ee0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ee2:	4853      	ldr	r0, [pc, #332]	@ (8005030 <_printf_i+0x238>)
 8004ee4:	6033      	str	r3, [r6, #0]
 8004ee6:	bf14      	ite	ne
 8004ee8:	230a      	movne	r3, #10
 8004eea:	2308      	moveq	r3, #8
 8004eec:	2100      	movs	r1, #0
 8004eee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ef2:	6866      	ldr	r6, [r4, #4]
 8004ef4:	60a6      	str	r6, [r4, #8]
 8004ef6:	2e00      	cmp	r6, #0
 8004ef8:	bfa2      	ittt	ge
 8004efa:	6821      	ldrge	r1, [r4, #0]
 8004efc:	f021 0104 	bicge.w	r1, r1, #4
 8004f00:	6021      	strge	r1, [r4, #0]
 8004f02:	b90d      	cbnz	r5, 8004f08 <_printf_i+0x110>
 8004f04:	2e00      	cmp	r6, #0
 8004f06:	d04b      	beq.n	8004fa0 <_printf_i+0x1a8>
 8004f08:	4616      	mov	r6, r2
 8004f0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f0e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f12:	5dc7      	ldrb	r7, [r0, r7]
 8004f14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f18:	462f      	mov	r7, r5
 8004f1a:	42bb      	cmp	r3, r7
 8004f1c:	460d      	mov	r5, r1
 8004f1e:	d9f4      	bls.n	8004f0a <_printf_i+0x112>
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d10b      	bne.n	8004f3c <_printf_i+0x144>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	07df      	lsls	r7, r3, #31
 8004f28:	d508      	bpl.n	8004f3c <_printf_i+0x144>
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	6861      	ldr	r1, [r4, #4]
 8004f2e:	4299      	cmp	r1, r3
 8004f30:	bfde      	ittt	le
 8004f32:	2330      	movle	r3, #48	@ 0x30
 8004f34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f38:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f3c:	1b92      	subs	r2, r2, r6
 8004f3e:	6122      	str	r2, [r4, #16]
 8004f40:	f8cd a000 	str.w	sl, [sp]
 8004f44:	464b      	mov	r3, r9
 8004f46:	aa03      	add	r2, sp, #12
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	f7ff fee6 	bl	8004d1c <_printf_common>
 8004f50:	3001      	adds	r0, #1
 8004f52:	d14a      	bne.n	8004fea <_printf_i+0x1f2>
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f58:	b004      	add	sp, #16
 8004f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f043 0320 	orr.w	r3, r3, #32
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	4833      	ldr	r0, [pc, #204]	@ (8005034 <_printf_i+0x23c>)
 8004f68:	2778      	movs	r7, #120	@ 0x78
 8004f6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	6831      	ldr	r1, [r6, #0]
 8004f72:	061f      	lsls	r7, r3, #24
 8004f74:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f78:	d402      	bmi.n	8004f80 <_printf_i+0x188>
 8004f7a:	065f      	lsls	r7, r3, #25
 8004f7c:	bf48      	it	mi
 8004f7e:	b2ad      	uxthmi	r5, r5
 8004f80:	6031      	str	r1, [r6, #0]
 8004f82:	07d9      	lsls	r1, r3, #31
 8004f84:	bf44      	itt	mi
 8004f86:	f043 0320 	orrmi.w	r3, r3, #32
 8004f8a:	6023      	strmi	r3, [r4, #0]
 8004f8c:	b11d      	cbz	r5, 8004f96 <_printf_i+0x19e>
 8004f8e:	2310      	movs	r3, #16
 8004f90:	e7ac      	b.n	8004eec <_printf_i+0xf4>
 8004f92:	4827      	ldr	r0, [pc, #156]	@ (8005030 <_printf_i+0x238>)
 8004f94:	e7e9      	b.n	8004f6a <_printf_i+0x172>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f023 0320 	bic.w	r3, r3, #32
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	e7f6      	b.n	8004f8e <_printf_i+0x196>
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	e7bd      	b.n	8004f20 <_printf_i+0x128>
 8004fa4:	6833      	ldr	r3, [r6, #0]
 8004fa6:	6825      	ldr	r5, [r4, #0]
 8004fa8:	6961      	ldr	r1, [r4, #20]
 8004faa:	1d18      	adds	r0, r3, #4
 8004fac:	6030      	str	r0, [r6, #0]
 8004fae:	062e      	lsls	r6, r5, #24
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_i+0x1c0>
 8004fb4:	6019      	str	r1, [r3, #0]
 8004fb6:	e002      	b.n	8004fbe <_printf_i+0x1c6>
 8004fb8:	0668      	lsls	r0, r5, #25
 8004fba:	d5fb      	bpl.n	8004fb4 <_printf_i+0x1bc>
 8004fbc:	8019      	strh	r1, [r3, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6123      	str	r3, [r4, #16]
 8004fc2:	4616      	mov	r6, r2
 8004fc4:	e7bc      	b.n	8004f40 <_printf_i+0x148>
 8004fc6:	6833      	ldr	r3, [r6, #0]
 8004fc8:	1d1a      	adds	r2, r3, #4
 8004fca:	6032      	str	r2, [r6, #0]
 8004fcc:	681e      	ldr	r6, [r3, #0]
 8004fce:	6862      	ldr	r2, [r4, #4]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f7fb f92c 	bl	8000230 <memchr>
 8004fd8:	b108      	cbz	r0, 8004fde <_printf_i+0x1e6>
 8004fda:	1b80      	subs	r0, r0, r6
 8004fdc:	6060      	str	r0, [r4, #4]
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fe8:	e7aa      	b.n	8004f40 <_printf_i+0x148>
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	4632      	mov	r2, r6
 8004fee:	4649      	mov	r1, r9
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	47d0      	blx	sl
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d0ad      	beq.n	8004f54 <_printf_i+0x15c>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	079b      	lsls	r3, r3, #30
 8004ffc:	d413      	bmi.n	8005026 <_printf_i+0x22e>
 8004ffe:	68e0      	ldr	r0, [r4, #12]
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	4298      	cmp	r0, r3
 8005004:	bfb8      	it	lt
 8005006:	4618      	movlt	r0, r3
 8005008:	e7a6      	b.n	8004f58 <_printf_i+0x160>
 800500a:	2301      	movs	r3, #1
 800500c:	4632      	mov	r2, r6
 800500e:	4649      	mov	r1, r9
 8005010:	4640      	mov	r0, r8
 8005012:	47d0      	blx	sl
 8005014:	3001      	adds	r0, #1
 8005016:	d09d      	beq.n	8004f54 <_printf_i+0x15c>
 8005018:	3501      	adds	r5, #1
 800501a:	68e3      	ldr	r3, [r4, #12]
 800501c:	9903      	ldr	r1, [sp, #12]
 800501e:	1a5b      	subs	r3, r3, r1
 8005020:	42ab      	cmp	r3, r5
 8005022:	dcf2      	bgt.n	800500a <_printf_i+0x212>
 8005024:	e7eb      	b.n	8004ffe <_printf_i+0x206>
 8005026:	2500      	movs	r5, #0
 8005028:	f104 0619 	add.w	r6, r4, #25
 800502c:	e7f5      	b.n	800501a <_printf_i+0x222>
 800502e:	bf00      	nop
 8005030:	08005191 	.word	0x08005191
 8005034:	080051a2 	.word	0x080051a2

08005038 <memmove>:
 8005038:	4288      	cmp	r0, r1
 800503a:	b510      	push	{r4, lr}
 800503c:	eb01 0402 	add.w	r4, r1, r2
 8005040:	d902      	bls.n	8005048 <memmove+0x10>
 8005042:	4284      	cmp	r4, r0
 8005044:	4623      	mov	r3, r4
 8005046:	d807      	bhi.n	8005058 <memmove+0x20>
 8005048:	1e43      	subs	r3, r0, #1
 800504a:	42a1      	cmp	r1, r4
 800504c:	d008      	beq.n	8005060 <memmove+0x28>
 800504e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005056:	e7f8      	b.n	800504a <memmove+0x12>
 8005058:	4402      	add	r2, r0
 800505a:	4601      	mov	r1, r0
 800505c:	428a      	cmp	r2, r1
 800505e:	d100      	bne.n	8005062 <memmove+0x2a>
 8005060:	bd10      	pop	{r4, pc}
 8005062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800506a:	e7f7      	b.n	800505c <memmove+0x24>

0800506c <_sbrk_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4d06      	ldr	r5, [pc, #24]	@ (8005088 <_sbrk_r+0x1c>)
 8005070:	2300      	movs	r3, #0
 8005072:	4604      	mov	r4, r0
 8005074:	4608      	mov	r0, r1
 8005076:	602b      	str	r3, [r5, #0]
 8005078:	f7fb fd5c 	bl	8000b34 <_sbrk>
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	d102      	bne.n	8005086 <_sbrk_r+0x1a>
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	b103      	cbz	r3, 8005086 <_sbrk_r+0x1a>
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	200002dc 	.word	0x200002dc

0800508c <memcpy>:
 800508c:	440a      	add	r2, r1
 800508e:	4291      	cmp	r1, r2
 8005090:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005094:	d100      	bne.n	8005098 <memcpy+0xc>
 8005096:	4770      	bx	lr
 8005098:	b510      	push	{r4, lr}
 800509a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800509e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a2:	4291      	cmp	r1, r2
 80050a4:	d1f9      	bne.n	800509a <memcpy+0xe>
 80050a6:	bd10      	pop	{r4, pc}

080050a8 <_realloc_r>:
 80050a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ac:	4680      	mov	r8, r0
 80050ae:	4615      	mov	r5, r2
 80050b0:	460c      	mov	r4, r1
 80050b2:	b921      	cbnz	r1, 80050be <_realloc_r+0x16>
 80050b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b8:	4611      	mov	r1, r2
 80050ba:	f7ff bc4b 	b.w	8004954 <_malloc_r>
 80050be:	b92a      	cbnz	r2, 80050cc <_realloc_r+0x24>
 80050c0:	f7ff fbdc 	bl	800487c <_free_r>
 80050c4:	2400      	movs	r4, #0
 80050c6:	4620      	mov	r0, r4
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050cc:	f000 f81a 	bl	8005104 <_malloc_usable_size_r>
 80050d0:	4285      	cmp	r5, r0
 80050d2:	4606      	mov	r6, r0
 80050d4:	d802      	bhi.n	80050dc <_realloc_r+0x34>
 80050d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80050da:	d8f4      	bhi.n	80050c6 <_realloc_r+0x1e>
 80050dc:	4629      	mov	r1, r5
 80050de:	4640      	mov	r0, r8
 80050e0:	f7ff fc38 	bl	8004954 <_malloc_r>
 80050e4:	4607      	mov	r7, r0
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d0ec      	beq.n	80050c4 <_realloc_r+0x1c>
 80050ea:	42b5      	cmp	r5, r6
 80050ec:	462a      	mov	r2, r5
 80050ee:	4621      	mov	r1, r4
 80050f0:	bf28      	it	cs
 80050f2:	4632      	movcs	r2, r6
 80050f4:	f7ff ffca 	bl	800508c <memcpy>
 80050f8:	4621      	mov	r1, r4
 80050fa:	4640      	mov	r0, r8
 80050fc:	f7ff fbbe 	bl	800487c <_free_r>
 8005100:	463c      	mov	r4, r7
 8005102:	e7e0      	b.n	80050c6 <_realloc_r+0x1e>

08005104 <_malloc_usable_size_r>:
 8005104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005108:	1f18      	subs	r0, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	bfbc      	itt	lt
 800510e:	580b      	ldrlt	r3, [r1, r0]
 8005110:	18c0      	addlt	r0, r0, r3
 8005112:	4770      	bx	lr

08005114 <_init>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr

08005120 <_fini>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr
